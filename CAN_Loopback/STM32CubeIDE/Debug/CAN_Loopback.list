
CAN_Loopback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002840  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002a04  08002a04  00003a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a1c  08002a1c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a1c  08002a1c  00003a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a24  08002a24  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a24  08002a24  00003a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a28  08002a28  00003a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002a2c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08002a38  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002a38  0000409c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083c4  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a55  00000000  00000000  0000c400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00000071  00000000  00000000  0000de55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b8  00000000  00000000  0000dec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005b0  00000000  00000000  0000e680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000219f5  00000000  00000000  0000ec30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000090f3  00000000  00000000  00030625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce5b7  00000000  00000000  00039718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00107ccf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001dd4  00000000  00000000  00107d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00109ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080029ec 	.word	0x080029ec

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080029ec 	.word	0x080029ec

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <BSP_LED_Init>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
#if !defined(USE_STM32446E_EVAL_REVA)
  GPIO_InitTypeDef  gpio_init_structure;

  /* On RevB led1 and Led3 are on GPIO while Led2 and Led4 on Mfx*/
  if ((Led == LED1) || (Led == LED3))
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d002      	beq.n	800050a <BSP_LED_Init+0x16>
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d128      	bne.n	800055c <BSP_LED_Init+0x68>
  {
    /* Enable the GPIO_LED clock */
    LEDx_GPIO_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	4b15      	ldr	r3, [pc, #84]	@ (8000564 <BSP_LED_Init+0x70>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a14      	ldr	r2, [pc, #80]	@ (8000564 <BSP_LED_Init+0x70>)
 8000514:	f043 0302 	orr.w	r3, r3, #2
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b12      	ldr	r3, [pc, #72]	@ (8000564 <BSP_LED_Init+0x70>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0302 	and.w	r3, r3, #2
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin = GPIO_PIN[Led];
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	4a0f      	ldr	r2, [pc, #60]	@ (8000568 <BSP_LED_Init+0x74>)
 800052a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800052e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000530:	2301      	movs	r3, #1
 8000532:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8000534:	2301      	movs	r3, #1
 8000536:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000538:	2303      	movs	r3, #3
 800053a:	61bb      	str	r3, [r7, #24]
  
    HAL_GPIO_Init(LEDx_GPIO_PORT, &gpio_init_structure);
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	4619      	mov	r1, r3
 8000542:	480a      	ldr	r0, [pc, #40]	@ (800056c <BSP_LED_Init+0x78>)
 8000544:	f001 f8b2 	bl	80016ac <HAL_GPIO_Init>
    
    /* By default, turn off LED */
    HAL_GPIO_WritePin(LEDx_GPIO_PORT, GPIO_PIN[Led], GPIO_PIN_SET);
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	4a07      	ldr	r2, [pc, #28]	@ (8000568 <BSP_LED_Init+0x74>)
 800054c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000550:	b29b      	uxth	r3, r3
 8000552:	2201      	movs	r2, #1
 8000554:	4619      	mov	r1, r3
 8000556:	4805      	ldr	r0, [pc, #20]	@ (800056c <BSP_LED_Init+0x78>)
 8000558:	f001 fa3c 	bl	80019d4 <HAL_GPIO_WritePin>
#endif /* USE_IOEXPANDER */     

#if !defined(USE_STM32446E_EVAL_REVA)
  }
#endif /* !USE_STM32446E_EVAL_REVA */
}
 800055c:	bf00      	nop
 800055e:	3720      	adds	r7, #32
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40023800 	.word	0x40023800
 8000568:	08002a04 	.word	0x08002a04
 800056c:	40020400 	.word	0x40020400

08000570 <BSP_LED_On>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
  
#if !defined(USE_STM32446E_EVAL_REVA)
  /* On RevB led1 and Led3 are on GPIO while Led2 and Led4 on Mfx*/
  if ((Led == LED1) || (Led == LED3))
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d002      	beq.n	8000586 <BSP_LED_On+0x16>
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d109      	bne.n	800059a <BSP_LED_On+0x2a>
  {
     HAL_GPIO_WritePin(LEDx_GPIO_PORT, GPIO_PIN[Led], GPIO_PIN_RESET);
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	4a06      	ldr	r2, [pc, #24]	@ (80005a4 <BSP_LED_On+0x34>)
 800058a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800058e:	b29b      	uxth	r3, r3
 8000590:	2200      	movs	r2, #0
 8000592:	4619      	mov	r1, r3
 8000594:	4804      	ldr	r0, [pc, #16]	@ (80005a8 <BSP_LED_On+0x38>)
 8000596:	f001 fa1d 	bl	80019d4 <HAL_GPIO_WritePin>
#endif /* USE_IOEXPANDER */     

#if !defined(USE_STM32446E_EVAL_REVA)
  }
#endif /* !USE_STM32446E_EVAL_REVA */
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	08002a04 	.word	0x08002a04
 80005a8:	40020400 	.word	0x40020400

080005ac <BSP_LED_Off>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
  
#if !defined(USE_STM32446E_EVAL_REVA)
  /* On RevB led1 and Led3 are on GPIO while Led2 and Led4 on Mfx*/
  if ((Led == LED1) || (Led == LED3))
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d002      	beq.n	80005c2 <BSP_LED_Off+0x16>
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d109      	bne.n	80005d6 <BSP_LED_Off+0x2a>
  {
     HAL_GPIO_WritePin(LEDx_GPIO_PORT, GPIO_PIN[Led], GPIO_PIN_SET);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a06      	ldr	r2, [pc, #24]	@ (80005e0 <BSP_LED_Off+0x34>)
 80005c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	2201      	movs	r2, #1
 80005ce:	4619      	mov	r1, r3
 80005d0:	4804      	ldr	r0, [pc, #16]	@ (80005e4 <BSP_LED_Off+0x38>)
 80005d2:	f001 f9ff 	bl	80019d4 <HAL_GPIO_WritePin>

#if !defined(USE_STM32446E_EVAL_REVA)
  }
#endif /* !USE_STM32446E_EVAL_REVA */

}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	08002a04 	.word	0x08002a04
 80005e4:	40020400 	.word	0x40020400

080005e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005ec:	4b16      	ldr	r3, [pc, #88]	@ (8000648 <SystemInit+0x60>)
 80005ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005f2:	4a15      	ldr	r2, [pc, #84]	@ (8000648 <SystemInit+0x60>)
 80005f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005fc:	4b13      	ldr	r3, [pc, #76]	@ (800064c <SystemInit+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a12      	ldr	r2, [pc, #72]	@ (800064c <SystemInit+0x64>)
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000608:	4b10      	ldr	r3, [pc, #64]	@ (800064c <SystemInit+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800060e:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <SystemInit+0x64>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a0e      	ldr	r2, [pc, #56]	@ (800064c <SystemInit+0x64>)
 8000614:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8000618:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800061c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800061e:	4b0b      	ldr	r3, [pc, #44]	@ (800064c <SystemInit+0x64>)
 8000620:	4a0b      	ldr	r2, [pc, #44]	@ (8000650 <SystemInit+0x68>)
 8000622:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000624:	4b09      	ldr	r3, [pc, #36]	@ (800064c <SystemInit+0x64>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a08      	ldr	r2, [pc, #32]	@ (800064c <SystemInit+0x64>)
 800062a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800062e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000630:	4b06      	ldr	r3, [pc, #24]	@ (800064c <SystemInit+0x64>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000636:	4b04      	ldr	r3, [pc, #16]	@ (8000648 <SystemInit+0x60>)
 8000638:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800063c:	609a      	str	r2, [r3, #8]
#endif
}
 800063e:	bf00      	nop
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00
 800064c:	40023800 	.word	0x40023800
 8000650:	24003010 	.word	0x24003010

08000654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000658:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <HAL_Init+0x40>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a0d      	ldr	r2, [pc, #52]	@ (8000694 <HAL_Init+0x40>)
 800065e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000662:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000664:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <HAL_Init+0x40>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a0a      	ldr	r2, [pc, #40]	@ (8000694 <HAL_Init+0x40>)
 800066a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800066e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000670:	4b08      	ldr	r3, [pc, #32]	@ (8000694 <HAL_Init+0x40>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a07      	ldr	r2, [pc, #28]	@ (8000694 <HAL_Init+0x40>)
 8000676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800067a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800067c:	2003      	movs	r0, #3
 800067e:	f000 ffe1 	bl	8001644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000682:	200f      	movs	r0, #15
 8000684:	f000 f810 	bl	80006a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000688:	f000 f806 	bl	8000698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800068c:	2300      	movs	r3, #0
}
 800068e:	4618      	mov	r0, r3
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023c00 	.word	0x40023c00

08000698 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
	...

080006a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <HAL_InitTick+0x54>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <HAL_InitTick+0x58>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4619      	mov	r1, r3
 80006ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006be:	fbb3 f3f1 	udiv	r3, r3, r1
 80006c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 ffe3 	bl	8001692 <HAL_SYSTICK_Config>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006d2:	2301      	movs	r3, #1
 80006d4:	e00e      	b.n	80006f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b0f      	cmp	r3, #15
 80006da:	d80a      	bhi.n	80006f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006dc:	2200      	movs	r2, #0
 80006de:	6879      	ldr	r1, [r7, #4]
 80006e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006e4:	f000 ffb9 	bl	800165a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006e8:	4a06      	ldr	r2, [pc, #24]	@ (8000704 <HAL_InitTick+0x5c>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ee:	2300      	movs	r3, #0
 80006f0:	e000      	b.n	80006f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000000 	.word	0x20000000
 8000700:	20000008 	.word	0x20000008
 8000704:	20000004 	.word	0x20000004

08000708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <HAL_IncTick+0x20>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	461a      	mov	r2, r3
 8000712:	4b06      	ldr	r3, [pc, #24]	@ (800072c <HAL_IncTick+0x24>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4413      	add	r3, r2
 8000718:	4a04      	ldr	r2, [pc, #16]	@ (800072c <HAL_IncTick+0x24>)
 800071a:	6013      	str	r3, [r2, #0]
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000008 	.word	0x20000008
 800072c:	20000028 	.word	0x20000028

08000730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return uwTick;
 8000734:	4b03      	ldr	r3, [pc, #12]	@ (8000744 <HAL_GetTick+0x14>)
 8000736:	681b      	ldr	r3, [r3, #0]
}
 8000738:	4618      	mov	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	20000028 	.word	0x20000028

08000748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000750:	f7ff ffee 	bl	8000730 <HAL_GetTick>
 8000754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000760:	d005      	beq.n	800076e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000762:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <HAL_Delay+0x44>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	461a      	mov	r2, r3
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	4413      	add	r3, r2
 800076c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800076e:	bf00      	nop
 8000770:	f7ff ffde 	bl	8000730 <HAL_GetTick>
 8000774:	4602      	mov	r2, r0
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	429a      	cmp	r2, r3
 800077e:	d8f7      	bhi.n	8000770 <HAL_Delay+0x28>
  {
  }
}
 8000780:	bf00      	nop
 8000782:	bf00      	nop
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000008 	.word	0x20000008

08000790 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d101      	bne.n	80007a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e0ed      	b.n	800097e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d102      	bne.n	80007b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f002 f832 	bl	8002818 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f042 0201 	orr.w	r2, r2, #1
 80007c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007c4:	f7ff ffb4 	bl	8000730 <HAL_GetTick>
 80007c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007ca:	e012      	b.n	80007f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007cc:	f7ff ffb0 	bl	8000730 <HAL_GetTick>
 80007d0:	4602      	mov	r2, r0
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	2b0a      	cmp	r3, #10
 80007d8:	d90b      	bls.n	80007f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2205      	movs	r2, #5
 80007ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
 80007f0:	e0c5      	b.n	800097e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d0e5      	beq.n	80007cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f022 0202 	bic.w	r2, r2, #2
 800080e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000810:	f7ff ff8e 	bl	8000730 <HAL_GetTick>
 8000814:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000816:	e012      	b.n	800083e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000818:	f7ff ff8a 	bl	8000730 <HAL_GetTick>
 800081c:	4602      	mov	r2, r0
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	2b0a      	cmp	r3, #10
 8000824:	d90b      	bls.n	800083e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800082a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2205      	movs	r2, #5
 8000836:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800083a:	2301      	movs	r3, #1
 800083c:	e09f      	b.n	800097e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	f003 0302 	and.w	r3, r3, #2
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1e5      	bne.n	8000818 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	7e1b      	ldrb	r3, [r3, #24]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d108      	bne.n	8000866 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	e007      	b.n	8000876 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000874:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7e5b      	ldrb	r3, [r3, #25]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d108      	bne.n	8000890 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	e007      	b.n	80008a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800089e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	7e9b      	ldrb	r3, [r3, #26]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d108      	bne.n	80008ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f042 0220 	orr.w	r2, r2, #32
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	e007      	b.n	80008ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f022 0220 	bic.w	r2, r2, #32
 80008c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	7edb      	ldrb	r3, [r3, #27]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d108      	bne.n	80008e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f022 0210 	bic.w	r2, r2, #16
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	e007      	b.n	80008f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f042 0210 	orr.w	r2, r2, #16
 80008f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	7f1b      	ldrb	r3, [r3, #28]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d108      	bne.n	800090e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f042 0208 	orr.w	r2, r2, #8
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	e007      	b.n	800091e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f022 0208 	bic.w	r2, r2, #8
 800091c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	7f5b      	ldrb	r3, [r3, #29]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d108      	bne.n	8000938 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f042 0204 	orr.w	r2, r2, #4
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	e007      	b.n	8000948 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f022 0204 	bic.w	r2, r2, #4
 8000946:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	689a      	ldr	r2, [r3, #8]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	431a      	orrs	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	691b      	ldr	r3, [r3, #16]
 8000956:	431a      	orrs	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	ea42 0103 	orr.w	r1, r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	1e5a      	subs	r2, r3, #1
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	430a      	orrs	r2, r1
 800096c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2200      	movs	r2, #0
 8000972:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2201      	movs	r2, #1
 8000978:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000988:	b480      	push	{r7}
 800098a:	b087      	sub	sp, #28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800099e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80009a0:	7cfb      	ldrb	r3, [r7, #19]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d003      	beq.n	80009ae <HAL_CAN_ConfigFilter+0x26>
 80009a6:	7cfb      	ldrb	r3, [r7, #19]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	f040 80be 	bne.w	8000b2a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80009ae:	4b65      	ldr	r3, [pc, #404]	@ (8000b44 <HAL_CAN_ConfigFilter+0x1bc>)
 80009b0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80009b8:	f043 0201 	orr.w	r2, r3, #1
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80009c8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009dc:	021b      	lsls	r3, r3, #8
 80009de:	431a      	orrs	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	f003 031f 	and.w	r3, r3, #31
 80009ee:	2201      	movs	r2, #1
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	43db      	mvns	r3, r3
 8000a00:	401a      	ands	r2, r3
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	69db      	ldr	r3, [r3, #28]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d123      	bne.n	8000a58 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a2e:	683a      	ldr	r2, [r7, #0]
 8000a30:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a32:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	3248      	adds	r2, #72	@ 0x48
 8000a38:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a4c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a4e:	6979      	ldr	r1, [r7, #20]
 8000a50:	3348      	adds	r3, #72	@ 0x48
 8000a52:	00db      	lsls	r3, r3, #3
 8000a54:	440b      	add	r3, r1
 8000a56:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	69db      	ldr	r3, [r3, #28]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d122      	bne.n	8000aa6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a80:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3248      	adds	r2, #72	@ 0x48
 8000a86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a9a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a9c:	6979      	ldr	r1, [r7, #20]
 8000a9e:	3348      	adds	r3, #72	@ 0x48
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	440b      	add	r3, r1
 8000aa4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d109      	bne.n	8000ac2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	401a      	ands	r2, r3
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000ac0:	e007      	b.n	8000ad2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	431a      	orrs	r2, r3
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	691b      	ldr	r3, [r3, #16]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d109      	bne.n	8000aee <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	401a      	ands	r2, r3
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000aec:	e007      	b.n	8000afe <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	431a      	orrs	r2, r3
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	6a1b      	ldr	r3, [r3, #32]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d107      	bne.n	8000b16 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b1c:	f023 0201 	bic.w	r2, r3, #1
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e006      	b.n	8000b38 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b2e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
  }
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	371c      	adds	r7, #28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	40006400 	.word	0x40006400

08000b48 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d12e      	bne.n	8000bba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2202      	movs	r2, #2
 8000b60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f022 0201 	bic.w	r2, r2, #1
 8000b72:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b74:	f7ff fddc 	bl	8000730 <HAL_GetTick>
 8000b78:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b7a:	e012      	b.n	8000ba2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b7c:	f7ff fdd8 	bl	8000730 <HAL_GetTick>
 8000b80:	4602      	mov	r2, r0
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	2b0a      	cmp	r3, #10
 8000b88:	d90b      	bls.n	8000ba2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2205      	movs	r2, #5
 8000b9a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e012      	b.n	8000bc8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1e5      	bne.n	8000b7c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e006      	b.n	8000bc8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bbe:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
  }
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b089      	sub	sp, #36	@ 0x24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
 8000bdc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000be4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000bee:	7ffb      	ldrb	r3, [r7, #31]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d003      	beq.n	8000bfc <HAL_CAN_AddTxMessage+0x2c>
 8000bf4:	7ffb      	ldrb	r3, [r7, #31]
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	f040 80ad 	bne.w	8000d56 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d10a      	bne.n	8000c1c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d105      	bne.n	8000c1c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f000 8095 	beq.w	8000d46 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	0e1b      	lsrs	r3, r3, #24
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c26:	2201      	movs	r2, #1
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d10d      	bne.n	8000c54 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c42:	68f9      	ldr	r1, [r7, #12]
 8000c44:	6809      	ldr	r1, [r1, #0]
 8000c46:	431a      	orrs	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	3318      	adds	r3, #24
 8000c4c:	011b      	lsls	r3, r3, #4
 8000c4e:	440b      	add	r3, r1
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	e00f      	b.n	8000c74 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c5e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c64:	68f9      	ldr	r1, [r7, #12]
 8000c66:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000c68:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	3318      	adds	r3, #24
 8000c6e:	011b      	lsls	r3, r3, #4
 8000c70:	440b      	add	r3, r1
 8000c72:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	6819      	ldr	r1, [r3, #0]
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	691a      	ldr	r2, [r3, #16]
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	3318      	adds	r3, #24
 8000c80:	011b      	lsls	r3, r3, #4
 8000c82:	440b      	add	r3, r1
 8000c84:	3304      	adds	r3, #4
 8000c86:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	7d1b      	ldrb	r3, [r3, #20]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d111      	bne.n	8000cb4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	3318      	adds	r3, #24
 8000c98:	011b      	lsls	r3, r3, #4
 8000c9a:	4413      	add	r3, r2
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	6811      	ldr	r1, [r2, #0]
 8000ca4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	3318      	adds	r3, #24
 8000cac:	011b      	lsls	r3, r3, #4
 8000cae:	440b      	add	r3, r1
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3307      	adds	r3, #7
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	061a      	lsls	r2, r3, #24
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3306      	adds	r3, #6
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	041b      	lsls	r3, r3, #16
 8000cc4:	431a      	orrs	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3305      	adds	r3, #5
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	021b      	lsls	r3, r3, #8
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	3204      	adds	r2, #4
 8000cd4:	7812      	ldrb	r2, [r2, #0]
 8000cd6:	4610      	mov	r0, r2
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	6811      	ldr	r1, [r2, #0]
 8000cdc:	ea43 0200 	orr.w	r2, r3, r0
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	011b      	lsls	r3, r3, #4
 8000ce4:	440b      	add	r3, r1
 8000ce6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000cea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3303      	adds	r3, #3
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	061a      	lsls	r2, r3, #24
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3302      	adds	r3, #2
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	041b      	lsls	r3, r3, #16
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3301      	adds	r3, #1
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	021b      	lsls	r3, r3, #8
 8000d06:	4313      	orrs	r3, r2
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	7812      	ldrb	r2, [r2, #0]
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	6811      	ldr	r1, [r2, #0]
 8000d12:	ea43 0200 	orr.w	r2, r3, r0
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	011b      	lsls	r3, r3, #4
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000d20:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3318      	adds	r3, #24
 8000d2a:	011b      	lsls	r3, r3, #4
 8000d2c:	4413      	add	r3, r2
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	6811      	ldr	r1, [r2, #0]
 8000d34:	f043 0201 	orr.w	r2, r3, #1
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	3318      	adds	r3, #24
 8000d3c:	011b      	lsls	r3, r3, #4
 8000d3e:	440b      	add	r3, r1
 8000d40:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e00e      	b.n	8000d64 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d4a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e006      	b.n	8000d64 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d5a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
  }
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3724      	adds	r7, #36	@ 0x24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d82:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d84:	7afb      	ldrb	r3, [r7, #11]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d002      	beq.n	8000d90 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8000d8a:	7afb      	ldrb	r3, [r7, #11]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d11d      	bne.n	8000dcc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d002      	beq.n	8000da4 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	3301      	adds	r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d002      	beq.n	8000db8 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3301      	adds	r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d002      	beq.n	8000dcc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b087      	sub	sp, #28
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	60f8      	str	r0, [r7, #12]
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
 8000de6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dee:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000df0:	7dfb      	ldrb	r3, [r7, #23]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d003      	beq.n	8000dfe <HAL_CAN_GetRxMessage+0x24>
 8000df6:	7dfb      	ldrb	r3, [r7, #23]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	f040 8103 	bne.w	8001004 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d10e      	bne.n	8000e22 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d116      	bne.n	8000e40 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e16:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e0f7      	b.n	8001012 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d107      	bne.n	8000e40 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e34:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e0e8      	b.n	8001012 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	331b      	adds	r3, #27
 8000e48:	011b      	lsls	r3, r3, #4
 8000e4a:	4413      	add	r3, r2
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 0204 	and.w	r2, r3, #4
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10c      	bne.n	8000e78 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	331b      	adds	r3, #27
 8000e66:	011b      	lsls	r3, r3, #4
 8000e68:	4413      	add	r3, r2
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	0d5b      	lsrs	r3, r3, #21
 8000e6e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	e00b      	b.n	8000e90 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	331b      	adds	r3, #27
 8000e80:	011b      	lsls	r3, r3, #4
 8000e82:	4413      	add	r3, r2
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	08db      	lsrs	r3, r3, #3
 8000e88:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	331b      	adds	r3, #27
 8000e98:	011b      	lsls	r3, r3, #4
 8000e9a:	4413      	add	r3, r2
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0202 	and.w	r2, r3, #2
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	331b      	adds	r3, #27
 8000eae:	011b      	lsls	r3, r3, #4
 8000eb0:	4413      	add	r3, r2
 8000eb2:	3304      	adds	r3, #4
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0308 	and.w	r3, r3, #8
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2208      	movs	r2, #8
 8000ec2:	611a      	str	r2, [r3, #16]
 8000ec4:	e00b      	b.n	8000ede <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	331b      	adds	r3, #27
 8000ece:	011b      	lsls	r3, r3, #4
 8000ed0:	4413      	add	r3, r2
 8000ed2:	3304      	adds	r3, #4
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 020f 	and.w	r2, r3, #15
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	331b      	adds	r3, #27
 8000ee6:	011b      	lsls	r3, r3, #4
 8000ee8:	4413      	add	r3, r2
 8000eea:	3304      	adds	r3, #4
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	0a1b      	lsrs	r3, r3, #8
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	331b      	adds	r3, #27
 8000efe:	011b      	lsls	r3, r3, #4
 8000f00:	4413      	add	r3, r2
 8000f02:	3304      	adds	r3, #4
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	0c1b      	lsrs	r3, r3, #16
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	011b      	lsls	r3, r3, #4
 8000f16:	4413      	add	r3, r2
 8000f18:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	4413      	add	r3, r2
 8000f2e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	0a1a      	lsrs	r2, r3, #8
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	011b      	lsls	r3, r3, #4
 8000f46:	4413      	add	r3, r2
 8000f48:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	0c1a      	lsrs	r2, r3, #16
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	3302      	adds	r3, #2
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	4413      	add	r3, r2
 8000f62:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	0e1a      	lsrs	r2, r3, #24
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	3303      	adds	r3, #3
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	011b      	lsls	r3, r3, #4
 8000f7a:	4413      	add	r3, r2
 8000f7c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	3304      	adds	r3, #4
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	011b      	lsls	r3, r3, #4
 8000f92:	4413      	add	r3, r2
 8000f94:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	0a1a      	lsrs	r2, r3, #8
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	3305      	adds	r3, #5
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	4413      	add	r3, r2
 8000fae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	0c1a      	lsrs	r2, r3, #16
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	3306      	adds	r3, #6
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	011b      	lsls	r3, r3, #4
 8000fc6:	4413      	add	r3, r2
 8000fc8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	0e1a      	lsrs	r2, r3, #24
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	3307      	adds	r3, #7
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d108      	bne.n	8000ff0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68da      	ldr	r2, [r3, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f042 0220 	orr.w	r2, r2, #32
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	e007      	b.n	8001000 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	691a      	ldr	r2, [r3, #16]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f042 0220 	orr.w	r2, r2, #32
 8000ffe:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	e006      	b.n	8001012 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001008:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
  }
}
 8001012:	4618      	mov	r0, r3
 8001014:	371c      	adds	r7, #28
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800101e:	b480      	push	{r7}
 8001020:	b085      	sub	sp, #20
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001032:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001034:	7afb      	ldrb	r3, [r7, #11]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d002      	beq.n	8001040 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800103a:	7afb      	ldrb	r3, [r7, #11]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d10f      	bne.n	8001060 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d106      	bne.n	8001054 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	e005      	b.n	8001060 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001060:	68fb      	ldr	r3, [r7, #12]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b08a      	sub	sp, #40	@ 0x28
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80010aa:	6a3b      	ldr	r3, [r7, #32]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d07c      	beq.n	80011ae <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d023      	beq.n	8001106 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2201      	movs	r2, #1
 80010c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 f983 	bl	80013dc <HAL_CAN_TxMailbox0CompleteCallback>
 80010d6:	e016      	b.n	8001106 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d004      	beq.n	80010ec <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80010ea:	e00c      	b.n	8001106 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d004      	beq.n	8001100 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80010f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80010fe:	e002      	b.n	8001106 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f000 f989 	bl	8001418 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800110c:	2b00      	cmp	r3, #0
 800110e:	d024      	beq.n	800115a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001118:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 f963 	bl	80013f0 <HAL_CAN_TxMailbox1CompleteCallback>
 800112a:	e016      	b.n	800115a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001132:	2b00      	cmp	r3, #0
 8001134:	d004      	beq.n	8001140 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001138:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
 800113e:	e00c      	b.n	800115a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001146:	2b00      	cmp	r3, #0
 8001148:	d004      	beq.n	8001154 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800114a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001150:	627b      	str	r3, [r7, #36]	@ 0x24
 8001152:	e002      	b.n	800115a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f000 f969 	bl	800142c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d024      	beq.n	80011ae <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800116c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 f943 	bl	8001404 <HAL_CAN_TxMailbox2CompleteCallback>
 800117e:	e016      	b.n	80011ae <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d004      	beq.n	8001194 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800118a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
 8001192:	e00c      	b.n	80011ae <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d004      	beq.n	80011a8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80011a6:	e002      	b.n	80011ae <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 f949 	bl	8001440 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00c      	beq.n	80011d2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	f003 0310 	and.w	r3, r3, #16
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d007      	beq.n	80011d2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80011c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2210      	movs	r2, #16
 80011d0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80011d2:	6a3b      	ldr	r3, [r7, #32]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00b      	beq.n	80011f4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d006      	beq.n	80011f4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2208      	movs	r2, #8
 80011ec:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 f93a 	bl	8001468 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d009      	beq.n	8001212 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 f921 	bl	8001454 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001212:	6a3b      	ldr	r3, [r7, #32]
 8001214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00c      	beq.n	8001236 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	f003 0310 	and.w	r3, r3, #16
 8001222:	2b00      	cmp	r3, #0
 8001224:	d007      	beq.n	8001236 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001228:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2210      	movs	r2, #16
 8001234:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	f003 0320 	and.w	r3, r3, #32
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00b      	beq.n	8001258 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d006      	beq.n	8001258 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2208      	movs	r2, #8
 8001250:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 f91c 	bl	8001490 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	f003 0310 	and.w	r3, r3, #16
 800125e:	2b00      	cmp	r3, #0
 8001260:	d009      	beq.n	8001276 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d002      	beq.n	8001276 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f903 	bl	800147c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00b      	beq.n	8001298 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	2b00      	cmp	r3, #0
 8001288:	d006      	beq.n	8001298 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2210      	movs	r2, #16
 8001290:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 f906 	bl	80014a4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00b      	beq.n	80012ba <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d006      	beq.n	80012ba <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2208      	movs	r2, #8
 80012b2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f8ff 	bl	80014b8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d07b      	beq.n	80013bc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d072      	beq.n	80013b4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d008      	beq.n	80012ea <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d008      	beq.n	8001306 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80012fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001306:	6a3b      	ldr	r3, [r7, #32]
 8001308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800130c:	2b00      	cmp	r3, #0
 800130e:	d008      	beq.n	8001322 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001328:	2b00      	cmp	r3, #0
 800132a:	d043      	beq.n	80013b4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001332:	2b00      	cmp	r3, #0
 8001334:	d03e      	beq.n	80013b4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800133c:	2b60      	cmp	r3, #96	@ 0x60
 800133e:	d02b      	beq.n	8001398 <HAL_CAN_IRQHandler+0x32a>
 8001340:	2b60      	cmp	r3, #96	@ 0x60
 8001342:	d82e      	bhi.n	80013a2 <HAL_CAN_IRQHandler+0x334>
 8001344:	2b50      	cmp	r3, #80	@ 0x50
 8001346:	d022      	beq.n	800138e <HAL_CAN_IRQHandler+0x320>
 8001348:	2b50      	cmp	r3, #80	@ 0x50
 800134a:	d82a      	bhi.n	80013a2 <HAL_CAN_IRQHandler+0x334>
 800134c:	2b40      	cmp	r3, #64	@ 0x40
 800134e:	d019      	beq.n	8001384 <HAL_CAN_IRQHandler+0x316>
 8001350:	2b40      	cmp	r3, #64	@ 0x40
 8001352:	d826      	bhi.n	80013a2 <HAL_CAN_IRQHandler+0x334>
 8001354:	2b30      	cmp	r3, #48	@ 0x30
 8001356:	d010      	beq.n	800137a <HAL_CAN_IRQHandler+0x30c>
 8001358:	2b30      	cmp	r3, #48	@ 0x30
 800135a:	d822      	bhi.n	80013a2 <HAL_CAN_IRQHandler+0x334>
 800135c:	2b10      	cmp	r3, #16
 800135e:	d002      	beq.n	8001366 <HAL_CAN_IRQHandler+0x2f8>
 8001360:	2b20      	cmp	r3, #32
 8001362:	d005      	beq.n	8001370 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001364:	e01d      	b.n	80013a2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001368:	f043 0308 	orr.w	r3, r3, #8
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800136e:	e019      	b.n	80013a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001372:	f043 0310 	orr.w	r3, r3, #16
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001378:	e014      	b.n	80013a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800137a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137c:	f043 0320 	orr.w	r3, r3, #32
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001382:	e00f      	b.n	80013a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800138c:	e00a      	b.n	80013a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800138e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001396:	e005      	b.n	80013a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013a0:	e000      	b.n	80013a4 <HAL_CAN_IRQHandler+0x336>
            break;
 80013a2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	699a      	ldr	r2, [r3, #24]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80013b2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2204      	movs	r2, #4
 80013ba:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80013bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d008      	beq.n	80013d4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f87c 	bl	80014cc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80013d4:	bf00      	nop
 80013d6:	3728      	adds	r7, #40	@ 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014fc:	4013      	ands	r3, r2
 80014fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001508:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800150c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001512:	4a04      	ldr	r2, [pc, #16]	@ (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	60d3      	str	r3, [r2, #12]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800152c:	4b04      	ldr	r3, [pc, #16]	@ (8001540 <__NVIC_GetPriorityGrouping+0x18>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	f003 0307 	and.w	r3, r3, #7
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db0a      	blt.n	800156e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	490c      	ldr	r1, [pc, #48]	@ (8001590 <__NVIC_SetPriority+0x4c>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	440b      	add	r3, r1
 8001568:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800156c:	e00a      	b.n	8001584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4908      	ldr	r1, [pc, #32]	@ (8001594 <__NVIC_SetPriority+0x50>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	3b04      	subs	r3, #4
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	440b      	add	r3, r1
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	@ 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	bf28      	it	cs
 80015b6:	2304      	movcs	r3, #4
 80015b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3304      	adds	r3, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d902      	bls.n	80015c8 <NVIC_EncodePriority+0x30>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3b03      	subs	r3, #3
 80015c6:	e000      	b.n	80015ca <NVIC_EncodePriority+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	4313      	orrs	r3, r2
         );
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3724      	adds	r7, #36	@ 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001610:	d301      	bcc.n	8001616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001612:	2301      	movs	r3, #1
 8001614:	e00f      	b.n	8001636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <SysTick_Config+0x40>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161e:	210f      	movs	r1, #15
 8001620:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001624:	f7ff ff8e 	bl	8001544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001628:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <SysTick_Config+0x40>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162e:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <SysTick_Config+0x40>)
 8001630:	2207      	movs	r2, #7
 8001632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	e000e010 	.word	0xe000e010

08001644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff47 	bl	80014e0 <__NVIC_SetPriorityGrouping>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800166c:	f7ff ff5c 	bl	8001528 <__NVIC_GetPriorityGrouping>
 8001670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	6978      	ldr	r0, [r7, #20]
 8001678:	f7ff ff8e 	bl	8001598 <NVIC_EncodePriority>
 800167c:	4602      	mov	r2, r0
 800167e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff5d 	bl	8001544 <__NVIC_SetPriority>
}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ffb0 	bl	8001600 <SysTick_Config>
 80016a0:	4603      	mov	r3, r0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	@ 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016be:	2300      	movs	r3, #0
 80016c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
 80016c6:	e165      	b.n	8001994 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016c8:	2201      	movs	r2, #1
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	f040 8154 	bne.w	800198e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d005      	beq.n	80016fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d130      	bne.n	8001760 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	2203      	movs	r2, #3
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	68da      	ldr	r2, [r3, #12]
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001734:	2201      	movs	r2, #1
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	091b      	lsrs	r3, r3, #4
 800174a:	f003 0201 	and.w	r2, r3, #1
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	2b03      	cmp	r3, #3
 800176a:	d017      	beq.n	800179c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	2203      	movs	r2, #3
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d123      	bne.n	80017f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	08da      	lsrs	r2, r3, #3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3208      	adds	r2, #8
 80017b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	220f      	movs	r2, #15
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	691a      	ldr	r2, [r3, #16]
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	08da      	lsrs	r2, r3, #3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3208      	adds	r2, #8
 80017ea:	69b9      	ldr	r1, [r7, #24]
 80017ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0203 	and.w	r2, r3, #3
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 80ae 	beq.w	800198e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	4b5d      	ldr	r3, [pc, #372]	@ (80019ac <HAL_GPIO_Init+0x300>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183a:	4a5c      	ldr	r2, [pc, #368]	@ (80019ac <HAL_GPIO_Init+0x300>)
 800183c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001840:	6453      	str	r3, [r2, #68]	@ 0x44
 8001842:	4b5a      	ldr	r3, [pc, #360]	@ (80019ac <HAL_GPIO_Init+0x300>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800184e:	4a58      	ldr	r2, [pc, #352]	@ (80019b0 <HAL_GPIO_Init+0x304>)
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	3302      	adds	r3, #2
 8001856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	220f      	movs	r2, #15
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4f      	ldr	r2, [pc, #316]	@ (80019b4 <HAL_GPIO_Init+0x308>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d025      	beq.n	80018c6 <HAL_GPIO_Init+0x21a>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4e      	ldr	r2, [pc, #312]	@ (80019b8 <HAL_GPIO_Init+0x30c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d01f      	beq.n	80018c2 <HAL_GPIO_Init+0x216>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4d      	ldr	r2, [pc, #308]	@ (80019bc <HAL_GPIO_Init+0x310>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d019      	beq.n	80018be <HAL_GPIO_Init+0x212>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a4c      	ldr	r2, [pc, #304]	@ (80019c0 <HAL_GPIO_Init+0x314>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d013      	beq.n	80018ba <HAL_GPIO_Init+0x20e>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4b      	ldr	r2, [pc, #300]	@ (80019c4 <HAL_GPIO_Init+0x318>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d00d      	beq.n	80018b6 <HAL_GPIO_Init+0x20a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a4a      	ldr	r2, [pc, #296]	@ (80019c8 <HAL_GPIO_Init+0x31c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d007      	beq.n	80018b2 <HAL_GPIO_Init+0x206>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a49      	ldr	r2, [pc, #292]	@ (80019cc <HAL_GPIO_Init+0x320>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d101      	bne.n	80018ae <HAL_GPIO_Init+0x202>
 80018aa:	2306      	movs	r3, #6
 80018ac:	e00c      	b.n	80018c8 <HAL_GPIO_Init+0x21c>
 80018ae:	2307      	movs	r3, #7
 80018b0:	e00a      	b.n	80018c8 <HAL_GPIO_Init+0x21c>
 80018b2:	2305      	movs	r3, #5
 80018b4:	e008      	b.n	80018c8 <HAL_GPIO_Init+0x21c>
 80018b6:	2304      	movs	r3, #4
 80018b8:	e006      	b.n	80018c8 <HAL_GPIO_Init+0x21c>
 80018ba:	2303      	movs	r3, #3
 80018bc:	e004      	b.n	80018c8 <HAL_GPIO_Init+0x21c>
 80018be:	2302      	movs	r3, #2
 80018c0:	e002      	b.n	80018c8 <HAL_GPIO_Init+0x21c>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <HAL_GPIO_Init+0x21c>
 80018c6:	2300      	movs	r3, #0
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	f002 0203 	and.w	r2, r2, #3
 80018ce:	0092      	lsls	r2, r2, #2
 80018d0:	4093      	lsls	r3, r2
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d8:	4935      	ldr	r1, [pc, #212]	@ (80019b0 <HAL_GPIO_Init+0x304>)
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	089b      	lsrs	r3, r3, #2
 80018de:	3302      	adds	r3, #2
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018e6:	4b3a      	ldr	r3, [pc, #232]	@ (80019d0 <HAL_GPIO_Init+0x324>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800190a:	4a31      	ldr	r2, [pc, #196]	@ (80019d0 <HAL_GPIO_Init+0x324>)
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001910:	4b2f      	ldr	r3, [pc, #188]	@ (80019d0 <HAL_GPIO_Init+0x324>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001934:	4a26      	ldr	r2, [pc, #152]	@ (80019d0 <HAL_GPIO_Init+0x324>)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800193a:	4b25      	ldr	r3, [pc, #148]	@ (80019d0 <HAL_GPIO_Init+0x324>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800195e:	4a1c      	ldr	r2, [pc, #112]	@ (80019d0 <HAL_GPIO_Init+0x324>)
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001964:	4b1a      	ldr	r3, [pc, #104]	@ (80019d0 <HAL_GPIO_Init+0x324>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001988:	4a11      	ldr	r2, [pc, #68]	@ (80019d0 <HAL_GPIO_Init+0x324>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3301      	adds	r3, #1
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	2b0f      	cmp	r3, #15
 8001998:	f67f ae96 	bls.w	80016c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	3724      	adds	r7, #36	@ 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40013800 	.word	0x40013800
 80019b4:	40020000 	.word	0x40020000
 80019b8:	40020400 	.word	0x40020400
 80019bc:	40020800 	.word	0x40020800
 80019c0:	40020c00 	.word	0x40020c00
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40021400 	.word	0x40021400
 80019cc:	40021800 	.word	0x40021800
 80019d0:	40013c00 	.word	0x40013c00

080019d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	807b      	strh	r3, [r7, #2]
 80019e0:	4613      	mov	r3, r2
 80019e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019e4:	787b      	ldrb	r3, [r7, #1]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ea:	887a      	ldrh	r2, [r7, #2]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019f0:	e003      	b.n	80019fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019f2:	887b      	ldrh	r3, [r7, #2]
 80019f4:	041a      	lsls	r2, r3, #16
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	619a      	str	r2, [r3, #24]
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	603b      	str	r3, [r7, #0]
 8001a16:	4b20      	ldr	r3, [pc, #128]	@ (8001a98 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	4a1f      	ldr	r2, [pc, #124]	@ (8001a98 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a22:	4b1d      	ldr	r3, [pc, #116]	@ (8001a98 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a9c <HAL_PWREx_EnableOverDrive+0x94>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a34:	f7fe fe7c 	bl	8000730 <HAL_GetTick>
 8001a38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a3a:	e009      	b.n	8001a50 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a3c:	f7fe fe78 	bl	8000730 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a4a:	d901      	bls.n	8001a50 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e01f      	b.n	8001a90 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a50:	4b13      	ldr	r3, [pc, #76]	@ (8001aa0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a5c:	d1ee      	bne.n	8001a3c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a5e:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a64:	f7fe fe64 	bl	8000730 <HAL_GetTick>
 8001a68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a6a:	e009      	b.n	8001a80 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a6c:	f7fe fe60 	bl	8000730 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a7a:	d901      	bls.n	8001a80 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e007      	b.n	8001a90 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a80:	4b07      	ldr	r3, [pc, #28]	@ (8001aa0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001a8c:	d1ee      	bne.n	8001a6c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	420e0040 	.word	0x420e0040
 8001aa0:	40007000 	.word	0x40007000
 8001aa4:	420e0044 	.word	0x420e0044

08001aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0cc      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001abc:	4b68      	ldr	r3, [pc, #416]	@ (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 030f 	and.w	r3, r3, #15
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d90c      	bls.n	8001ae4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aca:	4b65      	ldr	r3, [pc, #404]	@ (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	4b63      	ldr	r3, [pc, #396]	@ (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0b8      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d020      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001afc:	4b59      	ldr	r3, [pc, #356]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	4a58      	ldr	r2, [pc, #352]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b14:	4b53      	ldr	r3, [pc, #332]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	4a52      	ldr	r2, [pc, #328]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b20:	4b50      	ldr	r3, [pc, #320]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	494d      	ldr	r1, [pc, #308]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d044      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	4b47      	ldr	r3, [pc, #284]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d119      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e07f      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d003      	beq.n	8001b66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b66:	4b3f      	ldr	r3, [pc, #252]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e06f      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b76:	4b3b      	ldr	r3, [pc, #236]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e067      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b86:	4b37      	ldr	r3, [pc, #220]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f023 0203 	bic.w	r2, r3, #3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4934      	ldr	r1, [pc, #208]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b98:	f7fe fdca 	bl	8000730 <HAL_GetTick>
 8001b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9e:	e00a      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba0:	f7fe fdc6 	bl	8000730 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e04f      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 020c 	and.w	r2, r3, #12
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d1eb      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b25      	ldr	r3, [pc, #148]	@ (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 030f 	and.w	r3, r3, #15
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d20c      	bcs.n	8001bf0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b22      	ldr	r3, [pc, #136]	@ (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b20      	ldr	r3, [pc, #128]	@ (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e032      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d008      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bfc:	4b19      	ldr	r3, [pc, #100]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	4916      	ldr	r1, [pc, #88]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d009      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c1a:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	490e      	ldr	r1, [pc, #56]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c2e:	f000 f821 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8001c32:	4602      	mov	r2, r0
 8001c34:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	490a      	ldr	r1, [pc, #40]	@ (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001c40:	5ccb      	ldrb	r3, [r1, r3]
 8001c42:	fa22 f303 	lsr.w	r3, r2, r3
 8001c46:	4a09      	ldr	r2, [pc, #36]	@ (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c4a:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fd2a 	bl	80006a8 <HAL_InitTick>

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023c00 	.word	0x40023c00
 8001c64:	40023800 	.word	0x40023800
 8001c68:	08002a0c 	.word	0x08002a0c
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000004 	.word	0x20000004

08001c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c78:	b0a6      	sub	sp, #152	@ 0x98
 8001c7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c9a:	4bc8      	ldr	r3, [pc, #800]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x348>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b0c      	cmp	r3, #12
 8001ca4:	f200 817e 	bhi.w	8001fa4 <HAL_RCC_GetSysClockFreq+0x330>
 8001ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8001cb0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cae:	bf00      	nop
 8001cb0:	08001ce5 	.word	0x08001ce5
 8001cb4:	08001fa5 	.word	0x08001fa5
 8001cb8:	08001fa5 	.word	0x08001fa5
 8001cbc:	08001fa5 	.word	0x08001fa5
 8001cc0:	08001ced 	.word	0x08001ced
 8001cc4:	08001fa5 	.word	0x08001fa5
 8001cc8:	08001fa5 	.word	0x08001fa5
 8001ccc:	08001fa5 	.word	0x08001fa5
 8001cd0:	08001cf5 	.word	0x08001cf5
 8001cd4:	08001fa5 	.word	0x08001fa5
 8001cd8:	08001fa5 	.word	0x08001fa5
 8001cdc:	08001fa5 	.word	0x08001fa5
 8001ce0:	08001e5f 	.word	0x08001e5f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ce4:	4bb6      	ldr	r3, [pc, #728]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001ce6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001cea:	e15f      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cec:	4bb5      	ldr	r3, [pc, #724]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001cee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001cf2:	e15b      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cf4:	4bb1      	ldr	r3, [pc, #708]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x348>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cfc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d00:	4bae      	ldr	r3, [pc, #696]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x348>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d031      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d0c:	4bab      	ldr	r3, [pc, #684]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x348>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	099b      	lsrs	r3, r3, #6
 8001d12:	2200      	movs	r2, #0
 8001d14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001d16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001d18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d20:	2300      	movs	r3, #0
 8001d22:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d24:	4ba7      	ldr	r3, [pc, #668]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001d26:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001d2a:	462a      	mov	r2, r5
 8001d2c:	fb03 f202 	mul.w	r2, r3, r2
 8001d30:	2300      	movs	r3, #0
 8001d32:	4621      	mov	r1, r4
 8001d34:	fb01 f303 	mul.w	r3, r1, r3
 8001d38:	4413      	add	r3, r2
 8001d3a:	4aa2      	ldr	r2, [pc, #648]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001d3c:	4621      	mov	r1, r4
 8001d3e:	fba1 1202 	umull	r1, r2, r1, r2
 8001d42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001d44:	460a      	mov	r2, r1
 8001d46:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001d48:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001d4a:	4413      	add	r3, r2
 8001d4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d52:	2200      	movs	r2, #0
 8001d54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d56:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001d58:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d5c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001d60:	f7fe fa50 	bl	8000204 <__aeabi_uldivmod>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4613      	mov	r3, r2
 8001d6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001d6e:	e064      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d70:	4b92      	ldr	r3, [pc, #584]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x348>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	099b      	lsrs	r3, r3, #6
 8001d76:	2200      	movs	r2, #0
 8001d78:	653b      	str	r3, [r7, #80]	@ 0x50
 8001d7a:	657a      	str	r2, [r7, #84]	@ 0x54
 8001d7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d84:	2300      	movs	r3, #0
 8001d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d88:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001d8c:	4622      	mov	r2, r4
 8001d8e:	462b      	mov	r3, r5
 8001d90:	f04f 0000 	mov.w	r0, #0
 8001d94:	f04f 0100 	mov.w	r1, #0
 8001d98:	0159      	lsls	r1, r3, #5
 8001d9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d9e:	0150      	lsls	r0, r2, #5
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4621      	mov	r1, r4
 8001da6:	1a51      	subs	r1, r2, r1
 8001da8:	6139      	str	r1, [r7, #16]
 8001daa:	4629      	mov	r1, r5
 8001dac:	eb63 0301 	sbc.w	r3, r3, r1
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001dbe:	4659      	mov	r1, fp
 8001dc0:	018b      	lsls	r3, r1, #6
 8001dc2:	4651      	mov	r1, sl
 8001dc4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dc8:	4651      	mov	r1, sl
 8001dca:	018a      	lsls	r2, r1, #6
 8001dcc:	4651      	mov	r1, sl
 8001dce:	ebb2 0801 	subs.w	r8, r2, r1
 8001dd2:	4659      	mov	r1, fp
 8001dd4:	eb63 0901 	sbc.w	r9, r3, r1
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001de4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001de8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dec:	4690      	mov	r8, r2
 8001dee:	4699      	mov	r9, r3
 8001df0:	4623      	mov	r3, r4
 8001df2:	eb18 0303 	adds.w	r3, r8, r3
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	462b      	mov	r3, r5
 8001dfa:	eb49 0303 	adc.w	r3, r9, r3
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e0c:	4629      	mov	r1, r5
 8001e0e:	028b      	lsls	r3, r1, #10
 8001e10:	4621      	mov	r1, r4
 8001e12:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e16:	4621      	mov	r1, r4
 8001e18:	028a      	lsls	r2, r1, #10
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e22:	2200      	movs	r2, #0
 8001e24:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e26:	647a      	str	r2, [r7, #68]	@ 0x44
 8001e28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001e2c:	f7fe f9ea 	bl	8000204 <__aeabi_uldivmod>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4613      	mov	r3, r2
 8001e36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e3a:	4b60      	ldr	r3, [pc, #384]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x348>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	0c1b      	lsrs	r3, r3, #16
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	3301      	adds	r3, #1
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001e4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001e50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001e5c:	e0a6      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e5e:	4b57      	ldr	r3, [pc, #348]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x348>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e6a:	4b54      	ldr	r3, [pc, #336]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x348>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d02a      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e76:	4b51      	ldr	r3, [pc, #324]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x348>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	099b      	lsrs	r3, r3, #6
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4b4e      	ldr	r3, [pc, #312]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001e8c:	fb03 f201 	mul.w	r2, r3, r1
 8001e90:	2300      	movs	r3, #0
 8001e92:	fb00 f303 	mul.w	r3, r0, r3
 8001e96:	4413      	add	r3, r2
 8001e98:	4a4a      	ldr	r2, [pc, #296]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001e9a:	fba0 1202 	umull	r1, r2, r0, r2
 8001e9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001ea0:	460a      	mov	r2, r1
 8001ea2:	673a      	str	r2, [r7, #112]	@ 0x70
 8001ea4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001ea6:	4413      	add	r3, r2
 8001ea8:	677b      	str	r3, [r7, #116]	@ 0x74
 8001eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001eae:	2200      	movs	r2, #0
 8001eb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001eb2:	637a      	str	r2, [r7, #52]	@ 0x34
 8001eb4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001eb8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001ebc:	f7fe f9a2 	bl	8000204 <__aeabi_uldivmod>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001eca:	e05b      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ecc:	4b3b      	ldr	r3, [pc, #236]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x348>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	099b      	lsrs	r3, r3, #6
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ed6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ede:	623b      	str	r3, [r7, #32]
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ee4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ee8:	4642      	mov	r2, r8
 8001eea:	464b      	mov	r3, r9
 8001eec:	f04f 0000 	mov.w	r0, #0
 8001ef0:	f04f 0100 	mov.w	r1, #0
 8001ef4:	0159      	lsls	r1, r3, #5
 8001ef6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001efa:	0150      	lsls	r0, r2, #5
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4641      	mov	r1, r8
 8001f02:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f06:	4649      	mov	r1, r9
 8001f08:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f20:	ebb2 040a 	subs.w	r4, r2, sl
 8001f24:	eb63 050b 	sbc.w	r5, r3, fp
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	00eb      	lsls	r3, r5, #3
 8001f32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f36:	00e2      	lsls	r2, r4, #3
 8001f38:	4614      	mov	r4, r2
 8001f3a:	461d      	mov	r5, r3
 8001f3c:	4643      	mov	r3, r8
 8001f3e:	18e3      	adds	r3, r4, r3
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	464b      	mov	r3, r9
 8001f44:	eb45 0303 	adc.w	r3, r5, r3
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f56:	4629      	mov	r1, r5
 8001f58:	028b      	lsls	r3, r1, #10
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f60:	4621      	mov	r1, r4
 8001f62:	028a      	lsls	r2, r1, #10
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	61bb      	str	r3, [r7, #24]
 8001f70:	61fa      	str	r2, [r7, #28]
 8001f72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f76:	f7fe f945 	bl	8000204 <__aeabi_uldivmod>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4613      	mov	r3, r2
 8001f80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f84:	4b0d      	ldr	r3, [pc, #52]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x348>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	0f1b      	lsrs	r3, r3, #28
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001f92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001fa2:	e003      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001fa6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001faa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3798      	adds	r7, #152	@ 0x98
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	00f42400 	.word	0x00f42400
 8001fc4:	017d7840 	.word	0x017d7840

08001fc8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e28d      	b.n	80024f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 8083 	beq.w	80020ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001fe8:	4b94      	ldr	r3, [pc, #592]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 030c 	and.w	r3, r3, #12
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d019      	beq.n	8002028 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ff4:	4b91      	ldr	r3, [pc, #580]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
        || \
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d106      	bne.n	800200e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002000:	4b8e      	ldr	r3, [pc, #568]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002008:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800200c:	d00c      	beq.n	8002028 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800200e:	4b8b      	ldr	r3, [pc, #556]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002016:	2b0c      	cmp	r3, #12
 8002018:	d112      	bne.n	8002040 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800201a:	4b88      	ldr	r3, [pc, #544]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002022:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002026:	d10b      	bne.n	8002040 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002028:	4b84      	ldr	r3, [pc, #528]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d05b      	beq.n	80020ec <HAL_RCC_OscConfig+0x124>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d157      	bne.n	80020ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e25a      	b.n	80024f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002048:	d106      	bne.n	8002058 <HAL_RCC_OscConfig+0x90>
 800204a:	4b7c      	ldr	r3, [pc, #496]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a7b      	ldr	r2, [pc, #492]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 8002050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	e01d      	b.n	8002094 <HAL_RCC_OscConfig+0xcc>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0xb4>
 8002062:	4b76      	ldr	r3, [pc, #472]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a75      	ldr	r2, [pc, #468]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 8002068:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	4b73      	ldr	r3, [pc, #460]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a72      	ldr	r2, [pc, #456]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 8002074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e00b      	b.n	8002094 <HAL_RCC_OscConfig+0xcc>
 800207c:	4b6f      	ldr	r3, [pc, #444]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a6e      	ldr	r2, [pc, #440]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 8002082:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	4b6c      	ldr	r3, [pc, #432]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a6b      	ldr	r2, [pc, #428]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 800208e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d013      	beq.n	80020c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7fe fb48 	bl	8000730 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a4:	f7fe fb44 	bl	8000730 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b64      	cmp	r3, #100	@ 0x64
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e21f      	b.n	80024f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b6:	4b61      	ldr	r3, [pc, #388]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0xdc>
 80020c2:	e014      	b.n	80020ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7fe fb34 	bl	8000730 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020cc:	f7fe fb30 	bl	8000730 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	@ 0x64
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e20b      	b.n	80024f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020de:	4b57      	ldr	r3, [pc, #348]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x104>
 80020ea:	e000      	b.n	80020ee <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d06f      	beq.n	80021da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80020fa:	4b50      	ldr	r3, [pc, #320]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	2b00      	cmp	r3, #0
 8002104:	d017      	beq.n	8002136 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002106:	4b4d      	ldr	r3, [pc, #308]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
        || \
 800210e:	2b08      	cmp	r3, #8
 8002110:	d105      	bne.n	800211e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002112:	4b4a      	ldr	r3, [pc, #296]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00b      	beq.n	8002136 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800211e:	4b47      	ldr	r3, [pc, #284]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002126:	2b0c      	cmp	r3, #12
 8002128:	d11c      	bne.n	8002164 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800212a:	4b44      	ldr	r3, [pc, #272]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d116      	bne.n	8002164 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002136:	4b41      	ldr	r3, [pc, #260]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d005      	beq.n	800214e <HAL_RCC_OscConfig+0x186>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d001      	beq.n	800214e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e1d3      	b.n	80024f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214e:	4b3b      	ldr	r3, [pc, #236]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4937      	ldr	r1, [pc, #220]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002162:	e03a      	b.n	80021da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d020      	beq.n	80021ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800216c:	4b34      	ldr	r3, [pc, #208]	@ (8002240 <HAL_RCC_OscConfig+0x278>)
 800216e:	2201      	movs	r2, #1
 8002170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002172:	f7fe fadd 	bl	8000730 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217a:	f7fe fad9 	bl	8000730 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e1b4      	b.n	80024f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218c:	4b2b      	ldr	r3, [pc, #172]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f0      	beq.n	800217a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002198:	4b28      	ldr	r3, [pc, #160]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4925      	ldr	r1, [pc, #148]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	600b      	str	r3, [r1, #0]
 80021ac:	e015      	b.n	80021da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ae:	4b24      	ldr	r3, [pc, #144]	@ (8002240 <HAL_RCC_OscConfig+0x278>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7fe fabc 	bl	8000730 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021bc:	f7fe fab8 	bl	8000730 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e193      	b.n	80024f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ce:	4b1b      	ldr	r3, [pc, #108]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d036      	beq.n	8002254 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d016      	beq.n	800221c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ee:	4b15      	ldr	r3, [pc, #84]	@ (8002244 <HAL_RCC_OscConfig+0x27c>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f4:	f7fe fa9c 	bl	8000730 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021fc:	f7fe fa98 	bl	8000730 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e173      	b.n	80024f6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220e:	4b0b      	ldr	r3, [pc, #44]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 8002210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0x234>
 800221a:	e01b      	b.n	8002254 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800221c:	4b09      	ldr	r3, [pc, #36]	@ (8002244 <HAL_RCC_OscConfig+0x27c>)
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002222:	f7fe fa85 	bl	8000730 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002228:	e00e      	b.n	8002248 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222a:	f7fe fa81 	bl	8000730 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d907      	bls.n	8002248 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e15c      	b.n	80024f6 <HAL_RCC_OscConfig+0x52e>
 800223c:	40023800 	.word	0x40023800
 8002240:	42470000 	.word	0x42470000
 8002244:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002248:	4b8a      	ldr	r3, [pc, #552]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 800224a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1ea      	bne.n	800222a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 8097 	beq.w	8002390 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002262:	2300      	movs	r3, #0
 8002264:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002266:	4b83      	ldr	r3, [pc, #524]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10f      	bne.n	8002292 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	4b7f      	ldr	r3, [pc, #508]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	4a7e      	ldr	r2, [pc, #504]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 800227c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002280:	6413      	str	r3, [r2, #64]	@ 0x40
 8002282:	4b7c      	ldr	r3, [pc, #496]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228e:	2301      	movs	r3, #1
 8002290:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002292:	4b79      	ldr	r3, [pc, #484]	@ (8002478 <HAL_RCC_OscConfig+0x4b0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d118      	bne.n	80022d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800229e:	4b76      	ldr	r3, [pc, #472]	@ (8002478 <HAL_RCC_OscConfig+0x4b0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a75      	ldr	r2, [pc, #468]	@ (8002478 <HAL_RCC_OscConfig+0x4b0>)
 80022a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022aa:	f7fe fa41 	bl	8000730 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b2:	f7fe fa3d 	bl	8000730 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e118      	b.n	80024f6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c4:	4b6c      	ldr	r3, [pc, #432]	@ (8002478 <HAL_RCC_OscConfig+0x4b0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x31e>
 80022d8:	4b66      	ldr	r3, [pc, #408]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022dc:	4a65      	ldr	r2, [pc, #404]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80022e4:	e01c      	b.n	8002320 <HAL_RCC_OscConfig+0x358>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b05      	cmp	r3, #5
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0x340>
 80022ee:	4b61      	ldr	r3, [pc, #388]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f2:	4a60      	ldr	r2, [pc, #384]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80022fa:	4b5e      	ldr	r3, [pc, #376]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fe:	4a5d      	ldr	r2, [pc, #372]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6713      	str	r3, [r2, #112]	@ 0x70
 8002306:	e00b      	b.n	8002320 <HAL_RCC_OscConfig+0x358>
 8002308:	4b5a      	ldr	r3, [pc, #360]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 800230a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230c:	4a59      	ldr	r2, [pc, #356]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 800230e:	f023 0301 	bic.w	r3, r3, #1
 8002312:	6713      	str	r3, [r2, #112]	@ 0x70
 8002314:	4b57      	ldr	r3, [pc, #348]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002318:	4a56      	ldr	r2, [pc, #344]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 800231a:	f023 0304 	bic.w	r3, r3, #4
 800231e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d015      	beq.n	8002354 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002328:	f7fe fa02 	bl	8000730 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232e:	e00a      	b.n	8002346 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002330:	f7fe f9fe 	bl	8000730 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e0d7      	b.n	80024f6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002346:	4b4b      	ldr	r3, [pc, #300]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 8002348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0ee      	beq.n	8002330 <HAL_RCC_OscConfig+0x368>
 8002352:	e014      	b.n	800237e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002354:	f7fe f9ec 	bl	8000730 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800235a:	e00a      	b.n	8002372 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235c:	f7fe f9e8 	bl	8000730 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800236a:	4293      	cmp	r3, r2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e0c1      	b.n	80024f6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002372:	4b40      	ldr	r3, [pc, #256]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1ee      	bne.n	800235c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800237e:	7dfb      	ldrb	r3, [r7, #23]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d105      	bne.n	8002390 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002384:	4b3b      	ldr	r3, [pc, #236]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 8002386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002388:	4a3a      	ldr	r2, [pc, #232]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 800238a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800238e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80ad 	beq.w	80024f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800239a:	4b36      	ldr	r3, [pc, #216]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d060      	beq.n	8002468 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d145      	bne.n	800243a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ae:	4b33      	ldr	r3, [pc, #204]	@ (800247c <HAL_RCC_OscConfig+0x4b4>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7fe f9bc 	bl	8000730 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023bc:	f7fe f9b8 	bl	8000730 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e093      	b.n	80024f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ce:	4b29      	ldr	r3, [pc, #164]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69da      	ldr	r2, [r3, #28]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e8:	019b      	lsls	r3, r3, #6
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f0:	085b      	lsrs	r3, r3, #1
 80023f2:	3b01      	subs	r3, #1
 80023f4:	041b      	lsls	r3, r3, #16
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fc:	061b      	lsls	r3, r3, #24
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002404:	071b      	lsls	r3, r3, #28
 8002406:	491b      	ldr	r1, [pc, #108]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800240c:	4b1b      	ldr	r3, [pc, #108]	@ (800247c <HAL_RCC_OscConfig+0x4b4>)
 800240e:	2201      	movs	r2, #1
 8002410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7fe f98d 	bl	8000730 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241a:	f7fe f989 	bl	8000730 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e064      	b.n	80024f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242c:	4b11      	ldr	r3, [pc, #68]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f0      	beq.n	800241a <HAL_RCC_OscConfig+0x452>
 8002438:	e05c      	b.n	80024f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243a:	4b10      	ldr	r3, [pc, #64]	@ (800247c <HAL_RCC_OscConfig+0x4b4>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7fe f976 	bl	8000730 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002448:	f7fe f972 	bl	8000730 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e04d      	b.n	80024f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245a:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <HAL_RCC_OscConfig+0x4ac>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x480>
 8002466:	e045      	b.n	80024f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d107      	bne.n	8002480 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e040      	b.n	80024f6 <HAL_RCC_OscConfig+0x52e>
 8002474:	40023800 	.word	0x40023800
 8002478:	40007000 	.word	0x40007000
 800247c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002480:	4b1f      	ldr	r3, [pc, #124]	@ (8002500 <HAL_RCC_OscConfig+0x538>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d030      	beq.n	80024f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002498:	429a      	cmp	r2, r3
 800249a:	d129      	bne.n	80024f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d122      	bne.n	80024f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024b0:	4013      	ands	r3, r2
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d119      	bne.n	80024f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c6:	085b      	lsrs	r3, r3, #1
 80024c8:	3b01      	subs	r3, #1
 80024ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d10f      	bne.n	80024f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024dc:	429a      	cmp	r2, r3
 80024de:	d107      	bne.n	80024f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800

08002504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002504:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800253c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002508:	480d      	ldr	r0, [pc, #52]	@ (8002540 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800250a:	490e      	ldr	r1, [pc, #56]	@ (8002544 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800250c:	4a0e      	ldr	r2, [pc, #56]	@ (8002548 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800250e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002510:	e002      	b.n	8002518 <LoopCopyDataInit>

08002512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002516:	3304      	adds	r3, #4

08002518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800251a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800251c:	d3f9      	bcc.n	8002512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800251e:	4a0b      	ldr	r2, [pc, #44]	@ (800254c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002520:	4c0b      	ldr	r4, [pc, #44]	@ (8002550 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002524:	e001      	b.n	800252a <LoopFillZerobss>

08002526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002528:	3204      	adds	r2, #4

0800252a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800252a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800252c:	d3fb      	bcc.n	8002526 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800252e:	f7fe f85b 	bl	80005e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002532:	f000 fa37 	bl	80029a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002536:	f000 f80e 	bl	8002556 <main>
  bx  lr    
 800253a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800253c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002544:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002548:	08002a2c 	.word	0x08002a2c
  ldr r2, =_sbss
 800254c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002550:	2000009c 	.word	0x2000009c

08002554 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002554:	e7fe      	b.n	8002554 <ADC_IRQHandler>

08002556 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization: global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 800255a:	f7fe f87b 	bl	8000654 <HAL_Init>

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 800255e:	f000 f8d7 	bl	8002710 <SystemClock_Config>
  
  /* Configure LED1 and LED3 */
  BSP_LED_Init(LED1);
 8002562:	2000      	movs	r0, #0
 8002564:	f7fd ffc6 	bl	80004f4 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8002568:	2001      	movs	r0, #1
 800256a:	f7fd ffc3 	bl	80004f4 <BSP_LED_Init>

  if(CAN_Polling() == HAL_OK)
 800256e:	f000 f80d 	bl	800258c <CAN_Polling>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d103      	bne.n	8002580 <main+0x2a>
  {
    /* OK: Turn on LED1 */
    BSP_LED_On(LED1);
 8002578:	2000      	movs	r0, #0
 800257a:	f7fd fff9 	bl	8000570 <BSP_LED_On>
 800257e:	e003      	b.n	8002588 <main+0x32>
  }
  else
  {
    /* KO: Turn on LED3 */
    BSP_LED_On(LED3);
 8002580:	2001      	movs	r0, #1
 8002582:	f7fd fff5 	bl	8000570 <BSP_LED_On>
  }
  
  /* Infinite loop */
  while (1)
 8002586:	bf00      	nop
 8002588:	bf00      	nop
 800258a:	e7fd      	b.n	8002588 <main+0x32>

0800258c <CAN_Polling>:
  * @brief  Configures the CAN, transmit and receive by polling
  * @param  None
  * @retval PASSED if the reception is well done, FAILED in other case
  */
HAL_StatusTypeDef CAN_Polling(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08a      	sub	sp, #40	@ 0x28
 8002590:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef  sFilterConfig;
  
  /*##-1- Configure the CAN peripheral #######################################*/
  CanHandle.Instance = CANx;
 8002592:	4b58      	ldr	r3, [pc, #352]	@ (80026f4 <CAN_Polling+0x168>)
 8002594:	4a58      	ldr	r2, [pc, #352]	@ (80026f8 <CAN_Polling+0x16c>)
 8002596:	601a      	str	r2, [r3, #0]
    
  CanHandle.Init.TimeTriggeredMode = DISABLE;
 8002598:	4b56      	ldr	r3, [pc, #344]	@ (80026f4 <CAN_Polling+0x168>)
 800259a:	2200      	movs	r2, #0
 800259c:	761a      	strb	r2, [r3, #24]
  CanHandle.Init.AutoBusOff = DISABLE;
 800259e:	4b55      	ldr	r3, [pc, #340]	@ (80026f4 <CAN_Polling+0x168>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	765a      	strb	r2, [r3, #25]
  CanHandle.Init.AutoWakeUp = DISABLE;
 80025a4:	4b53      	ldr	r3, [pc, #332]	@ (80026f4 <CAN_Polling+0x168>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	769a      	strb	r2, [r3, #26]
  CanHandle.Init.AutoRetransmission = ENABLE;
 80025aa:	4b52      	ldr	r3, [pc, #328]	@ (80026f4 <CAN_Polling+0x168>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	76da      	strb	r2, [r3, #27]
  CanHandle.Init.ReceiveFifoLocked = DISABLE;
 80025b0:	4b50      	ldr	r3, [pc, #320]	@ (80026f4 <CAN_Polling+0x168>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	771a      	strb	r2, [r3, #28]
  CanHandle.Init.TransmitFifoPriority = DISABLE;
 80025b6:	4b4f      	ldr	r3, [pc, #316]	@ (80026f4 <CAN_Polling+0x168>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	775a      	strb	r2, [r3, #29]
  CanHandle.Init.Mode = CAN_MODE_LOOPBACK;
 80025bc:	4b4d      	ldr	r3, [pc, #308]	@ (80026f4 <CAN_Polling+0x168>)
 80025be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025c2:	609a      	str	r2, [r3, #8]
  CanHandle.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80025c4:	4b4b      	ldr	r3, [pc, #300]	@ (80026f4 <CAN_Polling+0x168>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]
  CanHandle.Init.TimeSeg1 = CAN_BS1_6TQ;
 80025ca:	4b4a      	ldr	r3, [pc, #296]	@ (80026f4 <CAN_Polling+0x168>)
 80025cc:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 80025d0:	611a      	str	r2, [r3, #16]
  CanHandle.Init.TimeSeg2 = CAN_BS2_2TQ;
 80025d2:	4b48      	ldr	r3, [pc, #288]	@ (80026f4 <CAN_Polling+0x168>)
 80025d4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80025d8:	615a      	str	r2, [r3, #20]
  CanHandle.Init.Prescaler = 5;
 80025da:	4b46      	ldr	r3, [pc, #280]	@ (80026f4 <CAN_Polling+0x168>)
 80025dc:	2205      	movs	r2, #5
 80025de:	605a      	str	r2, [r3, #4]
  
  if(HAL_CAN_Init(&CanHandle) != HAL_OK)
 80025e0:	4844      	ldr	r0, [pc, #272]	@ (80026f4 <CAN_Polling+0x168>)
 80025e2:	f7fe f8d5 	bl	8000790 <HAL_CAN_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <CAN_Polling+0x64>
  {
    /* Initialization Error */
    Error_Handler();
 80025ec:	f000 f904 	bl	80027f8 <Error_Handler>
  }

  /*##-2- Configure the CAN Filter ###########################################*/
  sFilterConfig.FilterBank = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80025f8:	2301      	movs	r3, #1
 80025fa:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80025fc:	2300      	movs	r3, #0
 80025fe:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8002600:	2300      	movs	r3, #0
 8002602:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002604:	2300      	movs	r3, #0
 8002606:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800260c:	2300      	movs	r3, #0
 800260e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8002610:	2301      	movs	r3, #1
 8002612:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8002614:	230e      	movs	r3, #14
 8002616:	627b      	str	r3, [r7, #36]	@ 0x24
  
  if(HAL_CAN_ConfigFilter(&CanHandle, &sFilterConfig) != HAL_OK)
 8002618:	463b      	mov	r3, r7
 800261a:	4619      	mov	r1, r3
 800261c:	4835      	ldr	r0, [pc, #212]	@ (80026f4 <CAN_Polling+0x168>)
 800261e:	f7fe f9b3 	bl	8000988 <HAL_CAN_ConfigFilter>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <CAN_Polling+0xa0>
  {
    /* Filter configuration Error */
    Error_Handler();
 8002628:	f000 f8e6 	bl	80027f8 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&CanHandle) != HAL_OK)
 800262c:	4831      	ldr	r0, [pc, #196]	@ (80026f4 <CAN_Polling+0x168>)
 800262e:	f7fe fa8b 	bl	8000b48 <HAL_CAN_Start>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <CAN_Polling+0xb0>
  {
    /* Start Error */
    Error_Handler();
 8002638:	f000 f8de 	bl	80027f8 <Error_Handler>
  }

  /*##-4- Start the Transmission process #####################################*/
  TxHeader.StdId = 0x11;
 800263c:	4b2f      	ldr	r3, [pc, #188]	@ (80026fc <CAN_Polling+0x170>)
 800263e:	2211      	movs	r2, #17
 8002640:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8002642:	4b2e      	ldr	r3, [pc, #184]	@ (80026fc <CAN_Polling+0x170>)
 8002644:	2200      	movs	r2, #0
 8002646:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8002648:	4b2c      	ldr	r3, [pc, #176]	@ (80026fc <CAN_Polling+0x170>)
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 2;
 800264e:	4b2b      	ldr	r3, [pc, #172]	@ (80026fc <CAN_Polling+0x170>)
 8002650:	2202      	movs	r2, #2
 8002652:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8002654:	4b29      	ldr	r3, [pc, #164]	@ (80026fc <CAN_Polling+0x170>)
 8002656:	2200      	movs	r2, #0
 8002658:	751a      	strb	r2, [r3, #20]
  TxData[0] = 0xCA;
 800265a:	4b29      	ldr	r3, [pc, #164]	@ (8002700 <CAN_Polling+0x174>)
 800265c:	22ca      	movs	r2, #202	@ 0xca
 800265e:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0xFE;
 8002660:	4b27      	ldr	r3, [pc, #156]	@ (8002700 <CAN_Polling+0x174>)
 8002662:	22fe      	movs	r2, #254	@ 0xfe
 8002664:	705a      	strb	r2, [r3, #1]
  
  /* Request transmission */
  if(HAL_CAN_AddTxMessage(&CanHandle, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8002666:	4b27      	ldr	r3, [pc, #156]	@ (8002704 <CAN_Polling+0x178>)
 8002668:	4a25      	ldr	r2, [pc, #148]	@ (8002700 <CAN_Polling+0x174>)
 800266a:	4924      	ldr	r1, [pc, #144]	@ (80026fc <CAN_Polling+0x170>)
 800266c:	4821      	ldr	r0, [pc, #132]	@ (80026f4 <CAN_Polling+0x168>)
 800266e:	f7fe faaf 	bl	8000bd0 <HAL_CAN_AddTxMessage>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <CAN_Polling+0xf0>
  {
    /* Transmission request Error */
    Error_Handler();
 8002678:	f000 f8be 	bl	80027f8 <Error_Handler>
  }
  
  /* Wait transmission complete */
  while(HAL_CAN_GetTxMailboxesFreeLevel(&CanHandle) != 3) {}
 800267c:	bf00      	nop
 800267e:	481d      	ldr	r0, [pc, #116]	@ (80026f4 <CAN_Polling+0x168>)
 8002680:	f7fe fb76 	bl	8000d70 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002684:	4603      	mov	r3, r0
 8002686:	2b03      	cmp	r3, #3
 8002688:	d1f9      	bne.n	800267e <CAN_Polling+0xf2>

  /*##-5- Start the Reception process ########################################*/
  if(HAL_CAN_GetRxFifoFillLevel(&CanHandle, CAN_RX_FIFO0) != 1)
 800268a:	2100      	movs	r1, #0
 800268c:	4819      	ldr	r0, [pc, #100]	@ (80026f4 <CAN_Polling+0x168>)
 800268e:	f7fe fcc6 	bl	800101e <HAL_CAN_GetRxFifoFillLevel>
 8002692:	4603      	mov	r3, r0
 8002694:	2b01      	cmp	r3, #1
 8002696:	d001      	beq.n	800269c <CAN_Polling+0x110>
  {
    /* Reception Missing */
    Error_Handler();
 8002698:	f000 f8ae 	bl	80027f8 <Error_Handler>
  }

  if(HAL_CAN_GetRxMessage(&CanHandle, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800269c:	4b1a      	ldr	r3, [pc, #104]	@ (8002708 <CAN_Polling+0x17c>)
 800269e:	4a1b      	ldr	r2, [pc, #108]	@ (800270c <CAN_Polling+0x180>)
 80026a0:	2100      	movs	r1, #0
 80026a2:	4814      	ldr	r0, [pc, #80]	@ (80026f4 <CAN_Polling+0x168>)
 80026a4:	f7fe fb99 	bl	8000dda <HAL_CAN_GetRxMessage>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <CAN_Polling+0x126>
  {
    /* Reception Error */
    Error_Handler();
 80026ae:	f000 f8a3 	bl	80027f8 <Error_Handler>
  }

  if((RxHeader.StdId != 0x11)                     ||
 80026b2:	4b16      	ldr	r3, [pc, #88]	@ (800270c <CAN_Polling+0x180>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b11      	cmp	r3, #17
 80026b8:	d115      	bne.n	80026e6 <CAN_Polling+0x15a>
     (RxHeader.RTR != CAN_RTR_DATA)               ||
 80026ba:	4b14      	ldr	r3, [pc, #80]	@ (800270c <CAN_Polling+0x180>)
 80026bc:	68db      	ldr	r3, [r3, #12]
  if((RxHeader.StdId != 0x11)                     ||
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d111      	bne.n	80026e6 <CAN_Polling+0x15a>
     (RxHeader.IDE != CAN_ID_STD)                 ||
 80026c2:	4b12      	ldr	r3, [pc, #72]	@ (800270c <CAN_Polling+0x180>)
 80026c4:	689b      	ldr	r3, [r3, #8]
     (RxHeader.RTR != CAN_RTR_DATA)               ||
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10d      	bne.n	80026e6 <CAN_Polling+0x15a>
     (RxHeader.DLC != 2)                          ||
 80026ca:	4b10      	ldr	r3, [pc, #64]	@ (800270c <CAN_Polling+0x180>)
 80026cc:	691b      	ldr	r3, [r3, #16]
     (RxHeader.IDE != CAN_ID_STD)                 ||
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d109      	bne.n	80026e6 <CAN_Polling+0x15a>
     ((RxData[0]<<8 | RxData[1]) != 0xCAFE))
 80026d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002708 <CAN_Polling+0x17c>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002708 <CAN_Polling+0x17c>)
 80026da:	7852      	ldrb	r2, [r2, #1]
 80026dc:	4313      	orrs	r3, r2
     (RxHeader.DLC != 2)                          ||
 80026de:	f64c 22fe 	movw	r2, #51966	@ 0xcafe
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d001      	beq.n	80026ea <CAN_Polling+0x15e>
  {
    /* Rx message Error */
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <CAN_Polling+0x160>
  }

  return HAL_OK; /* Test Passed */
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3728      	adds	r7, #40	@ 0x28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	2000002c 	.word	0x2000002c
 80026f8:	40006400 	.word	0x40006400
 80026fc:	20000054 	.word	0x20000054
 8002700:	20000088 	.word	0x20000088
 8002704:	20000098 	.word	0x20000098
 8002708:	20000090 	.word	0x20000090
 800270c:	2000006c 	.word	0x2000006c

08002710 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b096      	sub	sp, #88	@ 0x58
 8002714:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 800271c:	2300      	movs	r3, #0
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	4b33      	ldr	r3, [pc, #204]	@ (80027f0 <SystemClock_Config+0xe0>)
 8002722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002724:	4a32      	ldr	r2, [pc, #200]	@ (80027f0 <SystemClock_Config+0xe0>)
 8002726:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800272a:	6413      	str	r3, [r2, #64]	@ 0x40
 800272c:	4b30      	ldr	r3, [pc, #192]	@ (80027f0 <SystemClock_Config+0xe0>)
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002738:	2300      	movs	r3, #0
 800273a:	607b      	str	r3, [r7, #4]
 800273c:	4b2d      	ldr	r3, [pc, #180]	@ (80027f4 <SystemClock_Config+0xe4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a2c      	ldr	r2, [pc, #176]	@ (80027f4 <SystemClock_Config+0xe4>)
 8002742:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	4b2a      	ldr	r3, [pc, #168]	@ (80027f4 <SystemClock_Config+0xe4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002750:	607b      	str	r3, [r7, #4]
 8002752:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002754:	2301      	movs	r3, #1
 8002756:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002758:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800275c:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800275e:	2302      	movs	r3, #2
 8002760:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002762:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002766:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002768:	2308      	movs	r3, #8
 800276a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 800276c:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8002770:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002772:	2302      	movs	r3, #2
 8002774:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002776:	2307      	movs	r3, #7
 8002778:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLR = 2;
 800277a:	2302      	movs	r3, #2
 800277c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800277e:	f107 030c 	add.w	r3, r7, #12
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fc20 	bl	8001fc8 <HAL_RCC_OscConfig>
 8002788:	4603      	mov	r3, r0
 800278a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  if(ret != HAL_OK)
 800278e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <SystemClock_Config+0x8a>
  {
    while(1) { ; }
 8002796:	bf00      	nop
 8002798:	e7fd      	b.n	8002796 <SystemClock_Config+0x86>
  }
  
  /* Activate the OverDrive to reach the 180 MHz Frequency */  
  ret = HAL_PWREx_EnableOverDrive();
 800279a:	f7ff f935 	bl	8001a08 <HAL_PWREx_EnableOverDrive>
 800279e:	4603      	mov	r3, r0
 80027a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  if(ret != HAL_OK)
 80027a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <SystemClock_Config+0xa0>
  {
    while(1) { ; }
 80027ac:	bf00      	nop
 80027ae:	e7fd      	b.n	80027ac <SystemClock_Config+0x9c>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80027b0:	230f      	movs	r3, #15
 80027b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027b4:	2302      	movs	r3, #2
 80027b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027b8:	2300      	movs	r3, #0
 80027ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 80027bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80027c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80027c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027c6:	653b      	str	r3, [r7, #80]	@ 0x50
  
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80027c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80027cc:	2105      	movs	r1, #5
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff f96a 	bl	8001aa8 <HAL_RCC_ClockConfig>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  if(ret != HAL_OK)
 80027da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <SystemClock_Config+0xd6>
  {
    while(1) { ; }
 80027e2:	bf00      	nop
 80027e4:	e7fd      	b.n	80027e2 <SystemClock_Config+0xd2>
  }
}
 80027e6:	bf00      	nop
 80027e8:	3758      	adds	r7, #88	@ 0x58
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40007000 	.word	0x40007000

080027f8 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* User may add here some code to deal with this error */
  /* Make LED3 blink to indicate error */
  while (1)
  {
    BSP_LED_On(LED3);
 80027fc:	2001      	movs	r0, #1
 80027fe:	f7fd feb7 	bl	8000570 <BSP_LED_On>
    HAL_Delay(100);
 8002802:	2064      	movs	r0, #100	@ 0x64
 8002804:	f7fd ffa0 	bl	8000748 <HAL_Delay>
    BSP_LED_Off(LED3);
 8002808:	2001      	movs	r0, #1
 800280a:	f7fd fecf 	bl	80005ac <BSP_LED_Off>
    HAL_Delay(100);
 800280e:	2064      	movs	r0, #100	@ 0x64
 8002810:	f7fd ff9a 	bl	8000748 <HAL_Delay>
    BSP_LED_On(LED3);
 8002814:	bf00      	nop
 8002816:	e7f1      	b.n	80027fc <Error_Handler+0x4>

08002818 <HAL_CAN_MspInit>:
  *           - Peripheral's GPIO Configuration  
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	@ 0x28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStruct;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* CAN1 Periph clock enable */
  CANx_CLK_ENABLE();
 8002820:	2300      	movs	r3, #0
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	4b1f      	ldr	r3, [pc, #124]	@ (80028a4 <HAL_CAN_MspInit+0x8c>)
 8002826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002828:	4a1e      	ldr	r2, [pc, #120]	@ (80028a4 <HAL_CAN_MspInit+0x8c>)
 800282a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800282e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002830:	4b1c      	ldr	r3, [pc, #112]	@ (80028a4 <HAL_CAN_MspInit+0x8c>)
 8002832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	693b      	ldr	r3, [r7, #16]
  /* Enable GPIO clock ****************************************/
  CANx_GPIO_CLK_ENABLE();
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	4b18      	ldr	r3, [pc, #96]	@ (80028a4 <HAL_CAN_MspInit+0x8c>)
 8002842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002844:	4a17      	ldr	r2, [pc, #92]	@ (80028a4 <HAL_CAN_MspInit+0x8c>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6313      	str	r3, [r2, #48]	@ 0x30
 800284c:	4b15      	ldr	r3, [pc, #84]	@ (80028a4 <HAL_CAN_MspInit+0x8c>)
 800284e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]
  
  /*##-2- Configure peripheral GPIO ##########################################*/ 
  /* CAN1 TX GPIO pin configuration */
  GPIO_InitStruct.Pin = CANx_TX_PIN;
 8002858:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800285c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285e:	2302      	movs	r3, #2
 8002860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002862:	2302      	movs	r3, #2
 8002864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002866:	2301      	movs	r3, #1
 8002868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate =  CANx_TX_AF;
 800286a:	2309      	movs	r3, #9
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24
  
  HAL_GPIO_Init(CANx_TX_GPIO_PORT, &GPIO_InitStruct);
 800286e:	f107 0314 	add.w	r3, r7, #20
 8002872:	4619      	mov	r1, r3
 8002874:	480c      	ldr	r0, [pc, #48]	@ (80028a8 <HAL_CAN_MspInit+0x90>)
 8002876:	f7fe ff19 	bl	80016ac <HAL_GPIO_Init>
  
  /* CAN1 RX GPIO pin configuration */
  GPIO_InitStruct.Pin = CANx_RX_PIN;
 800287a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800287e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002880:	2302      	movs	r3, #2
 8002882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002884:	2302      	movs	r3, #2
 8002886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002888:	2301      	movs	r3, #1
 800288a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate =  CANx_RX_AF;
 800288c:	2309      	movs	r3, #9
 800288e:	627b      	str	r3, [r7, #36]	@ 0x24
  
  HAL_GPIO_Init(CANx_TX_GPIO_PORT, &GPIO_InitStruct);
 8002890:	f107 0314 	add.w	r3, r7, #20
 8002894:	4619      	mov	r1, r3
 8002896:	4804      	ldr	r0, [pc, #16]	@ (80028a8 <HAL_CAN_MspInit+0x90>)
 8002898:	f7fe ff08 	bl	80016ac <HAL_GPIO_Init>
}
 800289c:	bf00      	nop
 800289e:	3728      	adds	r7, #40	@ 0x28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40020000 	.word	0x40020000

080028ac <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80028be:	bf00      	nop
 80028c0:	e7fd      	b.n	80028be <HardFault_Handler+0x4>

080028c2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80028c6:	bf00      	nop
 80028c8:	e7fd      	b.n	80028c6 <MemManage_Handler+0x4>

080028ca <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80028ce:	bf00      	nop
 80028d0:	e7fd      	b.n	80028ce <BusFault_Handler+0x4>

080028d2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80028d6:	bf00      	nop
 80028d8:	e7fd      	b.n	80028d6 <UsageFault_Handler+0x4>

080028da <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8002908:	f7fd fefe 	bl	8000708 <HAL_IncTick>
}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}

08002910 <DMA1_Stream5_IRQHandler>:
* @brief  This function handles DMA1 Stream 5 interrupt request.
* @param  None
* @retval None
*/
void DMA1_Stream5_IRQHandler(void)
{ 
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <DMA1_Stream6_IRQHandler>:
* @brief  This function handles DMA1 Stream 6 interrupt request.
* @param  None
* @retval None
*/
void DMA1_Stream6_IRQHandler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0
}
 8002922:	bf00      	nop
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <CAN1_RX0_IRQHandler>:
* @brief  This function handles CAN1 RX0 interrupt request.
* @param  None
* @retval None
*/
void CAN1_RX0_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&CanHandle);
 8002930:	4802      	ldr	r0, [pc, #8]	@ (800293c <CAN1_RX0_IRQHandler+0x10>)
 8002932:	f7fe fb9c 	bl	800106e <HAL_CAN_IRQHandler>
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	2000002c 	.word	0x2000002c

08002940 <CAN2_RX0_IRQHandler>:
* @brief  This function handles CAN2 RX0 interrupt request.
* @param  None
* @retval None
*/
void CAN2_RX0_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&CanHandle);
 8002944:	4802      	ldr	r0, [pc, #8]	@ (8002950 <CAN2_RX0_IRQHandler+0x10>)
 8002946:	f7fe fb92 	bl	800106e <HAL_CAN_IRQHandler>
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	2000002c 	.word	0x2000002c

08002954 <CAN1_RX1_IRQHandler>:
* @brief  This function handles CAN1 RX1 interrupt request.
* @param  None
* @retval None
*/
void CAN1_RX1_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&CanHandle);
 8002958:	4802      	ldr	r0, [pc, #8]	@ (8002964 <CAN1_RX1_IRQHandler+0x10>)
 800295a:	f7fe fb88 	bl	800106e <HAL_CAN_IRQHandler>
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	2000002c 	.word	0x2000002c

08002968 <CAN2_RX1_IRQHandler>:
* @brief  This function handles CAN2 RX1 interrupt request.
* @param  None
* @retval None
*/
void CAN2_RX1_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&CanHandle);
 800296c:	4802      	ldr	r0, [pc, #8]	@ (8002978 <CAN2_RX1_IRQHandler+0x10>)
 800296e:	f7fe fb7e 	bl	800106e <HAL_CAN_IRQHandler>
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	2000002c 	.word	0x2000002c

0800297c <CAN1_TX_IRQHandler>:
* @brief  This function handles CAN1 TX interrupt request.
* @param  None
* @retval None
*/
void CAN1_TX_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&CanHandle);
 8002980:	4802      	ldr	r0, [pc, #8]	@ (800298c <CAN1_TX_IRQHandler+0x10>)
 8002982:	f7fe fb74 	bl	800106e <HAL_CAN_IRQHandler>
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	2000002c 	.word	0x2000002c

08002990 <CAN2_TX_IRQHandler>:
* @brief  This function handles CAN2 TX interrupt request.
* @param  None
* @retval None
*/
void CAN2_TX_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
 HAL_CAN_IRQHandler(&CanHandle);
 8002994:	4802      	ldr	r0, [pc, #8]	@ (80029a0 <CAN2_TX_IRQHandler+0x10>)
 8002996:	f7fe fb6a 	bl	800106e <HAL_CAN_IRQHandler>
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	2000002c 	.word	0x2000002c

080029a4 <__libc_init_array>:
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	4d0d      	ldr	r5, [pc, #52]	@ (80029dc <__libc_init_array+0x38>)
 80029a8:	4c0d      	ldr	r4, [pc, #52]	@ (80029e0 <__libc_init_array+0x3c>)
 80029aa:	1b64      	subs	r4, r4, r5
 80029ac:	10a4      	asrs	r4, r4, #2
 80029ae:	2600      	movs	r6, #0
 80029b0:	42a6      	cmp	r6, r4
 80029b2:	d109      	bne.n	80029c8 <__libc_init_array+0x24>
 80029b4:	4d0b      	ldr	r5, [pc, #44]	@ (80029e4 <__libc_init_array+0x40>)
 80029b6:	4c0c      	ldr	r4, [pc, #48]	@ (80029e8 <__libc_init_array+0x44>)
 80029b8:	f000 f818 	bl	80029ec <_init>
 80029bc:	1b64      	subs	r4, r4, r5
 80029be:	10a4      	asrs	r4, r4, #2
 80029c0:	2600      	movs	r6, #0
 80029c2:	42a6      	cmp	r6, r4
 80029c4:	d105      	bne.n	80029d2 <__libc_init_array+0x2e>
 80029c6:	bd70      	pop	{r4, r5, r6, pc}
 80029c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029cc:	4798      	blx	r3
 80029ce:	3601      	adds	r6, #1
 80029d0:	e7ee      	b.n	80029b0 <__libc_init_array+0xc>
 80029d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029d6:	4798      	blx	r3
 80029d8:	3601      	adds	r6, #1
 80029da:	e7f2      	b.n	80029c2 <__libc_init_array+0x1e>
 80029dc:	08002a24 	.word	0x08002a24
 80029e0:	08002a24 	.word	0x08002a24
 80029e4:	08002a24 	.word	0x08002a24
 80029e8:	08002a28 	.word	0x08002a28

080029ec <_init>:
 80029ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ee:	bf00      	nop
 80029f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029f2:	bc08      	pop	{r3}
 80029f4:	469e      	mov	lr, r3
 80029f6:	4770      	bx	lr

080029f8 <_fini>:
 80029f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fa:	bf00      	nop
 80029fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029fe:	bc08      	pop	{r3}
 8002a00:	469e      	mov	lr, r3
 8002a02:	4770      	bx	lr
