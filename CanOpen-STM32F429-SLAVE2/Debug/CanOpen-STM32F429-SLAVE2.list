
CanOpen-STM32F429-SLAVE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b994  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006bc  0800bb44  0800bb44  0000cb44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c200  0800c200  0000e328  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c200  0800c200  0000d200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c208  0800c208  0000e328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c208  0800c208  0000d208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c20c  0800c20c  0000d20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000328  20000000  0800c210  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e328  2**0
                  CONTENTS
 10 .bss          00000280  20000328  20000328  0000e328  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005a8  200005a8  0000e328  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e328  2**0
                  CONTENTS, READONLY
 13 .debug_info   000225fb  00000000  00000000  0000e358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004eb0  00000000  00000000  00030953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  00035808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001018  00000000  00000000  00036c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a2db  00000000  00000000  00037c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d84d  00000000  00000000  00061f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1cdb  00000000  00000000  0007f780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0017145b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b40  00000000  00000000  001714a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00176fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000328 	.word	0x20000328
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bb2c 	.word	0x0800bb2c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000032c 	.word	0x2000032c
 80001ec:	0800bb2c 	.word	0x0800bb2c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <CO_getUint8>:
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t
CO_getUint8(const void* buf) {
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
    uint8_t value;
    (void)memmove((void*)&value, buf, sizeof(value));
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	73fb      	strb	r3, [r7, #15]
    return value;
 80005da:	7bfb      	ldrb	r3, [r7, #15]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <CO_setUint8>:
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t
CO_setUint8(void* buf, uint8_t value) {
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	70fb      	strb	r3, [r7, #3]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 80005f4:	78fa      	ldrb	r2, [r7, #3]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	701a      	strb	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 80005fa:	2301      	movs	r3, #1
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <CO_setUint32>:
    return (uint8_t)(sizeof(value));
}

/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t
CO_setUint32(void* buf, uint32_t value) {
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8000612:	683a      	ldr	r2, [r7, #0]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8000618:	2304      	movs	r3, #4
}
 800061a:	4618      	mov	r0, r3
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <OD_getIndex>:
 * @param entry Object Dictionary entry.
 *
 * @return OD index
 */
static inline uint16_t
OD_getIndex(const OD_entry_t* entry) {
 8000626:	b480      	push	{r7}
 8000628:	b083      	sub	sp, #12
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d002      	beq.n	800063a <OD_getIndex+0x14>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	e000      	b.n	800063c <OD_getIndex+0x16>
 800063a:	2300      	movs	r3, #0
}
 800063c:	4618      	mov	r0, r3
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <OD_extension_init>:
 * NULL, extension will be removed.
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d101      	bne.n	800065c <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8000658:	2305      	movs	r3, #5
 800065a:	e003      	b.n	8000664 <OD_extension_init+0x1c>
    }
    entry->extension = extension;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	683a      	ldr	r2, [r7, #0]
 8000660:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000662:	2300      	movs	r3, #0
}
 8000664:	4618      	mov	r0, r3
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <OD_get_u32>:
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af02      	add	r7, sp, #8
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	607a      	str	r2, [r7, #4]
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	460b      	mov	r3, r1
 800067e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000680:	7af9      	ldrb	r1, [r7, #11]
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	2304      	movs	r3, #4
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	68f8      	ldr	r0, [r7, #12]
 800068c:	f001 fbdc 	bl	8001e48 <OD_get_value>
 8000690:	4603      	mov	r3, r0
}
 8000692:	4618      	mov	r0, r3
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <OD_read_1014_default>:
 * Custom functions for read/write OD object "COB-ID EMCY"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1014_default(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 800069a:	b580      	push	{r7, lr}
 800069c:	b086      	sub	sp, #24
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	607a      	str	r2, [r7, #4]
 80006a6:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count < sizeof(uint32_t))
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d00c      	beq.n	80006c8 <OD_read_1014_default+0x2e>
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	7d1b      	ldrb	r3, [r3, #20]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d108      	bne.n	80006c8 <OD_read_1014_default+0x2e>
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d005      	beq.n	80006c8 <OD_read_1014_default+0x2e>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b03      	cmp	r3, #3
 80006c0:	d902      	bls.n	80006c8 <OD_read_1014_default+0x2e>
        || (countRead == NULL)) {
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d101      	bne.n	80006cc <OD_read_1014_default+0x32>
        return ODR_DEV_INCOMPAT;
 80006c8:	2309      	movs	r3, #9
 80006ca:	e01a      	b.n	8000702 <OD_read_1014_default+0x68>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0U : 0x80000000U;
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <OD_read_1014_default+0x44>
 80006da:	2300      	movs	r3, #0
 80006dc:	e001      	b.n	80006e2 <OD_read_1014_default+0x48>
 80006de:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80006e2:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + (uint32_t)em->nodeId;
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80006ea:	3380      	adds	r3, #128	@ 0x80
 80006ec:	693a      	ldr	r2, [r7, #16]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	613b      	str	r3, [r7, #16]
    (void)CO_setUint32(buf, COB_IDEmergency32);
 80006f2:	6939      	ldr	r1, [r7, #16]
 80006f4:	68b8      	ldr	r0, [r7, #8]
 80006f6:	f7ff ff87 	bl	8000608 <CO_setUint32>

    *countRead = sizeof(uint32_t);
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	2204      	movs	r2, #4
 80006fe:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <OD_read_1003>:
 * Custom functions for read/write OD object _OD_statusBits_, optional
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1003(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 800070a:	b580      	push	{r7, lr}
 800070c:	b086      	sub	sp, #24
 800070e:	af00      	add	r7, sp, #0
 8000710:	60f8      	str	r0, [r7, #12]
 8000712:	60b9      	str	r1, [r7, #8]
 8000714:	607a      	str	r2, [r7, #4]
 8000716:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL) || ((count < 4U) && (stream->subIndex > 0U))
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d00f      	beq.n	800073e <OD_read_1003+0x34>
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00c      	beq.n	800073e <OD_read_1003+0x34>
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d009      	beq.n	800073e <OD_read_1003+0x34>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2b03      	cmp	r3, #3
 800072e:	d803      	bhi.n	8000738 <OD_read_1003+0x2e>
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	7d1b      	ldrb	r3, [r3, #20]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d102      	bne.n	800073e <OD_read_1003+0x34>
        || (count < 1U)) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d101      	bne.n	8000742 <OD_read_1003+0x38>
        return ODR_DEV_INCOMPAT;
 800073e:	2309      	movs	r3, #9
 8000740:	e04c      	b.n	80007dc <OD_read_1003+0xd2>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2U) {
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	7f1b      	ldrb	r3, [r3, #28]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d801      	bhi.n	8000754 <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 8000750:	2309      	movs	r3, #9
 8000752:	e043      	b.n	80007dc <OD_read_1003+0xd2>
    }
    if (stream->subIndex == 0U) {
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	7d1b      	ldrb	r3, [r3, #20]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d10b      	bne.n	8000774 <OD_read_1003+0x6a>
        (void)CO_setUint8(buf, em->fifoCount);
 800075c:	693b      	ldr	r3, [r7, #16]
 800075e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000762:	4619      	mov	r1, r3
 8000764:	68b8      	ldr	r0, [r7, #8]
 8000766:	f7ff ff3f 	bl	80005e8 <CO_setUint8>

        *countRead = sizeof(uint8_t);
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	2201      	movs	r2, #1
 800076e:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8000770:	2300      	movs	r3, #0
 8000772:	e033      	b.n	80007dc <OD_read_1003+0xd2>
    } else if (stream->subIndex <= em->fifoCount) {
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	7d1a      	ldrb	r2, [r3, #20]
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800077e:	429a      	cmp	r2, r3
 8000780:	d82b      	bhi.n	80007da <OD_read_1003+0xd0>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - (int16_t)stream->subIndex;
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	7f5b      	ldrb	r3, [r3, #29]
 8000786:	461a      	mov	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	7d1b      	ldrb	r3, [r3, #20]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	b29b      	uxth	r3, r3
 8000790:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 8000792:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000796:	2b00      	cmp	r3, #0
 8000798:	da07      	bge.n	80007aa <OD_read_1003+0xa0>
            index += (int16_t)em->fifoSize;
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	7f1b      	ldrb	r3, [r3, #28]
 800079e:	461a      	mov	r2, r3
 80007a0:	8afb      	ldrh	r3, [r7, #22]
 80007a2:	4413      	add	r3, r2
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	82fb      	strh	r3, [r7, #22]
 80007a8:	e007      	b.n	80007ba <OD_read_1003+0xb0>
        } else if (index >= (int16_t)(em->fifoSize)) {
 80007aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	7f12      	ldrb	r2, [r2, #28]
 80007b2:	4293      	cmp	r3, r2
 80007b4:	db01      	blt.n	80007ba <OD_read_1003+0xb0>
            return ODR_DEV_INCOMPAT;
 80007b6:	2309      	movs	r3, #9
 80007b8:	e010      	b.n	80007dc <OD_read_1003+0xd2>
        } else { /* MISRA C 2004 14.10 */
        }
        (void)CO_setUint32(buf, em->fifo[index].msg);
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	699a      	ldr	r2, [r3, #24]
 80007be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007c2:	00db      	lsls	r3, r3, #3
 80007c4:	4413      	add	r3, r2
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4619      	mov	r1, r3
 80007ca:	68b8      	ldr	r0, [r7, #8]
 80007cc:	f7ff ff1c 	bl	8000608 <CO_setUint32>

        *countRead = sizeof(uint32_t);
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	2204      	movs	r2, #4
 80007d4:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e000      	b.n	80007dc <OD_read_1003+0xd2>
    } else {
        return ODR_NO_DATA;
 80007da:	2319      	movs	r3, #25
    }
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <OD_write_1003>:

static ODR_t
OD_write_1003(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
 80007f0:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != 1U) || (countWritten == NULL)) {
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d00c      	beq.n	8000812 <OD_write_1003+0x2e>
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	7d1b      	ldrb	r3, [r3, #20]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d108      	bne.n	8000812 <OD_write_1003+0x2e>
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d005      	beq.n	8000812 <OD_write_1003+0x2e>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d102      	bne.n	8000812 <OD_write_1003+0x2e>
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d101      	bne.n	8000816 <OD_write_1003+0x32>
        return ODR_DEV_INCOMPAT;
 8000812:	2309      	movs	r3, #9
 8000814:	e012      	b.n	800083c <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0U) {
 8000816:	68b8      	ldr	r0, [r7, #8]
 8000818:	f7ff fed8 	bl	80005cc <CO_getUint8>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 8000822:	230f      	movs	r3, #15
 8000824:	e00a      	b.n	800083c <OD_write_1003+0x58>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	2200      	movs	r2, #0
 8000830:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	2201      	movs	r2, #1
 8000838:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 800083a:	2300      	movs	r3, #0
}
 800083c:	4618      	mov	r0, r3
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <CO_EM_init>:
           OD_entry_t* OD_statusBits,
#endif
#if (((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0) || defined CO_DOXYGEN
           CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#endif
           const uint8_t nodeId, uint32_t* errInfo) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af02      	add	r7, sp, #8
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
 8000850:	603b      	str	r3, [r7, #0]
    (void)nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 8000852:	2300      	movs	r3, #0
 8000854:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((em == NULL) || (OD_1001_errReg == NULL)
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d01a      	beq.n	8000892 <CO_EM_init+0x4e>
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d017      	beq.n	8000892 <CO_EM_init+0x4e>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
        || ((fifo == NULL) && (fifoSize >= 2U))
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d103      	bne.n	8000870 <CO_EM_init+0x2c>
 8000868:	f897 3020 	ldrb.w	r3, [r7, #32]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d810      	bhi.n	8000892 <CO_EM_init+0x4e>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
        || (OD_1014_cobIdEm == NULL) || (CANdevTx == NULL) || (nodeId < 1U) || (nodeId > 127U)
 8000870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00d      	beq.n	8000892 <CO_EM_init+0x4e>
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d00a      	beq.n	8000892 <CO_EM_init+0x4e>
 800087c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000880:	2b00      	cmp	r3, #0
 8000882:	d006      	beq.n	8000892 <CO_EM_init+0x4e>
 8000884:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8000888:	2b00      	cmp	r3, #0
 800088a:	db02      	blt.n	8000892 <CO_EM_init+0x4e>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
        || (OD_1003_preDefErr == NULL)
 800088c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800088e:	2b00      	cmp	r3, #0
 8000890:	d102      	bne.n	8000898 <CO_EM_init+0x54>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
        || (CANdevRx == NULL)
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000892:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000896:	e0a7      	b.n	80009e8 <CO_EM_init+0x1a4>
    }

    /* clear the object */
    (void)memset(em, 0, sizeof(CO_EM_t));
 8000898:	2258      	movs	r2, #88	@ 0x58
 800089a:	2100      	movs	r1, #0
 800089c:	68f8      	ldr	r0, [r7, #12]
 800089e:	f00a fd0f 	bl	800b2c0 <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	68ba      	ldr	r2, [r7, #8]
 80008a6:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 80008a8:	2300      	movs	r3, #0
 80008aa:	2201      	movs	r2, #1
 80008ac:	2100      	movs	r1, #0
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f001 fb44 	bl	8001f3c <OD_getPtr>
 80008b4:	4602      	mov	r2, r0
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	68db      	ldr	r3, [r3, #12]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d10c      	bne.n	80008dc <CO_EM_init+0x98>
        if (errInfo != NULL) {
 80008c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d006      	beq.n	80008d6 <CO_EM_init+0x92>
            *errInfo = OD_getIndex(OD_1001_errReg);
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff feac 	bl	8000626 <OD_getIndex>
 80008ce:	4603      	mov	r3, r0
 80008d0:	461a      	mov	r2, r3
 80008d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008d4:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80008d6:	f06f 030b 	mvn.w	r3, #11
 80008da:	e085      	b.n	80009e8 <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    em->fifo = fifo;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	683a      	ldr	r2, [r7, #0]
 80008e8:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f897 2020 	ldrb.w	r2, [r7, #32]
 80008f0:	771a      	strb	r2, [r3, #28]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    ODR_t odRet;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 80008f2:	f107 0210 	add.w	r2, r7, #16
 80008f6:	2301      	movs	r3, #1
 80008f8:	2100      	movs	r1, #0
 80008fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80008fc:	f7ff feb8 	bl	8000670 <OD_get_u32>
 8000900:	4603      	mov	r3, r0
 8000902:	75bb      	strb	r3, [r7, #22]
    if ((odRet != ODR_OK) || ((COB_IDEmergency32 & 0x7FFFF800U) != 0U)) {
 8000904:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d104      	bne.n	8000916 <CO_EM_init+0xd2>
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	4b38      	ldr	r3, [pc, #224]	@ (80009f0 <CO_EM_init+0x1ac>)
 8000910:	4013      	ands	r3, r2
 8000912:	2b00      	cmp	r3, #0
 8000914:	d010      	beq.n	8000938 <CO_EM_init+0xf4>
        if (errInfo != NULL) {
 8000916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000918:	2b00      	cmp	r3, #0
 800091a:	d006      	beq.n	800092a <CO_EM_init+0xe6>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 800091c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800091e:	f7ff fe82 	bl	8000626 <OD_getIndex>
 8000922:	4603      	mov	r3, r0
 8000924:	461a      	mov	r2, r3
 8000926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000928:	601a      	str	r2, [r3, #0]
        }
        /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK) {
 800092a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d002      	beq.n	8000938 <CO_EM_init+0xf4>
            return CO_ERROR_OD_PARAMETERS;
 8000932:	f06f 030b 	mvn.w	r3, #11
 8000936:	e057      	b.n	80009e8 <CO_EM_init+0x1a4>
     * memory. In that case it is necessary to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) {
        producerCanId += nodeId;
    }
#else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + (uint16_t)nodeId;
 8000938:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800093c:	b29b      	uxth	r3, r3
 800093e:	3380      	adds	r3, #128	@ 0x80
 8000940:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000U) == 0U;
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	43db      	mvns	r3, r3
 8000946:	0fdb      	lsrs	r3, r3, #31
 8000948:	b2db      	uxtb	r3, r3
 800094a:	461a      	mov	r2, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	625a      	str	r2, [r3, #36]	@ 0x24

    em->OD_1014_extension.object = em;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	631a      	str	r2, [r3, #48]	@ 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	4a26      	ldr	r2, [pc, #152]	@ (80009f4 <CO_EM_init+0x1b0>)
 800095a:	635a      	str	r2, [r3, #52]	@ 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	4a26      	ldr	r2, [pc, #152]	@ (80009f8 <CO_EM_init+0x1b4>)
 8000960:	639a      	str	r2, [r3, #56]	@ 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	3330      	adds	r3, #48	@ 0x30
 8000966:	4619      	mov	r1, r3
 8000968:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800096a:	f7ff fe6d 	bl	8000648 <OD_extension_init>
 800096e:	4603      	mov	r3, r0
 8000970:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8000972:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d00c      	beq.n	8000994 <CO_EM_init+0x150>
        if (errInfo != NULL) {
 800097a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800097c:	2b00      	cmp	r3, #0
 800097e:	d006      	beq.n	800098e <CO_EM_init+0x14a>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 8000980:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000982:	f7ff fe50 	bl	8000626 <OD_getIndex>
 8000986:	4603      	mov	r3, r0
 8000988:	461a      	mov	r2, r3
 800098a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800098c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800098e:	f06f 030b 	mvn.w	r3, #11
 8000992:	e029      	b.n	80009e8 <CO_EM_init+0x1a4>
    }
#endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800099a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    em->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, producerCanId, false, 8U, false);
 800099e:	8aba      	ldrh	r2, [r7, #20]
 80009a0:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 80009a2:	2300      	movs	r3, #0
 80009a4:	9301      	str	r3, [sp, #4]
 80009a6:	2308      	movs	r3, #8
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2300      	movs	r3, #0
 80009ac:	68b8      	ldr	r0, [r7, #8]
 80009ae:	f006 fc07 	bl	80071c0 <CO_CANtxBufferInit>
 80009b2:	4602      	mov	r2, r0
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (em->CANtxBuff == NULL) {
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d102      	bne.n	80009c6 <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80009c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009c4:	e010      	b.n	80009e8 <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT */
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	641a      	str	r2, [r3, #64]	@ 0x40
    em->OD_1003_extension.read = OD_read_1003;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4a0b      	ldr	r2, [pc, #44]	@ (80009fc <CO_EM_init+0x1b8>)
 80009d0:	645a      	str	r2, [r3, #68]	@ 0x44
    em->OD_1003_extension.write = OD_write_1003;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a00 <CO_EM_init+0x1bc>)
 80009d6:	649a      	str	r2, [r3, #72]	@ 0x48
    (void)OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	3340      	adds	r3, #64	@ 0x40
 80009dc:	4619      	mov	r1, r3
 80009de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80009e0:	f7ff fe32 	bl	8000648 <OD_extension_init>
    em->pFunctSignalRx = NULL;
    /* configure SDO server CAN reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CO_CAN_ID_EMERGENCY, 0x780, false, (void*)em, CO_EM_receive);
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 80009e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	7ffff800 	.word	0x7ffff800
 80009f4:	0800069b 	.word	0x0800069b
 80009f8:	08001a33 	.word	0x08001a33
 80009fc:	0800070b 	.word	0x0800070b
 8000a00:	080007e5 	.word	0x080007e5

08000a04 <CO_EM_process>:
    }
}
#endif

void
CO_EM_process(CO_EM_t* em, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af02      	add	r7, sp, #8
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
 8000a10:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PROD_INHIBIT) == 0
    (void)timeDifference_us; /* may be unused */
#endif

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	8a5b      	ldrh	r3, [r3, #18]
 8000a18:	82bb      	strh	r3, [r7, #20]
    if (CANerrSt != em->CANerrorStatusOld) {
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	8a1b      	ldrh	r3, [r3, #16]
 8000a1e:	8aba      	ldrh	r2, [r7, #20]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	f000 80a3 	beq.w	8000b6c <CO_EM_process+0x168>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	8a1a      	ldrh	r2, [r3, #16]
 8000a2a:	8abb      	ldrh	r3, [r7, #20]
 8000a2c:	4053      	eors	r3, r2
 8000a2e:	827b      	strh	r3, [r7, #18]
        em->CANerrorStatusOld = CANerrSt;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	8aba      	ldrh	r2, [r7, #20]
 8000a34:	821a      	strh	r2, [r3, #16]

        if ((CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U) {
 8000a36:	8a7a      	ldrh	r2, [r7, #18]
 8000a38:	f240 1301 	movw	r3, #257	@ 0x101
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d010      	beq.n	8000a64 <CO_EM_process+0x60>
            CO_error(em, (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U, CO_EM_CAN_BUS_WARNING,
 8000a42:	8aba      	ldrh	r2, [r7, #20]
 8000a44:	f240 1301 	movw	r3, #257	@ 0x101
 8000a48:	4013      	ands	r3, r2
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	bf14      	ite	ne
 8000a4e:	2301      	movne	r3, #1
 8000a50:	2300      	moveq	r3, #0
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	4619      	mov	r1, r3
 8000a56:	2300      	movs	r3, #0
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	68f8      	ldr	r0, [r7, #12]
 8000a60:	f000 f91b 	bl	8000c9a <CO_error>
                     CO_EMC_NO_ERROR, 0);
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PASSIVE) != 0U) {
 8000a64:	8a7b      	ldrh	r3, [r7, #18]
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d010      	beq.n	8000a90 <CO_EM_process+0x8c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0U, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 8000a6e:	8abb      	ldrh	r3, [r7, #20]
 8000a70:	f003 0302 	and.w	r3, r3, #2
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	bf14      	ite	ne
 8000a78:	2301      	movne	r3, #1
 8000a7a:	2300      	moveq	r3, #0
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	4619      	mov	r1, r3
 8000a80:	2300      	movs	r3, #0
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	f248 1320 	movw	r3, #33056	@ 0x8120
 8000a88:	2207      	movs	r2, #7
 8000a8a:	68f8      	ldr	r0, [r7, #12]
 8000a8c:	f000 f905 	bl	8000c9a <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_BUS_OFF) != 0U) {
 8000a90:	8a7b      	ldrh	r3, [r7, #18]
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d010      	beq.n	8000abc <CO_EM_process+0xb8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0U, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);
 8000a9a:	8abb      	ldrh	r3, [r7, #20]
 8000a9c:	f003 0304 	and.w	r3, r3, #4
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	bf14      	ite	ne
 8000aa4:	2301      	movne	r3, #1
 8000aa6:	2300      	moveq	r3, #0
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	4619      	mov	r1, r3
 8000aac:	2300      	movs	r3, #0
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	f248 1340 	movw	r3, #33088	@ 0x8140
 8000ab4:	2212      	movs	r2, #18
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f000 f8ef 	bl	8000c9a <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_OVERFLOW) != 0U) {
 8000abc:	8a7b      	ldrh	r3, [r7, #18]
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d010      	beq.n	8000ae8 <CO_EM_process+0xe4>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0U, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 8000ac6:	8abb      	ldrh	r3, [r7, #20]
 8000ac8:	f003 0308 	and.w	r3, r3, #8
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	bf14      	ite	ne
 8000ad0:	2301      	movne	r3, #1
 8000ad2:	2300      	moveq	r3, #0
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	2300      	movs	r3, #0
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	f248 1310 	movw	r3, #33040	@ 0x8110
 8000ae0:	2214      	movs	r2, #20
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	f000 f8d9 	bl	8000c9a <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PDO_LATE) != 0U) {
 8000ae8:	8a7b      	ldrh	r3, [r7, #18]
 8000aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d010      	beq.n	8000b14 <CO_EM_process+0x110>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0U, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);
 8000af2:	8abb      	ldrh	r3, [r7, #20]
 8000af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	bf14      	ite	ne
 8000afc:	2301      	movne	r3, #1
 8000afe:	2300      	moveq	r3, #0
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	4619      	mov	r1, r3
 8000b04:	2300      	movs	r3, #0
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000b0c:	2215      	movs	r2, #21
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f000 f8c3 	bl	8000c9a <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_PASSIVE) != 0U) {
 8000b14:	8a7b      	ldrh	r3, [r7, #18]
 8000b16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d010      	beq.n	8000b40 <CO_EM_process+0x13c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0U, CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 8000b1e:	8abb      	ldrh	r3, [r7, #20]
 8000b20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf14      	ite	ne
 8000b28:	2301      	movne	r3, #1
 8000b2a:	2300      	moveq	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	4619      	mov	r1, r3
 8000b30:	2300      	movs	r3, #0
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	f248 1320 	movw	r3, #33056	@ 0x8120
 8000b38:	2206      	movs	r2, #6
 8000b3a:	68f8      	ldr	r0, [r7, #12]
 8000b3c:	f000 f8ad 	bl	8000c9a <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_OVERFLOW) != 0U) {
 8000b40:	8a7b      	ldrh	r3, [r7, #18]
 8000b42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d010      	beq.n	8000b6c <CO_EM_process+0x168>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0U, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 8000b4a:	8abb      	ldrh	r3, [r7, #20]
 8000b4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	bf14      	ite	ne
 8000b54:	2301      	movne	r3, #1
 8000b56:	2300      	moveq	r3, #0
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	f248 1310 	movw	r3, #33040	@ 0x8110
 8000b64:	2213      	movs	r2, #19
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	f000 f897 	bl	8000c9a <CO_error>
        }
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	75fb      	strb	r3, [r7, #23]
    if (CO_CONFIG_ERR_CONDITION_GENERIC) {
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	795b      	ldrb	r3, [r3, #5]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d003      	beq.n	8000b80 <CO_EM_process+0x17c>
        errorRegister |= (uint8_t)CO_ERR_REG_GENERIC_ERR;
 8000b78:	7dfb      	ldrb	r3, [r7, #23]
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE) {
        errorRegister |= (uint8_t)CO_ERR_REG_TEMPERATURE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION) {
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	789b      	ldrb	r3, [r3, #2]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d103      	bne.n	8000b90 <CO_EM_process+0x18c>
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	78db      	ldrb	r3, [r3, #3]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d003      	beq.n	8000b98 <CO_EM_process+0x194>
        errorRegister |= (uint8_t)CO_ERR_REG_COMMUNICATION;
 8000b90:	7dfb      	ldrb	r3, [r7, #23]
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE) {
        errorRegister |= (uint8_t)CO_ERR_REG_DEV_PROFILE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER) {
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	7a1b      	ldrb	r3, [r3, #8]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d103      	bne.n	8000ba8 <CO_EM_process+0x1a4>
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	7a5b      	ldrb	r3, [r3, #9]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d003      	beq.n	8000bb0 <CO_EM_process+0x1ac>
        errorRegister |= (uint8_t)CO_ERR_REG_MANUFACTURER;
 8000ba8:	7dfb      	ldrb	r3, [r7, #23]
 8000baa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bae:	75fb      	strb	r3, [r7, #23]
    }
    *em->errorRegister = errorRegister;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	7dfa      	ldrb	r2, [r7, #23]
 8000bb6:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d067      	beq.n	8000c8e <CO_EM_process+0x28a>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    if (em->fifoSize >= 2U) {
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	7f1b      	ldrb	r3, [r3, #28]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d965      	bls.n	8000c92 <CO_EM_process+0x28e>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	7f9b      	ldrb	r3, [r3, #30]
 8000bca:	747b      	strb	r3, [r7, #17]

        if (!em->CANtxBuff->bufferFull && (fifoPpPtr != em->fifoWrPtr)
            && (em->inhibitEmTimer >= em->inhibitEmTime_us)) {
            em->inhibitEmTimer = 0;
#else
        if ((!em->CANtxBuff->bufferFull) && (fifoPpPtr != em->fifoWrPtr)) {
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bd0:	691b      	ldr	r3, [r3, #16]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d15d      	bne.n	8000c92 <CO_EM_process+0x28e>
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	7f5b      	ldrb	r3, [r3, #29]
 8000bda:	7c7a      	ldrb	r2, [r7, #17]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d058      	beq.n	8000c92 <CO_EM_process+0x28e>
#endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t)errorRegister << 16;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	699a      	ldr	r2, [r3, #24]
 8000be4:	7c7b      	ldrb	r3, [r7, #17]
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	4413      	add	r3, r2
 8000bea:	6819      	ldr	r1, [r3, #0]
 8000bec:	7dfb      	ldrb	r3, [r7, #23]
 8000bee:	041a      	lsls	r2, r3, #16
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	6998      	ldr	r0, [r3, #24]
 8000bf4:	7c7b      	ldrb	r3, [r7, #17]
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	4403      	add	r3, r0
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            (void)memcpy((void*)em->CANtxBuff->data, (void*)&em->fifo[fifoPpPtr].msg, sizeof(em->CANtxBuff->data));
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c02:	1d58      	adds	r0, r3, #5
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	699a      	ldr	r2, [r3, #24]
 8000c08:	7c7b      	ldrb	r3, [r7, #17]
 8000c0a:	00db      	lsls	r3, r3, #3
 8000c0c:	4413      	add	r3, r2
 8000c0e:	2208      	movs	r2, #8
 8000c10:	4619      	mov	r1, r3
 8000c12:	f00a fbe0 	bl	800b3d6 <memcpy>
            (void)CO_CANsend(em->CANdevTx, em->CANtxBuff);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	695a      	ldr	r2, [r3, #20]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4610      	mov	r0, r2
 8000c22:	f006 fb47 	bl	80072b4 <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
#endif

            /* increment pointer */
            fifoPpPtr++;
 8000c26:	7c7b      	ldrb	r3, [r7, #17]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	747b      	strb	r3, [r7, #17]
            em->fifoPpPtr = (fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0U;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	7f1b      	ldrb	r3, [r3, #28]
 8000c30:	7c7a      	ldrb	r2, [r7, #17]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d201      	bcs.n	8000c3a <CO_EM_process+0x236>
 8000c36:	7c7a      	ldrb	r2, [r7, #17]
 8000c38:	e000      	b.n	8000c3c <CO_EM_process+0x238>
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all messages from fifo buffer are processed */
            if (em->fifoOverflow == 1U) {
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	7fdb      	ldrb	r3, [r3, #31]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d10c      	bne.n	8000c62 <CO_EM_process+0x25e>
                em->fifoOverflow = 2;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0);
 8000c4e:	2300      	movs	r3, #0
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c56:	2220      	movs	r2, #32
 8000c58:	2101      	movs	r1, #1
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f000 f81d 	bl	8000c9a <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 8000c60:	e017      	b.n	8000c92 <CO_EM_process+0x28e>
            } else if ((em->fifoOverflow == 2U) && (em->fifoPpPtr == em->fifoWrPtr)) {
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	7fdb      	ldrb	r3, [r3, #31]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d113      	bne.n	8000c92 <CO_EM_process+0x28e>
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	7f9a      	ldrb	r2, [r3, #30]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	7f5b      	ldrb	r3, [r3, #29]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d10d      	bne.n	8000c92 <CO_EM_process+0x28e>
                em->fifoOverflow = 0;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	2300      	movs	r3, #0
 8000c82:	2220      	movs	r2, #32
 8000c84:	2100      	movs	r1, #0
 8000c86:	68f8      	ldr	r0, [r7, #12]
 8000c88:	f000 f807 	bl	8000c9a <CO_error>
    return;
 8000c8c:	e001      	b.n	8000c92 <CO_EM_process+0x28e>
        return;
 8000c8e:	bf00      	nop
 8000c90:	e000      	b.n	8000c94 <CO_EM_process+0x290>
    return;
 8000c92:	bf00      	nop
}
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <CO_error>:

void
CO_error(CO_EM_t* em, bool_t setError, const uint8_t errorBit, uint16_t errorCode, uint32_t infoCode) {
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b08c      	sub	sp, #48	@ 0x30
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	60f8      	str	r0, [r7, #12]
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	460b      	mov	r3, r1
 8000caa:	71fb      	strb	r3, [r7, #7]
 8000cac:	4613      	mov	r3, r2
 8000cae:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) {
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f000 80b6 	beq.w	8000e24 <CO_error+0x18a>
        return;
    }

    uint8_t index = errorBit >> 3;
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	08db      	lsrs	r3, r3, #3
 8000cbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t bitmask = 1U << (errorBit & 0x7U);
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)) {
 8000cd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cd4:	2b09      	cmp	r3, #9
 8000cd6:	d90a      	bls.n	8000cee <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 8000cd8:	2305      	movs	r3, #5
 8000cda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        bitmask = 1U << (CO_EM_WRONG_ERROR_REPORT & 0x7U);
 8000cde:	2301      	movs	r3, #1
 8000ce0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 8000ce4:	f44f 43c2 	mov.w	r3, #24832	@ 0x6100
 8000ce8:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    uint8_t* errorStatusBits = &em->errorStatusBits[index];
 8000cee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 8000cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cfa:	781a      	ldrb	r2, [r3, #0]
 8000cfc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000d00:	4013      	ands	r3, r2
 8000d02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d004      	beq.n	8000d16 <CO_error+0x7c>
        if (errorStatusBitMasked != 0U) {
 8000d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d007      	beq.n	8000d24 <CO_error+0x8a>
            return;
 8000d14:	e089      	b.n	8000e2a <CO_error+0x190>
        }
    } else {
        if (errorStatusBitMasked == 0U) {
 8000d16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f000 8084 	beq.w	8000e28 <CO_error+0x18e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 8000d20:	2300      	movs	r3, #0
 8000d22:	80bb      	strh	r3, [r7, #4]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    /* prepare emergency message. Error register will be added in post-process */
    uint32_t errMsg = ((uint32_t)errorBit << 24) | CO_SWAP_16(errorCode);
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	061a      	lsls	r2, r3, #24
 8000d28:	88bb      	ldrh	r3, [r7, #4]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	623b      	str	r3, [r7, #32]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 8000d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d30:	61fb      	str	r3, [r7, #28]
#endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000d36:	f3ef 8210 	mrs	r2, PRIMASK
 8000d3a:	617a      	str	r2, [r7, #20]
  return(result);
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
    if (setError) {
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d008      	beq.n	8000d5c <CO_error+0xc2>
        *errorStatusBits |= bitmask;
 8000d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d4c:	781a      	ldrb	r2, [r3, #0]
 8000d4e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000d52:	4313      	orrs	r3, r2
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d58:	701a      	strb	r2, [r3, #0]
 8000d5a:	e00b      	b.n	8000d74 <CO_error+0xda>
    } else {
        *errorStatusBits &= ~bitmask;
 8000d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	b25a      	sxtb	r2, r3
 8000d62:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8000d66:	43db      	mvns	r3, r3
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	b25b      	sxtb	r3, r3
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d72:	701a      	strb	r2, [r3, #0]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    if (em->fifoSize >= 2U) {
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	7f1b      	ldrb	r3, [r3, #28]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d93c      	bls.n	8000df6 <CO_error+0x15c>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	7f5b      	ldrb	r3, [r3, #29]
 8000d80:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1U;
 8000d82:	7efb      	ldrb	r3, [r7, #27]
 8000d84:	3301      	adds	r3, #1
 8000d86:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	7f1b      	ldrb	r3, [r3, #28]
 8000d8e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d302      	bcc.n	8000d9c <CO_error+0x102>
            fifoWrPtrNext = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	7f9b      	ldrb	r3, [r3, #30]
 8000da0:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d103      	bne.n	8000db0 <CO_error+0x116>
            em->fifoOverflow = 1;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2201      	movs	r2, #1
 8000dac:	77da      	strb	r2, [r3, #31]
 8000dae:	e022      	b.n	8000df6 <CO_error+0x15c>
        } else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	699a      	ldr	r2, [r3, #24]
 8000db4:	7efb      	ldrb	r3, [r7, #27]
 8000db6:	00db      	lsls	r3, r3, #3
 8000db8:	4413      	add	r3, r2
 8000dba:	6a3a      	ldr	r2, [r7, #32]
 8000dbc:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	699a      	ldr	r2, [r3, #24]
 8000dc2:	7efb      	ldrb	r3, [r7, #27]
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	4413      	add	r3, r2
 8000dc8:	69fa      	ldr	r2, [r7, #28]
 8000dca:	605a      	str	r2, [r3, #4]
#endif
            em->fifoWrPtr = fifoWrPtrNext;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000dd2:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1U)) {
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	7f1b      	ldrb	r3, [r3, #28]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d207      	bcs.n	8000df6 <CO_error+0x15c>
                em->fifoCount++;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dec:	3301      	adds	r3, #1
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfc:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	f383 8810 	msr	PRIMASK, r3
}
 8000e04:	bf00      	nop

#if ((CO_CONFIG_EM)&CO_CONFIG_FLAG_CALLBACK_PRE) != 0
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    /* Optional signal to RTOS, which can resume task, which handles CO_EM_process */
    if ((em->pFunctSignalPre != NULL) && em->producerEnabled) {
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d00d      	beq.n	8000e2a <CO_error+0x190>
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d009      	beq.n	8000e2a <CO_error+0x190>
        em->pFunctSignalPre(em->functSignalObjectPre);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8000e1e:	4610      	mov	r0, r2
 8000e20:	4798      	blx	r3
 8000e22:	e002      	b.n	8000e2a <CO_error+0x190>
        return;
 8000e24:	bf00      	nop
 8000e26:	e000      	b.n	8000e2a <CO_error+0x190>
            return;
 8000e28:	bf00      	nop
    }
#endif
#endif
}
 8000e2a:	3730      	adds	r7, #48	@ 0x30
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	60fb      	str	r3, [r7, #12]
    return value;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d002      	beq.n	8000e60 <OD_getIndex+0x14>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	e000      	b.n	8000e62 <OD_getIndex+0x16>
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8000e7e:	2305      	movs	r3, #5
 8000e80:	e003      	b.n	8000e8a <OD_extension_init+0x1c>
    entry->extension = extension;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	683a      	ldr	r2, [r7, #0]
 8000e86:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b086      	sub	sp, #24
 8000e9a:	af02      	add	r7, sp, #8
 8000e9c:	60f8      	str	r0, [r7, #12]
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000ea6:	7af9      	ldrb	r1, [r7, #11]
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	2304      	movs	r3, #4
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	68f8      	ldr	r0, [r7, #12]
 8000eb2:	f000 ffc9 	bl	8001e48 <OD_get_value>
 8000eb6:	4603      	mov	r3, r0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_HBcons_receive(void* object, void* msg) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t* HBconsNode = object;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	791b      	ldrb	r3, [r3, #4]
 8000ed2:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	3305      	adds	r3, #5
 8000ed8:	60fb      	str	r3, [r7, #12]

    if (DLC == 1U) {
 8000eda:	7cfb      	ldrb	r3, [r7, #19]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d111      	bne.n	8000f04 <CO_HBcons_receive+0x44>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	b25a      	sxtb	r2, r3
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	2201      	movs	r2, #1
 8000eee:	60da      	str	r2, [r3, #12]
#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_FLAG_CALLBACK_PRE) != 0
        /* Optional signal to RTOS, which can resume task, which handles HBcons. */
        if (HBconsNode->pFunctSignalPre != NULL) {
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	691b      	ldr	r3, [r3, #16]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d005      	beq.n	8000f04 <CO_HBcons_receive+0x44>
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	697a      	ldr	r2, [r7, #20]
 8000efe:	6952      	ldr	r2, [r2, #20]
 8000f00:	4610      	mov	r0, r2
 8000f02:	4798      	blx	r3
        }
#endif
    }
}
 8000f04:	bf00      	nop
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <OD_write_1016>:
 * Custom function for writing OD object "Consumer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1016(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
 8000f18:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t* HBcons = stream->object;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	61fb      	str	r3, [r7, #28]

    if ((stream == NULL) || (buf == NULL) || (stream->subIndex < 1U)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d012      	beq.n	8000f4c <OD_write_1016+0x40>
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d00f      	beq.n	8000f4c <OD_write_1016+0x40>
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	7d1b      	ldrb	r3, [r3, #20]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d00b      	beq.n	8000f4c <OD_write_1016+0x40>
        || (stream->subIndex > HBcons->numberOfMonitoredNodes) || (count != sizeof(uint32_t))
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	7d1a      	ldrb	r2, [r3, #20]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	7a1b      	ldrb	r3, [r3, #8]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d805      	bhi.n	8000f4c <OD_write_1016+0x40>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	d102      	bne.n	8000f4c <OD_write_1016+0x40>
        || (countWritten == NULL)) {
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <OD_write_1016+0x44>
        return ODR_DEV_INCOMPAT;
 8000f4c:	2309      	movs	r3, #9
 8000f4e:	e020      	b.n	8000f92 <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 8000f50:	68b8      	ldr	r0, [r7, #8]
 8000f52:	f7ff ff6d 	bl	8000e30 <CO_getUint32>
 8000f56:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	0c1b      	lsrs	r3, r3, #16
 8000f5c:	75fb      	strb	r3, [r7, #23]
    uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1U, nodeId, consumer_time);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	7d1b      	ldrb	r3, [r3, #20]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	b2d9      	uxtb	r1, r3
 8000f6a:	8abb      	ldrh	r3, [r7, #20]
 8000f6c:	7dfa      	ldrb	r2, [r7, #23]
 8000f6e:	69f8      	ldr	r0, [r7, #28]
 8000f70:	f000 f8be 	bl	80010f0 <CO_HBconsumer_initEntry>
 8000f74:	4603      	mov	r3, r0
 8000f76:	74fb      	strb	r3, [r7, #19]
    if (ret != CO_ERROR_NO) {
 8000f78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 8000f80:	2308      	movs	r3, #8
 8000f82:	e006      	b.n	8000f92 <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f000 fd51 	bl	8001a32 <OD_writeOriginal>
 8000f90:	4603      	mov	r3, r0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3720      	adds	r7, #32
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <CO_HBconsumer_init>:
#endif

CO_ReturnError_t
CO_HBconsumer_init(CO_HBconsumer_t* HBcons, CO_EM_t* em, CO_HBconsNode_t* monitoredNodes, uint8_t monitoredNodesCount,
                   OD_entry_t* OD_1016_HBcons, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdxStart, uint32_t* errInfo) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if ((HBcons == NULL) || (em == NULL) || (monitoredNodes == NULL) || (OD_1016_HBcons == NULL)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00b      	beq.n	8000fc8 <CO_HBconsumer_init+0x2c>
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d008      	beq.n	8000fc8 <CO_HBconsumer_init+0x2c>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d005      	beq.n	8000fc8 <CO_HBconsumer_init+0x2c>
 8000fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d002      	beq.n	8000fc8 <CO_HBconsumer_init+0x2c>
        || (CANdevRx == NULL)) {
 8000fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <CO_HBconsumer_init+0x32>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000fc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fcc:	e087      	b.n	80010de <CO_HBconsumer_init+0x142>
    }

    /* Configure object variables */
    (void)memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 8000fce:	2230      	movs	r2, #48	@ 0x30
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f00a f974 	bl	800b2c0 <memset>
    HBcons->em = em;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fe8:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000fee:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
                                         ? (OD_1016_HBcons->subEntriesCount - 1U)
                                         : monitoredNodesCount;
 8000ff0:	78fa      	ldrb	r2, [r7, #3]
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 8000ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ff4:	789b      	ldrb	r3, [r3, #2]
 8000ff6:	3b01      	subs	r3, #1
                                         : monitoredNodesCount;
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	bf28      	it	cs
 8000ffc:	4613      	movcs	r3, r2
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	721a      	strb	r2, [r3, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001004:	2300      	movs	r3, #0
 8001006:	77fb      	strb	r3, [r7, #31]
 8001008:	e041      	b.n	800108e <CO_HBconsumer_init+0xf2>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1U, &val, true);
 800100a:	7ffb      	ldrb	r3, [r7, #31]
 800100c:	3301      	adds	r3, #1
 800100e:	b2d9      	uxtb	r1, r3
 8001010:	f107 0214 	add.w	r2, r7, #20
 8001014:	2301      	movs	r3, #1
 8001016:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001018:	f7ff ff3d 	bl	8000e96 <OD_get_u32>
 800101c:	4603      	mov	r3, r0
 800101e:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 8001020:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00c      	beq.n	8001042 <CO_HBconsumer_init+0xa6>
            if (errInfo != NULL) {
 8001028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800102a:	2b00      	cmp	r3, #0
 800102c:	d006      	beq.n	800103c <CO_HBconsumer_init+0xa0>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 800102e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001030:	f7ff ff0c 	bl	8000e4c <OD_getIndex>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800103a:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 800103c:	f06f 030b 	mvn.w	r3, #11
 8001040:	e04d      	b.n	80010de <CO_HBconsumer_init+0x142>
        }

        uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	0c1b      	lsrs	r3, r3, #16
 8001046:	777b      	strb	r3, [r7, #29]
        uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, consumer_time);
 800104c:	8b7b      	ldrh	r3, [r7, #26]
 800104e:	7f7a      	ldrb	r2, [r7, #29]
 8001050:	7ff9      	ldrb	r1, [r7, #31]
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f000 f84c 	bl	80010f0 <CO_HBconsumer_initEntry>
 8001058:	4603      	mov	r3, r0
 800105a:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 800105c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d011      	beq.n	8001088 <CO_HBconsumer_init+0xec>
            if (errInfo != NULL) {
 8001064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <CO_HBconsumer_init+0xdc>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 800106a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800106c:	f7ff feee 	bl	8000e4c <OD_getIndex>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001076:	601a      	str	r2, [r3, #0]
            }
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS) {
 8001078:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800107c:	f113 0f0c 	cmn.w	r3, #12
 8001080:	d002      	beq.n	8001088 <CO_HBconsumer_init+0xec>
                return ret;
 8001082:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001086:	e02a      	b.n	80010de <CO_HBconsumer_init+0x142>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001088:	7ffb      	ldrb	r3, [r7, #31]
 800108a:	3301      	adds	r3, #1
 800108c:	77fb      	strb	r3, [r7, #31]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	7a1b      	ldrb	r3, [r3, #8]
 8001092:	7ffa      	ldrb	r2, [r7, #31]
 8001094:	429a      	cmp	r2, r3
 8001096:	d3b8      	bcc.n	800100a <CO_HBconsumer_init+0x6e>
        }
    }

    /* configure extension for OD */
#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    HBcons->OD_1016_extension.object = HBcons;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4a11      	ldr	r2, [pc, #68]	@ (80010e8 <CO_HBconsumer_init+0x14c>)
 80010a2:	625a      	str	r2, [r3, #36]	@ 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4a11      	ldr	r2, [pc, #68]	@ (80010ec <CO_HBconsumer_init+0x150>)
 80010a8:	629a      	str	r2, [r3, #40]	@ 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3320      	adds	r3, #32
 80010ae:	4619      	mov	r1, r3
 80010b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80010b2:	f7ff fedc 	bl	8000e6e <OD_extension_init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 80010ba:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00c      	beq.n	80010dc <CO_HBconsumer_init+0x140>
        if (errInfo != NULL) {
 80010c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d006      	beq.n	80010d6 <CO_HBconsumer_init+0x13a>
            *errInfo = OD_getIndex(OD_1016_HBcons);
 80010c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80010ca:	f7ff febf 	bl	8000e4c <OD_getIndex>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010d4:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80010d6:	f06f 030b 	mvn.w	r3, #11
 80010da:	e000      	b.n	80010de <CO_HBconsumer_init+0x142>
    }
#endif

    return CO_ERROR_NO;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3720      	adds	r7, #32
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	08001983 	.word	0x08001983
 80010ec:	08000f0d 	.word	0x08000f0d

080010f0 <CO_HBconsumer_initEntry>:

static CO_ReturnError_t
CO_HBconsumer_initEntry(CO_HBconsumer_t* HBcons, uint8_t idx, uint8_t nodeId, uint16_t consumerTime_ms) {
 80010f0:	b5b0      	push	{r4, r5, r7, lr}
 80010f2:	b08e      	sub	sp, #56	@ 0x38
 80010f4:	af04      	add	r7, sp, #16
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	4608      	mov	r0, r1
 80010fa:	4611      	mov	r1, r2
 80010fc:	461a      	mov	r2, r3
 80010fe:	4603      	mov	r3, r0
 8001100:	70fb      	strb	r3, [r7, #3]
 8001102:	460b      	mov	r3, r1
 8001104:	70bb      	strb	r3, [r7, #2]
 8001106:	4613      	mov	r3, r2
 8001108:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800110a:	2300      	movs	r3, #0
 800110c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* verify arguments */
    if ((HBcons == NULL) || (idx >= HBcons->numberOfMonitoredNodes)) {
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d004      	beq.n	8001120 <CO_HBconsumer_initEntry+0x30>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	7a1b      	ldrb	r3, [r3, #8]
 800111a:	78fa      	ldrb	r2, [r7, #3]
 800111c:	429a      	cmp	r2, r3
 800111e:	d302      	bcc.n	8001126 <CO_HBconsumer_initEntry+0x36>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001120:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001124:	e08b      	b.n	800123e <CO_HBconsumer_initEntry+0x14e>
    }

    /* verify for duplicate entries */
    if ((consumerTime_ms != 0U) && (nodeId != 0U)) {
 8001126:	883b      	ldrh	r3, [r7, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d032      	beq.n	8001192 <CO_HBconsumer_initEntry+0xa2>
 800112c:	78bb      	ldrb	r3, [r7, #2]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d02f      	beq.n	8001192 <CO_HBconsumer_initEntry+0xa2>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001132:	2300      	movs	r3, #0
 8001134:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001138:	e025      	b.n	8001186 <CO_HBconsumer_initEntry+0x96>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6859      	ldr	r1, [r3, #4]
 800113e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	440b      	add	r3, r1
 800114c:	f107 0408 	add.w	r4, r7, #8
 8001150:	461d      	mov	r5, r3
 8001152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001156:	e895 0003 	ldmia.w	r5, {r0, r1}
 800115a:	e884 0003 	stmia.w	r4, {r0, r1}
            if ((idx != i) && (node.time_us != 0U) && (node.nodeId == nodeId)) {
 800115e:	78fa      	ldrb	r2, [r7, #3]
 8001160:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001164:	429a      	cmp	r2, r3
 8001166:	d009      	beq.n	800117c <CO_HBconsumer_initEntry+0x8c>
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d006      	beq.n	800117c <CO_HBconsumer_initEntry+0x8c>
 800116e:	7a3b      	ldrb	r3, [r7, #8]
 8001170:	78ba      	ldrb	r2, [r7, #2]
 8001172:	429a      	cmp	r2, r3
 8001174:	d102      	bne.n	800117c <CO_HBconsumer_initEntry+0x8c>
                ret = CO_ERROR_OD_PARAMETERS;
 8001176:	23f4      	movs	r3, #244	@ 0xf4
 8001178:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 800117c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001180:	3301      	adds	r3, #1
 8001182:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7a1b      	ldrb	r3, [r3, #8]
 800118a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800118e:	429a      	cmp	r2, r3
 8001190:	d3d3      	bcc.n	800113a <CO_HBconsumer_initEntry+0x4a>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 8001192:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001196:	2b00      	cmp	r3, #0
 8001198:	d14f      	bne.n	800123a <CO_HBconsumer_initEntry+0x14a>
        uint16_t COB_ID;

        CO_HBconsNode_t* monitoredNode = &HBcons->monitoredNodes[idx];
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6859      	ldr	r1, [r3, #4]
 800119e:	78fa      	ldrb	r2, [r7, #3]
 80011a0:	4613      	mov	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	4413      	add	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	440b      	add	r3, r1
 80011aa:	623b      	str	r3, [r7, #32]
        monitoredNode->nodeId = nodeId;
 80011ac:	6a3b      	ldr	r3, [r7, #32]
 80011ae:	78ba      	ldrb	r2, [r7, #2]
 80011b0:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (uint32_t)consumerTime_ms * 1000U;
 80011b2:	883b      	ldrh	r3, [r7, #0]
 80011b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011b8:	fb03 f202 	mul.w	r2, r3, r2
 80011bc:	6a3b      	ldr	r3, [r7, #32]
 80011be:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	22ff      	movs	r2, #255	@ 0xff
 80011c4:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 80011c6:	6a3b      	ldr	r3, [r7, #32]
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if ((monitoredNode->nodeId != 0U) && (monitoredNode->time_us != 0U)) {
 80011cc:	6a3b      	ldr	r3, [r7, #32]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00c      	beq.n	80011ee <CO_HBconsumer_initEntry+0xfe>
 80011d4:	6a3b      	ldr	r3, [r7, #32]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d008      	beq.n	80011ee <CO_HBconsumer_initEntry+0xfe>
            COB_ID = monitoredNode->nodeId + (uint16_t)CO_CAN_ID_HEARTBEAT;
 80011dc:	6a3b      	ldr	r3, [r7, #32]
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 80011e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 80011e6:	6a3b      	ldr	r3, [r7, #32]
 80011e8:	2201      	movs	r2, #1
 80011ea:	709a      	strb	r2, [r3, #2]
 80011ec:	e007      	b.n	80011fe <CO_HBconsumer_initEntry+0x10e>
        } else {
            COB_ID = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
            monitoredNode->time_us = 0;
 80011f2:	6a3b      	ldr	r3, [r7, #32]
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 80011f8:	6a3b      	ldr	r3, [r7, #32]
 80011fa:	2200      	movs	r2, #0
 80011fc:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6998      	ldr	r0, [r3, #24]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	8b9a      	ldrh	r2, [r3, #28]
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	b29b      	uxth	r3, r3
 800120a:	4413      	add	r3, r2
 800120c:	b29c      	uxth	r4, r3
                                 (void*)&HBcons->monitoredNodes[idx], CO_HBcons_receive);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6859      	ldr	r1, [r3, #4]
 8001212:	78fa      	ldrb	r2, [r7, #3]
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	440b      	add	r3, r1
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 800121e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001220:	4909      	ldr	r1, [pc, #36]	@ (8001248 <CO_HBconsumer_initEntry+0x158>)
 8001222:	9102      	str	r1, [sp, #8]
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	2300      	movs	r3, #0
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800122e:	4621      	mov	r1, r4
 8001230:	f005 ff68 	bl	8007104 <CO_CANrxBufferInit>
 8001234:	4603      	mov	r3, r0
 8001236:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    return ret;
 800123a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800123e:	4618      	mov	r0, r3
 8001240:	3728      	adds	r7, #40	@ 0x28
 8001242:	46bd      	mov	sp, r7
 8001244:	bdb0      	pop	{r4, r5, r7, pc}
 8001246:	bf00      	nop
 8001248:	08000ec1 	.word	0x08000ec1

0800124c <CO_HBconsumer_process>:
}
#endif /* (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI */

void
CO_HBconsumer_process(CO_HBconsumer_t* HBcons, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                      uint32_t* timerNext_us) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b08e      	sub	sp, #56	@ 0x38
 8001250:	af02      	add	r7, sp, #8
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 800125a:	2301      	movs	r3, #1
 800125c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 800125e:	2301      	movs	r3, #1
 8001260:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d07a      	beq.n	800135e <CO_HBconsumer_process+0x112>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d076      	beq.n	800135e <CO_HBconsumer_process+0x112>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001270:	2300      	movs	r3, #0
 8001272:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001276:	e06b      	b.n	8001350 <CO_HBconsumer_process+0x104>
            uint32_t timeDifference_us_copy = timeDifference_us;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6859      	ldr	r1, [r3, #4]
 8001280:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001284:	4613      	mov	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4413      	add	r3, r2
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	440b      	add	r3, r1
 800128e:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	789b      	ldrb	r3, [r3, #2]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d055      	beq.n	8001344 <CO_HBconsumer_process+0xf8>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d022      	beq.n	80012e6 <CO_HBconsumer_process+0x9a>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d112      	bne.n	80012d0 <CO_HBconsumer_process+0x84>
                    if (monitoredNode->pFunctSignalRemoteReset != NULL) {
                        monitoredNode->pFunctSignalRemoteReset(monitoredNode->nodeId, i,
                                                               monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	789b      	ldrb	r3, [r3, #2]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d10a      	bne.n	80012c8 <CO_HBconsumer_process+0x7c>
                        CO_errorReport(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, CO_EMC_HEARTBEAT, i);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6818      	ldr	r0, [r3, #0]
 80012b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	f248 1330 	movw	r3, #33072	@ 0x8130
 80012c0:	221c      	movs	r2, #28
 80012c2:	2101      	movs	r1, #1
 80012c4:	f7ff fce9 	bl	8000c9a <CO_error>
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	2201      	movs	r2, #1
 80012cc:	709a      	strb	r2, [r3, #2]
 80012ce:	e007      	b.n	80012e0 <CO_HBconsumer_process+0x94>
                        && monitoredNode->pFunctSignalHbStarted != NULL) {
                        monitoredNode->pFunctSignalHbStarted(monitoredNode->nodeId, i,
                                                             monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	2202      	movs	r2, #2
 80012d4:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	2200      	movs	r2, #0
 80012da:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	789b      	ldrb	r3, [r3, #2]
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d11c      	bne.n	8001328 <CO_HBconsumer_process+0xdc>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	441a      	add	r2, r3
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	429a      	cmp	r2, r3
 8001304:	d310      	bcc.n	8001328 <CO_HBconsumer_process+0xdc>
                    if (monitoredNode->pFunctSignalTimeout != NULL) {
                        monitoredNode->pFunctSignalTimeout(monitoredNode->nodeId, i,
                                                           monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, CO_EMC_HEARTBEAT, i);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6818      	ldr	r0, [r3, #0]
 800130a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	f248 1330 	movw	r3, #33072	@ 0x8130
 8001314:	221b      	movs	r2, #27
 8001316:	2101      	movs	r1, #1
 8001318:	f7ff fcbf 	bl	8000c9a <CO_error>
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	22ff      	movs	r2, #255	@ 0xff
 8001320:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	2203      	movs	r2, #3
 8001326:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if (monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	789b      	ldrb	r3, [r3, #2]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d001      	beq.n	8001334 <CO_HBconsumer_process+0xe8>
                allMonitoredActiveCurrent = false;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800133a:	2b05      	cmp	r3, #5
 800133c:	d003      	beq.n	8001346 <CO_HBconsumer_process+0xfa>
                allMonitoredOperationalCurrent = false;
 800133e:	2300      	movs	r3, #0
 8001340:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001342:	e000      	b.n	8001346 <CO_HBconsumer_process+0xfa>
                continue;
 8001344:	bf00      	nop
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001346:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800134a:	3301      	adds	r3, #1
 800134c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	7a1b      	ldrb	r3, [r3, #8]
 8001354:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001358:	429a      	cmp	r2, r3
 800135a:	d38d      	bcc.n	8001278 <CO_HBconsumer_process+0x2c>
 800135c:	e02b      	b.n	80013b6 <CO_HBconsumer_process+0x16a>
                }
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    } else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d103      	bne.n	800136c <CO_HBconsumer_process+0x120>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d024      	beq.n	80013b6 <CO_HBconsumer_process+0x16a>
        /* (pre)operational state changed, clear variables */
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 800136c:	2300      	movs	r3, #0
 800136e:	77fb      	strb	r3, [r7, #31]
 8001370:	e018      	b.n	80013a4 <CO_HBconsumer_process+0x158>
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6859      	ldr	r1, [r3, #4]
 8001376:	7ffa      	ldrb	r2, [r7, #31]
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	440b      	add	r3, r1
 8001382:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	22ff      	movs	r2, #255	@ 0xff
 8001388:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	2200      	movs	r2, #0
 800138e:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	789b      	ldrb	r3, [r3, #2]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <CO_HBconsumer_process+0x152>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	2201      	movs	r2, #1
 800139c:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 800139e:	7ffb      	ldrb	r3, [r7, #31]
 80013a0:	3301      	adds	r3, #1
 80013a2:	77fb      	strb	r3, [r7, #31]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	7a1b      	ldrb	r3, [r3, #8]
 80013a8:	7ffa      	ldrb	r2, [r7, #31]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d3e1      	bcc.n	8001372 <CO_HBconsumer_process+0x126>
            }
        }
        allMonitoredActiveCurrent = false;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        allMonitoredOperationalCurrent = false;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    } else { /* MISRA C 2004 14.10 */
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d114      	bne.n	80013e8 <CO_HBconsumer_process+0x19c>
 80013be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d011      	beq.n	80013e8 <CO_HBconsumer_process+0x19c>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6818      	ldr	r0, [r3, #0]
 80013c8:	2300      	movs	r3, #0
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2300      	movs	r3, #0
 80013ce:	221b      	movs	r2, #27
 80013d0:	2100      	movs	r1, #0
 80013d2:	f7ff fc62 	bl	8000c9a <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	2300      	movs	r3, #0
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2300      	movs	r3, #0
 80013e0:	221c      	movs	r2, #28
 80013e2:	2100      	movs	r1, #0
 80013e4:	f7ff fc59 	bl	8000c9a <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013ec:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013f2:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	615a      	str	r2, [r3, #20]
}
 80013fa:	bf00      	nop
 80013fc:	3730      	adds	r7, #48	@ 0x30
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <CO_getUint16>:
CO_getUint16(const void* buf) {
 8001402:	b480      	push	{r7}
 8001404:	b085      	sub	sp, #20
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	81fb      	strh	r3, [r7, #14]
    return value;
 8001412:	89fb      	ldrh	r3, [r7, #14]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <OD_getIndex+0x14>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	e000      	b.n	8001436 <OD_getIndex+0x16>
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8001452:	2305      	movs	r3, #5
 8001454:	e003      	b.n	800145e <OD_extension_init+0x1c>
    entry->extension = extension;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <OD_get_u16>:
OD_get_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t* val, bool_t odOrig) {
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af02      	add	r7, sp, #8
 8001470:	60f8      	str	r0, [r7, #12]
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	460b      	mov	r3, r1
 8001478:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800147a:	7af9      	ldrb	r1, [r7, #11]
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2302      	movs	r3, #2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f000 fcdf 	bl	8001e48 <OD_get_value>
 800148a:	4603      	mov	r3, r0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <CO_isError>:
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 80014a0:	78fb      	ldrb	r3, [r7, #3]
 80014a2:	08db      	lsrs	r3, r3, #3
 80014a4:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	2201      	movs	r2, #1
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
            || (em->errorStatusBits[index] & bitmask) != 0)
               ? true
               : false;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00a      	beq.n	80014d0 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	2b09      	cmp	r3, #9
 80014be:	d807      	bhi.n	80014d0 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0)
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	5cd2      	ldrb	r2, [r2, r3]
 80014c6:	7bbb      	ldrb	r3, [r7, #14]
 80014c8:	4013      	ands	r3, r2
 80014ca:	b2db      	uxtb	r3, r3
               : false;
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <CO_isError+0x40>
 80014d0:	2301      	movs	r3, #1
 80014d2:	e000      	b.n	80014d6 <CO_isError+0x42>
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <CO_getErrorRegister>:
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t
CO_getErrorRegister(CO_EM_t* em) {
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d007      	beq.n	8001500 <CO_getErrorRegister+0x1e>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <CO_getErrorRegister+0x1e>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	e000      	b.n	8001502 <CO_getErrorRegister+0x20>
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_NMT_receive(void* object, void* msg) {
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	791b      	ldrb	r3, [r3, #4]
 800151c:	75fb      	strb	r3, [r7, #23]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	3305      	adds	r3, #5
 8001522:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	3301      	adds	r3, #1
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t* NMT = (CO_NMT_t*)object;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	60bb      	str	r3, [r7, #8]

    if ((DLC == 2U) && ((nodeId == 0U) || (nodeId == NMT->nodeId))) {
 8001536:	7dfb      	ldrb	r3, [r7, #23]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d114      	bne.n	8001566 <CO_NMT_receive+0x58>
 800153c:	7bbb      	ldrb	r3, [r7, #14]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d004      	beq.n	800154c <CO_NMT_receive+0x3e>
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	78db      	ldrb	r3, [r3, #3]
 8001546:	7bba      	ldrb	r2, [r7, #14]
 8001548:	429a      	cmp	r2, r3
 800154a:	d10c      	bne.n	8001566 <CO_NMT_receive+0x58>
        NMT->internalCommand = command;
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	709a      	strb	r2, [r3, #2]

#if ((CO_CONFIG_NMT)&CO_CONFIG_FLAG_CALLBACK_PRE) != 0
        /* Optional signal to RTOS, which can resume task, which handles NMT. */
        if (NMT->pFunctSignalPre != NULL) {
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001556:	2b00      	cmp	r3, #0
 8001558:	d005      	beq.n	8001566 <CO_NMT_receive+0x58>
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001562:	4610      	mov	r0, r2
 8001564:	4798      	blx	r3
        }
#endif
    }
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <OD_write_1017>:
 * Custom function for writing OD object "Producer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1017(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint16_t))
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00c      	beq.n	800159c <OD_write_1017+0x2e>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	7d1b      	ldrb	r3, [r3, #20]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d108      	bne.n	800159c <OD_write_1017+0x2e>
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <OD_write_1017+0x2e>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d102      	bne.n	800159c <OD_write_1017+0x2e>
        || (countWritten == NULL)) {
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <OD_write_1017+0x32>
        return ODR_DEV_INCOMPAT;
 800159c:	2309      	movs	r3, #9
 800159e:	e017      	b.n	80015d0 <OD_write_1017+0x62>
    }

    CO_NMT_t* NMT = (CO_NMT_t*)stream->object;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000U;
 80015a6:	68b8      	ldr	r0, [r7, #8]
 80015a8:	f7ff ff2b 	bl	8001402 <CO_getUint16>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015b4:	fb03 f202 	mul.w	r2, r3, r2
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	68b9      	ldr	r1, [r7, #8]
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f000 fa32 	bl	8001a32 <OD_writeOriginal>
 80015ce:	4603      	mov	r3, r0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <CO_NMT_init>:
CO_NMT_init(CO_NMT_t* NMT, OD_entry_t* OD_1017_ProducerHbTime, CO_EM_t* em, uint8_t nodeId, uint16_t NMTcontrol,
            uint16_t firstHBTime_ms, CO_CANmodule_t* NMT_CANdevRx, uint16_t NMT_rxIdx, uint16_t CANidRxNMT,
#if (((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0) || defined CO_DOXYGEN
            CO_CANmodule_t* NMT_CANdevTx, uint16_t NMT_txIdx, uint16_t CANidTxNMT,
#endif
            CO_CANmodule_t* HB_CANdevTx, uint16_t HB_txIdx, uint16_t CANidTxHB, uint32_t* errInfo) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	@ 0x28
 80015dc:	af04      	add	r7, sp, #16
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80015e6:	2300      	movs	r3, #0
 80015e8:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((NMT == NULL) || (OD_1017_ProducerHbTime == NULL) || (em == NULL) || (NMT_CANdevRx == NULL)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00b      	beq.n	8001608 <CO_NMT_init+0x30>
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d008      	beq.n	8001608 <CO_NMT_init+0x30>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <CO_NMT_init+0x30>
 80015fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d002      	beq.n	8001608 <CO_NMT_init+0x30>
        || (HB_CANdevTx == NULL)
 8001602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001604:	2b00      	cmp	r3, #0
 8001606:	d102      	bne.n	800160e <CO_NMT_init+0x36>
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
        || (NMT_CANdevTx == NULL)
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001608:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800160c:	e097      	b.n	800173e <CO_NMT_init+0x166>
    }

    /* clear the object */
    (void)memset(NMT, 0, sizeof(CO_NMT_t));
 800160e:	2234      	movs	r2, #52	@ 0x34
 8001610:	2100      	movs	r1, #0
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f009 fe54 	bl	800b2c0 <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2200      	movs	r2, #0
 8001622:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	78fa      	ldrb	r2, [r7, #3]
 8001628:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	8c3a      	ldrh	r2, [r7, #32]
 800162e:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (uint32_t)firstHBTime_ms * 1000U;
 8001636:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001638:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800163c:	fb03 f202 	mul.w	r2, r3, r2
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 8001644:	f107 0214 	add.w	r2, r7, #20
 8001648:	2301      	movs	r3, #1
 800164a:	2100      	movs	r1, #0
 800164c:	68b8      	ldr	r0, [r7, #8]
 800164e:	f7ff ff0c 	bl	800146a <OD_get_u16>
 8001652:	4603      	mov	r3, r0
 8001654:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001656:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00c      	beq.n	8001678 <CO_NMT_init+0xa0>
        if (errInfo != NULL) {
 800165e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001660:	2b00      	cmp	r3, #0
 8001662:	d006      	beq.n	8001672 <CO_NMT_init+0x9a>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8001664:	68b8      	ldr	r0, [r7, #8]
 8001666:	f7ff fedb 	bl	8001420 <OD_getIndex>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001670:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8001672:	f06f 030b 	mvn.w	r3, #11
 8001676:	e062      	b.n	800173e <CO_NMT_init+0x166>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000U;
 8001678:	8abb      	ldrh	r3, [r7, #20]
 800167a:	461a      	mov	r2, r3
 800167c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001680:	fb03 f202 	mul.w	r2, r3, r2
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4a2d      	ldr	r2, [pc, #180]	@ (8001748 <CO_NMT_init+0x170>)
 8001692:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4a2d      	ldr	r2, [pc, #180]	@ (800174c <CO_NMT_init+0x174>)
 8001698:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3310      	adds	r3, #16
 800169e:	4619      	mov	r1, r3
 80016a0:	68b8      	ldr	r0, [r7, #8]
 80016a2:	f7ff fece 	bl	8001442 <OD_extension_init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 80016aa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00c      	beq.n	80016cc <CO_NMT_init+0xf4>
        if (errInfo != NULL) {
 80016b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d006      	beq.n	80016c6 <CO_NMT_init+0xee>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 80016b8:	68b8      	ldr	r0, [r7, #8]
 80016ba:	f7ff feb1 	bl	8001420 <OD_getIndex>
 80016be:	4603      	mov	r3, r0
 80016c0:	461a      	mov	r2, r3
 80016c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016c4:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80016c6:	f06f 030b 	mvn.w	r3, #11
 80016ca:	e038      	b.n	800173e <CO_NMT_init+0x166>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d903      	bls.n	80016e0 <CO_NMT_init+0x108>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(NMT_CANdevRx, NMT_rxIdx, CANidRxNMT, 0x7FF, false, (void*)NMT, CO_NMT_receive);
 80016e0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80016e2:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 80016e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001750 <CO_NMT_init+0x178>)
 80016e6:	9302      	str	r3, [sp, #8]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	2300      	movs	r3, #0
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80016f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80016f6:	f005 fd05 	bl	8007104 <CO_CANrxBufferInit>
 80016fa:	4603      	mov	r3, r0
 80016fc:	75fb      	strb	r3, [r7, #23]
    if (ret != CO_ERROR_NO) {
 80016fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d002      	beq.n	800170c <CO_NMT_init+0x134>
        return ret;
 8001706:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800170a:	e018      	b.n	800173e <CO_NMT_init+0x166>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001710:	625a      	str	r2, [r3, #36]	@ 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(HB_CANdevTx, HB_txIdx, CANidTxHB, false, 1, false);
 8001712:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001714:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8001716:	2300      	movs	r3, #0
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	2301      	movs	r3, #1
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	2300      	movs	r3, #0
 8001720:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001722:	f005 fd4d 	bl	80071c0 <CO_CANtxBufferInit>
 8001726:	4602      	mov	r2, r0
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (NMT->HB_TXbuff == NULL) {
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001730:	2b00      	cmp	r3, #0
 8001732:	d102      	bne.n	800173a <CO_NMT_init+0x162>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001734:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001738:	e001      	b.n	800173e <CO_NMT_init+0x166>
    }

    return ret;
 800173a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	08001983 	.word	0x08001983
 800174c:	0800156f 	.word	0x0800156f
 8001750:	0800150f 	.word	0x0800150f

08001754 <CO_NMT_process>:
    }
}
#endif

CO_NMT_reset_cmd_t
CO_NMT_process(CO_NMT_t* NMT, CO_NMT_internalState_t* NMTstate, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b08e      	sub	sp, #56	@ 0x38
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 800176a:	2300      	movs	r3, #0
 800176c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 8001770:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001774:	2b00      	cmp	r3, #0
 8001776:	bf0c      	ite	eq
 8001778:	2301      	moveq	r3, #1
 800177a:	2300      	movne	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	633b      	str	r3, [r7, #48]	@ 0x30

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us) ? (NMT->HBproducerTimer - timeDifference_us) : 0U;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	429a      	cmp	r2, r3
 8001788:	d204      	bcs.n	8001794 <CO_NMT_process+0x40>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	e000      	b.n	8001796 <CO_NMT_process+0x42>
 8001794:	2300      	movs	r3, #0
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	60d3      	str	r3, [r2, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed */
    if (NNTinit
 800179a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10e      	bne.n	80017be <CO_NMT_process+0x6a>
        || ((NMT->HBproducerTime_us != 0U)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d02b      	beq.n	8001800 <CO_NMT_process+0xac>
            && ((NMT->HBproducerTimer == 0U) || (NMTstateCpy != NMT->operatingStatePrev)))) {
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d006      	beq.n	80017be <CO_NMT_process+0x6a>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80017b6:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d020      	beq.n	8001800 <CO_NMT_process+0xac>
        NMT->HB_TXbuff->data[0] = (uint8_t)NMTstateCpy;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80017c6:	715a      	strb	r2, [r3, #5]
        (void)CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d0:	4619      	mov	r1, r3
 80017d2:	4610      	mov	r0, r2
 80017d4:	f005 fd6e 	bl	80072b4 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 80017d8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10b      	bne.n	80017f8 <CO_NMT_process+0xa4>
            /* NMT slave self starting */
            NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_STARTUP_TO_OPERATIONAL) != 0U)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	889b      	ldrh	r3, [r3, #4]
 80017e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
                              ? CO_NMT_OPERATIONAL
                              : CO_NMT_PRE_OPERATIONAL;
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <CO_NMT_process+0x9c>
 80017ec:	2305      	movs	r3, #5
 80017ee:	e000      	b.n	80017f2 <CO_NMT_process+0x9e>
 80017f0:	237f      	movs	r3, #127	@ 0x7f
            NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_STARTUP_TO_OPERATIONAL) != 0U)
 80017f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80017f6:	e003      	b.n	8001800 <CO_NMT_process+0xac>
        } else {
            /* Start timer from the beginning. If OS is slow, time sliding may occur. However,
             * heartbeat is not for synchronization, it is for health report. In case of
             * initializing, timer is set in the CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001806:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	789b      	ldrb	r3, [r3, #2]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d02a      	beq.n	8001866 <CO_NMT_process+0x112>
        switch (NMT->internalCommand) {
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	789b      	ldrb	r3, [r3, #2]
 8001814:	2b82      	cmp	r3, #130	@ 0x82
 8001816:	d01e      	beq.n	8001856 <CO_NMT_process+0x102>
 8001818:	2b82      	cmp	r3, #130	@ 0x82
 800181a:	dc20      	bgt.n	800185e <CO_NMT_process+0x10a>
 800181c:	2b81      	cmp	r3, #129	@ 0x81
 800181e:	d016      	beq.n	800184e <CO_NMT_process+0xfa>
 8001820:	2b81      	cmp	r3, #129	@ 0x81
 8001822:	dc1c      	bgt.n	800185e <CO_NMT_process+0x10a>
 8001824:	2b80      	cmp	r3, #128	@ 0x80
 8001826:	d00e      	beq.n	8001846 <CO_NMT_process+0xf2>
 8001828:	2b80      	cmp	r3, #128	@ 0x80
 800182a:	dc18      	bgt.n	800185e <CO_NMT_process+0x10a>
 800182c:	2b01      	cmp	r3, #1
 800182e:	d002      	beq.n	8001836 <CO_NMT_process+0xe2>
 8001830:	2b02      	cmp	r3, #2
 8001832:	d004      	beq.n	800183e <CO_NMT_process+0xea>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
            case CO_NMT_NO_COMMAND:
            default:
                /* done */
                break;
 8001834:	e013      	b.n	800185e <CO_NMT_process+0x10a>
            case CO_NMT_ENTER_OPERATIONAL: NMTstateCpy = CO_NMT_OPERATIONAL; break;
 8001836:	2305      	movs	r3, #5
 8001838:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800183c:	e010      	b.n	8001860 <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_STOPPED: NMTstateCpy = CO_NMT_STOPPED; break;
 800183e:	2304      	movs	r3, #4
 8001840:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001844:	e00c      	b.n	8001860 <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_PRE_OPERATIONAL: NMTstateCpy = CO_NMT_PRE_OPERATIONAL; break;
 8001846:	237f      	movs	r3, #127	@ 0x7f
 8001848:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800184c:	e008      	b.n	8001860 <CO_NMT_process+0x10c>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
 800184e:	2302      	movs	r3, #2
 8001850:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001854:	e004      	b.n	8001860 <CO_NMT_process+0x10c>
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
 8001856:	2301      	movs	r3, #1
 8001858:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800185c:	e000      	b.n	8001860 <CO_NMT_process+0x10c>
                break;
 800185e:	bf00      	nop
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t ErrOnBusOffHB = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_BUSOFF_HB) != 0U);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	889b      	ldrh	r3, [r3, #4]
 800186a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800186e:	2b00      	cmp	r3, #0
 8001870:	bf14      	ite	ne
 8001872:	2301      	movne	r3, #1
 8001874:	2300      	moveq	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool_t ErrBusOff = CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	2112      	movs	r1, #18
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fe07 	bl	8001494 <CO_isError>
 8001886:	62b8      	str	r0, [r7, #40]	@ 0x28
    bool_t ErrHbCons = CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	211b      	movs	r1, #27
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fe00 	bl	8001494 <CO_isError>
 8001894:	6278      	str	r0, [r7, #36]	@ 0x24
    bool_t ErrHbConsRemote = CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	211c      	movs	r1, #28
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fdf9 	bl	8001494 <CO_isError>
 80018a2:	6238      	str	r0, [r7, #32]
    bool_t busOff_HB = ErrOnBusOffHB && (ErrBusOff || ErrHbCons || ErrHbConsRemote);
 80018a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00a      	beq.n	80018c0 <CO_NMT_process+0x16c>
 80018aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d105      	bne.n	80018bc <CO_NMT_process+0x168>
 80018b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d102      	bne.n	80018bc <CO_NMT_process+0x168>
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <CO_NMT_process+0x16c>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <CO_NMT_process+0x16e>
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]

    bool_t ErrNMTErrReg = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_ERR_REG) != 0U);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	889b      	ldrh	r3, [r3, #4]
 80018c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf14      	ite	ne
 80018d0:	2301      	movne	r3, #1
 80018d2:	2300      	moveq	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	61bb      	str	r3, [r7, #24]
    bool_t ErrNMTcontrol = ((CO_getErrorRegister(NMT->em) & (uint8_t)NMT->NMTcontrol) != 0U);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fe00 	bl	80014e2 <CO_getErrorRegister>
 80018e2:	4603      	mov	r3, r0
 80018e4:	461a      	mov	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	889b      	ldrh	r3, [r3, #4]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	4013      	ands	r3, r2
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf14      	ite	ne
 80018f4:	2301      	movne	r3, #1
 80018f6:	2300      	moveq	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = ErrNMTErrReg && ErrNMTcontrol;
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d004      	beq.n	800190c <CO_NMT_process+0x1b8>
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <CO_NMT_process+0x1b8>
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <CO_NMT_process+0x1ba>
 800190c:	2300      	movs	r3, #0
 800190e:	613b      	str	r3, [r7, #16]

    if ((NMTstateCpy == CO_NMT_OPERATIONAL) && (busOff_HB || errRegMasked)) {
 8001910:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001914:	2b05      	cmp	r3, #5
 8001916:	d111      	bne.n	800193c <CO_NMT_process+0x1e8>
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d102      	bne.n	8001924 <CO_NMT_process+0x1d0>
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00b      	beq.n	800193c <CO_NMT_process+0x1e8>
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	889b      	ldrh	r3, [r3, #4]
 8001928:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
                                                                                            : CO_NMT_PRE_OPERATIONAL;
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <CO_NMT_process+0x1e0>
 8001930:	2304      	movs	r3, #4
 8001932:	e000      	b.n	8001936 <CO_NMT_process+0x1e2>
 8001934:	237f      	movs	r3, #127	@ 0x7f
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 8001936:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800193a:	e011      	b.n	8001960 <CO_NMT_process+0x20c>
    } else if ((((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0U)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	889b      	ldrh	r3, [r3, #4]
 8001940:	b21b      	sxth	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	da0c      	bge.n	8001960 <CO_NMT_process+0x20c>
               && (NMTstateCpy == CO_NMT_PRE_OPERATIONAL) && (!busOff_HB && !errRegMasked)) {
 8001946:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800194a:	2b7f      	cmp	r3, #127	@ 0x7f
 800194c:	d108      	bne.n	8001960 <CO_NMT_process+0x20c>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d105      	bne.n	8001960 <CO_NMT_process+0x20c>
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d102      	bne.n	8001960 <CO_NMT_process+0x20c>
        NMTstateCpy = CO_NMT_OPERATIONAL;
 800195a:	2305      	movs	r3, #5
 800195c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        } else { /* MISRA C 2004 14.10 */
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001966:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) {
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <CO_NMT_process+0x222>
        *NMTstate = NMTstateCpy;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001974:	701a      	strb	r2, [r3, #0]
    }

    return resetCommand;
 8001976:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 800197a:	4618      	mov	r0, r3
 800197c:	3738      	adds	r7, #56	@ 0x38
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <OD_readOriginal>:
#include <string.h>
#define OD_DEFINITION
#include "301/CO_ODinterface.h"

ODR_t
OD_readOriginal(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8001982:	b580      	push	{r7, lr}
 8001984:	b088      	sub	sp, #32
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL)) {
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <OD_readOriginal+0x20>
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <OD_readOriginal+0x20>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 80019a2:	2309      	movs	r3, #9
 80019a4:	e041      	b.n	8001a2a <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	61fb      	str	r3, [r7, #28]
    const uint8_t* dataOrig = stream->dataOrig;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 80019b8:	230e      	movs	r3, #14
 80019ba:	e036      	b.n	8001a2a <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d103      	bne.n	80019d0 <OD_readOriginal+0x4e>
 80019c8:	69fa      	ldr	r2, [r7, #28]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d922      	bls.n	8001a16 <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d801      	bhi.n	80019de <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 80019da:	2309      	movs	r3, #9
 80019dc:	e025      	b.n	8001a2a <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4413      	add	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 80019f2:	69fa      	ldr	r2, [r7, #28]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d90a      	bls.n	8001a10 <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	441a      	add	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8001a0a:	23ff      	movs	r3, #255	@ 0xff
 8001a0c:	75fb      	strb	r3, [r7, #23]
 8001a0e:	e002      	b.n	8001a16 <OD_readOriginal+0x94>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
        }
    }

    (void)memcpy((void*)buf, (const void*)dataOrig, dataLenToCopy);
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	69b9      	ldr	r1, [r7, #24]
 8001a1a:	68b8      	ldr	r0, [r7, #8]
 8001a1c:	f009 fcdb 	bl	800b3d6 <memcpy>

    *countRead = dataLenToCopy;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001a26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3720      	adds	r7, #32
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <OD_writeOriginal>:

ODR_t
OD_writeOriginal(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b088      	sub	sp, #32
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <OD_writeOriginal+0x20>
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d002      	beq.n	8001a52 <OD_writeOriginal+0x20>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8001a52:	2309      	movs	r3, #9
 8001a54:	e056      	b.n	8001b04 <OD_writeOriginal+0xd2>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	61fb      	str	r3, [r7, #28]
    OD_size_t dataLenRemain = dataLenToCopy;      /* remaining length of dataOrig buffer */
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	61bb      	str	r3, [r7, #24]
    uint8_t* dataOrig = stream->dataOrig;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	617b      	str	r3, [r7, #20]

    if (dataOrig == NULL) {
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <OD_writeOriginal+0x3e>
        return ODR_SUB_NOT_EXIST;
 8001a6c:	230e      	movs	r3, #14
 8001a6e:	e049      	b.n	8001b04 <OD_writeOriginal+0xd2>
    }

    ODR_t returnCode = ODR_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	74fb      	strb	r3, [r7, #19]

    /* If previous write was partial or OD variable length is larger than current buffer size,
     * then data was (will be) written in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d103      	bne.n	8001a84 <OD_writeOriginal+0x52>
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d924      	bls.n	8001ace <OD_writeOriginal+0x9c>
        if (stream->dataOffset >= dataLenToCopy) {
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d801      	bhi.n	8001a92 <OD_writeOriginal+0x60>
            return ODR_DEV_INCOMPAT;
 8001a8e:	2309      	movs	r3, #9
 8001a90:	e038      	b.n	8001b04 <OD_writeOriginal+0xd2>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	61fb      	str	r3, [r7, #28]
        dataLenRemain = dataLenToCopy;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	61bb      	str	r3, [r7, #24]
        dataOrig += stream->dataOffset;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	617b      	str	r3, [r7, #20]

        if (dataLenToCopy > count) {
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d90a      	bls.n	8001ac8 <OD_writeOriginal+0x96>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	441a      	add	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8001ac2:	23ff      	movs	r3, #255	@ 0xff
 8001ac4:	74fb      	strb	r3, [r7, #19]
 8001ac6:	e002      	b.n	8001ace <OD_writeOriginal+0x9c>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 8001ace:	69fa      	ldr	r2, [r7, #28]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d201      	bcs.n	8001ada <OD_writeOriginal+0xa8>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 8001ad6:	230c      	movs	r3, #12
 8001ad8:	e014      	b.n	8001b04 <OD_writeOriginal+0xd2>
    }

    /* additional check for Misra c compliance */
    if ((dataLenToCopy <= dataLenRemain) && (dataLenToCopy <= count)) {
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d80f      	bhi.n	8001b02 <OD_writeOriginal+0xd0>
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d80b      	bhi.n	8001b02 <OD_writeOriginal+0xd0>
        (void)memcpy((void*)dataOrig, (const void*)buf, dataLenToCopy);
 8001aea:	69fa      	ldr	r2, [r7, #28]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	6978      	ldr	r0, [r7, #20]
 8001af0:	f009 fc71 	bl	800b3d6 <memcpy>
 8001af4:	bf00      	nop
    } else {
        return ODR_DEV_INCOMPAT;
    }

    *countWritten = dataLenToCopy;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	69fa      	ldr	r2, [r7, #28]
 8001afa:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001afc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b00:	e000      	b.n	8001b04 <OD_writeOriginal+0xd2>
        return ODR_DEV_INCOMPAT;
 8001b02:	2309      	movs	r3, #9
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3720      	adds	r7, #32
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_readDisabled(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countRead;
    return ODR_UNSUPP_ACCESS;
 8001b1a:	2302      	movs	r3, #2
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_writeDisabled(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countWritten;
    return ODR_UNSUPP_ACCESS;
 8001b36:	2302      	movs	r3, #2
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <OD_find>:

OD_entry_t*
OD_find(OD_t* od, uint16_t index) {
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
    if ((od == NULL) || (od->size == 0U)) {
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <OD_find+0x1a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <OD_find+0x1e>
        return NULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e046      	b.n	8001bf0 <OD_find+0xac>
    }

    uint16_t min = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1U;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. If Object
     * Dictionary has up to N entries, then the max number of loop passes is log2(N) */
    while (min < max) {
 8001b6e:	e026      	b.n	8001bbe <OD_find+0x7a>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 8001b70:	8afa      	ldrh	r2, [r7, #22]
 8001b72:	8abb      	ldrh	r3, [r7, #20]
 8001b74:	4413      	add	r3, r2
 8001b76:	105b      	asrs	r3, r3, #1
 8001b78:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6859      	ldr	r1, [r3, #4]
 8001b7e:	89fa      	ldrh	r2, [r7, #14]
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	440b      	add	r3, r1
 8001b8a:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) {
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	887a      	ldrh	r2, [r7, #2]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d101      	bne.n	8001b9a <OD_find+0x56>
            return entry;
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	e02a      	b.n	8001bf0 <OD_find+0xac>
        }

        if (index < entry->index) {
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	887a      	ldrh	r2, [r7, #2]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d209      	bcs.n	8001bb8 <OD_find+0x74>
            max = (cur > 0U) ? (cur - 1U) : cur;
 8001ba4:	89fb      	ldrh	r3, [r7, #14]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <OD_find+0x6e>
 8001baa:	89fb      	ldrh	r3, [r7, #14]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	e000      	b.n	8001bb4 <OD_find+0x70>
 8001bb2:	89fb      	ldrh	r3, [r7, #14]
 8001bb4:	82bb      	strh	r3, [r7, #20]
 8001bb6:	e002      	b.n	8001bbe <OD_find+0x7a>
        } else {
            min = cur + 1U;
 8001bb8:	89fb      	ldrh	r3, [r7, #14]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	82fb      	strh	r3, [r7, #22]
    while (min < max) {
 8001bbe:	8afa      	ldrh	r2, [r7, #22]
 8001bc0:	8abb      	ldrh	r3, [r7, #20]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d3d4      	bcc.n	8001b70 <OD_find+0x2c>
        }
    }

    if (min == max) {
 8001bc6:	8afa      	ldrh	r2, [r7, #22]
 8001bc8:	8abb      	ldrh	r3, [r7, #20]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d10f      	bne.n	8001bee <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6859      	ldr	r1, [r3, #4]
 8001bd2:	8afa      	ldrh	r2, [r7, #22]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	887a      	ldrh	r2, [r7, #2]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d101      	bne.n	8001bee <OD_find+0xaa>
            return entry;
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	e000      	b.n	8001bf0 <OD_find+0xac>
        }
    }

    return NULL; /* entry does not exist in OD */
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	371c      	adds	r7, #28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <OD_getSub>:

ODR_t
OD_getSub(const OD_entry_t* entry, uint8_t subIndex, OD_IO_t* io, bool_t odOrig) {
 8001bfc:	b480      	push	{r7}
 8001bfe:	b08d      	sub	sp, #52	@ 0x34
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	72fb      	strb	r3, [r7, #11]
    if ((entry == NULL) || (entry->odObject == NULL)) {
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <OD_getSub+0x1e>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <OD_getSub+0x22>
        return ODR_IDX_NOT_EXIST;
 8001c1a:	2305      	movs	r3, #5
 8001c1c:	e0e7      	b.n	8001dee <OD_getSub+0x1f2>
    }
    if (io == NULL) {
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <OD_getSub+0x2c>
        return ODR_DEV_INCOMPAT;
 8001c24:	2309      	movs	r3, #9
 8001c26:	e0e2      	b.n	8001dee <OD_getSub+0x1f2>
    }

    ODR_t ret = ODR_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    OD_stream_t* stream = &io->stream;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	623b      	str	r3, [r7, #32]

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & (uint8_t)ODT_TYPE_MASK) {
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	78db      	ldrb	r3, [r3, #3]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d055      	beq.n	8001cea <OD_getSub+0xee>
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	f300 8093 	bgt.w	8001d6a <OD_getSub+0x16e>
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d002      	beq.n	8001c4e <OD_getSub+0x52>
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d017      	beq.n	8001c7c <OD_getSub+0x80>
 8001c4c:	e08d      	b.n	8001d6a <OD_getSub+0x16e>
        case ODT_VAR: {
            if (subIndex > 0U) {
 8001c4e:	7afb      	ldrb	r3, [r7, #11]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <OD_getSub+0x60>
                ret = ODR_SUB_NOT_EXIST;
 8001c54:	230e      	movs	r3, #14
 8001c56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                break;
 8001c5a:	e08a      	b.n	8001d72 <OD_getSub+0x176>
            }
            CO_PROGMEM OD_obj_var_t* odo = entry->odObject;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	613b      	str	r3, [r7, #16]

            stream->attribute = odo->attribute;
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	791a      	ldrb	r2, [r3, #4]
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig;
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	601a      	str	r2, [r3, #0]
            stream->dataLength = odo->dataLength;
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	609a      	str	r2, [r3, #8]
            break;
 8001c7a:	e07a      	b.n	8001d72 <OD_getSub+0x176>
        }
        case ODT_ARR: {
            if (subIndex >= entry->subEntriesCount) {
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	789b      	ldrb	r3, [r3, #2]
 8001c80:	7afa      	ldrb	r2, [r7, #11]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d303      	bcc.n	8001c8e <OD_getSub+0x92>
                ret = ODR_SUB_NOT_EXIST;
 8001c86:	230e      	movs	r3, #14
 8001c88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                break;
 8001c8c:	e071      	b.n	8001d72 <OD_getSub+0x176>
            }
            CO_PROGMEM OD_obj_array_t* odo = entry->odObject;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	61bb      	str	r3, [r7, #24]

            if (subIndex == 0U) {
 8001c94:	7afb      	ldrb	r3, [r7, #11]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10b      	bne.n	8001cb2 <OD_getSub+0xb6>
                stream->attribute = odo->attribute0;
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	7a1a      	ldrb	r2, [r3, #8]
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	741a      	strb	r2, [r3, #16]
                stream->dataOrig = odo->dataOrig0;
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	601a      	str	r2, [r3, #0]
                stream->dataLength = 1;
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	2201      	movs	r2, #1
 8001cae:	609a      	str	r2, [r3, #8]
                stream->attribute = odo->attribute;
                uint8_t* ptr = odo->dataOrig;
                stream->dataOrig = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
                stream->dataLength = odo->dataElementLength;
            }
            break;
 8001cb0:	e05f      	b.n	8001d72 <OD_getSub+0x176>
                stream->attribute = odo->attribute;
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	7a5a      	ldrb	r2, [r3, #9]
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	741a      	strb	r2, [r3, #16]
                uint8_t* ptr = odo->dataOrig;
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	617b      	str	r3, [r7, #20]
                stream->dataOrig = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <OD_getSub+0xde>
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	7afa      	ldrb	r2, [r7, #11]
 8001ccc:	3a01      	subs	r2, #1
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	fb02 f303 	mul.w	r3, r2, r3
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	e000      	b.n	8001cdc <OD_getSub+0xe0>
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	6a3a      	ldr	r2, [r7, #32]
 8001cde:	6013      	str	r3, [r2, #0]
                stream->dataLength = odo->dataElementLength;
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	609a      	str	r2, [r3, #8]
            break;
 8001ce8:	e043      	b.n	8001d72 <OD_getSub+0x176>
        }
        case ODT_REC: {
            CO_PROGMEM OD_obj_record_t* odoArr = entry->odObject;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	61fb      	str	r3, [r7, #28]
            CO_PROGMEM OD_obj_record_t* odo = NULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
            for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001cfa:	e01c      	b.n	8001d36 <OD_getSub+0x13a>
                if (odoArr[i].subIndex == subIndex) {
 8001cfc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001d00:	4613      	mov	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	461a      	mov	r2, r3
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	791b      	ldrb	r3, [r3, #4]
 8001d10:	7afa      	ldrb	r2, [r7, #11]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d10a      	bne.n	8001d2c <OD_getSub+0x130>
                    odo = &odoArr[i];
 8001d16:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	461a      	mov	r2, r3
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	4413      	add	r3, r2
 8001d28:	62bb      	str	r3, [r7, #40]	@ 0x28
                    break;
 8001d2a:	e00a      	b.n	8001d42 <OD_getSub+0x146>
            for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d30:	3301      	adds	r3, #1
 8001d32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	789b      	ldrb	r3, [r3, #2]
 8001d3a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d3dc      	bcc.n	8001cfc <OD_getSub+0x100>
                }
            }
            if (odo == NULL) {
 8001d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d103      	bne.n	8001d50 <OD_getSub+0x154>
                ret = ODR_SUB_NOT_EXIST;
 8001d48:	230e      	movs	r3, #14
 8001d4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                break;
 8001d4e:	e010      	b.n	8001d72 <OD_getSub+0x176>
            }

            stream->attribute = odo->attribute;
 8001d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d52:	795a      	ldrb	r2, [r3, #5]
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig;
 8001d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	601a      	str	r2, [r3, #0]
            stream->dataLength = odo->dataLength;
 8001d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	609a      	str	r2, [r3, #8]
            break;
 8001d68:	e003      	b.n	8001d72 <OD_getSub+0x176>
        }
        default: {
            ret = ODR_DEV_INCOMPAT;
 8001d6a:	2309      	movs	r3, #9
 8001d6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 8001d70:	bf00      	nop
        }
    }

    if (ret == ODR_OK) {
 8001d72:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d137      	bne.n	8001dea <OD_getSub+0x1ee>
        /* Access data from the original OD location */
        if ((entry->extension == NULL) || odOrig) {
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <OD_getSub+0x18c>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d009      	beq.n	8001d9c <OD_getSub+0x1a0>
            io->read = OD_readOriginal;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001dfc <OD_getSub+0x200>)
 8001d8c:	619a      	str	r2, [r3, #24]
            io->write = OD_writeOriginal;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a1b      	ldr	r2, [pc, #108]	@ (8001e00 <OD_getSub+0x204>)
 8001d92:	61da      	str	r2, [r3, #28]
            stream->object = NULL;
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	2200      	movs	r2, #0
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	e01c      	b.n	8001dd6 <OD_getSub+0x1da>
        }
        /* Access data from extension specified by application */
        else {
            io->read = (entry->extension->read != NULL) ? entry->extension->read : OD_readDisabled;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <OD_getSub+0x1b2>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	e000      	b.n	8001db0 <OD_getSub+0x1b4>
 8001dae:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <OD_getSub+0x208>)
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6193      	str	r3, [r2, #24]
            io->write = (entry->extension->write != NULL) ? entry->extension->write : OD_writeDisabled;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <OD_getSub+0x1ca>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	e000      	b.n	8001dc8 <OD_getSub+0x1cc>
 8001dc6:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <OD_getSub+0x20c>)
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	61d3      	str	r3, [r2, #28]
            stream->object = entry->extension->object;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	605a      	str	r2, [r3, #4]
        }

        /* Reset stream data offset */
        stream->dataOffset = 0;
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	60da      	str	r2, [r3, #12]

        /* Add informative data */
        stream->index = entry->index;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	881a      	ldrh	r2, [r3, #0]
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	825a      	strh	r2, [r3, #18]
        stream->subIndex = subIndex;
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	7afa      	ldrb	r2, [r7, #11]
 8001de8:	751a      	strb	r2, [r3, #20]
    }

    return ret;
 8001dea:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3734      	adds	r7, #52	@ 0x34
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	08001983 	.word	0x08001983
 8001e00:	08001a33 	.word	0x08001a33
 8001e04:	08001b0d 	.word	0x08001b0d
 8001e08:	08001b29 	.word	0x08001b29

08001e0c <OD_getSDOabCode>:

uint32_t
OD_getSDOabCode(ODR_t returnCode) {
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
        0x08000022UL, /* Data cannot be tran. because of present device state */
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return ((returnCode < ODR_OK) || (returnCode >= ODR_COUNT)) ? abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	db03      	blt.n	8001e26 <OD_getSDOabCode+0x1a>
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	2b19      	cmp	r3, #25
 8001e24:	dd02      	ble.n	8001e2c <OD_getSDOabCode+0x20>
 8001e26:	4b07      	ldr	r3, [pc, #28]	@ (8001e44 <OD_getSDOabCode+0x38>)
 8001e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2a:	e004      	b.n	8001e36 <OD_getSDOabCode+0x2a>
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	4a04      	ldr	r2, [pc, #16]	@ (8001e44 <OD_getSDOabCode+0x38>)
 8001e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	0800bd0c 	.word	0x0800bd0c

08001e48 <OD_get_value>:

ODR_t
OD_get_value(const OD_entry_t* entry, uint8_t subIndex, void* val, OD_size_t len, bool_t odOrig) {
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b091      	sub	sp, #68	@ 0x44
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	460b      	mov	r3, r1
 8001e56:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) {
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <OD_get_value+0x1a>
        return ODR_DEV_INCOMPAT;
 8001e5e:	2309      	movs	r3, #9
 8001e60:	e02b      	b.n	8001eba <OD_get_value+0x72>
    }

    OD_IO_t io = {NULL};
 8001e62:	f107 0318 	add.w	r3, r7, #24
 8001e66:	2220      	movs	r2, #32
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f009 fa28 	bl	800b2c0 <memset>
    OD_stream_t* stream = &io.stream;
 8001e70:	f107 0318 	add.w	r3, r7, #24
 8001e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
    OD_size_t countRd = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001e7a:	f107 0218 	add.w	r2, r7, #24
 8001e7e:	7af9      	ldrb	r1, [r7, #11]
 8001e80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f7ff feba 	bl	8001bfc <OD_getSub>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    if (ret != ODR_OK) {
 8001e8e:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <OD_get_value+0x54>
        return ret;
 8001e96:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8001e9a:	e00e      	b.n	8001eba <OD_get_value+0x72>
    }
    if (stream->dataLength != len) {
 8001e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d001      	beq.n	8001eaa <OD_get_value+0x62>
        return ODR_TYPE_MISMATCH;
 8001ea6:	230b      	movs	r3, #11
 8001ea8:	e007      	b.n	8001eba <OD_get_value+0x72>
    }

    return io.read(stream, val, len, &countRd);
 8001eaa:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001eb6:	47a0      	blx	r4
 8001eb8:	4603      	mov	r3, r0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3744      	adds	r7, #68	@ 0x44
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd90      	pop	{r4, r7, pc}

08001ec2 <OD_set_value>:

ODR_t
OD_set_value(const OD_entry_t* entry, uint8_t subIndex, void* val, OD_size_t len, bool_t odOrig) {
 8001ec2:	b590      	push	{r4, r7, lr}
 8001ec4:	b091      	sub	sp, #68	@ 0x44
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) {
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <OD_set_value+0x1a>
        return ODR_DEV_INCOMPAT;
 8001ed8:	2309      	movs	r3, #9
 8001eda:	e02b      	b.n	8001f34 <OD_set_value+0x72>
    }

    OD_IO_t io = {NULL};
 8001edc:	f107 0318 	add.w	r3, r7, #24
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f009 f9eb 	bl	800b2c0 <memset>
    OD_stream_t* stream = &io.stream;
 8001eea:	f107 0318 	add.w	r3, r7, #24
 8001eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    OD_size_t countWritten = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001ef4:	f107 0218 	add.w	r2, r7, #24
 8001ef8:	7af9      	ldrb	r1, [r7, #11]
 8001efa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f7ff fe7d 	bl	8001bfc <OD_getSub>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    if (ret != ODR_OK) {
 8001f08:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <OD_set_value+0x54>
        return ret;
 8001f10:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8001f14:	e00e      	b.n	8001f34 <OD_set_value+0x72>
    }
    if (stream->dataLength != len) {
 8001f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d001      	beq.n	8001f24 <OD_set_value+0x62>
        return ODR_TYPE_MISMATCH;
 8001f20:	230b      	movs	r3, #11
 8001f22:	e007      	b.n	8001f34 <OD_set_value+0x72>
    }

    return io.write(stream, val, len, &countWritten);
 8001f24:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001f30:	47a0      	blx	r4
 8001f32:	4603      	mov	r3, r0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3744      	adds	r7, #68	@ 0x44
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd90      	pop	{r4, r7, pc}

08001f3c <OD_getPtr>:

void*
OD_getPtr(const OD_entry_t* entry, uint8_t subIndex, OD_size_t len, ODR_t* err) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08e      	sub	sp, #56	@ 0x38
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	607a      	str	r2, [r7, #4]
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t* stream = &io.stream;
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	633b      	str	r3, [r7, #48]	@ 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8001f52:	f107 0210 	add.w	r2, r7, #16
 8001f56:	7af9      	ldrb	r1, [r7, #11]
 8001f58:	2301      	movs	r3, #1
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f7ff fe4e 	bl	8001bfc <OD_getSub>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (errCopy == ODR_OK) {
 8001f66:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d116      	bne.n	8001f9c <OD_getPtr+0x60>
        if ((stream->dataOrig == NULL) || (stream->dataLength == 0U)) {
 8001f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <OD_getPtr+0x42>
 8001f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d103      	bne.n	8001f86 <OD_getPtr+0x4a>
            errCopy = ODR_DEV_INCOMPAT;
 8001f7e:	2309      	movs	r3, #9
 8001f80:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001f84:	e00a      	b.n	8001f9c <OD_getPtr+0x60>
        } else if ((len != 0U) && (len != stream->dataLength)) {
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d007      	beq.n	8001f9c <OD_getPtr+0x60>
 8001f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d002      	beq.n	8001f9c <OD_getPtr+0x60>
            errCopy = ODR_TYPE_MISMATCH;
 8001f96:	230b      	movs	r3, #11
 8001f98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        } else { /* MISRA C 2004 14.10 */
        }
    }

    if (err != NULL) {
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <OD_getPtr+0x6e>
        *err = errCopy;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001fa8:	701a      	strb	r2, [r3, #0]
    }

    return (errCopy == ODR_OK) ? stream->dataOrig : NULL;
 8001faa:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d102      	bne.n	8001fb8 <OD_getPtr+0x7c>
 8001fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	e000      	b.n	8001fba <OD_getPtr+0x7e>
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3738      	adds	r7, #56	@ 0x38
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <CO_getUint8>:
CO_getUint8(const void* buf) {
 8001fc2:	b480      	push	{r7}
 8001fc4:	b085      	sub	sp, #20
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	73fb      	strb	r3, [r7, #15]
    return value;
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <CO_getUint16>:
CO_getUint16(const void* buf) {
 8001fde:	b480      	push	{r7}
 8001fe0:	b085      	sub	sp, #20
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	81fb      	strh	r3, [r7, #14]
    return value;
 8001fee:	89fb      	ldrh	r3, [r7, #14]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <CO_getUint32>:
CO_getUint32(const void* buf) {
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]
    return value;
 800200a:	68fb      	ldr	r3, [r7, #12]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <CO_setUint32>:
CO_setUint32(void* buf, uint32_t value) {
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8002028:	2304      	movs	r3, #4
}
 800202a:	4618      	mov	r0, r3
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <OD_getIndex+0x14>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	e000      	b.n	800204c <OD_getIndex+0x16>
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8002068:	2305      	movs	r3, #5
 800206a:	e003      	b.n	8002074 <OD_extension_init+0x1c>
    entry->extension = extension;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af02      	add	r7, sp, #8
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	460b      	mov	r3, r1
 800208e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002090:	7af9      	ldrb	r1, [r7, #11]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	2301      	movs	r3, #1
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f7ff fed4 	bl	8001e48 <OD_get_value>
 80020a0:	4603      	mov	r3, r0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <OD_get_u16>:
OD_get_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t* val, bool_t odOrig) {
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af02      	add	r7, sp, #8
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	603b      	str	r3, [r7, #0]
 80020b6:	460b      	mov	r3, r1
 80020b8:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80020ba:	7af9      	ldrb	r1, [r7, #11]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	2302      	movs	r3, #2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f7ff febf 	bl	8001e48 <OD_get_value>
 80020ca:	4603      	mov	r3, r0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af02      	add	r7, sp, #8
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	460b      	mov	r3, r1
 80020e2:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80020e4:	7af9      	ldrb	r1, [r7, #11]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	2304      	movs	r3, #4
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f7ff feaa 	bl	8001e48 <OD_get_value>
 80020f4:	4603      	mov	r3, r0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <OD_write_dummy>:
 * Custom function for write dummy OD object. Will be used only from RPDO.
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_dummy(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80020fe:	b480      	push	{r7}
 8002100:	b085      	sub	sp, #20
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
 800210a:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    if (countWritten != NULL) {
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <OD_write_dummy+0x1a>
        *countWritten = count;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	601a      	str	r2, [r3, #0]
    }
    return ODR_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <OD_read_dummy>:
 * Custom function for read dummy OD object. Will be used only from TPDO.
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_dummy(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8002126:	b580      	push	{r7, lr}
 8002128:	b084      	sub	sp, #16
 800212a:	af00      	add	r7, sp, #0
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	603b      	str	r3, [r7, #0]
    if ((buf == NULL) || (stream == NULL) || (countRead == NULL)) {
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d005      	beq.n	8002146 <OD_read_dummy+0x20>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d002      	beq.n	8002146 <OD_read_dummy+0x20>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8002146:	2309      	movs	r3, #9
 8002148:	e010      	b.n	800216c <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	429a      	cmp	r2, r3
 8002152:	d902      	bls.n	800215a <OD_read_dummy+0x34>
        count = stream->dataLength;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	607b      	str	r3, [r7, #4]
    }

    (void)memset(buf, 0, count);
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	2100      	movs	r1, #0
 800215e:	68b8      	ldr	r0, [r7, #8]
 8002160:	f009 f8ae 	bl	800b2c0 <memset>

    *countRead = count;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <PDOconfigMap>:
 * @param OD Object Dictionary.
 *
 * @return ODR_OK on success, otherwise error reason.
 */
static ODR_t
PDOconfigMap(CO_PDO_common_t* PDO, uint32_t map, uint8_t mapIndex, bool_t isRPDO, OD_t* OD) {
 8002174:	b5b0      	push	{r4, r5, r7, lr}
 8002176:	b092      	sub	sp, #72	@ 0x48
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	4613      	mov	r3, r2
 8002182:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t)(map >> 16);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	0c1b      	lsrs	r3, r3, #16
 8002188:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint8_t subIndex = (uint8_t)(map >> 8);
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	0a1b      	lsrs	r3, r3, #8
 8002190:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t mappedLengthBits = (uint8_t)map;
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t mappedLength = mappedLengthBits >> 3;
 800219a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800219e:	08db      	lsrs	r3, r3, #3
 80021a0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    OD_IO_t* OD_IO = &PDO->OD_IO[mapIndex];
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	015b      	lsls	r3, r3, #5
 80021a8:	3310      	adds	r3, #16
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4413      	add	r3, r2
 80021ae:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 80021b0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d901      	bls.n	80021bc <PDOconfigMap+0x48>
        return ODR_MAP_LEN; /* PDO length exceeded */
 80021b8:	2307      	movs	r3, #7
 80021ba:	e090      	b.n	80022de <PDOconfigMap+0x16a>
    }

    /* is there a reference to the dummy entry */
    if ((index < 0x20U) && (subIndex == 0U)) {
 80021bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80021c0:	2b1f      	cmp	r3, #31
 80021c2:	d81a      	bhi.n	80021fa <PDOconfigMap+0x86>
 80021c4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d116      	bne.n	80021fa <PDOconfigMap+0x86>
        OD_stream_t* stream = &OD_IO->stream;
 80021cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021ce:	63bb      	str	r3, [r7, #56]	@ 0x38
        (void)memset(stream, 0, sizeof(OD_stream_t));
 80021d0:	2218      	movs	r2, #24
 80021d2:	2100      	movs	r1, #0
 80021d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80021d6:	f009 f873 	bl	800b2c0 <memset>
        stream->dataLength = mappedLength;
 80021da:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80021de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021e0:	609a      	str	r2, [r3, #8]
        stream->dataOffset = mappedLength;
 80021e2:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80021e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021e8:	60da      	str	r2, [r3, #12]
        OD_IO->read = OD_read_dummy;
 80021ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021ec:	4a3e      	ldr	r2, [pc, #248]	@ (80022e8 <PDOconfigMap+0x174>)
 80021ee:	619a      	str	r2, [r3, #24]
        OD_IO->write = OD_write_dummy;
 80021f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021f2:	4a3e      	ldr	r2, [pc, #248]	@ (80022ec <PDOconfigMap+0x178>)
 80021f4:	61da      	str	r2, [r3, #28]
        return ODR_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e071      	b.n	80022de <PDOconfigMap+0x16a>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t* entry = OD_find(OD, index);
 80021fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80021fe:	4619      	mov	r1, r3
 8002200:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002202:	f7ff fc9f 	bl	8001b44 <OD_find>
 8002206:	6378      	str	r0, [r7, #52]	@ 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 8002208:	f107 0210 	add.w	r2, r7, #16
 800220c:	f897 1045 	ldrb.w	r1, [r7, #69]	@ 0x45
 8002210:	2300      	movs	r3, #0
 8002212:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002214:	f7ff fcf2 	bl	8001bfc <OD_getSub>
 8002218:	4603      	mov	r3, r0
 800221a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (odRet != ODR_OK) {
 800221e:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <PDOconfigMap+0xb8>
        return odRet;
 8002226:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800222a:	e058      	b.n	80022de <PDOconfigMap+0x16a>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? (OD_attr_t)(ODA_RPDO) : (OD_attr_t)(ODA_TPDO);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <PDOconfigMap+0xc2>
 8002232:	2308      	movs	r3, #8
 8002234:	e000      	b.n	8002238 <PDOconfigMap+0xc4>
 8002236:	2304      	movs	r3, #4
 8002238:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    if (((OD_IOcopy.stream.attribute & testAttribute) == 0U) || ((mappedLengthBits & 0x07U) != 0U)
 800223c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002240:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002244:	4013      	ands	r3, r2
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00a      	beq.n	8002262 <PDOconfigMap+0xee>
 800224c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	2b00      	cmp	r3, #0
 8002256:	d104      	bne.n	8002262 <PDOconfigMap+0xee>
        || (OD_IOcopy.stream.dataLength < mappedLength)) {
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800225e:	429a      	cmp	r2, r3
 8002260:	d201      	bcs.n	8002266 <PDOconfigMap+0xf2>
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 8002262:	2306      	movs	r3, #6
 8002264:	e03b      	b.n	80022de <PDOconfigMap+0x16a>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 8002266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002268:	461d      	mov	r5, r3
 800226a:	f107 0410 	add.w	r4, r7, #16
 800226e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002272:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002276:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    OD_IO->stream.dataOffset = mappedLength;
 800227a:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800227e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002280:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d129      	bne.n	80022dc <PDOconfigMap+0x168>
        if ((subIndex < (OD_FLAGS_PDO_SIZE * 8U)) && (entry->extension != NULL)) {
 8002288:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800228c:	2b1f      	cmp	r3, #31
 800228e:	d81f      	bhi.n	80022d0 <PDOconfigMap+0x15c>
 8002290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d01b      	beq.n	80022d0 <PDOconfigMap+0x15c>
            PDO->flagPDObyte[mapIndex] = &entry->extension->flagsPDO[subIndex >> 3];
 8002298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800229a:	6899      	ldr	r1, [r3, #8]
 800229c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80022a0:	08db      	lsrs	r3, r3, #3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	79fa      	ldrb	r2, [r7, #7]
 80022a6:	3308      	adds	r3, #8
 80022a8:	440b      	add	r3, r1
 80022aa:	1d19      	adds	r1, r3, #4
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	3244      	adds	r2, #68	@ 0x44
 80022b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1U << (subIndex & 0x07U);
 80022b4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	2201      	movs	r2, #1
 80022be:	409a      	lsls	r2, r3
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	b2d1      	uxtb	r1, r2
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4413      	add	r3, r2
 80022c8:	460a      	mov	r2, r1
 80022ca:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 80022ce:	e005      	b.n	80022dc <PDOconfigMap+0x168>
        } else {
            PDO->flagPDObyte[mapIndex] = NULL;
 80022d0:	79fa      	ldrb	r2, [r7, #7]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	3244      	adds	r2, #68	@ 0x44
 80022d6:	2100      	movs	r1, #0
 80022d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3748      	adds	r7, #72	@ 0x48
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bdb0      	pop	{r4, r5, r7, pc}
 80022e6:	bf00      	nop
 80022e8:	08002127 	.word	0x08002127
 80022ec:	080020ff 	.word	0x080020ff

080022f0 <PDO_initMapping>:
 *
 * @return #CO_ReturnError_t CO_ERROR_NO on success.
 */
static CO_ReturnError_t
PDO_initMapping(CO_PDO_common_t* PDO, OD_t* OD, OD_entry_t* OD_PDOMapPar, bool_t isRPDO, uint32_t* errInfo,
                uint32_t* erroneousMap) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08c      	sub	sp, #48	@ 0x30
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t mappedObjectsCount = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 8002306:	f107 021b 	add.w	r2, r7, #27
 800230a:	2301      	movs	r3, #1
 800230c:	2100      	movs	r1, #0
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff feb6 	bl	8002080 <OD_get_u8>
 8002314:	4603      	mov	r3, r0
 8002316:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 800231a:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00c      	beq.n	800233c <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 8002322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002324:	2b00      	cmp	r3, #0
 8002326:	d006      	beq.n	8002336 <PDO_initMapping+0x46>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff fe84 	bl	8002036 <OD_getIndex>
 800232e:	4603      	mov	r3, r0
 8002330:	021a      	lsls	r2, r3, #8
 8002332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002334:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002336:	f06f 030b 	mvn.w	r3, #11
 800233a:	e07f      	b.n	800243c <PDO_initMapping+0x14c>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 800233c:	2300      	movs	r3, #0
 800233e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002342:	e05b      	b.n	80023fc <PDO_initMapping+0x10c>
        OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8002344:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002348:	015b      	lsls	r3, r3, #5
 800234a:	3310      	adds	r3, #16
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1U, &map, true);
 8002356:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800235a:	3301      	adds	r3, #1
 800235c:	b2d9      	uxtb	r1, r3
 800235e:	f107 0214 	add.w	r2, r7, #20
 8002362:	2301      	movs	r3, #1
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff feb5 	bl	80020d4 <OD_get_u32>
 800236a:	4603      	mov	r3, r0
 800236c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 8002370:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002374:	2b0e      	cmp	r3, #14
 8002376:	d03b      	beq.n	80023f0 <PDO_initMapping+0x100>
            continue;
        }
        if (odRet != ODR_OK) {
 8002378:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00f      	beq.n	80023a0 <PDO_initMapping+0xb0>
            if (errInfo != NULL) {
 8002380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <PDO_initMapping+0xaa>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8) | i;
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff fe55 	bl	8002036 <OD_getIndex>
 800238c:	4603      	mov	r3, r0
 800238e:	021a      	lsls	r2, r3, #8
 8002390:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002394:	431a      	orrs	r2, r3
 8002396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002398:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 800239a:	f06f 030b 	mvn.w	r3, #11
 800239e:	e04d      	b.n	800243c <PDO_initMapping+0x14c>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 80023a0:	6979      	ldr	r1, [r7, #20]
 80023a2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f7ff fee1 	bl	8002174 <PDOconfigMap>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (odRet != ODR_OK) {
 80023b8:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00c      	beq.n	80023da <PDO_initMapping+0xea>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	22ff      	movs	r2, #255	@ 0xff
 80023ca:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0U) {
 80023cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <PDO_initMapping+0xea>
                *erroneousMap = map;
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d8:	601a      	str	r2, [r3, #0]
            }
        }

        if (i < mappedObjectsCount) {
 80023da:	7efb      	ldrb	r3, [r7, #27]
 80023dc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d206      	bcs.n	80023f2 <PDO_initMapping+0x102>
            pdoDataLength += OD_IO->stream.dataOffset;
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023ea:	4413      	add	r3, r2
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ee:	e000      	b.n	80023f2 <PDO_initMapping+0x102>
            continue;
 80023f0:	bf00      	nop
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 80023f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80023f6:	3301      	adds	r3, #1
 80023f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80023fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002400:	2b07      	cmp	r3, #7
 8002402:	d99f      	bls.n	8002344 <PDO_initMapping+0x54>
        }
    }
    if ((pdoDataLength > CO_PDO_MAX_SIZE) || ((pdoDataLength == 0U) && (mappedObjectsCount > 0U))) {
 8002404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002406:	2b08      	cmp	r3, #8
 8002408:	d805      	bhi.n	8002416 <PDO_initMapping+0x126>
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	2b00      	cmp	r3, #0
 800240e:	d109      	bne.n	8002424 <PDO_initMapping+0x134>
 8002410:	7efb      	ldrb	r3, [r7, #27]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d006      	beq.n	8002424 <PDO_initMapping+0x134>
        if (*erroneousMap == 0U) {
 8002416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d102      	bne.n	8002424 <PDO_initMapping+0x134>
            *erroneousMap = 1;
 800241e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002420:	2201      	movs	r2, #1
 8002422:	601a      	str	r2, [r3, #0]
        }
    }

    if (*erroneousMap == 0U) {
 8002424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d106      	bne.n	800243a <PDO_initMapping+0x14a>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 800242c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242e:	b2da      	uxtb	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8002434:	7efa      	ldrb	r2, [r7, #27]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3728      	adds	r7, #40	@ 0x28
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <OD_write_PDO_mapping>:
 * Custom function for writing OD object "PDO mapping parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_PDO_mapping(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b08e      	sub	sp, #56	@ 0x38
 8002448:	af02      	add	r7, sp, #8
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES)) {
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d009      	beq.n	800246c <OD_write_PDO_mapping+0x28>
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d006      	beq.n	800246c <OD_write_PDO_mapping+0x28>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <OD_write_PDO_mapping+0x28>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	7d1b      	ldrb	r3, [r3, #20]
 8002468:	2b08      	cmp	r3, #8
 800246a:	d901      	bls.n	8002470 <OD_write_PDO_mapping+0x2c>
        return ODR_DEV_INCOMPAT;
 800246c:	2309      	movs	r3, #9
 800246e:	e07e      	b.n	800256e <OD_write_PDO_mapping+0x12a>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t* PDO = stream->object;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	627b      	str	r3, [r7, #36]	@ 0x24

    /* PDO must be disabled before mapping configuration */
    if ((PDO->valid) || ((PDO->mappedObjectsCount != 0U) && (stream->subIndex > 0U))) {
 8002476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d107      	bne.n	800248e <OD_write_PDO_mapping+0x4a>
 800247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002480:	7b5b      	ldrb	r3, [r3, #13]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <OD_write_PDO_mapping+0x4e>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	7d1b      	ldrb	r3, [r3, #20]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 800248e:	2302      	movs	r3, #2
 8002490:	e06d      	b.n	800256e <OD_write_PDO_mapping+0x12a>
    }

    if (stream->subIndex == 0U) {
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	7d1b      	ldrb	r3, [r3, #20]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d145      	bne.n	8002526 <OD_write_PDO_mapping+0xe2>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 800249a:	68b8      	ldr	r0, [r7, #8]
 800249c:	f7ff fd91 	bl	8001fc2 <CO_getUint8>
 80024a0:	4603      	mov	r3, r0
 80024a2:	77bb      	strb	r3, [r7, #30]
        size_t pdoDataLength = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 80024a8:	7fbb      	ldrb	r3, [r7, #30]
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d901      	bls.n	80024b2 <OD_write_PDO_mapping+0x6e>
            return ODR_MAP_LEN;
 80024ae:	2307      	movs	r3, #7
 80024b0:	e05d      	b.n	800256e <OD_write_PDO_mapping+0x12a>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 80024b2:	2300      	movs	r3, #0
 80024b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024b8:	e01b      	b.n	80024f2 <OD_write_PDO_mapping+0xae>
            OD_IO_t* OD_IO = &PDO->OD_IO[i];
 80024ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80024be:	015b      	lsls	r3, r3, #5
 80024c0:	3310      	adds	r3, #16
 80024c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c4:	4413      	add	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
            size_t dataLength = (size_t)OD_IO->stream.dataLength;
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	617b      	str	r3, [r7, #20]
            size_t mappedLength = (size_t)OD_IO->stream.dataOffset;
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	613b      	str	r3, [r7, #16]

            if (mappedLength > dataLength) {
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d901      	bls.n	80024e0 <OD_write_PDO_mapping+0x9c>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 80024dc:	2306      	movs	r3, #6
 80024de:	e046      	b.n	800256e <OD_write_PDO_mapping+0x12a>
            }
            pdoDataLength += mappedLength;
 80024e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4413      	add	r3, r2
 80024e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 80024e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80024ec:	3301      	adds	r3, #1
 80024ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024f2:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80024f6:	7fbb      	ldrb	r3, [r7, #30]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d3de      	bcc.n	80024ba <OD_write_PDO_mapping+0x76>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 80024fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d901      	bls.n	8002506 <OD_write_PDO_mapping+0xc2>
            return ODR_MAP_LEN;
 8002502:	2307      	movs	r3, #7
 8002504:	e033      	b.n	800256e <OD_write_PDO_mapping+0x12a>
        }
        if ((pdoDataLength == 0U) && (mappedObjectsCount > 0U)) {
 8002506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002508:	2b00      	cmp	r3, #0
 800250a:	d104      	bne.n	8002516 <OD_write_PDO_mapping+0xd2>
 800250c:	7fbb      	ldrb	r3, [r7, #30]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <OD_write_PDO_mapping+0xd2>
            return ODR_INVALID_VALUE;
 8002512:	230f      	movs	r3, #15
 8002514:	e02b      	b.n	800256e <OD_write_PDO_mapping+0x12a>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8002516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002518:	b2da      	uxtb	r2, r3
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 800251e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002520:	7fba      	ldrb	r2, [r7, #30]
 8002522:	735a      	strb	r2, [r3, #13]
 8002524:	e01c      	b.n	8002560 <OD_write_PDO_mapping+0x11c>
    } else {
        uint32_t val = CO_getUint32(buf);
 8002526:	68b8      	ldr	r0, [r7, #8]
 8002528:	f7ff fd68 	bl	8001ffc <CO_getUint32>
 800252c:	6238      	str	r0, [r7, #32]
        ODR_t odRet = PDOconfigMap(PDO, val, stream->subIndex - 1U, PDO->isRPDO, PDO->OD);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	7d1b      	ldrb	r3, [r3, #20]
 8002532:	3b01      	subs	r3, #1
 8002534:	b2da      	uxtb	r2, r3
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	f8d3 1138 	ldr.w	r1, [r3, #312]	@ 0x138
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	460b      	mov	r3, r1
 8002546:	6a39      	ldr	r1, [r7, #32]
 8002548:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800254a:	f7ff fe13 	bl	8002174 <PDOconfigMap>
 800254e:	4603      	mov	r3, r0
 8002550:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 8002552:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <OD_write_PDO_mapping+0x11c>
            return odRet;
 800255a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800255e:	e006      	b.n	800256e <OD_write_PDO_mapping+0x12a>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f7ff fa63 	bl	8001a32 <OD_writeOriginal>
 800256c:	4603      	mov	r3, r0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3730      	adds	r7, #48	@ 0x30
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <OD_read_PDO_commParam>:
 * Custom function for reading OD object "PDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_PDO_commParam(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8002576:	b580      	push	{r7, lr}
 8002578:	b088      	sub	sp, #32
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f7ff f9f9 	bl	8001982 <OD_readOriginal>
 8002590:	4603      	mov	r3, r0
 8002592:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if ((returnCode == ODR_OK) && (stream->subIndex == 1U) && (*countRead == 4U)) {
 8002594:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d134      	bne.n	8002606 <OD_read_PDO_commParam+0x90>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	7d1b      	ldrb	r3, [r3, #20]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d130      	bne.n	8002606 <OD_read_PDO_commParam+0x90>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d12c      	bne.n	8002606 <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t* PDO = stream->object;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 80025b2:	68b8      	ldr	r0, [r7, #8]
 80025b4:	f7ff fd22 	bl	8001ffc <CO_getUint32>
 80025b8:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025c2:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if ((CAN_ID != 0U) && (CAN_ID == (PDO->preDefinedCanId & 0xFF80U))) {
 80025c4:	8a7b      	ldrh	r3, [r7, #18]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d011      	beq.n	80025ee <OD_read_PDO_commParam+0x78>
 80025ca:	8a7a      	ldrh	r2, [r7, #18]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 80025d2:	4619      	mov	r1, r3
 80025d4:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80025d8:	400b      	ands	r3, r1
 80025da:	429a      	cmp	r2, r3
 80025dc:	d107      	bne.n	80025ee <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000U) | PDO->preDefinedCanId;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	0c1b      	lsrs	r3, r3, #16
 80025e2:	041b      	lsls	r3, r3, #16
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	f8b2 2142 	ldrh.w	r2, [r2, #322]	@ 0x142
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) {
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d103      	bne.n	80025fe <OD_read_PDO_commParam+0x88>
            COB_ID |= 0x80000000U;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80025fc:	61fb      	str	r3, [r7, #28]
        }

        (void)CO_setUint32(buf, COB_ID);
 80025fe:	69f9      	ldr	r1, [r7, #28]
 8002600:	68b8      	ldr	r0, [r7, #8]
 8002602:	f7ff fd09 	bl	8002018 <CO_setUint32>
    }

    return returnCode;
 8002606:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3720      	adds	r7, #32
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <OD_write_18xx>:
 * Custom function for writing OD object "TPDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_18xx(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b093      	sub	sp, #76	@ 0x4c
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (count > 4U)) {
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <OD_write_18xx+0x26>
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <OD_write_18xx+0x26>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <OD_write_18xx+0x26>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b04      	cmp	r3, #4
 8002638:	d901      	bls.n	800263e <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 800263a:	2309      	movs	r3, #9
 800263c:	e136      	b.n	80028ac <OD_write_18xx+0x298>
    }

    CO_TPDO_t* TPDO = stream->object;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	63bb      	str	r3, [r7, #56]	@ 0x38
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 8002644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002646:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t bufCopy[4];
    (void)memcpy((void*)bufCopy, (const void*)buf, count);
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	4618      	mov	r0, r3
 8002652:	f008 fec0 	bl	800b3d6 <memcpy>

    switch (stream->subIndex) {
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	7d1b      	ldrb	r3, [r3, #20]
 800265a:	3b01      	subs	r3, #1
 800265c:	2b05      	cmp	r3, #5
 800265e:	f200 811a 	bhi.w	8002896 <OD_write_18xx+0x282>
 8002662:	a201      	add	r2, pc, #4	@ (adr r2, 8002668 <OD_write_18xx+0x54>)
 8002664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002668:	08002681 	.word	0x08002681
 800266c:	080027b7 	.word	0x080027b7
 8002670:	08002819 	.word	0x08002819
 8002674:	08002897 	.word	0x08002897
 8002678:	08002847 	.word	0x08002847
 800267c:	0800286b 	.word	0x0800286b
        case 1: { /* COB-ID used by PDO */
            uint32_t COB_ID = CO_getUint32(buf);
 8002680:	68b8      	ldr	r0, [r7, #8]
 8002682:	f7ff fcbb 	bl	8001ffc <CO_getUint32>
 8002686:	6238      	str	r0, [r7, #32]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	b29b      	uxth	r3, r3
 800268c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002690:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	43db      	mvns	r3, r3
 8002696:	0fdb      	lsrs	r3, r3, #31
 8002698:	b2db      	uxtb	r3, r3
 800269a:	61fb      	str	r3, [r7, #28]

            /* bits 11...29 must be zero, PDO must be disabled on change, CAN_ID == 0 is
             * not allowed, mapping must be configured before enabling the PDO */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && (PDO->valid && (CAN_ID != PDO->configuredCanId)))
 800269c:	6a3a      	ldr	r2, [r7, #32]
 800269e:	4b85      	ldr	r3, [pc, #532]	@ (80028b4 <OD_write_18xx+0x2a0>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d13d      	bne.n	8002722 <OD_write_18xx+0x10e>
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d009      	beq.n	80026c0 <OD_write_18xx+0xac>
 80026ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <OD_write_18xx+0xac>
 80026b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026b6:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 80026ba:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80026bc:	429a      	cmp	r2, r3
 80026be:	d130      	bne.n	8002722 <OD_write_18xx+0x10e>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID)) || (valid && (PDO->mappedObjectsCount == 0U))) {
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d026      	beq.n	8002714 <OD_write_18xx+0x100>
 80026c6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80026c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80026ca:	d92a      	bls.n	8002722 <OD_write_18xx+0x10e>
 80026cc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80026ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026d2:	d903      	bls.n	80026dc <OD_write_18xx+0xc8>
 80026d4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80026d6:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 80026da:	d922      	bls.n	8002722 <OD_write_18xx+0x10e>
 80026dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80026de:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 80026e2:	d903      	bls.n	80026ec <OD_write_18xx+0xd8>
 80026e4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80026e6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80026ea:	d31a      	bcc.n	8002722 <OD_write_18xx+0x10e>
 80026ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80026ee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80026f2:	d903      	bls.n	80026fc <OD_write_18xx+0xe8>
 80026f4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80026f6:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 80026fa:	d312      	bcc.n	8002722 <OD_write_18xx+0x10e>
 80026fc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80026fe:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8002702:	d303      	bcc.n	800270c <OD_write_18xx+0xf8>
 8002704:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002706:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800270a:	d30a      	bcc.n	8002722 <OD_write_18xx+0x10e>
 800270c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800270e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002712:	d806      	bhi.n	8002722 <OD_write_18xx+0x10e>
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d005      	beq.n	8002726 <OD_write_18xx+0x112>
 800271a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800271c:	7b5b      	ldrb	r3, [r3, #13]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <OD_write_18xx+0x112>
                return ODR_INVALID_VALUE;
 8002722:	230f      	movs	r3, #15
 8002724:	e0c2      	b.n	80028ac <OD_write_18xx+0x298>
            }

            /* parameter changed? */
            if ((valid != PDO->valid) || (CAN_ID != PDO->configuredCanId)) {
 8002726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	429a      	cmp	r2, r3
 800272e:	d106      	bne.n	800273e <OD_write_18xx+0x12a>
 8002730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002732:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8002736:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002738:	429a      	cmp	r2, r3
 800273a:	f000 80ae 	beq.w	800289a <OD_write_18xx+0x286>
                /* if default CAN-ID is written, store to OD without Node-ID */
                if (CAN_ID == PDO->preDefinedCanId) {
 800273e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002740:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8002744:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002746:	429a      	cmp	r2, r3
 8002748:	d108      	bne.n	800275c <OD_write_18xx+0x148>
                    (void)CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80U);
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fc5e 	bl	8002018 <CO_setUint32>
                }
                if (!valid) {
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <OD_write_18xx+0x152>
                    CAN_ID = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                }

                CO_CANtx_t* CANtxBuff = CO_CANtxBufferInit(
 8002766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002768:	6858      	ldr	r0, [r3, #4]
 800276a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800276c:	f8b3 1140 	ldrh.w	r1, [r3, #320]	@ 0x140
 8002770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002772:	7b1b      	ldrb	r3, [r3, #12]
                    PDO->CANdev, PDO->CANdevIdx, CAN_ID, false, PDO->dataLength,
                    TPDO->transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240);
 8002774:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002776:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
                CO_CANtx_t* CANtxBuff = CO_CANtxBufferInit(
 800277a:	2af0      	cmp	r2, #240	@ 0xf0
 800277c:	bf94      	ite	ls
 800277e:	2201      	movls	r2, #1
 8002780:	2200      	movhi	r2, #0
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	4614      	mov	r4, r2
 8002786:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002788:	9401      	str	r4, [sp, #4]
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	2300      	movs	r3, #0
 800278e:	f004 fd17 	bl	80071c0 <CO_CANtxBufferInit>
 8002792:	61b8      	str	r0, [r7, #24]

                if (CANtxBuff == NULL) {
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <OD_write_18xx+0x18a>
                    return ODR_DEV_INCOMPAT;
 800279a:	2309      	movs	r3, #9
 800279c:	e086      	b.n	80028ac <OD_write_18xx+0x298>
                }

                TPDO->CANtxBuff = CANtxBuff;
 800279e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
                PDO->valid = valid;
 80027a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027a8:	69fa      	ldr	r2, [r7, #28]
 80027aa:	609a      	str	r2, [r3, #8]
                PDO->configuredCanId = CAN_ID;
 80027ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ae:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80027b0:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
            }
            break;
 80027b4:	e071      	b.n	800289a <OD_write_18xx+0x286>
        }

        case 2: { /* transmission type */ uint8_t transmissionType = CO_getUint8(buf);
 80027b6:	68b8      	ldr	r0, [r7, #8]
 80027b8:	f7ff fc03 	bl	8001fc2 <CO_getUint8>
 80027bc:	4603      	mov	r3, r0
 80027be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
            if ((transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 80027c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027c6:	2bf0      	cmp	r3, #240	@ 0xf0
 80027c8:	d905      	bls.n	80027d6 <OD_write_18xx+0x1c2>
                && (transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 80027ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027ce:	2bfd      	cmp	r3, #253	@ 0xfd
 80027d0:	d801      	bhi.n	80027d6 <OD_write_18xx+0x1c2>
                return ODR_INVALID_VALUE;
 80027d2:	230f      	movs	r3, #15
 80027d4:	e06a      	b.n	80028ac <OD_write_18xx+0x298>
            }
            TPDO->CANtxBuff->syncFlag = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 80027d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027da:	2bf0      	cmp	r3, #240	@ 0xf0
 80027dc:	bf94      	ite	ls
 80027de:	2301      	movls	r3, #1
 80027e0:	2300      	movhi	r3, #0
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027e6:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 80027ea:	615a      	str	r2, [r3, #20]
            TPDO->syncCounter = 255;
 80027ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ee:	22ff      	movs	r2, #255	@ 0xff
 80027f0:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
#else
            if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
                return ODR_INVALID_VALUE;
            }
#endif
            TPDO->transmissionType = transmissionType;
 80027f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80027fa:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
            TPDO->sendRequest = true;
 80027fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002800:	2201      	movs	r2, #1
 8002802:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            TPDO->inhibitTimer = 0;
 8002806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002808:	2200      	movs	r2, #0
 800280a:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
            TPDO->eventTimer = 0;
 800280e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002810:	2200      	movs	r2, #0
 8002812:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
#endif
            break;
 8002816:	e041      	b.n	800289c <OD_write_18xx+0x288>
        }

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
        case 3: { /* inhibit time */
            if (PDO->valid) {
 8002818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <OD_write_18xx+0x210>
                return ODR_INVALID_VALUE;
 8002820:	230f      	movs	r3, #15
 8002822:	e043      	b.n	80028ac <OD_write_18xx+0x298>
            }
            uint32_t inhibitTime = CO_getUint16(buf);
 8002824:	68b8      	ldr	r0, [r7, #8]
 8002826:	f7ff fbda 	bl	8001fde <CO_getUint16>
 800282a:	4603      	mov	r3, r0
 800282c:	62bb      	str	r3, [r7, #40]	@ 0x28
            TPDO->inhibitTime_us = inhibitTime * 100U;
 800282e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002830:	2264      	movs	r2, #100	@ 0x64
 8002832:	fb03 f202 	mul.w	r2, r3, r2
 8002836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002838:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
            TPDO->inhibitTimer = 0;
 800283c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800283e:	2200      	movs	r2, #0
 8002840:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
            break;
 8002844:	e02a      	b.n	800289c <OD_write_18xx+0x288>
        }

        case 5: { /* event-timer */
            uint32_t eventTime = CO_getUint16(buf);
 8002846:	68b8      	ldr	r0, [r7, #8]
 8002848:	f7ff fbc9 	bl	8001fde <CO_getUint16>
 800284c:	4603      	mov	r3, r0
 800284e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            TPDO->eventTime_us = eventTime * 1000U;
 8002850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002852:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002856:	fb03 f202 	mul.w	r2, r3, r2
 800285a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800285c:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
            TPDO->eventTimer = 0;
 8002860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002862:	2200      	movs	r2, #0
 8002864:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            break;
 8002868:	e018      	b.n	800289c <OD_write_18xx+0x288>
        }
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        case 6: { /* SYNC start value */
            uint8_t syncStartValue = CO_getUint8(buf);
 800286a:	68b8      	ldr	r0, [r7, #8]
 800286c:	f7ff fba9 	bl	8001fc2 <CO_getUint8>
 8002870:	4603      	mov	r3, r0
 8002872:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            if (PDO->valid || (syncStartValue > 240U)) {
 8002876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d103      	bne.n	8002886 <OD_write_18xx+0x272>
 800287e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002882:	2bf0      	cmp	r3, #240	@ 0xf0
 8002884:	d901      	bls.n	800288a <OD_write_18xx+0x276>
                return ODR_INVALID_VALUE;
 8002886:	230f      	movs	r3, #15
 8002888:	e010      	b.n	80028ac <OD_write_18xx+0x298>
            }
            TPDO->syncStartValue = syncStartValue;
 800288a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800288c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8002890:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
            break;
 8002894:	e002      	b.n	800289c <OD_write_18xx+0x288>
        }
#endif
        default:
            /* MISRA C 2004 15.3 */
            break;
 8002896:	bf00      	nop
 8002898:	e000      	b.n	800289c <OD_write_18xx+0x288>
            break;
 800289a:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 800289c:	f107 0114 	add.w	r1, r7, #20
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f7ff f8c4 	bl	8001a32 <OD_writeOriginal>
 80028aa:	4603      	mov	r3, r0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3744      	adds	r7, #68	@ 0x44
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd90      	pop	{r4, r7, pc}
 80028b4:	3ffff800 	.word	0x3ffff800

080028b8 <CO_TPDO_init>:
CO_TPDO_init(CO_TPDO_t* TPDO, OD_t* OD, CO_EM_t* em,
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
             CO_SYNC_t* SYNC,
#endif
             uint16_t preDefinedCanId, OD_entry_t* OD_18xx_TPDOCommPar, OD_entry_t* OD_1Axx_TPDOMapPar,
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx, uint32_t* errInfo) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08e      	sub	sp, #56	@ 0x38
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
    ODR_t odRet;

    /* verify arguments */
    if ((TPDO == NULL) || (OD == NULL) || (em == NULL) || (OD_18xx_TPDOCommPar == NULL) || (OD_1Axx_TPDOMapPar == NULL)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00e      	beq.n	80028ee <CO_TPDO_init+0x36>
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00b      	beq.n	80028ee <CO_TPDO_init+0x36>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <CO_TPDO_init+0x36>
 80028dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <CO_TPDO_init+0x36>
 80028e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d002      	beq.n	80028ee <CO_TPDO_init+0x36>
        || (CANdevTx == NULL)) {
 80028e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d102      	bne.n	80028f4 <CO_TPDO_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80028ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028f2:	e144      	b.n	8002b7e <CO_TPDO_init+0x2c6>
    }

    /* clear object */
    (void)memset(TPDO, 0, sizeof(CO_TPDO_t));
 80028f4:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 80028f8:	2100      	movs	r1, #0
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f008 fce0 	bl	800b2c0 <memset>

    /* Configure object variables */
    PDO->em = em;
 8002900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800290a:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO, OD, OD_1Axx_TPDOMapPar, false, errInfo, &erroneousMap);
 8002910:	f107 031c 	add.w	r3, r7, #28
 8002914:	9301      	str	r3, [sp, #4]
 8002916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	2300      	movs	r3, #0
 800291c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002922:	f7ff fce5 	bl	80022f0 <PDO_initMapping>
 8002926:	4603      	mov	r3, r0
 8002928:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (ret != CO_ERROR_NO) {
 800292c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <CO_TPDO_init+0x82>
        return ret;
 8002934:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002938:	e121      	b.n	8002b7e <CO_TPDO_init+0x2c6>
    }

    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 800293a:	23fe      	movs	r3, #254	@ 0xfe
 800293c:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 800293e:	f107 021b 	add.w	r2, r7, #27
 8002942:	2301      	movs	r3, #1
 8002944:	2102      	movs	r1, #2
 8002946:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002948:	f7ff fb9a 	bl	8002080 <OD_get_u8>
 800294c:	4603      	mov	r3, r0
 800294e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 8002952:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00e      	beq.n	8002978 <CO_TPDO_init+0xc0>
        if (errInfo != NULL) {
 800295a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <CO_TPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2U;
 8002960:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002962:	f7ff fb68 	bl	8002036 <OD_getIndex>
 8002966:	4603      	mov	r3, r0
 8002968:	021b      	lsls	r3, r3, #8
 800296a:	f043 0202 	orr.w	r2, r3, #2
 800296e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002970:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002972:	f06f 030b 	mvn.w	r3, #11
 8002976:	e102      	b.n	8002b7e <CO_TPDO_init+0x2c6>
    }
    if ((transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)
 8002978:	7efb      	ldrb	r3, [r7, #27]
 800297a:	2bfd      	cmp	r3, #253	@ 0xfd
 800297c:	d804      	bhi.n	8002988 <CO_TPDO_init+0xd0>
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        && (transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 800297e:	7efb      	ldrb	r3, [r7, #27]
 8002980:	2bf0      	cmp	r3, #240	@ 0xf0
 8002982:	d901      	bls.n	8002988 <CO_TPDO_init+0xd0>
#endif
    ) {
        transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 8002984:	23fe      	movs	r3, #254	@ 0xfe
 8002986:	76fb      	strb	r3, [r7, #27]
    }
    TPDO->transmissionType = transmissionType;
 8002988:	7efa      	ldrb	r2, [r7, #27]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
    TPDO->sendRequest = true;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 800299c:	f107 0214 	add.w	r2, r7, #20
 80029a0:	2301      	movs	r3, #1
 80029a2:	2101      	movs	r1, #1
 80029a4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80029a6:	f7ff fb95 	bl	80020d4 <OD_get_u32>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 80029b0:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00e      	beq.n	80029d6 <CO_TPDO_init+0x11e>
        if (errInfo != NULL) {
 80029b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d008      	beq.n	80029d0 <CO_TPDO_init+0x118>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1U;
 80029be:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80029c0:	f7ff fb39 	bl	8002036 <OD_getIndex>
 80029c4:	4603      	mov	r3, r0
 80029c6:	021b      	lsls	r3, r3, #8
 80029c8:	f043 0201 	orr.w	r2, r3, #1
 80029cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029ce:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80029d0:	f06f 030b 	mvn.w	r3, #11
 80029d4:	e0d3      	b.n	8002b7e <CO_TPDO_init+0x2c6>
    }

    bool_t valid = (COB_ID & 0x80000000U) == 0U;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	43db      	mvns	r3, r3
 80029da:	0fdb      	lsrs	r3, r3, #31
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029e8:	857b      	strh	r3, [r7, #42]	@ 0x2a
    if (valid && ((PDO->mappedObjectsCount == 0U) || (CAN_ID == 0U))) {
 80029ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00d      	beq.n	8002a0c <CO_TPDO_init+0x154>
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	7b5b      	ldrb	r3, [r3, #13]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <CO_TPDO_init+0x146>
 80029f8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <CO_TPDO_init+0x154>
        valid = false;
 80029fe:	2300      	movs	r3, #0
 8002a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (erroneousMap == 0U) {
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <CO_TPDO_init+0x154>
            erroneousMap = 1;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	61fb      	str	r3, [r7, #28]
        }
    }

    if (erroneousMap != 0U) {
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00e      	beq.n	8002a30 <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d001      	beq.n	8002a20 <CO_TPDO_init+0x168>
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	e000      	b.n	8002a22 <CO_TPDO_init+0x16a>
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 8002a28:	221a      	movs	r2, #26
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	f7fe f935 	bl	8000c9a <CO_error>
                       (erroneousMap != 1U) ? erroneousMap : COB_ID);
    }
    if (!valid) {
 8002a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <CO_TPDO_init+0x182>
        CAN_ID = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if ((CAN_ID != 0U) && (CAN_ID == (preDefinedCanId & 0xFF80U))) {
 8002a3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <CO_TPDO_init+0x19a>
 8002a40:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002a42:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8002a44:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8002a48:	400b      	ands	r3, r1
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d101      	bne.n	8002a52 <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 8002a4e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002a50:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CAN_ID, false, PDO->dataLength,
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	7b1b      	ldrb	r3, [r3, #12]
                                         TPDO->transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240);
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
    TPDO->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CAN_ID, false, PDO->dataLength,
 8002a5c:	2af0      	cmp	r2, #240	@ 0xf0
 8002a5e:	bf94      	ite	ls
 8002a60:	2201      	movls	r2, #1
 8002a62:	2200      	movhi	r2, #0
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	4610      	mov	r0, r2
 8002a68:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002a6a:	f8b7 1048 	ldrh.w	r1, [r7, #72]	@ 0x48
 8002a6e:	9001      	str	r0, [sp, #4]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	2300      	movs	r3, #0
 8002a74:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002a76:	f004 fba3 	bl	80071c0 <CO_CANtxBufferInit>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168

    if (TPDO->CANtxBuff == NULL) {
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d102      	bne.n	8002a92 <CO_TPDO_init+0x1da>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002a8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a90:	e075      	b.n	8002b7e <CO_TPDO_init+0x2c6>
    }

    PDO->valid = valid;
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a96:	609a      	str	r2, [r3, #8]

    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
    uint16_t inhibitTime = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	823b      	strh	r3, [r7, #16]
    (void)OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 8002aa0:	f107 0212 	add.w	r2, r7, #18
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	2103      	movs	r1, #3
 8002aa8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002aaa:	f7ff fafe 	bl	80020aa <OD_get_u16>
    (void)OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 8002aae:	f107 0210 	add.w	r2, r7, #16
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	2105      	movs	r1, #5
 8002ab6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002ab8:	f7ff faf7 	bl	80020aa <OD_get_u16>
    TPDO->inhibitTime_us = (uint32_t)inhibitTime * 100U;
 8002abc:	8a7b      	ldrh	r3, [r7, #18]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	2364      	movs	r3, #100	@ 0x64
 8002ac2:	fb03 f202 	mul.w	r2, r3, r2
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
    TPDO->eventTime_us = (uint32_t)eventTime * 1000U;
 8002acc:	8a3b      	ldrh	r3, [r7, #16]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ad4:	fb03 f202 	mul.w	r2, r3, r2
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
#endif

    /* Configure communication parameter - SYNC start value (optional) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
    TPDO->syncStartValue = 0;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
    (void)OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f503 72bc 	add.w	r2, r3, #376	@ 0x178
 8002aec:	2301      	movs	r3, #1
 8002aee:	2106      	movs	r1, #6
 8002af0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002af2:	f7ff fac5 	bl	8002080 <OD_get_u8>
    TPDO->SYNC = SYNC;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
    TPDO->syncCounter = 255;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	22ff      	movs	r2, #255	@ 0xff
 8002b02:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
#endif

    /* Configure OD extensions */
#if ((CO_CONFIG_PDO)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    PDO->isRPDO = false;
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    PDO->OD = OD;
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    PDO->CANdevIdx = CANdevTxIdx;
 8002b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b18:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002b1c:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    PDO->preDefinedCanId = preDefinedCanId;
 8002b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b22:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002b24:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142
    PDO->configuredCanId = CAN_ID;
 8002b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002b2c:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
    PDO->OD_communicationParam_ext.object = TPDO;
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	4a13      	ldr	r2, [pc, #76]	@ (8002b88 <CO_TPDO_init+0x2d0>)
 8002b3c:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 8002b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b42:	4a12      	ldr	r2, [pc, #72]	@ (8002b8c <CO_TPDO_init+0x2d4>)
 8002b44:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
    PDO->OD_mappingParam_extension.object = TPDO;
 8002b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8002b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b52:	4a0f      	ldr	r2, [pc, #60]	@ (8002b90 <CO_TPDO_init+0x2d8>)
 8002b54:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8002b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5a:	4a0e      	ldr	r2, [pc, #56]	@ (8002b94 <CO_TPDO_init+0x2dc>)
 8002b5c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    (void)OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 8002b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b62:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8002b66:	4619      	mov	r1, r3
 8002b68:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002b6a:	f7ff fa75 	bl	8002058 <OD_extension_init>
    (void)OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b70:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8002b74:	4619      	mov	r1, r3
 8002b76:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002b78:	f7ff fa6e 	bl	8002058 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3730      	adds	r7, #48	@ 0x30
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	08002577 	.word	0x08002577
 8002b8c:	08002615 	.word	0x08002615
 8002b90:	08001983 	.word	0x08001983
 8002b94:	08002445 	.word	0x08002445

08002b98 <CO_TPDOsend>:
 * @param TPDO TPDO object.
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t
CO_TPDOsend(CO_TPDO_t* TPDO) {
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b093      	sub	sp, #76	@ 0x4c
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	6078      	str	r0, [r7, #4]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t* dataTPDO = &TPDO->CANtxBuff->data[0];
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8002baa:	3305      	adds	r3, #5
 8002bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    OD_size_t verifyLength = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	63bb      	str	r3, [r7, #56]	@ 0x38

#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
                          || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO));
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d004      	beq.n	8002bc6 <CO_TPDOsend+0x2e>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8002bc2:	2bfd      	cmp	r3, #253	@ 0xfd
 8002bc4:	d901      	bls.n	8002bca <CO_TPDOsend+0x32>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <CO_TPDOsend+0x34>
 8002bca:	2300      	movs	r3, #0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8002bcc:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_OD_IO_ACCESS) != 0
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002bd4:	e066      	b.n	8002ca4 <CO_TPDOsend+0x10c>
        OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8002bd6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bda:	015b      	lsls	r3, r3, #5
 8002bdc:	3310      	adds	r3, #16
 8002bde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002be0:	4413      	add	r3, r2
 8002be2:	623b      	str	r3, [r7, #32]
        OD_stream_t* stream = &OD_IO->stream;
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	61fb      	str	r3, [r7, #28]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t)stream->dataOffset;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	76fb      	strb	r3, [r7, #27]

        /* additional safety check */
        verifyLength += (OD_size_t)mappedLength;
 8002bee:	7efb      	ldrb	r3, [r7, #27]
 8002bf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002bf2:	4413      	add	r3, r2
 8002bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
        if (verifyLength > CO_PDO_MAX_SIZE) {
 8002bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d85a      	bhi.n	8002cb2 <CO_TPDOsend+0x11a>
            break;
        }

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	633b      	str	r3, [r7, #48]	@ 0x30
        if (ODdataLength > CO_PDO_MAX_SIZE) {
 8002c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d901      	bls.n	8002c0c <CO_TPDOsend+0x74>
            ODdataLength = CO_PDO_MAX_SIZE;
 8002c08:	2308      	movs	r3, #8
 8002c0a:	633b      	str	r3, [r7, #48]	@ 0x30
        }
        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t* dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 8002c0c:	7efb      	ldrb	r3, [r7, #27]
 8002c0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d90a      	bls.n	8002c2a <CO_TPDOsend+0x92>
            (void)memset(buf, 0, sizeof(buf));
 8002c14:	f107 030c 	add.w	r3, r7, #12
 8002c18:	2208      	movs	r2, #8
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f008 fb4f 	bl	800b2c0 <memset>
            dataTPDOCopy = buf;
 8002c22:	f107 030c 	add.w	r3, r7, #12
 8002c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c28:	e001      	b.n	8002c2e <CO_TPDOsend+0x96>
        } else {
            dataTPDOCopy = dataTPDO;
 8002c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read() and store mappedLength back to stream.dataOffset */
        stream->dataOffset = 0;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	2200      	movs	r2, #0
 8002c32:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	699c      	ldr	r4, [r3, #24]
 8002c38:	f107 0308 	add.w	r3, r7, #8
 8002c3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c40:	69f8      	ldr	r0, [r7, #28]
 8002c42:	47a0      	blx	r4
        stream->dataOffset = mappedLength;
 8002c44:	7efa      	ldrb	r2, [r7, #27]
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	60da      	str	r2, [r3, #12]
            }
        }
#endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 8002c4a:	7efb      	ldrb	r3, [r7, #27]
 8002c4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d906      	bls.n	8002c60 <CO_TPDOsend+0xc8>
            (void)memcpy(dataTPDO, buf, mappedLength);
 8002c52:	7efa      	ldrb	r2, [r7, #27]
 8002c54:	f107 030c 	add.w	r3, r7, #12
 8002c58:	4619      	mov	r1, r3
 8002c5a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002c5c:	f008 fbbb 	bl	800b3d6 <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
#if OD_FLAGS_PDO_SIZE > 0
        uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 8002c60:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c66:	3244      	adds	r2, #68	@ 0x44
 8002c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c6c:	617b      	str	r3, [r7, #20]
        if ((flagPDObyte != NULL) && eventDriven) {
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00e      	beq.n	8002c92 <CO_TPDOsend+0xfa>
 8002c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00b      	beq.n	8002c92 <CO_TPDOsend+0xfa>
            *flagPDObyte |= PDO->flagPDObitmask[i];
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	781a      	ldrb	r2, [r3, #0]
 8002c7e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002c82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c84:	440b      	add	r3, r1
 8002c86:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	701a      	strb	r2, [r3, #0]
        }
#endif

        dataTPDO += mappedLength;
 8002c92:	7efb      	ldrb	r3, [r7, #27]
 8002c94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c96:	4413      	add	r3, r2
 8002c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002c9a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca6:	7b5b      	ldrb	r3, [r3, #13]
 8002ca8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d392      	bcc.n	8002bd6 <CO_TPDOsend+0x3e>
 8002cb0:	e000      	b.n	8002cb4 <CO_TPDOsend+0x11c>
            break;
 8002cb2:	bf00      	nop
        }
#endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    if ((verifyLength > CO_PDO_MAX_SIZE) || (verifyLength != (OD_size_t)PDO->dataLength)) {
 8002cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d805      	bhi.n	8002cc6 <CO_TPDOsend+0x12e>
 8002cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cbc:	7b1b      	ldrb	r3, [r3, #12]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00e      	beq.n	8002ce4 <CO_TPDOsend+0x14c>
        /* bug in software, should not happen */
        CO_errorReport(PDO->em, CO_EM_GENERIC_SOFTWARE_ERROR, CO_EMC_SOFTWARE_INTERNAL, (0x200000U | verifyLength));
 8002cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ccc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	f44f 43c2 	mov.w	r3, #24832	@ 0x6100
 8002cd6:	222c      	movs	r2, #44	@ 0x2c
 8002cd8:	2101      	movs	r1, #1
 8002cda:	f7fd ffde 	bl	8000c9a <CO_error>
        return CO_ERROR_DATA_CORRUPT;
 8002cde:	f06f 030c 	mvn.w	r3, #12
 8002ce2:	e019      	b.n	8002d18 <CO_TPDOsend+0x180>
    }

    TPDO->sendRequest = false;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
    TPDO->eventTimer = TPDO->eventTime_us;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 8002d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4610      	mov	r0, r2
 8002d12:	f004 facf 	bl	80072b4 <CO_CANsend>
 8002d16:	4603      	mov	r3, r0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3744      	adds	r7, #68	@ 0x44
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd90      	pop	{r4, r7, pc}

08002d20 <CO_TPDO_process>:
void
CO_TPDO_process(CO_TPDO_t* TPDO,
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0) || defined CO_DOXYGEN
                uint32_t timeDifference_us, uint32_t* timerNext_us,
#endif
                bool_t NMTisOperational, bool_t syncWas) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	61bb      	str	r3, [r7, #24]
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)) != 0
    (void)timerNext_us;
#endif
    (void)syncWas;

    if (PDO->valid && NMTisOperational) {
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 80dc 	beq.w	8002ef4 <CO_TPDO_process+0x1d4>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 80d8 	beq.w	8002ef4 <CO_TPDO_process+0x1d4>

        /* check for event timer or application event */
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0) || (OD_FLAGS_PDO_SIZE > 0)
        if ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d004      	beq.n	8002d58 <CO_TPDO_process+0x38>
            || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8002d54:	2bfd      	cmp	r3, #253	@ 0xfd
 8002d56:	d946      	bls.n	8002de6 <CO_TPDO_process+0xc6>
            /* event timer */
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            if (TPDO->eventTime_us != 0U) {
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d018      	beq.n	8002d94 <CO_TPDO_process+0x74>
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0U;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d205      	bcs.n	8002d7a <CO_TPDO_process+0x5a>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	e000      	b.n	8002d7c <CO_TPDO_process+0x5c>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
                if (TPDO->eventTimer == 0U) {
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d103      	bne.n	8002d94 <CO_TPDO_process+0x74>
                    TPDO->sendRequest = true;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
#endif
            }
#endif
            /* check for any OD_requestTPDO() */
#if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest) {
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d123      	bne.n	8002de6 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002d9e:	2300      	movs	r3, #0
 8002da0:	77fb      	strb	r3, [r7, #31]
 8002da2:	e01b      	b.n	8002ddc <CO_TPDO_process+0xbc>
                    uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 8002da4:	7ffa      	ldrb	r2, [r7, #31]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	3244      	adds	r2, #68	@ 0x44
 8002daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dae:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL) {
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00f      	beq.n	8002dd6 <CO_TPDO_process+0xb6>
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0U) {
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	781a      	ldrb	r2, [r3, #0]
 8002dba:	7ffb      	ldrb	r3, [r7, #31]
 8002dbc:	69b9      	ldr	r1, [r7, #24]
 8002dbe:	440b      	add	r3, r1
 8002dc0:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d104      	bne.n	8002dd6 <CO_TPDO_process+0xb6>
                            TPDO->sendRequest = true;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
                            break;
 8002dd4:	e007      	b.n	8002de6 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002dd6:	7ffb      	ldrb	r3, [r7, #31]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	77fb      	strb	r3, [r7, #31]
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	7b5b      	ldrb	r3, [r3, #13]
 8002de0:	7ffa      	ldrb	r2, [r7, #31]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d3de      	bcc.n	8002da4 <CO_TPDO_process+0x84>
#endif
        }
#endif /* ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0) */

        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8002dec:	2bfd      	cmp	r3, #253	@ 0xfd
 8002dee:	d91d      	bls.n	8002e2c <CO_TPDO_process+0x10c>
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
                                                                          : 0U;
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d205      	bcs.n	8002e08 <CO_TPDO_process+0xe8>
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f8d3 2184 	ldr.w	r2, [r3, #388]	@ 0x184
                                                                          : 0U;
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	e000      	b.n	8002e0a <CO_TPDO_process+0xea>
 8002e08:	2300      	movs	r3, #0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	f8c2 3184 	str.w	r3, [r2, #388]	@ 0x184

            /* send TPDO */
            if (TPDO->sendRequest && (TPDO->inhibitTimer == 0U)) {
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d07d      	beq.n	8002f16 <CO_TPDO_process+0x1f6>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d178      	bne.n	8002f16 <CO_TPDO_process+0x1f6>
                (void)CO_TPDOsend(TPDO);
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f7ff feb7 	bl	8002b98 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8002e2a:	e074      	b.n	8002f16 <CO_TPDO_process+0x1f6>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        else if ((TPDO->SYNC != NULL) && syncWas) {
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d06f      	beq.n	8002f16 <CO_TPDO_process+0x1f6>
 8002e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d06c      	beq.n	8002f16 <CO_TPDO_process+0x1f6>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d108      	bne.n	8002e58 <CO_TPDO_process+0x138>
                if (TPDO->sendRequest) {
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d062      	beq.n	8002f16 <CO_TPDO_process+0x1f6>
                    (void)CO_TPDOsend(TPDO);
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f7ff fea1 	bl	8002b98 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8002e56:	e05e      	b.n	8002f16 <CO_TPDO_process+0x1f6>
                }
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255U) {
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 8002e5e:	2bff      	cmp	r3, #255	@ 0xff
 8002e60:	d119      	bne.n	8002e96 <CO_TPDO_process+0x176>
                    if ((TPDO->SYNC->counterOverflowValue != 0U) && (TPDO->syncStartValue != 0U)) {
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8002e68:	7c5b      	ldrb	r3, [r3, #17]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d009      	beq.n	8002e82 <CO_TPDO_process+0x162>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d004      	beq.n	8002e82 <CO_TPDO_process+0x162>
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	22fe      	movs	r2, #254	@ 0xfe
 8002e7c:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
 8002e80:	e009      	b.n	8002e96 <CO_TPDO_process+0x176>
                    } else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = (TPDO->transmissionType / 2U) + 1U;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8002e88:	085b      	lsrs	r3, r3, #1
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC with matched syncStartValue. */
                if (TPDO->syncCounter == 254U) {
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 8002e9c:	2bfe      	cmp	r3, #254	@ 0xfe
 8002e9e:	d112      	bne.n	8002ec6 <CO_TPDO_process+0x1a6>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8002ea6:	7c9a      	ldrb	r2, [r3, #18]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d131      	bne.n	8002f16 <CO_TPDO_process+0x1f6>
                        TPDO->syncCounter = TPDO->transmissionType;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 216c 	ldrb.w	r2, [r3, #364]	@ 0x16c
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
                        (void)CO_TPDOsend(TPDO);
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f7ff fe6a 	bl	8002b98 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8002ec4:	e027      	b.n	8002f16 <CO_TPDO_process+0x1f6>
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0U) {
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d11a      	bne.n	8002f16 <CO_TPDO_process+0x1f6>
                    TPDO->syncCounter = TPDO->transmissionType;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f893 216c 	ldrb.w	r2, [r3, #364]	@ 0x16c
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
                    (void)CO_TPDOsend(TPDO);
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f7ff fe53 	bl	8002b98 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8002ef2:	e010      	b.n	8002f16 <CO_TPDO_process+0x1f6>
        }
#endif

    } else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
        TPDO->inhibitTimer = 0;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
        TPDO->eventTimer = 0;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
#endif
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        TPDO->syncCounter = 255;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	22ff      	movs	r2, #255	@ 0xff
 8002f10:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
#endif
    }
}
 8002f14:	e000      	b.n	8002f18 <CO_TPDO_process+0x1f8>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8002f16:	bf00      	nop
}
 8002f18:	bf00      	nop
 8002f1a:	3720      	adds	r7, #32
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <OD_getIndex+0x14>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	e000      	b.n	8002f36 <OD_getIndex+0x16>
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b086      	sub	sp, #24
 8002f46:	af02      	add	r7, sp, #8
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	603b      	str	r3, [r7, #0]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002f52:	7af9      	ldrb	r1, [r7, #11]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	2301      	movs	r3, #1
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f7fe ff73 	bl	8001e48 <OD_get_value>
 8002f62:	4603      	mov	r3, r0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002f7c:	7af9      	ldrb	r1, [r7, #11]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	2304      	movs	r3, #4
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f7fe ff5e 	bl	8001e48 <OD_get_value>
 8002f8c:	4603      	mov	r3, r0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <CO_SDOclient_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SDOclient_receive(void* object, void* msg) {
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b086      	sub	sp, #24
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	6039      	str	r1, [r7, #0]
    CO_SDOclient_t* SDO_C = (CO_SDOclient_t*)object;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	791b      	ldrb	r3, [r3, #4]
 8002fa8:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	3305      	adds	r3, #5
 8002fae:	60fb      	str	r3, [r7, #12]

    /* Ignore messages in idle state and messages with wrong length. Ignore
     * message also if previous message was not processed yet and not abort */
    if ((SDO_C->state != CO_SDO_ST_IDLE) && (DLC == 8U) && (!CO_FLAG_READ(SDO_C->CANrxNew) || (data[0] == 0x80U))) {
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d014      	beq.n	8002fe6 <CO_SDOclient_receive+0x50>
 8002fbc:	7cfb      	ldrb	r3, [r7, #19]
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d111      	bne.n	8002fe6 <CO_SDOclient_receive+0x50>
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <CO_SDOclient_receive+0x3c>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b80      	cmp	r3, #128	@ 0x80
 8002fd0:	d109      	bne.n	8002fe6 <CO_SDOclient_receive+0x50>
        bool_t state_not_upload_blk_sublock_crsp = (SDO_C->state != CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP);
        if ((data[0] == 0x80U) /* abort from server */
            || (state_not_upload_blk_sublock_sreq && state_not_upload_blk_sublock_crsp)) {
#endif
            /* copy data and set 'new message' flag */
            (void)memcpy((void*)&SDO_C->CANrxData[0], (const void*)&data[0], 8);
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	3370      	adds	r3, #112	@ 0x70
 8002fd6:	2208      	movs	r2, #8
 8002fd8:	68f9      	ldr	r1, [r7, #12]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f008 f9fb 	bl	800b3d6 <memcpy>
            CO_FLAG_SET(SDO_C->CANrxNew);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	66da      	str	r2, [r3, #108]	@ 0x6c
        } else { /* MISRA C 2004 14.10 */
        }

#endif /* (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_BLOCK */
    }
}
 8002fe6:	bf00      	nop
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <CO_SDOclient_init>:
#endif /* (CO_CONFIG_SDO_CLI) & CO_CONFIG_FLAG_OD_DYNAMIC */

CO_ReturnError_t
CO_SDOclient_init(CO_SDOclient_t* SDO_C, OD_t* OD, OD_entry_t* OD_1280_SDOcliPar, uint8_t nodeId,
                  CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
                  uint32_t* errInfo) {
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b08a      	sub	sp, #40	@ 0x28
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
 8002ffa:	70fb      	strb	r3, [r7, #3]
    bool_t index_SDOcliPar_min = (OD_getIndex(OD_1280_SDOcliPar) < (uint16_t)(OD_H1280_SDO_CLIENT_1_PARAM));
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff ff8f 	bl	8002f20 <OD_getIndex>
 8003002:	4603      	mov	r3, r0
 8003004:	461a      	mov	r2, r3
 8003006:	f241 237f 	movw	r3, #4735	@ 0x127f
 800300a:	429a      	cmp	r2, r3
 800300c:	bf94      	ite	ls
 800300e:	2301      	movls	r3, #1
 8003010:	2300      	movhi	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24
    bool_t index_SDOcliPar_max = (OD_getIndex(OD_1280_SDOcliPar) > ((uint16_t)(OD_H1280_SDO_CLIENT_1_PARAM) + 0x7FU));
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff ff82 	bl	8002f20 <OD_getIndex>
 800301c:	4603      	mov	r3, r0
 800301e:	461a      	mov	r2, r3
 8003020:	f241 23ff 	movw	r3, #4863	@ 0x12ff
 8003024:	429a      	cmp	r2, r3
 8003026:	bf8c      	ite	hi
 8003028:	2301      	movhi	r3, #1
 800302a:	2300      	movls	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	623b      	str	r3, [r7, #32]

    /* verify arguments */
    if ((SDO_C == NULL) || (OD_1280_SDOcliPar == NULL) || index_SDOcliPar_min || index_SDOcliPar_max
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00e      	beq.n	8003054 <CO_SDOclient_init+0x66>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00b      	beq.n	8003054 <CO_SDOclient_init+0x66>
 800303c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303e:	2b00      	cmp	r3, #0
 8003040:	d108      	bne.n	8003054 <CO_SDOclient_init+0x66>
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d105      	bne.n	8003054 <CO_SDOclient_init+0x66>
        || (CANdevRx == NULL) || (CANdevTx == NULL)) {
 8003048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <CO_SDOclient_init+0x66>
 800304e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <CO_SDOclient_init+0x6c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003054:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003058:	e068      	b.n	800312c <CO_SDOclient_init+0x13e>
    /* Configure object variables */
#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_LOCAL) != 0
    SDO_C->OD = OD;
    SDO_C->nodeId = nodeId;
#endif
    SDO_C->CANdevRx = CANdevRx;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800305e:	601a      	str	r2, [r3, #0]
    SDO_C->CANdevRxIdx = CANdevRxIdx;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003064:	809a      	strh	r2, [r3, #4]
    SDO_C->CANdevTx = CANdevTx;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800306a:	609a      	str	r2, [r3, #8]
    SDO_C->CANdevTxIdx = CANdevTxIdx;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8003070:	819a      	strh	r2, [r3, #12]
    SDO_C->pFunctSignal = NULL;
    SDO_C->functSignalObject = NULL;
#endif

    /* prepare circular fifo buffer */
    CO_fifo_init(&SDO_C->bufFifo, SDO_C->buf, CO_CONFIG_SDO_CLI_BUFFER_SIZE + 1U);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3348      	adds	r3, #72	@ 0x48
 800307c:	2221      	movs	r2, #33	@ 0x21
 800307e:	4619      	mov	r1, r3
 8003080:	f002 f96a 	bl	8005358 <CO_fifo_init>

    /* Get parameters from Object Dictionary (initial values) */
    uint8_t maxSubIndex, nodeIDOfTheSDOServer;
    uint32_t COB_IDClientToServer, COB_IDServerToClient;
    ODR_t odRet0 = OD_get_u8(OD_1280_SDOcliPar, 0, &maxSubIndex, true);
 8003084:	f107 021a 	add.w	r2, r7, #26
 8003088:	2301      	movs	r3, #1
 800308a:	2100      	movs	r1, #0
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff ff58 	bl	8002f42 <OD_get_u8>
 8003092:	4603      	mov	r3, r0
 8003094:	77fb      	strb	r3, [r7, #31]
    ODR_t odRet1 = OD_get_u32(OD_1280_SDOcliPar, 1, &COB_IDClientToServer, true);
 8003096:	f107 0214 	add.w	r2, r7, #20
 800309a:	2301      	movs	r3, #1
 800309c:	2101      	movs	r1, #1
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff ff64 	bl	8002f6c <OD_get_u32>
 80030a4:	4603      	mov	r3, r0
 80030a6:	77bb      	strb	r3, [r7, #30]
    ODR_t odRet2 = OD_get_u32(OD_1280_SDOcliPar, 2, &COB_IDServerToClient, true);
 80030a8:	f107 0210 	add.w	r2, r7, #16
 80030ac:	2301      	movs	r3, #1
 80030ae:	2102      	movs	r1, #2
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff ff5b 	bl	8002f6c <OD_get_u32>
 80030b6:	4603      	mov	r3, r0
 80030b8:	777b      	strb	r3, [r7, #29]
    ODR_t odRet3 = OD_get_u8(OD_1280_SDOcliPar, 3, &nodeIDOfTheSDOServer, true);
 80030ba:	f107 0219 	add.w	r2, r7, #25
 80030be:	2301      	movs	r3, #1
 80030c0:	2103      	movs	r1, #3
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff ff3d 	bl	8002f42 <OD_get_u8>
 80030c8:	4603      	mov	r3, r0
 80030ca:	773b      	strb	r3, [r7, #28]

    if ((odRet0 != ODR_OK) || (maxSubIndex != 3U) || (odRet1 != ODR_OK) || (odRet2 != ODR_OK) || (odRet3 != ODR_OK)) {
 80030cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10e      	bne.n	80030f2 <CO_SDOclient_init+0x104>
 80030d4:	7ebb      	ldrb	r3, [r7, #26]
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d10b      	bne.n	80030f2 <CO_SDOclient_init+0x104>
 80030da:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d107      	bne.n	80030f2 <CO_SDOclient_init+0x104>
 80030e2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <CO_SDOclient_init+0x104>
 80030ea:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00c      	beq.n	800310c <CO_SDOclient_init+0x11e>
        if (errInfo != NULL) {
 80030f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d006      	beq.n	8003106 <CO_SDOclient_init+0x118>
            *errInfo = OD_getIndex(OD_1280_SDOcliPar);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff ff11 	bl	8002f20 <OD_getIndex>
 80030fe:	4603      	mov	r3, r0
 8003100:	461a      	mov	r2, r3
 8003102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003104:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8003106:	f06f 030b 	mvn.w	r3, #11
 800310a:	e00f      	b.n	800312c <CO_SDOclient_init+0x13e>
    /* set to zero to make sure CO_SDOclient_setup() will reconfigure CAN */
    SDO_C->COB_IDClientToServer = 0;
    SDO_C->COB_IDServerToClient = 0;
#endif

    CO_SDO_return_t cliSetupRet = CO_SDOclient_setup(SDO_C, COB_IDClientToServer, COB_IDServerToClient,
 800310c:	6979      	ldr	r1, [r7, #20]
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	7e7b      	ldrb	r3, [r7, #25]
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f80e 	bl	8003134 <CO_SDOclient_setup>
 8003118:	4603      	mov	r3, r0
 800311a:	76fb      	strb	r3, [r7, #27]
                                                     nodeIDOfTheSDOServer);

    if (cliSetupRet != CO_SDO_RT_ok_communicationEnd) {
 800311c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <CO_SDOclient_init+0x13c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003124:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003128:	e000      	b.n	800312c <CO_SDOclient_init+0x13e>
    }

    return CO_ERROR_NO;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3728      	adds	r7, #40	@ 0x28
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <CO_SDOclient_setup>:
}
#endif

CO_SDO_return_t
CO_SDOclient_setup(CO_SDOclient_t* SDO_C, uint32_t COB_IDClientToServer, uint32_t COB_IDServerToClient,
                   uint8_t nodeIDOfTheSDOServer) {
 8003134:	b580      	push	{r7, lr}
 8003136:	b08a      	sub	sp, #40	@ 0x28
 8003138:	af04      	add	r7, sp, #16
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	70fb      	strb	r3, [r7, #3]
    /* verify parameters */
    if (SDO_C == NULL) {
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d102      	bne.n	800314e <CO_SDOclient_setup+0x1a>
        return CO_SDO_RT_wrongArguments;
 8003148:	f06f 0301 	mvn.w	r3, #1
 800314c:	e05f      	b.n	800320e <CO_SDOclient_setup+0xda>
    }

    /* Configure object variables */
    SDO_C->state = CO_SDO_ST_IDLE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    CO_FLAG_CLEAR(SDO_C->CANrxNew);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	66da      	str	r2, [r3, #108]	@ 0x6c
    SDO_C->nodeIDOfTheSDOServer = nodeIDOfTheSDOServer;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	751a      	strb	r2, [r3, #20]
    SDO_C->COB_IDClientToServer = COB_IDClientToServer;
    SDO_C->COB_IDServerToClient = COB_IDServerToClient;
#endif

    /* verify valid bit */
    uint16_t CanIdC2S = ((COB_IDClientToServer & 0x80000000UL) == 0U) ? (uint16_t)(COB_IDClientToServer & 0x7FFU) : 0U;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	db05      	blt.n	8003174 <CO_SDOclient_setup+0x40>
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	b29b      	uxth	r3, r3
 800316c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003170:	b29b      	uxth	r3, r3
 8003172:	e000      	b.n	8003176 <CO_SDOclient_setup+0x42>
 8003174:	2300      	movs	r3, #0
 8003176:	82fb      	strh	r3, [r7, #22]
    uint16_t CanIdS2C = ((COB_IDServerToClient & 0x80000000UL) == 0U) ? (uint16_t)(COB_IDServerToClient & 0x7FFU) : 0U;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	db05      	blt.n	800318a <CO_SDOclient_setup+0x56>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	b29b      	uxth	r3, r3
 8003182:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003186:	b29b      	uxth	r3, r3
 8003188:	e000      	b.n	800318c <CO_SDOclient_setup+0x58>
 800318a:	2300      	movs	r3, #0
 800318c:	82bb      	strh	r3, [r7, #20]
    if ((CanIdC2S != 0U) && (CanIdS2C != 0U)) {
 800318e:	8afb      	ldrh	r3, [r7, #22]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d006      	beq.n	80031a2 <CO_SDOclient_setup+0x6e>
 8003194:	8abb      	ldrh	r3, [r7, #20]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <CO_SDOclient_setup+0x6e>
        SDO_C->valid = true;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	619a      	str	r2, [r3, #24]
 80031a0:	e006      	b.n	80031b0 <CO_SDOclient_setup+0x7c>
    } else {
        CanIdC2S = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	82fb      	strh	r3, [r7, #22]
        CanIdS2C = 0;
 80031a6:	2300      	movs	r3, #0
 80031a8:	82bb      	strh	r3, [r7, #20]
        SDO_C->valid = false;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	619a      	str	r2, [r3, #24]
    }

    /* configure SDO client CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(SDO_C->CANdevRx, SDO_C->CANdevRxIdx, CanIdS2C, 0x7FF, false, (void*)SDO_C,
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8899      	ldrh	r1, [r3, #4]
 80031b8:	8aba      	ldrh	r2, [r7, #20]
 80031ba:	4b17      	ldr	r3, [pc, #92]	@ (8003218 <CO_SDOclient_setup+0xe4>)
 80031bc:	9302      	str	r3, [sp, #8]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	9301      	str	r3, [sp, #4]
 80031c2:	2300      	movs	r3, #0
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80031ca:	f003 ff9b 	bl	8007104 <CO_CANrxBufferInit>
 80031ce:	4603      	mov	r3, r0
 80031d0:	74fb      	strb	r3, [r7, #19]
                                              CO_SDOclient_receive);

    /* configure SDO client CAN transmission */
    SDO_C->CANtxBuff = CO_CANtxBufferInit(SDO_C->CANdevTx, SDO_C->CANdevTxIdx, CanIdC2S, false, 8, false);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6898      	ldr	r0, [r3, #8]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8999      	ldrh	r1, [r3, #12]
 80031da:	8afa      	ldrh	r2, [r7, #22]
 80031dc:	2300      	movs	r3, #0
 80031de:	9301      	str	r3, [sp, #4]
 80031e0:	2308      	movs	r3, #8
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	2300      	movs	r3, #0
 80031e6:	f003 ffeb 	bl	80071c0 <CO_CANtxBufferInit>
 80031ea:	4602      	mov	r2, r0
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	611a      	str	r2, [r3, #16]

    if ((ret != CO_ERROR_NO) || (SDO_C->CANtxBuff == NULL)) {
 80031f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d103      	bne.n	8003200 <CO_SDOclient_setup+0xcc>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d105      	bne.n	800320c <CO_SDOclient_setup+0xd8>
        SDO_C->valid = false;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	619a      	str	r2, [r3, #24]
        return CO_SDO_RT_wrongArguments;
 8003206:	f06f 0301 	mvn.w	r3, #1
 800320a:	e000      	b.n	800320e <CO_SDOclient_setup+0xda>
    }

    return CO_SDO_RT_ok_communicationEnd;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	08002f97 	.word	0x08002f97

0800321c <CO_getUint8>:
CO_getUint8(const void* buf) {
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	73fb      	strb	r3, [r7, #15]
    return value;
 800322a:	7bfb      	ldrb	r3, [r7, #15]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60fb      	str	r3, [r7, #12]
    return value;
 8003246:	68fb      	ldr	r3, [r7, #12]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <OD_getIndex+0x14>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	e000      	b.n	800326a <OD_getIndex+0x16>
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8003286:	2305      	movs	r3, #5
 8003288:	e003      	b.n	8003292 <OD_extension_init+0x1c>
    entry->extension = extension;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 800329e:	b580      	push	{r7, lr}
 80032a0:	b086      	sub	sp, #24
 80032a2:	af02      	add	r7, sp, #8
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	460b      	mov	r3, r1
 80032ac:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80032ae:	7af9      	ldrb	r1, [r7, #11]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	2301      	movs	r3, #1
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f7fe fdc5 	bl	8001e48 <OD_get_value>
 80032be:	4603      	mov	r3, r0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	460b      	mov	r3, r1
 80032d6:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80032d8:	7af9      	ldrb	r1, [r7, #11]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	2304      	movs	r3, #4
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f7fe fdb0 	bl	8001e48 <OD_get_value>
 80032e8:	4603      	mov	r3, r0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <OD_set_u32>:
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t
OD_set_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t val, bool_t odOrig) {
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b086      	sub	sp, #24
 80032f6:	af02      	add	r7, sp, #8
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	603b      	str	r3, [r7, #0]
 80032fe:	460b      	mov	r3, r1
 8003300:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 8003302:	1d3a      	adds	r2, r7, #4
 8003304:	7af9      	ldrb	r1, [r7, #11]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	2304      	movs	r3, #4
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7fe fdd8 	bl	8001ec2 <OD_set_value>
 8003312:	4603      	mov	r3, r0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SDO_receive(void* object, void* msg) {
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t* SDO = (CO_SDOserver_t*)object;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	791b      	ldrb	r3, [r3, #4]
 800332e:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	3305      	adds	r3, #5
 8003334:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8U) {
 8003336:	7cfb      	ldrb	r3, [r7, #19]
 8003338:	2b08      	cmp	r3, #8
 800333a:	d122      	bne.n	8003382 <CO_SDO_receive+0x66>
        if (data[0] == 0x80U) {
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b80      	cmp	r3, #128	@ 0x80
 8003342:	d103      	bne.n	800334c <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2200      	movs	r2, #0
 8003348:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 800334a:	e01a      	b.n	8003382 <CO_SDO_receive+0x66>
        } else if (CO_FLAG_READ(SDO->CANrxNew)) {
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003350:	2b00      	cmp	r3, #0
 8003352:	d116      	bne.n	8003382 <CO_SDO_receive+0x66>
            (void)memcpy(SDO->CANrxData, data, DLC);
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	3340      	adds	r3, #64	@ 0x40
 8003358:	7cfa      	ldrb	r2, [r7, #19]
 800335a:	68f9      	ldr	r1, [r7, #12]
 800335c:	4618      	mov	r0, r3
 800335e:	f008 f83a 	bl	800b3d6 <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2201      	movs	r2, #1
 8003366:	63da      	str	r2, [r3, #60]	@ 0x3c
            if (SDO->pFunctSignalPre != NULL) {
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <CO_SDO_receive+0x66>
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	f8d2 20b0 	ldr.w	r2, [r2, #176]	@ 0xb0
 800337e:	4610      	mov	r0, r2
 8003380:	4798      	blx	r3
}
 8003382:	bf00      	nop
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <CO_SDOserver_init_canRxTx>:

/* helper for configuring CANrx and CANtx */
static CO_ReturnError_t
CO_SDOserver_init_canRxTx(CO_SDOserver_t* SDO, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANdevTxIdx,
                          uint32_t COB_IDClientToServer, uint32_t COB_IDServerToClient) {
 800338c:	b580      	push	{r7, lr}
 800338e:	b08a      	sub	sp, #40	@ 0x28
 8003390:	af04      	add	r7, sp, #16
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	4611      	mov	r1, r2
 8003398:	461a      	mov	r2, r3
 800339a:	460b      	mov	r3, r1
 800339c:	80fb      	strh	r3, [r7, #6]
 800339e:	4613      	mov	r3, r2
 80033a0:	80bb      	strh	r3, [r7, #4]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    /* proceed only, if parameters change */
    if ((COB_IDClientToServer == SDO->COB_IDClientToServer) && (COB_IDServerToClient == SDO->COB_IDServerToClient)) {
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033a6:	6a3a      	ldr	r2, [r7, #32]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d106      	bne.n	80033ba <CO_SDOserver_init_canRxTx+0x2e>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d101      	bne.n	80033ba <CO_SDOserver_init_canRxTx+0x2e>
        return CO_ERROR_NO;
 80033b6:	2300      	movs	r3, #0
 80033b8:	e04e      	b.n	8003458 <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a3a      	ldr	r2, [r7, #32]
 80033be:	651a      	str	r2, [r3, #80]	@ 0x50
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033c4:	655a      	str	r2, [r3, #84]	@ 0x54
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000UL) == 0U) ? (uint16_t)COB_IDClientToServer : 0U;
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	db02      	blt.n	80033d2 <CO_SDOserver_init_canRxTx+0x46>
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	e000      	b.n	80033d4 <CO_SDOserver_init_canRxTx+0x48>
 80033d2:	2300      	movs	r3, #0
 80033d4:	82fb      	strh	r3, [r7, #22]
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000UL) == 0U) ? (uint16_t)COB_IDServerToClient : 0U;
 80033d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d8:	2b00      	cmp	r3, #0
 80033da:	db02      	blt.n	80033e2 <CO_SDOserver_init_canRxTx+0x56>
 80033dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033de:	b29b      	uxth	r3, r3
 80033e0:	e000      	b.n	80033e4 <CO_SDOserver_init_canRxTx+0x58>
 80033e2:	2300      	movs	r3, #0
 80033e4:	82bb      	strh	r3, [r7, #20]
    if ((idC2S != 0U) && (idS2C != 0U)) {
 80033e6:	8afb      	ldrh	r3, [r7, #22]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d006      	beq.n	80033fa <CO_SDOserver_init_canRxTx+0x6e>
 80033ec:	8abb      	ldrh	r3, [r7, #20]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	611a      	str	r2, [r3, #16]
 80033f8:	e006      	b.n	8003408 <CO_SDOserver_init_canRxTx+0x7c>
    } else {
        idC2S = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 80033fe:	2300      	movs	r3, #0
 8003400:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, idC2S, 0x7FF, false, (void*)SDO, CO_SDO_receive);
 8003408:	8afa      	ldrh	r2, [r7, #22]
 800340a:	88f9      	ldrh	r1, [r7, #6]
 800340c:	4b14      	ldr	r3, [pc, #80]	@ (8003460 <CO_SDOserver_init_canRxTx+0xd4>)
 800340e:	9302      	str	r3, [sp, #8]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	9301      	str	r3, [sp, #4]
 8003414:	2300      	movs	r3, #0
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800341c:	68b8      	ldr	r0, [r7, #8]
 800341e:	f003 fe71 	bl	8007104 <CO_CANrxBufferInit>
 8003422:	4603      	mov	r3, r0
 8003424:	74fb      	strb	r3, [r7, #19]

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(SDO->CANdevTx, CANdevTxIdx, idS2C, false, 8, false);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	8aba      	ldrh	r2, [r7, #20]
 800342c:	88b9      	ldrh	r1, [r7, #4]
 800342e:	2300      	movs	r3, #0
 8003430:	9301      	str	r3, [sp, #4]
 8003432:	2308      	movs	r3, #8
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	2300      	movs	r3, #0
 8003438:	f003 fec2 	bl	80071c0 <CO_CANtxBufferInit>
 800343c:	4602      	mov	r2, r0
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	605a      	str	r2, [r3, #4]

    if (SDO->CANtxBuff == NULL) {
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d104      	bne.n	8003454 <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 800344a:	23ff      	movs	r3, #255	@ 0xff
 800344c:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	611a      	str	r2, [r3, #16]
    }

    return ret;
 8003454:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	0800331d 	.word	0x0800331d

08003464 <OD_write_1201_additional>:
 * Custom function for writing OD object _SDO server parameter_, additional channels
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1201_additional(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8003464:	b590      	push	{r4, r7, lr}
 8003466:	b08f      	sub	sp, #60	@ 0x3c
 8003468:	af02      	add	r7, sp, #8
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <OD_write_1201_additional+0x20>
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <OD_write_1201_additional+0x20>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 8003484:	2309      	movs	r3, #9
 8003486:	e0f9      	b.n	800367c <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t* SDO = (CO_SDOserver_t*)stream->object;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    switch (stream->subIndex) {
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	7d1b      	ldrb	r3, [r3, #20]
 8003492:	2b03      	cmp	r3, #3
 8003494:	f200 80e8 	bhi.w	8003668 <OD_write_1201_additional+0x204>
 8003498:	a201      	add	r2, pc, #4	@ (adr r2, 80034a0 <OD_write_1201_additional+0x3c>)
 800349a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349e:	bf00      	nop
 80034a0:	080034b1 	.word	0x080034b1
 80034a4:	080034b5 	.word	0x080034b5
 80034a8:	08003579 	.word	0x08003579
 80034ac:	0800363f 	.word	0x0800363f
        case 0: /* Highest sub-index supported */ return ODR_READONLY; break;
 80034b0:	2304      	movs	r3, #4
 80034b2:	e0e3      	b.n	800367c <OD_write_1201_additional+0x218>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 80034b4:	68b8      	ldr	r0, [r7, #8]
 80034b6:	f7ff febf 	bl	8003238 <CO_getUint32>
 80034ba:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034c4:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FFU);
 80034c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034d0:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	0fdb      	lsrs	r3, r3, #31
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || ((valid && SDO->valid) && (CAN_ID != CAN_ID_cur))
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4b69      	ldr	r3, [pc, #420]	@ (8003684 <OD_write_1201_additional+0x220>)
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d134      	bne.n	8003550 <OD_write_1201_additional+0xec>
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d007      	beq.n	80034fc <OD_write_1201_additional+0x98>
 80034ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <OD_write_1201_additional+0x98>
 80034f4:	8afa      	ldrh	r2, [r7, #22]
 80034f6:	8abb      	ldrh	r3, [r7, #20]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d129      	bne.n	8003550 <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d028      	beq.n	8003554 <OD_write_1201_additional+0xf0>
 8003502:	8afb      	ldrh	r3, [r7, #22]
 8003504:	2b7f      	cmp	r3, #127	@ 0x7f
 8003506:	d923      	bls.n	8003550 <OD_write_1201_additional+0xec>
 8003508:	8afb      	ldrh	r3, [r7, #22]
 800350a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800350e:	d903      	bls.n	8003518 <OD_write_1201_additional+0xb4>
 8003510:	8afb      	ldrh	r3, [r7, #22]
 8003512:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8003516:	d91b      	bls.n	8003550 <OD_write_1201_additional+0xec>
 8003518:	8afb      	ldrh	r3, [r7, #22]
 800351a:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 800351e:	d903      	bls.n	8003528 <OD_write_1201_additional+0xc4>
 8003520:	8afb      	ldrh	r3, [r7, #22]
 8003522:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003526:	d313      	bcc.n	8003550 <OD_write_1201_additional+0xec>
 8003528:	8afb      	ldrh	r3, [r7, #22]
 800352a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800352e:	d903      	bls.n	8003538 <OD_write_1201_additional+0xd4>
 8003530:	8afb      	ldrh	r3, [r7, #22]
 8003532:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8003536:	d30b      	bcc.n	8003550 <OD_write_1201_additional+0xec>
 8003538:	8afb      	ldrh	r3, [r7, #22]
 800353a:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 800353e:	d303      	bcc.n	8003548 <OD_write_1201_additional+0xe4>
 8003540:	8afb      	ldrh	r3, [r7, #22]
 8003542:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003546:	d303      	bcc.n	8003550 <OD_write_1201_additional+0xec>
 8003548:	8afb      	ldrh	r3, [r7, #22]
 800354a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800354e:	d901      	bls.n	8003554 <OD_write_1201_additional+0xf0>
                return ODR_INVALID_VALUE;
 8003550:	230f      	movs	r3, #15
 8003552:	e093      	b.n	800367c <OD_write_1201_additional+0x218>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx, COB_ID,
 8003554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003556:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 800355e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003560:	f8b3 004e 	ldrh.w	r0, [r3, #78]	@ 0x4e
 8003564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003568:	9301      	str	r3, [sp, #4]
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	4603      	mov	r3, r0
 8003570:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003572:	f7ff ff0b 	bl	800338c <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDServerToClient);
            break;
 8003576:	e07a      	b.n	800366e <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 8003578:	68b8      	ldr	r0, [r7, #8]
 800357a:	f7ff fe5d 	bl	8003238 <CO_getUint32>
 800357e:	6278      	str	r0, [r7, #36]	@ 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8003580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003582:	b29b      	uxth	r3, r3
 8003584:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003588:	847b      	strh	r3, [r7, #34]	@ 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FFU);
 800358a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800358c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800358e:	b29b      	uxth	r3, r3
 8003590:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003594:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003598:	43db      	mvns	r3, r3
 800359a:	0fdb      	lsrs	r3, r3, #31
 800359c:	b2db      	uxtb	r3, r3
 800359e:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && (SDO->valid && (CAN_ID != CAN_ID_cur)))
 80035a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a2:	4b38      	ldr	r3, [pc, #224]	@ (8003684 <OD_write_1201_additional+0x220>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d134      	bne.n	8003614 <OD_write_1201_additional+0x1b0>
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d007      	beq.n	80035c0 <OD_write_1201_additional+0x15c>
 80035b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <OD_write_1201_additional+0x15c>
 80035b8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80035ba:	8c3b      	ldrh	r3, [r7, #32]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d129      	bne.n	8003614 <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d028      	beq.n	8003618 <OD_write_1201_additional+0x1b4>
 80035c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80035c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80035ca:	d923      	bls.n	8003614 <OD_write_1201_additional+0x1b0>
 80035cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80035ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035d2:	d903      	bls.n	80035dc <OD_write_1201_additional+0x178>
 80035d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80035d6:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 80035da:	d91b      	bls.n	8003614 <OD_write_1201_additional+0x1b0>
 80035dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80035de:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 80035e2:	d903      	bls.n	80035ec <OD_write_1201_additional+0x188>
 80035e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80035e6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80035ea:	d313      	bcc.n	8003614 <OD_write_1201_additional+0x1b0>
 80035ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80035ee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80035f2:	d903      	bls.n	80035fc <OD_write_1201_additional+0x198>
 80035f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80035f6:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 80035fa:	d30b      	bcc.n	8003614 <OD_write_1201_additional+0x1b0>
 80035fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80035fe:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8003602:	d303      	bcc.n	800360c <OD_write_1201_additional+0x1a8>
 8003604:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003606:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800360a:	d303      	bcc.n	8003614 <OD_write_1201_additional+0x1b0>
 800360c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800360e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003612:	d901      	bls.n	8003618 <OD_write_1201_additional+0x1b4>
                return ODR_INVALID_VALUE;
 8003614:	230f      	movs	r3, #15
 8003616:	e031      	b.n	800367c <OD_write_1201_additional+0x218>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx,
 8003618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800361a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800361c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800361e:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8003622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003624:	f8b3 404e 	ldrh.w	r4, [r3, #78]	@ 0x4e
 8003628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800362a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800362c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800362e:	9201      	str	r2, [sp, #4]
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	4623      	mov	r3, r4
 8003634:	4602      	mov	r2, r0
 8003636:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003638:	f7ff fea8 	bl	800338c <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDClientToServer, COB_ID);
            break;
 800363c:	e017      	b.n	800366e <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1U) {
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d001      	beq.n	8003648 <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 8003644:	230b      	movs	r3, #11
 8003646:	e019      	b.n	800367c <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 8003648:	68b8      	ldr	r0, [r7, #8]
 800364a:	f7ff fde7 	bl	800321c <CO_getUint8>
 800364e:	4603      	mov	r3, r0
 8003650:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            if ((nodeId < 1U) || (nodeId > 127U)) {
 8003654:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <OD_write_1201_additional+0x200>
 800365c:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003660:	2b00      	cmp	r3, #0
 8003662:	da03      	bge.n	800366c <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 8003664:	230f      	movs	r3, #15
 8003666:	e009      	b.n	800367c <OD_write_1201_additional+0x218>
            }
            break;
        }

        default: return ODR_SUB_NOT_EXIST; break;
 8003668:	230e      	movs	r3, #14
 800366a:	e007      	b.n	800367c <OD_write_1201_additional+0x218>
            break;
 800366c:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f7fe f9dc 	bl	8001a32 <OD_writeOriginal>
 800367a:	4603      	mov	r3, r0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3734      	adds	r7, #52	@ 0x34
 8003680:	46bd      	mov	sp, r7
 8003682:	bd90      	pop	{r4, r7, pc}
 8003684:	3ffff800 	.word	0x3ffff800

08003688 <CO_SDOserver_init>:
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC */

CO_ReturnError_t
CO_SDOserver_init(CO_SDOserver_t* SDO, OD_t* OD, OD_entry_t* OD_1200_SDOsrvPar, uint8_t nodeId,
                  uint16_t SDOtimeoutTime_ms, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, CO_CANmodule_t* CANdevTx,
                  uint16_t CANdevTxIdx, uint32_t* errInfo) {
 8003688:	b580      	push	{r7, lr}
 800368a:	b08c      	sub	sp, #48	@ 0x30
 800368c:	af02      	add	r7, sp, #8
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if ((SDO == NULL) || (OD == NULL) || (CANdevRx == NULL) || (CANdevTx == NULL)) {
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <CO_SDOserver_init+0x26>
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <CO_SDOserver_init+0x26>
 80036a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <CO_SDOserver_init+0x26>
 80036a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d102      	bne.n	80036b4 <CO_SDOserver_init+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80036ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036b2:	e0fd      	b.n	80038b0 <CO_SDOserver_init+0x228>
    }

    /* Configure object variables */
    SDO->OD = OD;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	731a      	strb	r2, [r3, #12]
#if (((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED)) != 0
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000U;
 80036c0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80036c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80036c6:	fb03 f202 	mul.w	r2, r3, r2
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	679a      	str	r2, [r3, #120]	@ 0x78
#endif
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) != 0
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	751a      	strb	r2, [r3, #20]

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_CALLBACK_PRE) != 0
    SDO->pFunctSignalPre = NULL;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    SDO->functSignalObjectPre = NULL;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d117      	bne.n	800371a <CO_SDOserver_init+0x92>
        /* configure default SDO channel */
        if ((nodeId < 1U) || (nodeId > 127U)) {
 80036ea:	78fb      	ldrb	r3, [r7, #3]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <CO_SDOserver_init+0x70>
 80036f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	da02      	bge.n	80036fe <CO_SDOserver_init+0x76>
            return CO_ERROR_ILLEGAL_ARGUMENT;
 80036f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036fc:	e0d8      	b.n	80038b0 <CO_SDOserver_init+0x228>
        }

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 80036fe:	78fb      	ldrb	r3, [r7, #3]
 8003700:	b29b      	uxth	r3, r3
 8003702:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8003706:	84fb      	strh	r3, [r7, #38]	@ 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8003708:	78fb      	ldrb	r3, [r7, #3]
 800370a:	b29b      	uxth	r3, r3
 800370c:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 8003710:	84bb      	strh	r3, [r7, #36]	@ 0x24
        SDO->valid = true;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2201      	movs	r2, #1
 8003716:	611a      	str	r2, [r3, #16]
 8003718:	e0a4      	b.n	8003864 <CO_SDOserver_init+0x1dc>
    } else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff fd9a 	bl	8003254 <OD_getIndex>
 8003720:	4603      	mov	r3, r0
 8003722:	847b      	strh	r3, [r7, #34]	@ 0x22

        if (OD_SDOsrvParIdx == (uint16_t)OD_H1200_SDO_SERVER_1_PARAM) {
 8003724:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003726:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800372a:	d123      	bne.n	8003774 <CO_SDOserver_init+0xec>
            /* configure default SDO channel and SDO server parameters for it */
            if ((nodeId < 1U) || (nodeId > 127U)) {
 800372c:	78fb      	ldrb	r3, [r7, #3]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <CO_SDOserver_init+0xb2>
 8003732:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003736:	2b00      	cmp	r3, #0
 8003738:	da02      	bge.n	8003740 <CO_SDOserver_init+0xb8>
                return CO_ERROR_ILLEGAL_ARGUMENT;
 800373a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800373e:	e0b7      	b.n	80038b0 <CO_SDOserver_init+0x228>
            }

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	b29b      	uxth	r3, r3
 8003744:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8003748:	84fb      	strh	r3, [r7, #38]	@ 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 800374a:	78fb      	ldrb	r3, [r7, #3]
 800374c:	b29b      	uxth	r3, r3
 800374e:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 8003752:	84bb      	strh	r3, [r7, #36]	@ 0x24
            SDO->valid = true;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2201      	movs	r2, #1
 8003758:	611a      	str	r2, [r3, #16]

            (void)OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 800375a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800375c:	2301      	movs	r3, #1
 800375e:	2101      	movs	r1, #1
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff fdc6 	bl	80032f2 <OD_set_u32>
            (void)OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 8003766:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003768:	2301      	movs	r3, #1
 800376a:	2102      	movs	r1, #2
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff fdc0 	bl	80032f2 <OD_set_u32>
 8003772:	e077      	b.n	8003864 <CO_SDOserver_init+0x1dc>
        } else if ((OD_SDOsrvParIdx > (uint16_t)OD_H1200_SDO_SERVER_1_PARAM)
 8003774:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003776:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800377a:	d96f      	bls.n	800385c <CO_SDOserver_init+0x1d4>
                   && (OD_SDOsrvParIdx <= ((uint16_t)OD_H1200_SDO_SERVER_1_PARAM + 0x7FU))) {
 800377c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800377e:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 8003782:	d26b      	bcs.n	800385c <CO_SDOserver_init+0x1d4>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 8003784:	f107 021d 	add.w	r2, r7, #29
 8003788:	2301      	movs	r3, #1
 800378a:	2100      	movs	r1, #0
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7ff fd86 	bl	800329e <OD_get_u8>
 8003792:	4603      	mov	r3, r0
 8003794:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1, &COB_IDClientToServer32, true);
 8003798:	f107 0218 	add.w	r2, r7, #24
 800379c:	2301      	movs	r3, #1
 800379e:	2101      	movs	r1, #1
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff fd91 	bl	80032c8 <OD_get_u32>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f887 3020 	strb.w	r3, [r7, #32]
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2, &COB_IDServerToClient32, true);
 80037ac:	f107 0214 	add.w	r2, r7, #20
 80037b0:	2301      	movs	r3, #1
 80037b2:	2102      	movs	r1, #2
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff fd87 	bl	80032c8 <OD_get_u32>
 80037ba:	4603      	mov	r3, r0
 80037bc:	77fb      	strb	r3, [r7, #31]

            if ((odRet0 != ODR_OK) || ((maxSubIndex != 2U) && (maxSubIndex != 3U)) || (odRet1 != ODR_OK)
 80037be:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10d      	bne.n	80037e2 <CO_SDOserver_init+0x15a>
 80037c6:	7f7b      	ldrb	r3, [r7, #29]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d002      	beq.n	80037d2 <CO_SDOserver_init+0x14a>
 80037cc:	7f7b      	ldrb	r3, [r7, #29]
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d107      	bne.n	80037e2 <CO_SDOserver_init+0x15a>
 80037d2:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d103      	bne.n	80037e2 <CO_SDOserver_init+0x15a>
                || (odRet2 != ODR_OK)) {
 80037da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d008      	beq.n	80037f4 <CO_SDOserver_init+0x16c>
                if (errInfo != NULL) {
 80037e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <CO_SDOserver_init+0x166>
                    *errInfo = OD_SDOsrvParIdx;
 80037e8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80037ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037ec:	601a      	str	r2, [r3, #0]
                }
                return CO_ERROR_OD_PARAMETERS;
 80037ee:	f06f 030b 	mvn.w	r3, #11
 80037f2:	e05d      	b.n	80038b0 <CO_SDOserver_init+0x228>
            }

            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	db05      	blt.n	8003806 <CO_SDOserver_init+0x17e>
                                       ? (uint16_t)(COB_IDClientToServer32 & 0x7FFU)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 80037fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003802:	b29b      	uxth	r3, r3
 8003804:	e000      	b.n	8003808 <CO_SDOserver_init+0x180>
 8003806:	2300      	movs	r3, #0
 8003808:	84fb      	strh	r3, [r7, #38]	@ 0x26
                                       : 0U;
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2b00      	cmp	r3, #0
 800380e:	db05      	blt.n	800381c <CO_SDOserver_init+0x194>
                                       ? (uint16_t)(COB_IDServerToClient32 & 0x7FFU)
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 8003814:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003818:	b29b      	uxth	r3, r3
 800381a:	e000      	b.n	800381e <CO_SDOserver_init+0x196>
 800381c:	2300      	movs	r3, #0
 800381e:	84bb      	strh	r3, [r7, #36]	@ 0x24
                                       : 0U;

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
            SDO->OD_1200_extension.object = SDO;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	659a      	str	r2, [r3, #88]	@ 0x58
            SDO->OD_1200_extension.read = OD_readOriginal;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a23      	ldr	r2, [pc, #140]	@ (80038b8 <CO_SDOserver_init+0x230>)
 800382a:	65da      	str	r2, [r3, #92]	@ 0x5c
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4a23      	ldr	r2, [pc, #140]	@ (80038bc <CO_SDOserver_init+0x234>)
 8003830:	661a      	str	r2, [r3, #96]	@ 0x60
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar, &SDO->OD_1200_extension);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	3358      	adds	r3, #88	@ 0x58
 8003836:	4619      	mov	r1, r3
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff fd1c 	bl	8003276 <OD_extension_init>
 800383e:	4603      	mov	r3, r0
 8003840:	77bb      	strb	r3, [r7, #30]
            if (odRetE != ODR_OK) {
 8003842:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <CO_SDOserver_init+0x1da>
                if (errInfo != NULL) {
 800384a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <CO_SDOserver_init+0x1ce>
                    *errInfo = OD_SDOsrvParIdx;
 8003850:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003852:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003854:	601a      	str	r2, [r3, #0]
                }
                return CO_ERROR_OD_PARAMETERS;
 8003856:	f06f 030b 	mvn.w	r3, #11
 800385a:	e029      	b.n	80038b0 <CO_SDOserver_init+0x228>
            }
#endif
        } else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 800385c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003860:	e026      	b.n	80038b0 <CO_SDOserver_init+0x228>
                   && (OD_SDOsrvParIdx <= ((uint16_t)OD_H1200_SDO_SERVER_1_PARAM + 0x7FU))) {
 8003862:	bf00      	nop
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* store the parameters and configure CANrx and CANtx */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SDO->CANdevRx = CANdevRx;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800386e:	649a      	str	r2, [r3, #72]	@ 0x48
    SDO->CANdevRxIdx = CANdevRxIdx;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8003874:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    SDO->CANdevTxIdx = CANdevTxIdx;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800387e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	651a      	str	r2, [r3, #80]	@ 0x50
    SDO->COB_IDServerToClient = 0;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	655a      	str	r2, [r3, #84]	@ 0x54
#endif
    SDO->CANdevTx = CANdevTx;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003892:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO, CANdevRx, CANdevRxIdx, CANdevTxIdx, CanId_ClientToServer,
 8003894:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003896:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003898:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 800389c:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 800389e:	9201      	str	r2, [sp, #4]
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	4603      	mov	r3, r0
 80038a4:	460a      	mov	r2, r1
 80038a6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f7ff fd6f 	bl	800338c <CO_SDOserver_init_canRxTx>
 80038ae:	4603      	mov	r3, r0
                                     CanId_ServerToClient);
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3728      	adds	r7, #40	@ 0x28
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	08001983 	.word	0x08001983
 80038bc:	08003465 	.word	0x08003465

080038c0 <validateAndWriteToOD>:
 * @param crcOperation 0=none, 1=calculate, 2=calculate and compare
 * @parma crcClient crc checksum to campare with
 *
 * Returns true on success, otherwise write also abortCode and sets state to CO_SDO_ST_ABORT */
static bool_t
validateAndWriteToOD(CO_SDOserver_t* SDO, CO_SDO_abortCode_t* abortCode, uint8_t crcOperation, uint16_t crcClient) {
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b08b      	sub	sp, #44	@ 0x2c
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	4611      	mov	r1, r2
 80038cc:	461a      	mov	r2, r3
 80038ce:	460b      	mov	r3, r1
 80038d0:	71fb      	strb	r3, [r7, #7]
 80038d2:	4613      	mov	r3, r2
 80038d4:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80038dc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (SDO->finished) {
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 8082 	beq.w	80039ec <validateAndWriteToOD+0x12c>
        /* Verify if size of data downloaded matches size indicated. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran != SDO->sizeInd)) {
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d015      	beq.n	800391c <validateAndWriteToOD+0x5c>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d00f      	beq.n	800391c <validateAndWriteToOD+0x5c>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003904:	429a      	cmp	r2, r3
 8003906:	d901      	bls.n	800390c <validateAndWriteToOD+0x4c>
 8003908:	4a73      	ldr	r2, [pc, #460]	@ (8003ad8 <validateAndWriteToOD+0x218>)
 800390a:	e000      	b.n	800390e <validateAndWriteToOD+0x4e>
 800390c:	4a73      	ldr	r2, [pc, #460]	@ (8003adc <validateAndWriteToOD+0x21c>)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	751a      	strb	r2, [r3, #20]
            return false;
 8003918:	2300      	movs	r3, #0
 800391a:	e0d8      	b.n	8003ace <validateAndWriteToOD+0x20e>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	623b      	str	r3, [r7, #32]

        /* If dataType is string, then size of data downloaded may be shorter than size of the
         * OD data buffer. If so, add two zero bytes to terminate (unicode) string. Shorten
         * also OD data size, (temporary, send information about EOF into OD_IO.write) */
        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003928:	b25b      	sxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	da42      	bge.n	80039b4 <validateAndWriteToOD+0xf4>
            && ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd))
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d004      	beq.n	800393e <validateAndWriteToOD+0x7e>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003938:	6a3a      	ldr	r2, [r7, #32]
 800393a:	429a      	cmp	r2, r3
 800393c:	d93a      	bls.n	80039b4 <validateAndWriteToOD+0xf4>
            && ((SDO->bufOffsetWr + 2U) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE)) {
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003944:	3302      	adds	r3, #2
 8003946:	2b20      	cmp	r3, #32
 8003948:	d834      	bhi.n	80039b4 <validateAndWriteToOD+0xf4>
            SDO->buf[SDO->bufOffsetWr] = 0;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4413      	add	r3, r2
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            SDO->bufOffsetWr++;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            SDO->sizeTran++;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	66da      	str	r2, [r3, #108]	@ 0x6c
            if ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd)) {
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d004      	beq.n	8003982 <validateAndWriteToOD+0xc2>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800397c:	6a3a      	ldr	r2, [r7, #32]
 800397e:	429a      	cmp	r2, r3
 8003980:	d913      	bls.n	80039aa <validateAndWriteToOD+0xea>
                SDO->buf[SDO->bufOffsetWr] = 0;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	4413      	add	r3, r2
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                SDO->bufOffsetWr++;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                SDO->sizeTran++;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	66da      	str	r2, [r3, #108]	@ 0x6c
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	621a      	str	r2, [r3, #32]
 80039b2:	e02d      	b.n	8003a10 <validateAndWriteToOD+0x150>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check. */
        else if (sizeInOd == 0U) {
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d104      	bne.n	80039c4 <validateAndWriteToOD+0x104>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	621a      	str	r2, [r3, #32]
 80039c2:	e025      	b.n	8003a10 <validateAndWriteToOD+0x150>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039c8:	6a3a      	ldr	r2, [r7, #32]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d020      	beq.n	8003a10 <validateAndWriteToOD+0x150>
            *abortCode = (SDO->sizeTran > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039d2:	6a3a      	ldr	r2, [r7, #32]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d201      	bcs.n	80039dc <validateAndWriteToOD+0x11c>
 80039d8:	4a3f      	ldr	r2, [pc, #252]	@ (8003ad8 <validateAndWriteToOD+0x218>)
 80039da:	e000      	b.n	80039de <validateAndWriteToOD+0x11e>
 80039dc:	4a3f      	ldr	r2, [pc, #252]	@ (8003adc <validateAndWriteToOD+0x21c>)
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	751a      	strb	r2, [r3, #20]
            return false;
 80039e8:	2300      	movs	r3, #0
 80039ea:	e070      	b.n	8003ace <validateAndWriteToOD+0x20e>
        } else { /* MISRA C 2004 14.10 */
        }
    } else {
        /* Verify if size of data downloaded is not too large. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran > SDO->sizeInd)) {
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00d      	beq.n	8003a10 <validateAndWriteToOD+0x150>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d907      	bls.n	8003a10 <validateAndWriteToOD+0x150>
            *abortCode = CO_SDO_AB_DATA_LONG;
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4a35      	ldr	r2, [pc, #212]	@ (8003ad8 <validateAndWriteToOD+0x218>)
 8003a04:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	751a      	strb	r2, [r3, #20]
            return false;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	e05e      	b.n	8003ace <validateAndWriteToOD+0x20e>
    (void)crcOperation;
    (void)crcClient;
    (void)bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	613b      	str	r3, [r7, #16]

    CO_LOCK_OD(SDO->CANdevTx);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a18:	f3ef 8210 	mrs	r2, PRIMASK
 8003a1c:	617a      	str	r2, [r7, #20]
  return(result);
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8003a22:	b672      	cpsid	i
}
 8003a24:	bf00      	nop
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf, SDO->bufOffsetWr, &countWritten);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f103 0018 	add.w	r0, r3, #24
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003a3c:	f107 0310 	add.w	r3, r7, #16
 8003a40:	47a0      	blx	r4
 8003a42:	4603      	mov	r3, r0
 8003a44:	77fb      	strb	r3, [r7, #31]
    CO_UNLOCK_OD(SDO->CANdevTx);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	f383 8810 	msr	PRIMASK, r3
}
 8003a54:	bf00      	nop

    SDO->bufOffsetWr = 0;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* verify write error value */
    if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 8003a5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d011      	beq.n	8003a8a <validateAndWriteToOD+0x1ca>
 8003a66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a6e:	d00c      	beq.n	8003a8a <validateAndWriteToOD+0x1ca>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003a70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fe f9c9 	bl	8001e0c <OD_getSDOabCode>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2201      	movs	r2, #1
 8003a84:	751a      	strb	r2, [r3, #20]
        return false;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e021      	b.n	8003ace <validateAndWriteToOD+0x20e>
    } else if (SDO->finished && (odRet == ODR_PARTIAL)) {
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00c      	beq.n	8003aac <validateAndWriteToOD+0x1ec>
 8003a92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a9a:	d107      	bne.n	8003aac <validateAndWriteToOD+0x1ec>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4a0f      	ldr	r2, [pc, #60]	@ (8003adc <validateAndWriteToOD+0x21c>)
 8003aa0:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	751a      	strb	r2, [r3, #20]
        return false;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	e010      	b.n	8003ace <validateAndWriteToOD+0x20e>
    } else if (!SDO->finished && (odRet == ODR_OK)) {
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10b      	bne.n	8003acc <validateAndWriteToOD+0x20c>
 8003ab4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d107      	bne.n	8003acc <validateAndWriteToOD+0x20c>
        /* OD variable was written completely, but SDO download still has data */
        *abortCode = CO_SDO_AB_DATA_LONG;
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4a06      	ldr	r2, [pc, #24]	@ (8003ad8 <validateAndWriteToOD+0x218>)
 8003ac0:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	751a      	strb	r2, [r3, #20]
        return false;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e000      	b.n	8003ace <validateAndWriteToOD+0x20e>
    } else { /* MISRA C 2004 14.10 */
    }

    return true;
 8003acc:	2301      	movs	r3, #1
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	372c      	adds	r7, #44	@ 0x2c
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd90      	pop	{r4, r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	06070012 	.word	0x06070012
 8003adc:	06070013 	.word	0x06070013

08003ae0 <readFromOd>:
 * @parma countMinimum if data size in buffer is less than countMinimum, then buffer is refilled from OD variable
 * @param calculateCrc if true, crc is calculated
 *
 * Returns true on success, otherwise write also abortCode and sets state to CO_SDO_ST_ABORT */
static bool_t
readFromOd(CO_SDOserver_t* SDO, CO_SDO_abortCode_t* abortCode, OD_size_t countMinimum, bool_t calculateCrc) {
 8003ae0:	b590      	push	{r4, r7, lr}
 8003ae2:	b08d      	sub	sp, #52	@ 0x34
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) == 0
    (void)calculateCrc; /* may be unused */
#endif
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (!SDO->finished && (countRemain < countMinimum)) {
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f040 80ab 	bne.w	8003c5e <readFromOd+0x17e>
 8003b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	f080 80a6 	bcs.w	8003c5e <readFromOd+0x17e>
        /* first move remaining data to the start of the buffer */
        (void)memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003b24:	4413      	add	r3, r2
 8003b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b28:	4619      	mov	r1, r3
 8003b2a:	f007 fbaf 	bl	800b28c <memmove>
        SDO->bufOffsetRd = 0;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        SDO->bufOffsetWr = countRemain;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b3a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b40:	f1c3 0320 	rsb	r3, r3, #32
 8003b44:	623b      	str	r3, [r7, #32]

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]

        CO_LOCK_OD(SDO->CANdevTx);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b4e:	f3ef 8210 	mrs	r2, PRIMASK
 8003b52:	617a      	str	r2, [r7, #20]
  return(result);
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8003b58:	b672      	cpsid	i
}
 8003b5a:	bf00      	nop
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, &SDO->buf[countRemain], countRdRequest, &countRd);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f103 0018 	add.w	r0, r3, #24
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	3380      	adds	r3, #128	@ 0x80
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	18d1      	adds	r1, r2, r3
 8003b6e:	f107 0310 	add.w	r3, r7, #16
 8003b72:	6a3a      	ldr	r2, [r7, #32]
 8003b74:	47a0      	blx	r4
 8003b76:	4603      	mov	r3, r0
 8003b78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        CO_UNLOCK_OD(SDO->CANdevTx);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	f383 8810 	msr	PRIMASK, r3
}
 8003b8a:	bf00      	nop

        if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 8003b8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d011      	beq.n	8003bb8 <readFromOd+0xd8>
 8003b94:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003b98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b9c:	d00c      	beq.n	8003bb8 <readFromOd+0xd8>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003b9e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fe f932 	bl	8001e0c <OD_getSDOabCode>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	751a      	strb	r2, [r3, #20]
            return false;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	e053      	b.n	8003c60 <readFromOd+0x180>
        }

        /* if data is string, send only data up to null termination */
        OD_size_t lastRd = countRd + countRemain;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bbc:	4413      	add	r3, r2
 8003bbe:	61fb      	str	r3, [r7, #28]
        if ((countRd > 0U) && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)) {
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d027      	beq.n	8003c16 <readFromOd+0x136>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bcc:	b25b      	sxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	da21      	bge.n	8003c16 <readFromOd+0x136>
            SDO->buf[lastRd] = 0; /* (SDO->buf is one byte larger) */
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3380      	adds	r3, #128	@ 0x80
 8003bda:	2200      	movs	r2, #0
 8003bdc:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char*)&SDO->buf[countRemain]);
 8003bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be0:	3380      	adds	r3, #128	@ 0x80
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	4413      	add	r3, r2
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fc fb02 	bl	80001f0 <strlen>
 8003bec:	62b8      	str	r0, [r7, #40]	@ 0x28
            if (countStr == 0U) {
 8003bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <readFromOd+0x118>
                countStr = 1;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
            } /* zero length is not allowed */
            if (countStr < countRd) {
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d20a      	bcs.n	8003c16 <readFromOd+0x136>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 8003c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c02:	613b      	str	r3, [r7, #16]
                odRet = ODR_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	441a      	add	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1a:	441a      	add	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        if ((SDO->bufOffsetWr == 0U) || (odRet == ODR_PARTIAL)) {
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d004      	beq.n	8003c36 <readFromOd+0x156>
 8003c2c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003c30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c34:	d110      	bne.n	8003c58 <readFromOd+0x178>
            SDO->finished = false;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	675a      	str	r2, [r3, #116]	@ 0x74
            if (SDO->bufOffsetWr < countMinimum) {
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d90a      	bls.n	8003c5e <readFromOd+0x17e>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4a07      	ldr	r2, [pc, #28]	@ (8003c68 <readFromOd+0x188>)
 8003c4c:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2201      	movs	r2, #1
 8003c52:	751a      	strb	r2, [r3, #20]
                return false;
 8003c54:	2300      	movs	r3, #0
 8003c56:	e003      	b.n	8003c60 <readFromOd+0x180>
            }
        } else {
            SDO->finished = true;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	675a      	str	r2, [r3, #116]	@ 0x74
        if (calculateCrc && SDO->block_crcEnabled) {
            SDO->block_crc = crc16_ccitt(&SDO->buf[countRemain], countRd, SDO->block_crc);
        }
#endif
    }
    return true;
 8003c5e:	2301      	movs	r3, #1
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3734      	adds	r7, #52	@ 0x34
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd90      	pop	{r4, r7, pc}
 8003c68:	06040047 	.word	0x06040047

08003c6c <CO_SDOserver_process>:
#endif

CO_SDO_return_t
CO_SDOserver_process(CO_SDOserver_t* SDO, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                     uint32_t* timerNext_us) {
 8003c6c:	b590      	push	{r4, r7, lr}
 8003c6e:	b09b      	sub	sp, #108	@ 0x6c
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d103      	bne.n	8003c88 <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 8003c80:	f06f 0301 	mvn.w	r3, #1
 8003c84:	f000 bd04 	b.w	8004690 <CO_SDOserver_process+0xa24>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	bf14      	ite	ne
 8003c9a:	2301      	movne	r3, #1
 8003c9c:	2300      	moveq	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	657b      	str	r3, [r7, #84]	@ 0x54

    if ((SDO->state == CO_SDO_ST_IDLE) && SDO->valid && !isNew) {
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	7d1b      	ldrb	r3, [r3, #20]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10a      	bne.n	8003cc2 <CO_SDOserver_process+0x56>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d006      	beq.n	8003cc2 <CO_SDOserver_process+0x56>
 8003cb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d103      	bne.n	8003cc2 <CO_SDOserver_process+0x56>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003cc0:	e2db      	b.n	800427a <CO_SDOserver_process+0x60e>
    } else if (!NMTisPreOrOperational || !SDO->valid) {
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <CO_SDOserver_process+0x64>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d109      	bne.n	8003ce4 <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	63da      	str	r2, [r3, #60]	@ 0x3c
        ret = CO_SDO_RT_ok_communicationEnd;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003ce2:	e2ca      	b.n	800427a <CO_SDOserver_process+0x60e>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 8003ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 82c7 	beq.w	800427a <CO_SDOserver_process+0x60e>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	7d1b      	ldrb	r3, [r3, #20]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f040 80cd 	bne.w	8003e92 <CO_SDOserver_process+0x226>
            bool_t upload = false;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	663b      	str	r3, [r7, #96]	@ 0x60

            if ((SDO->CANrxData[0] & 0xF0U) == 0x20U) {
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d103      	bne.n	8003d12 <CO_SDOserver_process+0xa6>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2211      	movs	r2, #17
 8003d0e:	751a      	strb	r2, [r3, #20]
 8003d10:	e00f      	b.n	8003d32 <CO_SDOserver_process+0xc6>
            } else if (SDO->CANrxData[0] == 0x40U) {
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d18:	2b40      	cmp	r3, #64	@ 0x40
 8003d1a:	d105      	bne.n	8003d28 <CO_SDOserver_process+0xbc>
                upload = true;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	663b      	str	r3, [r7, #96]	@ 0x60
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2221      	movs	r2, #33	@ 0x21
 8003d24:	751a      	strb	r2, [r3, #20]
 8003d26:	e004      	b.n	8003d32 <CO_SDOserver_process+0xc6>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 8003d28:	4ba9      	ldr	r3, [pc, #676]	@ (8003fd0 <CO_SDOserver_process+0x364>)
 8003d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 8003d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d163      	bne.n	8003e00 <CO_SDOserver_process+0x194>
                ODR_t odRet;
                SDO->index = (uint16_t)((((uint16_t)SDO->CANrxData[2]) << 8) | SDO->CANrxData[1]);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d3e:	b21b      	sxth	r3, r3
 8003d40:	021b      	lsls	r3, r3, #8
 8003d42:	b21a      	sxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d4a:	b21b      	sxth	r3, r3
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	b21b      	sxth	r3, r3
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	871a      	strh	r2, [r3, #56]	@ 0x38
                SDO->subIndex = SDO->CANrxData[3];
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f893 2043 	ldrb.w	r2, [r3, #67]	@ 0x43
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex, &SDO->OD_IO, false);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	f7fd fee9 	bl	8001b44 <OD_find>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f893 103a 	ldrb.w	r1, [r3, #58]	@ 0x3a
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f103 0218 	add.w	r2, r3, #24
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f7fd ff3c 	bl	8001bfc <OD_getSub>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
                if (odRet != ODR_OK) {
 8003d8a:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <CO_SDOserver_process+0x13c>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003d92:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe f838 	bl	8001e0c <OD_getSDOabCode>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2201      	movs	r2, #1
 8003da4:	751a      	strb	r2, [r3, #20]
 8003da6:	e02b      	b.n	8003e00 <CO_SDOserver_process+0x194>
                } else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_RW) == 0U) {
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d105      	bne.n	8003dc2 <CO_SDOserver_process+0x156>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 8003db6:	4b87      	ldr	r3, [pc, #540]	@ (8003fd4 <CO_SDOserver_process+0x368>)
 8003db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	751a      	strb	r2, [r3, #20]
 8003dc0:	e01e      	b.n	8003e00 <CO_SDOserver_process+0x194>
                    } else if (upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_R) == 0U)) {
 8003dc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00c      	beq.n	8003de2 <CO_SDOserver_process+0x176>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d105      	bne.n	8003de2 <CO_SDOserver_process+0x176>
                        abortCode = CO_SDO_AB_WRITEONLY;
 8003dd6:	4b80      	ldr	r3, [pc, #512]	@ (8003fd8 <CO_SDOserver_process+0x36c>)
 8003dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	751a      	strb	r2, [r3, #20]
 8003de0:	e00e      	b.n	8003e00 <CO_SDOserver_process+0x194>
                    } else if (!upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_W) == 0U)) {
 8003de2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10b      	bne.n	8003e00 <CO_SDOserver_process+0x194>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d104      	bne.n	8003e00 <CO_SDOserver_process+0x194>
                        abortCode = CO_SDO_AB_READONLY;
 8003df6:	4b79      	ldr	r3, [pc, #484]	@ (8003fdc <CO_SDOserver_process+0x370>)
 8003df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	751a      	strb	r2, [r3, #20]
                }
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            /* load data from object dictionary, if upload and no error */
            if (upload && (abortCode == CO_SDO_AB_NONE)) {
 8003e00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d045      	beq.n	8003e92 <CO_SDOserver_process+0x226>
 8003e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d142      	bne.n	8003e92 <CO_SDOserver_process+0x226>
                SDO->bufOffsetRd = 0;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                SDO->bufOffsetWr = 0;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                SDO->sizeTran = 0;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	66da      	str	r2, [r3, #108]	@ 0x6c
                SDO->finished = false;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	675a      	str	r2, [r3, #116]	@ 0x74

                if (readFromOd(SDO, &abortCode, 7, false)) {
 8003e28:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	2207      	movs	r2, #7
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f7ff fe55 	bl	8003ae0 <readFromOd>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d02a      	beq.n	8003e92 <CO_SDOserver_process+0x226>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01a      	beq.n	8003e7a <CO_SDOserver_process+0x20e>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a1a      	ldr	r2, [r3, #32]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	669a      	str	r2, [r3, #104]	@ 0x68

                        if (SDO->sizeInd == 0U) {
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d105      	bne.n	8003e60 <CO_SDOserver_process+0x1f4>
                            SDO->sizeInd = SDO->bufOffsetWr;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	669a      	str	r2, [r3, #104]	@ 0x68
 8003e5e:	e018      	b.n	8003e92 <CO_SDOserver_process+0x226>
                        } else if (SDO->sizeInd != SDO->bufOffsetWr) {
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d011      	beq.n	8003e92 <CO_SDOserver_process+0x226>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8003e6e:	4b5c      	ldr	r3, [pc, #368]	@ (8003fe0 <CO_SDOserver_process+0x374>)
 8003e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2201      	movs	r2, #1
 8003e76:	751a      	strb	r2, [r3, #20]
 8003e78:	e00b      	b.n	8003e92 <CO_SDOserver_process+0x226>
                        } else { /* MISRA C 2004 14.10 */
                        }
                    } else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e80:	b25b      	sxtb	r3, r3
                                           ? SDO->OD_IO.stream.dataLength
                                           : 0U;
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	db02      	blt.n	8003e8c <CO_SDOserver_process+0x220>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	e000      	b.n	8003e8e <CO_SDOserver_process+0x222>
 8003e8c:	2300      	movs	r3, #0
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	6693      	str	r3, [r2, #104]	@ 0x68
                }
            }
#endif    /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        bool isOKstate = (SDO->state != CO_SDO_ST_IDLE);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	7d1b      	ldrb	r3, [r3, #20]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	bf14      	ite	ne
 8003e9c:	2301      	movne	r3, #1
 8003e9e:	2300      	moveq	r3, #0
 8003ea0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
        isOKstate = (SDO->state != CO_SDO_ST_ABORT) && isOKstate;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	7d1b      	ldrb	r3, [r3, #20]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d005      	beq.n	8003eba <CO_SDOserver_process+0x24e>
 8003eae:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <CO_SDOserver_process+0x24e>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <CO_SDOserver_process+0x250>
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8003ec0:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
        if (isOKstate) {
 8003ecc:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 81ca 	beq.w	800426a <CO_SDOserver_process+0x5fe>
            switch (SDO->state) {
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	7d1b      	ldrb	r3, [r3, #20]
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	3b11      	subs	r3, #17
 8003ede:	2b12      	cmp	r3, #18
 8003ee0:	f200 81b4 	bhi.w	800424c <CO_SDOserver_process+0x5e0>
 8003ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8003eec <CO_SDOserver_process+0x280>)
 8003ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eea:	bf00      	nop
 8003eec:	08003f39 	.word	0x08003f39
 8003ef0:	0800424d 	.word	0x0800424d
 8003ef4:	08004105 	.word	0x08004105
 8003ef8:	0800424d 	.word	0x0800424d
 8003efc:	0800424d 	.word	0x0800424d
 8003f00:	0800424d 	.word	0x0800424d
 8003f04:	0800424d 	.word	0x0800424d
 8003f08:	0800424d 	.word	0x0800424d
 8003f0c:	0800424d 	.word	0x0800424d
 8003f10:	0800424d 	.word	0x0800424d
 8003f14:	0800424d 	.word	0x0800424d
 8003f18:	0800424d 	.word	0x0800424d
 8003f1c:	0800424d 	.word	0x0800424d
 8003f20:	0800424d 	.word	0x0800424d
 8003f24:	0800424d 	.word	0x0800424d
 8003f28:	0800424d 	.word	0x0800424d
 8003f2c:	080041fb 	.word	0x080041fb
 8003f30:	0800424d 	.word	0x0800424d
 8003f34:	08004203 	.word	0x08004203
                case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
                    if ((SDO->CANrxData[0] & 0x02U) != 0U) {
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 80a4 	beq.w	8004090 <CO_SDOserver_process+0x424>
                        /* Expedited transfer, max 4 bytes of data */

                        /* Size of OD variable (>0 if indicated) */
                        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	647b      	str	r3, [r7, #68]	@ 0x44

                        /* Get SDO data size (indicated by SDO client or get from OD) */
                        OD_size_t dataSizeToWrite = 4;
 8003f4e:	2304      	movs	r3, #4
 8003f50:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <CO_SDOserver_process+0x30a>
                            dataSizeToWrite -= ((OD_size_t)(SDO->CANrxData[0]) >> 2) & 0x03U;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f66:	089b      	lsrs	r3, r3, #2
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f74:	e007      	b.n	8003f86 <CO_SDOserver_process+0x31a>
                        } else if ((sizeInOd > 0U) && (sizeInOd < 4U)) {
 8003f76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d004      	beq.n	8003f86 <CO_SDOserver_process+0x31a>
 8003f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d801      	bhi.n	8003f86 <CO_SDOserver_process+0x31a>
                            dataSizeToWrite = sizeInOd;
 8003f82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* copy data to the temp buffer, swap data if necessary */
                        uint8_t buf[6] = {0};
 8003f86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	809a      	strh	r2, [r3, #4]
                        (void)memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 8003f96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f9a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f007 fa1a 	bl	800b3d6 <memcpy>
#endif

                        /* If dataType is string, then size of data downloaded may be shorter as size of
                         * the OD data buffer. If so, add two zero bytes to terminate (unicode) string.
                         * Shorten also OD data size, (temporary, send information about EOF into OD_IO.write) */
                        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fa8:	b25b      	sxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	da22      	bge.n	8003ff4 <CO_SDOserver_process+0x388>
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 8003fae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <CO_SDOserver_process+0x350>
 8003fb4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003fb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d21b      	bcs.n	8003ff4 <CO_SDOserver_process+0x388>
                            OD_size_t delta = sizeInOd - dataSizeToWrite;
 8003fbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	643b      	str	r3, [r7, #64]	@ 0x40
                            dataSizeToWrite += (delta == 1U) ? 1U : 2U;
 8003fc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d10c      	bne.n	8003fe4 <CO_SDOserver_process+0x378>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e00b      	b.n	8003fe6 <CO_SDOserver_process+0x37a>
 8003fce:	bf00      	nop
 8003fd0:	05040001 	.word	0x05040001
 8003fd4:	06010000 	.word	0x06010000
 8003fd8:	06010001 	.word	0x06010001
 8003fdc:	06010002 	.word	0x06010002
 8003fe0:	06040047 	.word	0x06040047
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003fe8:	4413      	add	r3, r2
 8003fea:	65fb      	str	r3, [r7, #92]	@ 0x5c
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003ff0:	621a      	str	r2, [r3, #32]
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 8003ff2:	e016      	b.n	8004022 <CO_SDOserver_process+0x3b6>
                        } else if (sizeInOd == 0U) {
 8003ff4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d103      	bne.n	8004002 <CO_SDOserver_process+0x396>
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003ffe:	621a      	str	r2, [r3, #32]
 8004000:	e00f      	b.n	8004022 <CO_SDOserver_process+0x3b6>
                        }
                        /* Verify if size of data downloaded matches data size in OD. */
                        else if (dataSizeToWrite != sizeInOd) {
 8004002:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004004:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004006:	429a      	cmp	r2, r3
 8004008:	d00b      	beq.n	8004022 <CO_SDOserver_process+0x3b6>
                            abortCode = (dataSizeToWrite > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 800400a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800400c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800400e:	429a      	cmp	r2, r3
 8004010:	d901      	bls.n	8004016 <CO_SDOserver_process+0x3aa>
 8004012:	4b91      	ldr	r3, [pc, #580]	@ (8004258 <CO_SDOserver_process+0x5ec>)
 8004014:	e000      	b.n	8004018 <CO_SDOserver_process+0x3ac>
 8004016:	4b91      	ldr	r3, [pc, #580]	@ (800425c <CO_SDOserver_process+0x5f0>)
 8004018:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2201      	movs	r2, #1
 800401e:	751a      	strb	r2, [r3, #20]
                            break;
 8004020:	e123      	b.n	800426a <CO_SDOserver_process+0x5fe>
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* Copy data */
                        OD_size_t countWritten = 0;
 8004022:	2300      	movs	r3, #0
 8004024:	623b      	str	r3, [r7, #32]

                        CO_LOCK_OD(SDO->CANdevTx);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800402a:	f3ef 8210 	mrs	r2, PRIMASK
 800402e:	637a      	str	r2, [r7, #52]	@ 0x34
  return(result);
 8004030:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004032:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8004034:	b672      	cpsid	i
}
 8004036:	bf00      	nop
                        ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf, dataSizeToWrite, &countWritten);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f103 0018 	add.w	r0, r3, #24
 8004042:	f107 0320 	add.w	r3, r7, #32
 8004046:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800404a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800404c:	47a0      	blx	r4
 800404e:	4603      	mov	r3, r0
 8004050:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                        CO_UNLOCK_OD(SDO->CANdevTx);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800405a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800405c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405e:	f383 8810 	msr	PRIMASK, r3
}
 8004062:	bf00      	nop

                        if (odRet != ODR_OK) {
 8004064:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <CO_SDOserver_process+0x416>
                            abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 800406c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8004070:	4618      	mov	r0, r3
 8004072:	f7fd fecb 	bl	8001e0c <OD_getSDOabCode>
 8004076:	4603      	mov	r3, r0
 8004078:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2201      	movs	r2, #1
 800407e:	751a      	strb	r2, [r3, #20]
                            break;
 8004080:	e0f3      	b.n	800426a <CO_SDOserver_process+0x5fe>
                        } else {
                            SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2212      	movs	r2, #18
 8004086:	751a      	strb	r2, [r3, #20]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                            SDO->finished = true;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2201      	movs	r2, #1
 800408c:	675a      	str	r2, [r3, #116]	@ 0x74
#else
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                        SDO->state = CO_SDO_ST_ABORT;
#endif
                    }
                    break;
 800408e:	e0ec      	b.n	800426a <CO_SDOserver_process+0x5fe>
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d028      	beq.n	80040f0 <CO_SDOserver_process+0x484>
                            OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	64bb      	str	r3, [r7, #72]	@ 0x48
                            (void)memcpy((void*)(&size), (const void*)(&SDO->CANrxData[4]), sizeof(size));
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	3344      	adds	r3, #68	@ 0x44
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	61fb      	str	r3, [r7, #28]
                            SDO->sizeInd = CO_SWAP_32(size);
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	669a      	str	r2, [r3, #104]	@ 0x68
                            if (sizeInOd > 0U) {
 80040b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d01e      	beq.n	80040f6 <CO_SDOserver_process+0x48a>
                                if (SDO->sizeInd > sizeInOd) {
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040be:	429a      	cmp	r2, r3
 80040c0:	d205      	bcs.n	80040ce <CO_SDOserver_process+0x462>
                                    abortCode = CO_SDO_AB_DATA_LONG;
 80040c2:	4b65      	ldr	r3, [pc, #404]	@ (8004258 <CO_SDOserver_process+0x5ec>)
 80040c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	751a      	strb	r2, [r3, #20]
                                    break;
 80040cc:	e0cd      	b.n	800426a <CO_SDOserver_process+0x5fe>
                                else if ((SDO->sizeInd < sizeInOd)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d90e      	bls.n	80040f6 <CO_SDOserver_process+0x48a>
                                         && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)) {
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040de:	b25b      	sxtb	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	db08      	blt.n	80040f6 <CO_SDOserver_process+0x48a>
                                    abortCode = CO_SDO_AB_DATA_SHORT;
 80040e4:	4b5d      	ldr	r3, [pc, #372]	@ (800425c <CO_SDOserver_process+0x5f0>)
 80040e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2201      	movs	r2, #1
 80040ec:	751a      	strb	r2, [r3, #20]
                                    break;
 80040ee:	e0bc      	b.n	800426a <CO_SDOserver_process+0x5fe>
                            SDO->sizeInd = 0;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	669a      	str	r2, [r3, #104]	@ 0x68
                        SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2212      	movs	r2, #18
 80040fa:	751a      	strb	r2, [r3, #20]
                        SDO->finished = false;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	675a      	str	r2, [r3, #116]	@ 0x74
                    break;
 8004102:	e0b2      	b.n	800426a <CO_SDOserver_process+0x5fe>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xE0U) == 0x00U) {
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800410a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d16d      	bne.n	80041ee <CO_SDOserver_process+0x582>
                        SDO->finished = (SDO->CANrxData[0] & 0x01U) != 0U;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	bf14      	ite	ne
 8004120:	2301      	movne	r3, #1
 8004122:	2300      	moveq	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	461a      	mov	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	675a      	str	r2, [r3, #116]	@ 0x74

                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004132:	f003 0310 	and.w	r3, r3, #16
 8004136:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                        if (toggle != SDO->toggle) {
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8004140:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8004144:	429a      	cmp	r2, r3
 8004146:	d005      	beq.n	8004154 <CO_SDOserver_process+0x4e8>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 8004148:	4b45      	ldr	r3, [pc, #276]	@ (8004260 <CO_SDOserver_process+0x5f4>)
 800414a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2201      	movs	r2, #1
 8004150:	751a      	strb	r2, [r3, #20]
                            break;
 8004152:	e08a      	b.n	800426a <CO_SDOserver_process+0x5fe>
                        }

                        /* get data size and write data to the buffer */
                        OD_size_t count = (OD_size_t)(7U - (((OD_size_t)(SDO->CANrxData[0]) >> 1) & 0x07U));
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800415a:	085b      	lsrs	r3, r3, #1
 800415c:	b2db      	uxtb	r3, r3
 800415e:	43db      	mvns	r3, r3
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        (void)memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004172:	18d0      	adds	r0, r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	3341      	adds	r3, #65	@ 0x41
 8004178:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800417a:	4619      	mov	r1, r3
 800417c:	f007 f92b 	bl	800b3d6 <memcpy>
                        SDO->bufOffsetWr += count;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004188:	441a      	add	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        SDO->sizeTran += count;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004194:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004196:	441a      	add	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	66da      	str	r2, [r3, #108]	@ 0x6c

                        /* if data size exceeds variable size, abort */
                        if ((SDO->OD_IO.stream.dataLength > 0U) && (SDO->sizeTran > SDO->OD_IO.stream.dataLength)) {
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00b      	beq.n	80041bc <CO_SDOserver_process+0x550>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d905      	bls.n	80041bc <CO_SDOserver_process+0x550>
                            abortCode = CO_SDO_AB_DATA_LONG;
 80041b0:	4b29      	ldr	r3, [pc, #164]	@ (8004258 <CO_SDOserver_process+0x5ec>)
 80041b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2201      	movs	r2, #1
 80041b8:	751a      	strb	r2, [r3, #20]
                            break;
 80041ba:	e056      	b.n	800426a <CO_SDOserver_process+0x5fe>
                        }

                        /* if necessary, empty the buffer */
                        if (SDO->finished || ((CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr) < (7U + 2U))) {
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d106      	bne.n	80041d2 <CO_SDOserver_process+0x566>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041ca:	f1c3 0320 	rsb	r3, r3, #32
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	d809      	bhi.n	80041e6 <CO_SDOserver_process+0x57a>
                            if (!validateAndWriteToOD(SDO, &abortCode, 0, 0)) {
 80041d2:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80041d6:	2300      	movs	r3, #0
 80041d8:	2200      	movs	r2, #0
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f7ff fb70 	bl	80038c0 <validateAndWriteToOD>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d040      	beq.n	8004268 <CO_SDOserver_process+0x5fc>
                                break;
                            }
                        }

                        SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2214      	movs	r2, #20
 80041ea:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 80041ec:	e03d      	b.n	800426a <CO_SDOserver_process+0x5fe>
                        abortCode = CO_SDO_AB_CMD;
 80041ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004264 <CO_SDOserver_process+0x5f8>)
 80041f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2201      	movs	r2, #1
 80041f6:	751a      	strb	r2, [r3, #20]
                    break;
 80041f8:	e037      	b.n	800426a <CO_SDOserver_process+0x5fe>
                }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

                case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
                    SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2222      	movs	r2, #34	@ 0x22
 80041fe:	751a      	strb	r2, [r3, #20]
                    break;
 8004200:	e033      	b.n	800426a <CO_SDOserver_process+0x5fe>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xEFU) == 0x60U) {
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004208:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 800420c:	2b60      	cmp	r3, #96	@ 0x60
 800420e:	d117      	bne.n	8004240 <CO_SDOserver_process+0x5d4>
                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004216:	f003 0310 	and.w	r3, r3, #16
 800421a:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                        if (toggle != SDO->toggle) {
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8004224:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8004228:	429a      	cmp	r2, r3
 800422a:	d005      	beq.n	8004238 <CO_SDOserver_process+0x5cc>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 800422c:	4b0c      	ldr	r3, [pc, #48]	@ (8004260 <CO_SDOserver_process+0x5f4>)
 800422e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2201      	movs	r2, #1
 8004234:	751a      	strb	r2, [r3, #20]
                            break;
 8004236:	e018      	b.n	800426a <CO_SDOserver_process+0x5fe>
                        }
                        SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2224      	movs	r2, #36	@ 0x24
 800423c:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 800423e:	e014      	b.n	800426a <CO_SDOserver_process+0x5fe>
                        abortCode = CO_SDO_AB_CMD;
 8004240:	4b08      	ldr	r3, [pc, #32]	@ (8004264 <CO_SDOserver_process+0x5f8>)
 8004242:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2201      	movs	r2, #1
 8004248:	751a      	strb	r2, [r3, #20]
                    break;
 800424a:	e00e      	b.n	800426a <CO_SDOserver_process+0x5fe>
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ:
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */
                default: {
                    /* unknown message received */
                    abortCode = CO_SDO_AB_CMD;
 800424c:	4b05      	ldr	r3, [pc, #20]	@ (8004264 <CO_SDOserver_process+0x5f8>)
 800424e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2201      	movs	r2, #1
 8004254:	751a      	strb	r2, [r3, #20]
                    break;
 8004256:	e008      	b.n	800426a <CO_SDOserver_process+0x5fe>
 8004258:	06070012 	.word	0x06070012
 800425c:	06070013 	.word	0x06070013
 8004260:	05030000 	.word	0x05030000
 8004264:	05040001 	.word	0x05040001
                                break;
 8004268:	bf00      	nop
                }
            } /* switch (SDO->state) */
        }     /* if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT) */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
        SDO->timeoutTimer = 0;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	67da      	str	r2, [r3, #124]	@ 0x7c
#endif
        timeDifference_us = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	63da      	str	r2, [r3, #60]	@ 0x3c
    else { /* MISRA C 2004 14.10 */
    }

    /* Timeout timers and transmit bufferFull flag ****************************/
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
    if (ret == CO_SDO_RT_waitingResponse) {
 800427a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800427e:	2b01      	cmp	r3, #1
 8004280:	d11e      	bne.n	80042c0 <CO_SDOserver_process+0x654>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800428a:	429a      	cmp	r2, r3
 800428c:	d205      	bcs.n	800429a <CO_SDOserver_process+0x62e>
            SDO->timeoutTimer += timeDifference_us;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	441a      	add	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d304      	bcc.n	80042b0 <CO_SDOserver_process+0x644>
            abortCode = CO_SDO_AB_TIMEOUT;
 80042a6:	4b9c      	ldr	r3, [pc, #624]	@ (8004518 <CO_SDOserver_process+0x8ac>)
 80042a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            SDO->state = CO_SDO_ST_ABORT;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <CO_SDOserver_process+0x654>
            ret = CO_SDO_RT_transmittBufferFull;
 80042ba:	2304      	movs	r3, #4
 80042bc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 80042c0:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	f040 81ab 	bne.w	8004620 <CO_SDOserver_process+0x9b4>
        /* clear response buffer */
        (void)memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	3305      	adds	r3, #5
 80042d0:	2208      	movs	r2, #8
 80042d2:	2100      	movs	r1, #0
 80042d4:	4618      	mov	r0, r3
 80042d6:	f006 fff3 	bl	800b2c0 <memset>

        switch (SDO->state) {
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	7d1b      	ldrb	r3, [r3, #20]
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	3b12      	subs	r3, #18
 80042e2:	2b12      	cmp	r3, #18
 80042e4:	f200 8199 	bhi.w	800461a <CO_SDOserver_process+0x9ae>
 80042e8:	a201      	add	r2, pc, #4	@ (adr r2, 80042f0 <CO_SDOserver_process+0x684>)
 80042ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ee:	bf00      	nop
 80042f0:	0800433d 	.word	0x0800433d
 80042f4:	0800461b 	.word	0x0800461b
 80042f8:	080043bf 	.word	0x080043bf
 80042fc:	0800461b 	.word	0x0800461b
 8004300:	0800461b 	.word	0x0800461b
 8004304:	0800461b 	.word	0x0800461b
 8004308:	0800461b 	.word	0x0800461b
 800430c:	0800461b 	.word	0x0800461b
 8004310:	0800461b 	.word	0x0800461b
 8004314:	0800461b 	.word	0x0800461b
 8004318:	0800461b 	.word	0x0800461b
 800431c:	0800461b 	.word	0x0800461b
 8004320:	0800461b 	.word	0x0800461b
 8004324:	0800461b 	.word	0x0800461b
 8004328:	0800461b 	.word	0x0800461b
 800432c:	0800461b 	.word	0x0800461b
 8004330:	0800441b 	.word	0x0800441b
 8004334:	0800461b 	.word	0x0800461b
 8004338:	080044e9 	.word	0x080044e9
            case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
                SDO->CANtxBuff->data[0] = 0x60;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2260      	movs	r2, #96	@ 0x60
 8004342:	715a      	strb	r2, [r3, #5]
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004354:	0a1b      	lsrs	r3, r3, #8
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 800436a:	721a      	strb	r2, [r3, #8]

                /* reset timeout timer and send message */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                SDO->timeoutTimer = 0;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	67da      	str	r2, [r3, #124]	@ 0x7c
#endif
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	4619      	mov	r1, r3
 800437c:	4610      	mov	r0, r2
 800437e:	f002 ff99 	bl	80072b4 <CO_CANsend>
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                if (SDO->finished) {
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004386:	2b00      	cmp	r3, #0
 8004388:	d006      	beq.n	8004398 <CO_SDOserver_process+0x72c>
                    SDO->state = CO_SDO_ST_IDLE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8004390:	2300      	movs	r3, #0
 8004392:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                }
#else
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
#endif
                break;
 8004396:	e143      	b.n	8004620 <CO_SDOserver_process+0x9b4>
                    SDO->toggle = 0x00;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    SDO->sizeTran = 0;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	66da      	str	r2, [r3, #108]	@ 0x6c
                    SDO->bufOffsetWr = 0;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                    SDO->bufOffsetRd = 0;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2213      	movs	r2, #19
 80043ba:	751a      	strb	r2, [r3, #20]
                break;
 80043bc:	e130      	b.n	8004620 <CO_SDOserver_process+0x9b4>
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
                SDO->CANtxBuff->data[0] = 0x20U | SDO->toggle;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f893 2070 	ldrb.w	r2, [r3, #112]	@ 0x70
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f042 0220 	orr.w	r2, r2, #32
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <CO_SDOserver_process+0x772>
 80043da:	2210      	movs	r2, #16
 80043dc:	e000      	b.n	80043e0 <CO_SDOserver_process+0x774>
 80043de:	2200      	movs	r2, #0
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                /* reset timeout timer and send message */
                SDO->timeoutTimer = 0;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	67da      	str	r2, [r3, #124]	@ 0x7c
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	4619      	mov	r1, r3
 80043f6:	4610      	mov	r0, r2
 80043f8:	f002 ff5c 	bl	80072b4 <CO_CANsend>
                if (SDO->finished) {
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004400:	2b00      	cmp	r3, #0
 8004402:	d006      	beq.n	8004412 <CO_SDOserver_process+0x7a6>
                    SDO->state = CO_SDO_ST_IDLE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 800440a:	2300      	movs	r3, #0
 800440c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                } else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
                }
                break;
 8004410:	e106      	b.n	8004620 <CO_SDOserver_process+0x9b4>
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2213      	movs	r2, #19
 8004416:	751a      	strb	r2, [r3, #20]
                break;
 8004418:	e102      	b.n	8004620 <CO_SDOserver_process+0x9b4>
#endif

            case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                /* data were already loaded from OD variable */
                if ((SDO->sizeInd > 0U) && (SDO->sizeInd <= 4U)) {
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800441e:	2b00      	cmp	r3, #0
 8004420:	d024      	beq.n	800446c <CO_SDOserver_process+0x800>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004426:	2b04      	cmp	r3, #4
 8004428:	d820      	bhi.n	800446c <CO_SDOserver_process+0x800>
                    /* expedited transfer */
                    SDO->CANtxBuff->data[0] = (uint8_t)(0x43U | ((4U - SDO->sizeInd) << 2U));
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800442e:	b2db      	uxtb	r3, r3
 8004430:	f1c3 0304 	rsb	r3, r3, #4
 8004434:	b2db      	uxtb	r3, r3
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	b2da      	uxtb	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f042 0243 	orr.w	r2, r2, #67	@ 0x43
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	715a      	strb	r2, [r3, #5]
                    (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&SDO->buf[0]), SDO->sizeInd);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f103 0009 	add.w	r0, r3, #9
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004458:	461a      	mov	r2, r3
 800445a:	f006 ffbc 	bl	800b3d6 <memcpy>
                    SDO->state = CO_SDO_ST_IDLE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8004464:	2300      	movs	r3, #0
 8004466:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800446a:	e020      	b.n	80044ae <CO_SDOserver_process+0x842>
                } else {
                    /* data will be transferred with segmented transfer */
                    if (SDO->sizeInd > 0U) {
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00e      	beq.n	8004492 <CO_SDOserver_process+0x826>
                        /* indicate data size, if known */
                        uint32_t sizeInd = SDO->sizeInd;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004478:	63bb      	str	r3, [r7, #56]	@ 0x38
                        uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 800447a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447c:	61bb      	str	r3, [r7, #24]
                        SDO->CANtxBuff->data[0] = 0x41;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2241      	movs	r2, #65	@ 0x41
 8004484:	715a      	strb	r2, [r3, #5]
                        (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&sizeIndSw), sizeof(sizeIndSw));
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	3309      	adds	r3, #9
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	e003      	b.n	800449a <CO_SDOserver_process+0x82e>
                    } else {
                        SDO->CANtxBuff->data[0] = 0x40;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2240      	movs	r2, #64	@ 0x40
 8004498:	715a      	strb	r2, [r3, #5]
                    }
                    SDO->toggle = 0x00;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    SDO->timeoutTimer = 0;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	67da      	str	r2, [r3, #124]	@ 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2223      	movs	r2, #35	@ 0x23
 80044ac:	751a      	strb	r2, [r3, #20]
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

                /* send message */
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80044be:	0a1b      	lsrs	r3, r3, #8
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 80044d4:	721a      	strb	r2, [r3, #8]
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	4619      	mov	r1, r3
 80044e0:	4610      	mov	r0, r2
 80044e2:	f002 fee7 	bl	80072b4 <CO_CANsend>
                break;
 80044e6:	e09b      	b.n	8004620 <CO_SDOserver_process+0x9b4>
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
                /* refill the data buffer if necessary */
                if (!readFromOd(SDO, &abortCode, 7, false)) {
 80044e8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80044ec:	2300      	movs	r3, #0
 80044ee:	2207      	movs	r2, #7
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f7ff faf5 	bl	8003ae0 <readFromOd>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 8090 	beq.w	800461e <CO_SDOserver_process+0x9b2>
                    break;
                }

                /* SDO command specifier with toggle bit */
                SDO->CANtxBuff->data[0] = SDO->toggle;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	f892 2070 	ldrb.w	r2, [r2, #112]	@ 0x70
 8004508:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8004510:	2b00      	cmp	r3, #0
 8004512:	d103      	bne.n	800451c <CO_SDOserver_process+0x8b0>
 8004514:	2210      	movs	r2, #16
 8004516:	e002      	b.n	800451e <CO_SDOserver_process+0x8b2>
 8004518:	05040000 	.word	0x05040000
 800451c:	2200      	movs	r2, #0
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	65bb      	str	r3, [r7, #88]	@ 0x58
                /* verify, if this is the last segment */
                if ((count < 7U) || (SDO->finished && (count == 7U))) {
 8004534:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004536:	2b06      	cmp	r3, #6
 8004538:	d906      	bls.n	8004548 <CO_SDOserver_process+0x8dc>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800453e:	2b00      	cmp	r3, #0
 8004540:	d01b      	beq.n	800457a <CO_SDOserver_process+0x90e>
 8004542:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004544:	2b07      	cmp	r3, #7
 8004546:	d118      	bne.n	800457a <CO_SDOserver_process+0x90e>
                    /* indicate last segment and nnn */
                    SDO->CANtxBuff->data[0] |= (uint8_t)(((7U - count) << 1U) | 0x01U);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	795a      	ldrb	r2, [r3, #5]
 800454e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004550:	b2db      	uxtb	r3, r3
 8004552:	f1c3 0307 	rsb	r3, r3, #7
 8004556:	b2db      	uxtb	r3, r3
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	b2db      	uxtb	r3, r3
 800455c:	4313      	orrs	r3, r2
 800455e:	b2da      	uxtb	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f042 0201 	orr.w	r2, r2, #1
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	715a      	strb	r2, [r3, #5]
                    SDO->state = CO_SDO_ST_IDLE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8004572:	2300      	movs	r3, #0
 8004574:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004578:	e007      	b.n	800458a <CO_SDOserver_process+0x91e>
                } else {
                    SDO->timeoutTimer = 0;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	67da      	str	r2, [r3, #124]	@ 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2223      	movs	r2, #35	@ 0x23
 8004584:	751a      	strb	r2, [r3, #20]
                    count = 7;
 8004586:	2307      	movs	r3, #7
 8004588:	65bb      	str	r3, [r7, #88]	@ 0x58
                }

                /* copy data segment to CAN message */
                (void)memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd, count);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	1d98      	adds	r0, r3, #6
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800459c:	4413      	add	r3, r2
 800459e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045a0:	4619      	mov	r1, r3
 80045a2:	f006 ff18 	bl	800b3d6 <memcpy>
                SDO->bufOffsetRd += count;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 80045ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045ae:	441a      	add	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                SDO->sizeTran += count;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80045ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045bc:	441a      	add	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* verify if sizeTran is too large or too short if last segment */
                if (SDO->sizeInd > 0U) {
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d01e      	beq.n	8004608 <CO_SDOserver_process+0x99c>
                    if (SDO->sizeTran > SDO->sizeInd) {
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d905      	bls.n	80045e2 <CO_SDOserver_process+0x976>
                        abortCode = CO_SDO_AB_DATA_LONG;
 80045d6:	4b30      	ldr	r3, [pc, #192]	@ (8004698 <CO_SDOserver_process+0xa2c>)
 80045d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2201      	movs	r2, #1
 80045de:	751a      	strb	r2, [r3, #20]
                        break;
 80045e0:	e01e      	b.n	8004620 <CO_SDOserver_process+0x9b4>
                    } else if ((ret == CO_SDO_RT_ok_communicationEnd) && (SDO->sizeTran < SDO->sizeInd)) {
 80045e2:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10e      	bne.n	8004608 <CO_SDOserver_process+0x99c>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d208      	bcs.n	8004608 <CO_SDOserver_process+0x99c>
                        abortCode = CO_SDO_AB_DATA_SHORT;
 80045f6:	4b29      	ldr	r3, [pc, #164]	@ (800469c <CO_SDOserver_process+0xa30>)
 80045f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        ret = CO_SDO_RT_waitingResponse;
 80045fa:	2301      	movs	r3, #1
 80045fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                        SDO->state = CO_SDO_ST_ABORT;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	751a      	strb	r2, [r3, #20]
                        break;
 8004606:	e00b      	b.n	8004620 <CO_SDOserver_process+0x9b4>
                    } else { /* MISRA C 2004 14.10 */
                    }
                }

                /* send message */
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	4619      	mov	r1, r3
 8004612:	4610      	mov	r0, r2
 8004614:	f002 fe4e 	bl	80072b4 <CO_CANsend>
                break;
 8004618:	e002      	b.n	8004620 <CO_SDOserver_process+0x9b4>
            case CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ2:
            case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
            case CO_SDO_ST_UPLOAD_BLK_END_CRSP:
            default: {
                /* none */
                break;
 800461a:	bf00      	nop
 800461c:	e000      	b.n	8004620 <CO_SDOserver_process+0x9b4>
                    break;
 800461e:	bf00      	nop
            }
        } /* switch (SDO->state) */
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 8004620:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004624:	2b01      	cmp	r3, #1
 8004626:	d131      	bne.n	800468c <CO_SDOserver_process+0xa20>
        if (SDO->state == CO_SDO_ST_ABORT) {
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	7d1b      	ldrb	r3, [r3, #20]
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b01      	cmp	r3, #1
 8004630:	d12c      	bne.n	800468c <CO_SDOserver_process+0xa20>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8004632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004634:	617b      	str	r3, [r7, #20]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2280      	movs	r2, #128	@ 0x80
 800463c:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800464e:	0a1b      	lsrs	r3, r3, #8
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 8004664:	721a      	strb	r2, [r3, #8]

            (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&code), sizeof(code));
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	3309      	adds	r3, #9
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	601a      	str	r2, [r3, #0]
            (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	4619      	mov	r1, r3
 800467a:	4610      	mov	r0, r2
 800467c:	f002 fe1a 	bl	80072b4 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 8004686:	23f6      	movs	r3, #246	@ 0xf6
 8004688:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 800468c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
}
 8004690:	4618      	mov	r0, r3
 8004692:	376c      	adds	r7, #108	@ 0x6c
 8004694:	46bd      	mov	sp, r7
 8004696:	bd90      	pop	{r4, r7, pc}
 8004698:	06070012 	.word	0x06070012
 800469c:	06070013 	.word	0x06070013

080046a0 <CO_getUint8>:
CO_getUint8(const void* buf) {
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	73fb      	strb	r3, [r7, #15]
    return value;
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <CO_getUint32>:
CO_getUint32(const void* buf) {
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	60fb      	str	r3, [r7, #12]
    return value;
 80046ca:	68fb      	ldr	r3, [r7, #12]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <OD_getIndex+0x14>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	e000      	b.n	80046ee <OD_getIndex+0x16>
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 800470a:	2305      	movs	r3, #5
 800470c:	e003      	b.n	8004716 <OD_extension_init+0x1c>
    entry->extension = extension;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8004722:	b580      	push	{r7, lr}
 8004724:	b086      	sub	sp, #24
 8004726:	af02      	add	r7, sp, #8
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
 800472e:	460b      	mov	r3, r1
 8004730:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004732:	7af9      	ldrb	r1, [r7, #11]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	2301      	movs	r3, #1
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f7fd fb83 	bl	8001e48 <OD_get_value>
 8004742:	4603      	mov	r3, r0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af02      	add	r7, sp, #8
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	607a      	str	r2, [r7, #4]
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	460b      	mov	r3, r1
 800475a:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800475c:	7af9      	ldrb	r1, [r7, #11]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	2304      	movs	r3, #4
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f7fd fb6e 	bl	8001e48 <OD_get_value>
 800476c:	4603      	mov	r3, r0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <CO_SYNCsend>:
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t
CO_SYNCsend(CO_SYNC_t* SYNC) {
 8004776:	b580      	push	{r7, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) {
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	7c9b      	ldrb	r3, [r3, #18]
 8004782:	3301      	adds	r3, #1
 8004784:	b2da      	uxtb	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	749a      	strb	r2, [r3, #18]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	7c9a      	ldrb	r2, [r3, #18]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	7c5b      	ldrb	r3, [r3, #17]
 8004792:	429a      	cmp	r2, r3
 8004794:	d902      	bls.n	800479c <CO_SYNCsend+0x26>
        SYNC->counter = 1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	749a      	strb	r2, [r3, #18]
    }
    SYNC->timer = 0;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	bf0c      	ite	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	2300      	movne	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	7c92      	ldrb	r2, [r2, #18]
 80047be:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c8:	4619      	mov	r1, r3
 80047ca:	4610      	mov	r0, r2
 80047cc:	f002 fd72 	bl	80072b4 <CO_CANsend>
 80047d0:	4603      	mov	r3, r0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SYNC_receive(void* object, void* msg) {
 80047da:	b480      	push	{r7}
 80047dc:	b087      	sub	sp, #28
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	6039      	str	r1, [r7, #0]
    CO_SYNC_t* SYNC = object;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	791b      	ldrb	r3, [r3, #4]
 80047ec:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0U) {
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	7c5b      	ldrb	r3, [r3, #17]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10c      	bne.n	8004814 <CO_SYNC_receive+0x3a>
        if (DLC == 0U) {
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d102      	bne.n	8004806 <CO_SYNC_receive+0x2c>
            syncReceived = true;
 8004800:	2301      	movs	r3, #1
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	e019      	b.n	800483a <CO_SYNC_receive+0x60>
        } else {
            SYNC->receiveError = DLC | 0x40U;
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800480c:	b2da      	uxtb	r2, r3
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	721a      	strb	r2, [r3, #8]
 8004812:	e012      	b.n	800483a <CO_SYNC_receive+0x60>
        }
    } else {
        if (DLC == 1U) {
 8004814:	7bfb      	ldrb	r3, [r7, #15]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d109      	bne.n	800482e <CO_SYNC_receive+0x54>
            const uint8_t* data = CO_CANrxMsg_readData(msg);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	3305      	adds	r3, #5
 800481e:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	781a      	ldrb	r2, [r3, #0]
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 8004828:	2301      	movs	r3, #1
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	e005      	b.n	800483a <CO_SYNC_receive+0x60>
        } else {
            SYNC->receiveError = DLC | 0x80U;
 800482e:	7bfb      	ldrb	r3, [r7, #15]
 8004830:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004834:	b2da      	uxtb	r2, r3
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00c      	beq.n	800485a <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	2b00      	cmp	r3, #0
 8004846:	bf0c      	ite	eq
 8004848:	2301      	moveq	r3, #1
 800484a:	2300      	movne	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	461a      	mov	r2, r3
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	2201      	movs	r2, #1
 8004858:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
	...

08004868 <OD_write_1005>:
 * Custom function for writing OD object "COB-ID sync message"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1005(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8004868:	b590      	push	{r4, r7, lr}
 800486a:	b08f      	sub	sp, #60	@ 0x3c
 800486c:	af04      	add	r7, sp, #16
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
 8004874:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00c      	beq.n	8004896 <OD_write_1005+0x2e>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	7d1b      	ldrb	r3, [r3, #20]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d108      	bne.n	8004896 <OD_write_1005+0x2e>
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d005      	beq.n	8004896 <OD_write_1005+0x2e>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b04      	cmp	r3, #4
 800488e:	d102      	bne.n	8004896 <OD_write_1005+0x2e>
        || (countWritten == NULL)) {
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <OD_write_1005+0x32>
        return ODR_DEV_INCOMPAT;
 8004896:	2309      	movs	r3, #9
 8004898:	e0a2      	b.n	80049e0 <OD_write_1005+0x178>
    }

    CO_SYNC_t* SYNC = stream->object;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 80048a0:	68b8      	ldr	r0, [r7, #8]
 80048a2:	f7ff ff0b 	bl	80046bc <CO_getUint32>
 80048a6:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048b0:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    bool_t isProducer = (cobIdSync & 0x40000000U) != 0U;
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	bf14      	ite	ne
 80048bc:	2301      	movne	r3, #1
 80048be:	2300      	moveq	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	61bb      	str	r3, [r7, #24]
    if (((cobIdSync & 0xBFFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 80048c4:	6a3a      	ldr	r2, [r7, #32]
 80048c6:	4b48      	ldr	r3, [pc, #288]	@ (80049e8 <OD_write_1005+0x180>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d133      	bne.n	8004936 <OD_write_1005+0xce>
 80048ce:	8bfb      	ldrh	r3, [r7, #30]
 80048d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80048d2:	d930      	bls.n	8004936 <OD_write_1005+0xce>
 80048d4:	8bfb      	ldrh	r3, [r7, #30]
 80048d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048da:	d903      	bls.n	80048e4 <OD_write_1005+0x7c>
 80048dc:	8bfb      	ldrh	r3, [r7, #30]
 80048de:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 80048e2:	d928      	bls.n	8004936 <OD_write_1005+0xce>
 80048e4:	8bfb      	ldrh	r3, [r7, #30]
 80048e6:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 80048ea:	d903      	bls.n	80048f4 <OD_write_1005+0x8c>
 80048ec:	8bfb      	ldrh	r3, [r7, #30]
 80048ee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80048f2:	d320      	bcc.n	8004936 <OD_write_1005+0xce>
 80048f4:	8bfb      	ldrh	r3, [r7, #30]
 80048f6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80048fa:	d903      	bls.n	8004904 <OD_write_1005+0x9c>
 80048fc:	8bfb      	ldrh	r3, [r7, #30]
 80048fe:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8004902:	d318      	bcc.n	8004936 <OD_write_1005+0xce>
 8004904:	8bfb      	ldrh	r3, [r7, #30]
 8004906:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 800490a:	d303      	bcc.n	8004914 <OD_write_1005+0xac>
 800490c:	8bfb      	ldrh	r3, [r7, #30]
 800490e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004912:	d310      	bcc.n	8004936 <OD_write_1005+0xce>
 8004914:	8bfb      	ldrh	r3, [r7, #30]
 8004916:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800491a:	d80c      	bhi.n	8004936 <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && (CAN_ID != SYNC->CAN_ID))) {
 800491c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <OD_write_1005+0xd2>
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d007      	beq.n	800493a <OD_write_1005+0xd2>
 800492a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8004930:	8bfa      	ldrh	r2, [r7, #30]
 8004932:	429a      	cmp	r2, r3
 8004934:	d001      	beq.n	800493a <OD_write_1005+0xd2>
        return ODR_INVALID_VALUE;
 8004936:	230f      	movs	r3, #15
 8004938:	e052      	b.n	80049e0 <OD_write_1005+0x178>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 800493a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8004940:	8bfa      	ldrh	r2, [r7, #30]
 8004942:	429a      	cmp	r2, r3
 8004944:	d039      	beq.n	80049ba <OD_write_1005+0x152>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(SYNC->CANdevRx, SYNC->CANdevRxIdx, CAN_ID, 0x7FF, false,
 8004946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004948:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800494a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494c:	8e99      	ldrh	r1, [r3, #52]	@ 0x34
 800494e:	8bfa      	ldrh	r2, [r7, #30]
 8004950:	4b26      	ldr	r3, [pc, #152]	@ (80049ec <OD_write_1005+0x184>)
 8004952:	9302      	str	r3, [sp, #8]
 8004954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004956:	9301      	str	r3, [sp, #4]
 8004958:	2300      	movs	r3, #0
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8004960:	f002 fbd0 	bl	8007104 <CO_CANrxBufferInit>
 8004964:	4603      	mov	r3, r0
 8004966:	75fb      	strb	r3, [r7, #23]
                                                     (void*)SYNC, CO_SYNC_receive);

        if (CANret != CO_ERROR_NO) {
 8004968:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 8004970:	2309      	movs	r3, #9
 8004972:	e035      	b.n	80049e0 <OD_write_1005+0x178>
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 8004974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004976:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
                                             (SYNC->counterOverflowValue != 0U) ? 1U : 0U, false);
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <OD_write_1005+0x122>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <OD_write_1005+0x124>
 800498a:	2300      	movs	r3, #0
 800498c:	8bfa      	ldrh	r2, [r7, #30]
 800498e:	2400      	movs	r4, #0
 8004990:	9401      	str	r4, [sp, #4]
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	2300      	movs	r3, #0
 8004996:	f002 fc13 	bl	80071c0 <CO_CANtxBufferInit>
 800499a:	4602      	mov	r2, r0
 800499c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499e:	62da      	str	r2, [r3, #44]	@ 0x2c

        if (SYNC->CANtxBuff == NULL) {
 80049a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d104      	bne.n	80049b2 <OD_write_1005+0x14a>
            SYNC->isProducer = false;
 80049a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049aa:	2200      	movs	r2, #0
 80049ac:	625a      	str	r2, [r3, #36]	@ 0x24
            return ODR_DEV_INCOMPAT;
 80049ae:	2309      	movs	r3, #9
 80049b0:	e016      	b.n	80049e0 <OD_write_1005+0x178>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 80049b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b4:	8bfa      	ldrh	r2, [r7, #30]
 80049b6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = isProducer;
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (isProducer) {
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d005      	beq.n	80049d2 <OD_write_1005+0x16a>
        SYNC->counter = 0;
 80049c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c8:	2200      	movs	r2, #0
 80049ca:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 80049cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ce:	2200      	movs	r2, #0
 80049d0:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	68b9      	ldr	r1, [r7, #8]
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f7fd f82a 	bl	8001a32 <OD_writeOriginal>
 80049de:	4603      	mov	r3, r0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	372c      	adds	r7, #44	@ 0x2c
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd90      	pop	{r4, r7, pc}
 80049e8:	bffff800 	.word	0xbffff800
 80049ec:	080047db 	.word	0x080047db

080049f0 <OD_write_1019>:
 * Custom function for writing OD object "Synchronous counter overflow value"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1019(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80049f0:	b590      	push	{r4, r7, lr}
 80049f2:	b089      	sub	sp, #36	@ 0x24
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
 80049fc:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint8_t))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00c      	beq.n	8004a1e <OD_write_1019+0x2e>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	7d1b      	ldrb	r3, [r3, #20]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d108      	bne.n	8004a1e <OD_write_1019+0x2e>
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d005      	beq.n	8004a1e <OD_write_1019+0x2e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d102      	bne.n	8004a1e <OD_write_1019+0x2e>
        || (countWritten == NULL)) {
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <OD_write_1019+0x32>
        return ODR_DEV_INCOMPAT;
 8004a1e:	2309      	movs	r3, #9
 8004a20:	e040      	b.n	8004aa4 <OD_write_1019+0xb4>
    }

    CO_SYNC_t* SYNC = stream->object;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 8004a28:	68b8      	ldr	r0, [r7, #8]
 8004a2a:	f7ff fe39 	bl	80046a0 <CO_getUint8>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if ((syncCounterOvf == 1U) || (syncCounterOvf > 240U)) {
 8004a32:	7cfb      	ldrb	r3, [r7, #19]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d002      	beq.n	8004a3e <OD_write_1019+0x4e>
 8004a38:	7cfb      	ldrb	r3, [r7, #19]
 8004a3a:	2bf0      	cmp	r3, #240	@ 0xf0
 8004a3c:	d901      	bls.n	8004a42 <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 8004a3e:	230f      	movs	r3, #15
 8004a40:	e030      	b.n	8004aa4 <OD_write_1019+0xb4>
    }
    if (*SYNC->OD_1006_period != 0U) {
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 8004a4c:	2317      	movs	r3, #23
 8004a4e:	e029      	b.n	8004aa4 <OD_write_1019+0xb4>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, SYNC->CAN_ID, false,
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8004a60:	7cfb      	ldrb	r3, [r7, #19]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <OD_write_1019+0x7a>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <OD_write_1019+0x7c>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	2400      	movs	r4, #0
 8004a6e:	9401      	str	r4, [sp, #4]
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	2300      	movs	r3, #0
 8004a74:	f002 fba4 	bl	80071c0 <CO_CANtxBufferInit>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	62da      	str	r2, [r3, #44]	@ 0x2c
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);

    if (SYNC->CANtxBuff == NULL) {
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d104      	bne.n	8004a90 <OD_write_1019+0xa0>
        SYNC->isProducer = false;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	625a      	str	r2, [r3, #36]	@ 0x24
        return ODR_DEV_INCOMPAT;
 8004a8c:	2309      	movs	r3, #9
 8004a8e:	e009      	b.n	8004aa4 <OD_write_1019+0xb4>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	7cfa      	ldrb	r2, [r7, #19]
 8004a94:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	68b9      	ldr	r1, [r7, #8]
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f7fc ffc8 	bl	8001a32 <OD_writeOriginal>
 8004aa2:	4603      	mov	r3, r0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	371c      	adds	r7, #28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd90      	pop	{r4, r7, pc}

08004aac <CO_SYNC_init>:
             OD_entry_t* OD_1007_syncWindowLen, OD_entry_t* OD_1019_syncCounterOvf, CO_CANmodule_t* CANdevRx,
             uint16_t CANdevRxIdx,
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08c      	sub	sp, #48	@ 0x30
 8004ab0:	af04      	add	r7, sp, #16
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if ((SYNC == NULL) || (em == NULL) || (OD_1005_cobIdSync == NULL)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00e      	beq.n	8004ade <CO_SYNC_init+0x32>
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00b      	beq.n	8004ade <CO_SYNC_init+0x32>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d008      	beq.n	8004ade <CO_SYNC_init+0x32>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        || (OD_1006_commCyclePeriod == NULL) || (CANdevTx == NULL)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d005      	beq.n	8004ade <CO_SYNC_init+0x32>
 8004ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <CO_SYNC_init+0x32>
#endif
        || (CANdevRx == NULL)) {
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d102      	bne.n	8004ae4 <CO_SYNC_init+0x38>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004ade:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ae2:	e0fd      	b.n	8004ce0 <CO_SYNC_init+0x234>
    }

    /* clear object */
    (void)memset(SYNC, 0, sizeof(CO_SYNC_t));
 8004ae4:	225c      	movs	r2, #92	@ 0x5c
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f006 fbe9 	bl	800b2c0 <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 8004aee:	2380      	movs	r3, #128	@ 0x80
 8004af0:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 8004af2:	f107 0218 	add.w	r2, r7, #24
 8004af6:	2301      	movs	r3, #1
 8004af8:	2100      	movs	r1, #0
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7ff fe26 	bl	800474c <OD_get_u32>
 8004b00:	4603      	mov	r3, r0
 8004b02:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8004b04:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00c      	beq.n	8004b26 <CO_SYNC_init+0x7a>
        if (errInfo != NULL) {
 8004b0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d006      	beq.n	8004b20 <CO_SYNC_init+0x74>
            *errInfo = OD_getIndex(OD_1005_cobIdSync);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7ff fde0 	bl	80046d8 <OD_getIndex>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b1e:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8004b20:	f06f 030b 	mvn.w	r3, #11
 8004b24:	e0dc      	b.n	8004ce0 <CO_SYNC_init+0x234>
    }
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->OD_1005_extension.object = SYNC;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	639a      	str	r2, [r3, #56]	@ 0x38
    SYNC->OD_1005_extension.read = OD_readOriginal;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4a6e      	ldr	r2, [pc, #440]	@ (8004ce8 <CO_SYNC_init+0x23c>)
 8004b30:	63da      	str	r2, [r3, #60]	@ 0x3c
    SYNC->OD_1005_extension.write = OD_write_1005;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4a6d      	ldr	r2, [pc, #436]	@ (8004cec <CO_SYNC_init+0x240>)
 8004b36:	641a      	str	r2, [r3, #64]	@ 0x40
    (void)OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3338      	adds	r3, #56	@ 0x38
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff fddb 	bl	80046fa <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0, sizeof(uint32_t), NULL);
 8004b44:	2300      	movs	r3, #0
 8004b46:	2204      	movs	r2, #4
 8004b48:	2100      	movs	r1, #0
 8004b4a:	6838      	ldr	r0, [r7, #0]
 8004b4c:	f7fd f9f6 	bl	8001f3c <OD_getPtr>
 8004b50:	4602      	mov	r2, r0
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	61da      	str	r2, [r3, #28]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    if (SYNC->OD_1006_period == NULL) {
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10c      	bne.n	8004b78 <CO_SYNC_init+0xcc>
        if (errInfo != NULL) {
 8004b5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d006      	beq.n	8004b72 <CO_SYNC_init+0xc6>
            *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 8004b64:	6838      	ldr	r0, [r7, #0]
 8004b66:	f7ff fdb7 	bl	80046d8 <OD_getIndex>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b70:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8004b72:	f06f 030b 	mvn.w	r3, #11
 8004b76:	e0b3      	b.n	8004ce0 <CO_SYNC_init+0x234>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0, sizeof(uint32_t), NULL);
 8004b78:	2300      	movs	r3, #0
 8004b7a:	2204      	movs	r2, #4
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b80:	f7fd f9dc 	bl	8001f3c <OD_getPtr>
 8004b84:	4602      	mov	r2, r0
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	621a      	str	r2, [r3, #32]
    if ((OD_1007_syncWindowLen != NULL) && (SYNC->OD_1007_window == NULL)) {
 8004b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d010      	beq.n	8004bb2 <CO_SYNC_init+0x106>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10c      	bne.n	8004bb2 <CO_SYNC_init+0x106>
        if (errInfo != NULL) {
 8004b98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d006      	beq.n	8004bac <CO_SYNC_init+0x100>
            *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 8004b9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ba0:	f7ff fd9a 	bl	80046d8 <OD_getIndex>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004baa:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8004bac:	f06f 030b 	mvn.w	r3, #11
 8004bb0:	e096      	b.n	8004ce0 <CO_SYNC_init+0x234>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and configure extension */
    uint8_t syncCounterOvf = 0;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 8004bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d033      	beq.n	8004c24 <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 8004bbc:	f107 0217 	add.w	r2, r7, #23
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004bc6:	f7ff fdac 	bl	8004722 <OD_get_u8>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 8004bce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00c      	beq.n	8004bf0 <CO_SYNC_init+0x144>
            if (errInfo != NULL) {
 8004bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d006      	beq.n	8004bea <CO_SYNC_init+0x13e>
                *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 8004bdc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004bde:	f7ff fd7b 	bl	80046d8 <OD_getIndex>
 8004be2:	4603      	mov	r3, r0
 8004be4:	461a      	mov	r2, r3
 8004be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004be8:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8004bea:	f06f 030b 	mvn.w	r3, #11
 8004bee:	e077      	b.n	8004ce0 <CO_SYNC_init+0x234>
        }
        if (syncCounterOvf == 1U) {
 8004bf0:	7dfb      	ldrb	r3, [r7, #23]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d102      	bne.n	8004bfc <CO_SYNC_init+0x150>
            syncCounterOvf = 2;
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	75fb      	strb	r3, [r7, #23]
 8004bfa:	e004      	b.n	8004c06 <CO_SYNC_init+0x15a>
        } else if (syncCounterOvf > 240U) {
 8004bfc:	7dfb      	ldrb	r3, [r7, #23]
 8004bfe:	2bf0      	cmp	r3, #240	@ 0xf0
 8004c00:	d901      	bls.n	8004c06 <CO_SYNC_init+0x15a>
            syncCounterOvf = 240;
 8004c02:	23f0      	movs	r3, #240	@ 0xf0
 8004c04:	75fb      	strb	r3, [r7, #23]
        } else { /* MISRA C 2004 14.10 */
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->OD_1019_extension.object = SYNC;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	64da      	str	r2, [r3, #76]	@ 0x4c
        SYNC->OD_1019_extension.read = OD_readOriginal;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4a36      	ldr	r2, [pc, #216]	@ (8004ce8 <CO_SYNC_init+0x23c>)
 8004c10:	651a      	str	r2, [r3, #80]	@ 0x50
        SYNC->OD_1019_extension.write = OD_write_1019;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4a36      	ldr	r2, [pc, #216]	@ (8004cf0 <CO_SYNC_init+0x244>)
 8004c16:	655a      	str	r2, [r3, #84]	@ 0x54
        (void)OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	334c      	adds	r3, #76	@ 0x4c
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c20:	f7ff fd6b 	bl	80046fa <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 8004c24:	7dfa      	ldrb	r2, [r7, #23]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = (cobIdSync & 0x40000000U) != 0U;
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bf14      	ite	ne
 8004c3a:	2301      	movne	r3, #1
 8004c3c:	2300      	moveq	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	625a      	str	r2, [r3, #36]	@ 0x24
    SYNC->CANdevTx = CANdevTx;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c4a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    SYNC->CANdevRx = CANdevRx;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c60:	631a      	str	r2, [r3, #48]	@ 0x30
    SYNC->CANdevRxIdx = CANdevRxIdx;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004c66:	869a      	strh	r2, [r3, #52]	@ 0x34
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANdevTxIdx = CANdevTxIdx;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8004c6c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
#endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, (uint16_t)(cobIdSync & 0x7FFU), 0x7FF, false,
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 8004c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8004cf4 <CO_SYNC_init+0x248>)
 8004c7e:	9302      	str	r3, [sp, #8]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	9301      	str	r3, [sp, #4]
 8004c84:	2300      	movs	r3, #0
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8004c8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c8e:	f002 fa39 	bl	8007104 <CO_CANrxBufferInit>
 8004c92:	4603      	mov	r3, r0
 8004c94:	77bb      	strb	r3, [r7, #30]
                                              (void*)SYNC, CO_SYNC_receive);
    if (ret != CO_ERROR_NO) {
 8004c96:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <CO_SYNC_init+0x1f8>
        return ret;
 8004c9e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004ca2:	e01d      	b.n	8004ce0 <CO_SYNC_init+0x234>
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cac:	b29a      	uxth	r2, r3
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);
 8004cae:	7dfb      	ldrb	r3, [r7, #23]
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <CO_SYNC_init+0x20c>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <CO_SYNC_init+0x20e>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	9001      	str	r0, [sp, #4]
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004cc6:	f002 fa7b 	bl	80071c0 <CO_CANtxBufferInit>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (SYNC->CANtxBuff == NULL) {
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d102      	bne.n	8004cde <CO_SYNC_init+0x232>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004cd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004cdc:	e000      	b.n	8004ce0 <CO_SYNC_init+0x234>
    }
#endif

    return CO_ERROR_NO;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3720      	adds	r7, #32
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	08001983 	.word	0x08001983
 8004cec:	08004869 	.word	0x08004869
 8004cf0:	080049f1 	.word	0x080049f1
 8004cf4:	080047db 	.word	0x080047db

08004cf8 <CO_SYNC_process>:
    }
}
#endif

CO_SYNC_status_t
CO_SYNC_process(CO_SYNC_t* SYNC, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08a      	sub	sp, #40	@ 0x28
 8004cfc:	af02      	add	r7, sp, #8
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 8004d06:	2300      	movs	r3, #0
 8004d08:	77fb      	strb	r3, [r7, #31]

    if (NMTisPreOrOperational) {
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 8088 	beq.w	8004e22 <CO_SYNC_process+0x12a>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	4413      	add	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) {
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d902      	bls.n	8004d2c <CO_SYNC_process+0x34>
            SYNC->timer = timerNew;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	619a      	str	r2, [r3, #24]
        }

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d007      	beq.n	8004d44 <CO_SYNC_process+0x4c>
            SYNC->timer = 0;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = (SYNC->OD_1006_period != NULL) ? *SYNC->OD_1006_period : 0U;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <CO_SYNC_process+0x5c>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	e000      	b.n	8004d56 <CO_SYNC_process+0x5e>
 8004d54:	2300      	movs	r3, #0
 8004d56:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0U) {
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d031      	beq.n	8004dc2 <CO_SYNC_process+0xca>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
            if (SYNC->isProducer) {
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <CO_SYNC_process+0x84>
                if (SYNC->timer >= OD_1006_period) {
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d828      	bhi.n	8004dc2 <CO_SYNC_process+0xca>
                    syncStatus = CO_SYNC_RX_TX;
 8004d70:	2301      	movs	r3, #1
 8004d72:	77fb      	strb	r3, [r7, #31]
                    (void)CO_SYNCsend(SYNC);
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f7ff fcfe 	bl	8004776 <CO_SYNCsend>
 8004d7a:	e022      	b.n	8004dc2 <CO_SYNC_process+0xca>
#endif
            } else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

                /* Verify timeout of SYNC */
                if (SYNC->timeoutError == 1U) {
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	7c1b      	ldrb	r3, [r3, #16]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d11e      	bne.n	8004dc2 <CO_SYNC_process+0xca>
                    /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                    uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	085b      	lsrs	r3, r3, #1
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
                    if (periodTimeout < OD_1006_period) {
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d202      	bcs.n	8004d9c <CO_SYNC_process+0xa4>
                        periodTimeout = 0xFFFFFFFFU;
 8004d96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d9a:	61bb      	str	r3, [r7, #24]
                    }

                    if (SYNC->timer > periodTimeout) {
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d20d      	bcs.n	8004dc2 <CO_SYNC_process+0xca>
                        CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6818      	ldr	r0, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8004db4:	2218      	movs	r2, #24
 8004db6:	2101      	movs	r1, #1
 8004db8:	f7fb ff6f 	bl	8000c9a <CO_error>
                        SYNC->timeoutError = 2;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	741a      	strb	r2, [r3, #16]
                } else { /* MISRA C 2004 14.10 */
                }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if ((SYNC->OD_1007_window != NULL) && (*SYNC->OD_1007_window > 0U) && (SYNC->timer > *SYNC->OD_1007_window)) {
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d015      	beq.n	8004df6 <CO_SYNC_process+0xfe>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d010      	beq.n	8004df6 <CO_SYNC_process+0xfe>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	699a      	ldr	r2, [r3, #24]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d909      	bls.n	8004df6 <CO_SYNC_process+0xfe>
            if (!SYNC->syncIsOutsideWindow) {
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <CO_SYNC_process+0xf6>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 8004dea:	2302      	movs	r3, #2
 8004dec:	77fb      	strb	r3, [r7, #31]
            }
            SYNC->syncIsOutsideWindow = true;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	615a      	str	r2, [r3, #20]
 8004df4:	e002      	b.n	8004dfc <CO_SYNC_process+0x104>
        } else {
            SYNC->syncIsOutsideWindow = false;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0U) {
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	7a1b      	ldrb	r3, [r3, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01a      	beq.n	8004e3a <CO_SYNC_process+0x142>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	7a1b      	ldrb	r3, [r3, #8]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	f248 2340 	movw	r3, #33344	@ 0x8240
 8004e12:	2219      	movs	r2, #25
 8004e14:	2101      	movs	r1, #1
 8004e16:	f7fb ff40 	bl	8000c9a <CO_error>
            SYNC->receiveError = 0;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	721a      	strb	r2, [r3, #8]
 8004e20:	e00b      	b.n	8004e3a <CO_SYNC_process+0x142>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 8004e3a:	7ffb      	ldrb	r3, [r7, #31]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d10f      	bne.n	8004e60 <CO_SYNC_process+0x168>
        if (SYNC->timeoutError == 2U) {
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	7c1b      	ldrb	r3, [r3, #16]
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d108      	bne.n	8004e5a <CO_SYNC_process+0x162>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	2300      	movs	r3, #0
 8004e52:	2218      	movs	r2, #24
 8004e54:	2100      	movs	r1, #0
 8004e56:	f7fb ff20 	bl	8000c9a <CO_error>
        }
        SYNC->timeoutError = 1;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 8004e60:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3720      	adds	r7, #32
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <CO_getUint16>:
CO_getUint16(const void* buf) {
 8004e6a:	b480      	push	{r7}
 8004e6c:	b085      	sub	sp, #20
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	81fb      	strh	r3, [r7, #14]
    return value;
 8004e7a:	89fb      	ldrh	r3, [r7, #14]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	60fb      	str	r3, [r7, #12]
    return value;
 8004e96:	68fb      	ldr	r3, [r7, #12]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <CO_setUint16>:
CO_setUint16(void* buf, uint16_t value) {
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	460b      	mov	r3, r1
 8004eae:	807b      	strh	r3, [r7, #2]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8004eb0:	887a      	ldrh	r2, [r7, #2]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	801a      	strh	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8004eb6:	2302      	movs	r3, #2
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <CO_setUint32>:
CO_setUint32(void* buf, uint32_t value) {
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8004ed4:	2304      	movs	r3, #4
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <OD_getIndex+0x14>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	e000      	b.n	8004ef8 <OD_getIndex+0x16>
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8004f14:	2305      	movs	r3, #5
 8004f16:	e003      	b.n	8004f20 <OD_extension_init+0x1c>
    entry->extension = extension;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af02      	add	r7, sp, #8
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	607a      	str	r2, [r7, #4]
 8004f36:	603b      	str	r3, [r7, #0]
 8004f38:	460b      	mov	r3, r1
 8004f3a:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004f3c:	7af9      	ldrb	r1, [r7, #11]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	2304      	movs	r3, #4
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f7fc ff7e 	bl	8001e48 <OD_get_value>
 8004f4c:	4603      	mov	r3, r0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_TIME_receive(void* object, void* msg) {
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b086      	sub	sp, #24
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	6039      	str	r1, [r7, #0]
    CO_TIME_t* TIME = object;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	791b      	ldrb	r3, [r3, #4]
 8004f68:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	3305      	adds	r3, #5
 8004f6e:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 8004f70:	7cfb      	ldrb	r3, [r7, #19]
 8004f72:	2b06      	cmp	r3, #6
 8004f74:	d112      	bne.n	8004f9c <CO_TIME_receive+0x46>
        (void)memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2206      	movs	r2, #6
 8004f7a:	68f9      	ldr	r1, [r7, #12]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f006 fa2a 	bl	800b3d6 <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2201      	movs	r2, #1
 8004f86:	619a      	str	r2, [r3, #24]

#if ((CO_CONFIG_TIME)&CO_CONFIG_FLAG_CALLBACK_PRE) != 0
        /* Optional signal to RTOS, which can resume task, which handles TIME. */
        if (TIME->pFunctSignalPre != NULL) {
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d005      	beq.n	8004f9c <CO_TIME_receive+0x46>
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f98:	4610      	mov	r0, r2
 8004f9a:	4798      	blx	r3
        }
#endif
    }
}
 8004f9c:	bf00      	nop
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <OD_write_1012>:
 * Custom function for writing OD object "COB-ID time stamp"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1012(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00c      	beq.n	8004fd2 <OD_write_1012+0x2e>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	7d1b      	ldrb	r3, [r3, #20]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d108      	bne.n	8004fd2 <OD_write_1012+0x2e>
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d005      	beq.n	8004fd2 <OD_write_1012+0x2e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b04      	cmp	r3, #4
 8004fca:	d102      	bne.n	8004fd2 <OD_write_1012+0x2e>
        || (countWritten == NULL)) {
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <OD_write_1012+0x32>
        return ODR_DEV_INCOMPAT;
 8004fd2:	2309      	movs	r3, #9
 8004fd4:	e051      	b.n	800507a <OD_write_1012+0xd6>
    }

    CO_TIME_t* TIME = stream->object;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 8004fdc:	68b8      	ldr	r0, [r7, #8]
 8004fde:	f7ff ff53 	bl	8004e88 <CO_getUint32>
 8004fe2:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fec:	82fb      	strh	r3, [r7, #22]
    if (((cobIdTimeStamp & 0x3FFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	4b24      	ldr	r3, [pc, #144]	@ (8005084 <OD_write_1012+0xe0>)
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d126      	bne.n	8005046 <OD_write_1012+0xa2>
 8004ff8:	8afb      	ldrh	r3, [r7, #22]
 8004ffa:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ffc:	d923      	bls.n	8005046 <OD_write_1012+0xa2>
 8004ffe:	8afb      	ldrh	r3, [r7, #22]
 8005000:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005004:	d903      	bls.n	800500e <OD_write_1012+0x6a>
 8005006:	8afb      	ldrh	r3, [r7, #22]
 8005008:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800500c:	d91b      	bls.n	8005046 <OD_write_1012+0xa2>
 800500e:	8afb      	ldrh	r3, [r7, #22]
 8005010:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8005014:	d903      	bls.n	800501e <OD_write_1012+0x7a>
 8005016:	8afb      	ldrh	r3, [r7, #22]
 8005018:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800501c:	d313      	bcc.n	8005046 <OD_write_1012+0xa2>
 800501e:	8afb      	ldrh	r3, [r7, #22]
 8005020:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005024:	d903      	bls.n	800502e <OD_write_1012+0x8a>
 8005026:	8afb      	ldrh	r3, [r7, #22]
 8005028:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 800502c:	d30b      	bcc.n	8005046 <OD_write_1012+0xa2>
 800502e:	8afb      	ldrh	r3, [r7, #22]
 8005030:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8005034:	d303      	bcc.n	800503e <OD_write_1012+0x9a>
 8005036:	8afb      	ldrh	r3, [r7, #22]
 8005038:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800503c:	d303      	bcc.n	8005046 <OD_write_1012+0xa2>
 800503e:	8afb      	ldrh	r3, [r7, #22]
 8005040:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005044:	d901      	bls.n	800504a <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 8005046:	230f      	movs	r3, #15
 8005048:	e017      	b.n	800507a <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	0fdb      	lsrs	r3, r3, #31
 800504e:	b2db      	uxtb	r3, r3
 8005050:	461a      	mov	r2, r3
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	bf14      	ite	ne
 8005060:	2301      	movne	r3, #1
 8005062:	2300      	moveq	r3, #0
 8005064:	b2db      	uxtb	r3, r3
 8005066:	461a      	mov	r2, r3
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	68b9      	ldr	r1, [r7, #8]
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f7fc fcdd 	bl	8001a32 <OD_writeOriginal>
 8005078:	4603      	mov	r3, r0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3720      	adds	r7, #32
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	3ffff800 	.word	0x3ffff800

08005088 <CO_TIME_init>:
CO_ReturnError_t
CO_TIME_init(CO_TIME_t* TIME, OD_entry_t* OD_1012_cobIdTimeStamp, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 8005088:	b580      	push	{r7, lr}
 800508a:	b08c      	sub	sp, #48	@ 0x30
 800508c:	af04      	add	r7, sp, #16
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if ((TIME == NULL) || (OD_1012_cobIdTimeStamp == NULL) || (CANdevRx == NULL)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d008      	beq.n	80050ae <CO_TIME_init+0x26>
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d005      	beq.n	80050ae <CO_TIME_init+0x26>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <CO_TIME_init+0x26>
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
        || CANdevTx == NULL
 80050a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d102      	bne.n	80050b4 <CO_TIME_init+0x2c>
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80050ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050b2:	e078      	b.n	80051a6 <CO_TIME_init+0x11e>
    }

    (void)memset(TIME, 0, sizeof(CO_TIME_t));
 80050b4:	2244      	movs	r2, #68	@ 0x44
 80050b6:	2100      	movs	r1, #0
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f006 f901 	bl	800b2c0 <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 80050be:	f107 0214 	add.w	r2, r7, #20
 80050c2:	2301      	movs	r3, #1
 80050c4:	2100      	movs	r1, #0
 80050c6:	68b8      	ldr	r0, [r7, #8]
 80050c8:	f7ff ff30 	bl	8004f2c <OD_get_u32>
 80050cc:	4603      	mov	r3, r0
 80050ce:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 80050d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00c      	beq.n	80050f2 <CO_TIME_init+0x6a>
        if (errInfo != NULL) {
 80050d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d006      	beq.n	80050ec <CO_TIME_init+0x64>
            *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 80050de:	68b8      	ldr	r0, [r7, #8]
 80050e0:	f7ff feff 	bl	8004ee2 <OD_getIndex>
 80050e4:	4603      	mov	r3, r0
 80050e6:	461a      	mov	r2, r3
 80050e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ea:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80050ec:	f06f 030b 	mvn.w	r3, #11
 80050f0:	e059      	b.n	80051a6 <CO_TIME_init+0x11e>
    }
#if ((CO_CONFIG_TIME)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    TIME->OD_1012_extension.object = TIME;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	635a      	str	r2, [r3, #52]	@ 0x34
    TIME->OD_1012_extension.read = OD_readOriginal;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4a2d      	ldr	r2, [pc, #180]	@ (80051b0 <CO_TIME_init+0x128>)
 80050fc:	639a      	str	r2, [r3, #56]	@ 0x38
    TIME->OD_1012_extension.write = OD_write_1012;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4a2c      	ldr	r2, [pc, #176]	@ (80051b4 <CO_TIME_init+0x12c>)
 8005102:	63da      	str	r2, [r3, #60]	@ 0x3c
    (void)OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	3334      	adds	r3, #52	@ 0x34
 8005108:	4619      	mov	r1, r3
 800510a:	68b8      	ldr	r0, [r7, #8]
 800510c:	f7ff fefa 	bl	8004f04 <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	b29b      	uxth	r3, r3
 8005114:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005118:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	0fdb      	lsrs	r3, r3, #31
 800511e:	b2db      	uxtb	r3, r3
 8005120:	461a      	mov	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	bf14      	ite	ne
 8005130:	2301      	movne	r3, #1
 8005132:	2300      	moveq	r3, #0
 8005134:	b2db      	uxtb	r3, r3
 8005136:	461a      	mov	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
    if (TIME->isConsumer) {
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d015      	beq.n	8005176 <CO_TIME_init+0xee>
        CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, cobId, 0x7FF, false, (void*)TIME,
 800514a:	8bba      	ldrh	r2, [r7, #28]
 800514c:	8879      	ldrh	r1, [r7, #2]
 800514e:	4b1a      	ldr	r3, [pc, #104]	@ (80051b8 <CO_TIME_init+0x130>)
 8005150:	9302      	str	r3, [sp, #8]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	9301      	str	r3, [sp, #4]
 8005156:	2300      	movs	r3, #0
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f001 ffd0 	bl	8007104 <CO_CANrxBufferInit>
 8005164:	4603      	mov	r3, r0
 8005166:	76fb      	strb	r3, [r7, #27]
                                                  CO_TIME_receive);
        if (ret != CO_ERROR_NO) {
 8005168:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <CO_TIME_init+0xee>
            return ret;
 8005170:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005174:	e017      	b.n	80051a6 <CO_TIME_init+0x11e>
        }
    }

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
    /* configure TIME producer message transmission */
    TIME->CANdevTx = CANdevTx;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800517a:	625a      	str	r2, [r3, #36]	@ 0x24
    TIME->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, cobId, false, CO_TIME_MSG_LENGTH, false);
 800517c:	8bba      	ldrh	r2, [r7, #28]
 800517e:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8005180:	2300      	movs	r3, #0
 8005182:	9301      	str	r3, [sp, #4]
 8005184:	2306      	movs	r3, #6
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	2300      	movs	r3, #0
 800518a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800518c:	f002 f818 	bl	80071c0 <CO_CANtxBufferInit>
 8005190:	4602      	mov	r2, r0
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	629a      	str	r2, [r3, #40]	@ 0x28

    if (TIME->CANtxBuff == NULL) {
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519a:	2b00      	cmp	r3, #0
 800519c:	d102      	bne.n	80051a4 <CO_TIME_init+0x11c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800519e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80051a2:	e000      	b.n	80051a6 <CO_TIME_init+0x11e>
    }
#endif

    return CO_ERROR_NO;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3720      	adds	r7, #32
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	08001983 	.word	0x08001983
 80051b4:	08004fa5 	.word	0x08004fa5
 80051b8:	08004f57 	.word	0x08004f57

080051bc <CO_TIME_initCallbackPre>:

#if ((CO_CONFIG_TIME)&CO_CONFIG_FLAG_CALLBACK_PRE) != 0
void
CO_TIME_initCallbackPre(CO_TIME_t* TIME, void* object, void (*pFunctSignalPre)(void* object)) {
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
    if (TIME != NULL) {
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d005      	beq.n	80051da <CO_TIME_initCallbackPre+0x1e>
        TIME->functSignalObjectPre = object;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	631a      	str	r2, [r3, #48]	@ 0x30
        TIME->pFunctSignalPre = pFunctSignalPre;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
}
 80051da:	bf00      	nop
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
	...

080051e8 <CO_TIME_process>:
#endif

bool_t
CO_TIME_process(CO_TIME_t* TIME, bool_t NMTisPreOrOperational, uint32_t timeDifference_us) {
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08c      	sub	sp, #48	@ 0x30
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 80051f4:	2300      	movs	r3, #0
 80051f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d024      	beq.n	8005248 <CO_TIME_process+0x60>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d020      	beq.n	8005248 <CO_TIME_process+0x60>
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d01f      	beq.n	800524e <CO_TIME_process+0x66>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff fe39 	bl	8004e88 <CO_getUint32>
 8005216:	6278      	str	r0, [r7, #36]	@ 0x24
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3304      	adds	r3, #4
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff fe24 	bl	8004e6a <CO_getUint16>
 8005222:	4603      	mov	r3, r0
 8005224:	847b      	strh	r3, [r7, #34]	@ 0x22
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFFU;
 8005226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005228:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005234:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 800523c:	2301      	movs	r3, #1
 800523e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            CO_FLAG_CLEAR(TIME->CANrxNew);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	619a      	str	r2, [r3, #24]
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 8005246:	e002      	b.n	800524e <CO_TIME_process+0x66>
        }
    } else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 800524e:	2300      	movs	r3, #0
 8005250:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (!timestampReceived && (timeDifference_us > 0U)) {
 8005252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005254:	2b00      	cmp	r3, #0
 8005256:	d132      	bne.n	80052be <CO_TIME_process+0xd6>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d02f      	beq.n	80052be <CO_TIME_process+0xd6>
        uint32_t us = timeDifference_us + TIME->residual_us;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	89db      	ldrh	r3, [r3, #14]
 8005262:	461a      	mov	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4413      	add	r3, r2
 8005268:	61fb      	str	r3, [r7, #28]
        ms = us / 1000U;
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	4a37      	ldr	r2, [pc, #220]	@ (800534c <CO_TIME_process+0x164>)
 800526e:	fba2 2303 	umull	r2, r3, r2, r3
 8005272:	099b      	lsrs	r3, r3, #6
 8005274:	62bb      	str	r3, [r7, #40]	@ 0x28
        TIME->residual_us = (uint16_t)(us % 1000U);
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	4b34      	ldr	r3, [pc, #208]	@ (800534c <CO_TIME_process+0x164>)
 800527a:	fba3 1302 	umull	r1, r3, r3, r2
 800527e:	099b      	lsrs	r3, r3, #6
 8005280:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005284:	fb01 f303 	mul.w	r3, r1, r3
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	b29a      	uxth	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005296:	441a      	add	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000U * 60U * 60U * 24U)) {
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	4a2b      	ldr	r2, [pc, #172]	@ (8005350 <CO_TIME_process+0x168>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d90b      	bls.n	80052be <CO_TIME_process+0xd6>
            TIME->ms -= ((uint32_t)1000U * 60U * 60U * 24U);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	4b2a      	ldr	r3, [pc, #168]	@ (8005354 <CO_TIME_process+0x16c>)
 80052ac:	4413      	add	r3, r2
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	6093      	str	r3, [r2, #8]
            TIME->days += 1U;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	899b      	ldrh	r3, [r3, #12]
 80052b6:	3301      	adds	r3, #1
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	819a      	strh	r2, [r3, #12]
        }
    }

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
    if (NMTisPreOrOperational && TIME->isProducer && TIME->producerInterval_ms > 0) {
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d039      	beq.n	8005338 <CO_TIME_process+0x150>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d035      	beq.n	8005338 <CO_TIME_process+0x150>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d031      	beq.n	8005338 <CO_TIME_process+0x150>
        if (TIME->producerTimer_ms >= TIME->producerInterval_ms) {
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a1a      	ldr	r2, [r3, #32]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d324      	bcc.n	800532a <CO_TIME_process+0x142>
            TIME->producerTimer_ms -= TIME->producerInterval_ms;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6a1a      	ldr	r2, [r3, #32]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	1ad2      	subs	r2, r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	621a      	str	r2, [r3, #32]

            uint32_t ms_swapped = CO_SWAP_32(TIME->ms);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	61bb      	str	r3, [r7, #24]
            uint16_t days_swapped = CO_SWAP_16(TIME->days);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	899b      	ldrh	r3, [r3, #12]
 80052f8:	82fb      	strh	r3, [r7, #22]
            (void)CO_setUint32(&TIME->CANtxBuff->data[0], ms_swapped);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fe:	3305      	adds	r3, #5
 8005300:	69b9      	ldr	r1, [r7, #24]
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff fdde 	bl	8004ec4 <CO_setUint32>
            (void)CO_setUint16(&TIME->CANtxBuff->data[4], days_swapped);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800530c:	3309      	adds	r3, #9
 800530e:	8afa      	ldrh	r2, [r7, #22]
 8005310:	4611      	mov	r1, r2
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff fdc6 	bl	8004ea4 <CO_setUint16>
            (void)CO_CANsend(TIME->CANdevTx, TIME->CANtxBuff);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005320:	4619      	mov	r1, r3
 8005322:	4610      	mov	r0, r2
 8005324:	f001 ffc6 	bl	80072b4 <CO_CANsend>
        if (TIME->producerTimer_ms >= TIME->producerInterval_ms) {
 8005328:	e00a      	b.n	8005340 <CO_TIME_process+0x158>
        } else {
            TIME->producerTimer_ms += ms;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a1a      	ldr	r2, [r3, #32]
 800532e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005330:	441a      	add	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	621a      	str	r2, [r3, #32]
        if (TIME->producerTimer_ms >= TIME->producerInterval_ms) {
 8005336:	e003      	b.n	8005340 <CO_TIME_process+0x158>
        }
    } else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	69da      	ldr	r2, [r3, #28]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	621a      	str	r2, [r3, #32]
    }
#endif

    return timestampReceived;
 8005340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005342:	4618      	mov	r0, r3
 8005344:	3730      	adds	r7, #48	@ 0x30
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	10624dd3 	.word	0x10624dd3
 8005350:	05265bff 	.word	0x05265bff
 8005354:	fad9a400 	.word	0xfad9a400

08005358 <CO_fifo_init>:
#error CO_CONFIG_CRC16_ENABLE must be enabled.
#endif
#endif

void
CO_fifo_init(CO_fifo_t* fifo, uint8_t* buf, size_t bufSize) {
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]

    if ((fifo == NULL) || (buf == NULL) || (bufSize < 2U)) {
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d012      	beq.n	8005390 <CO_fifo_init+0x38>
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00f      	beq.n	8005390 <CO_fifo_init+0x38>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d90c      	bls.n	8005390 <CO_fifo_init+0x38>
        return;
    }

    fifo->readPtr = 0;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	60da      	str	r2, [r3, #12]
    fifo->writePtr = 0;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	609a      	str	r2, [r3, #8]
    fifo->buf = buf;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	601a      	str	r2, [r3, #0]
    fifo->bufSize = bufSize;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	605a      	str	r2, [r3, #4]

    return;
 800538e:	e000      	b.n	8005392 <CO_fifo_init+0x3a>
        return;
 8005390:	bf00      	nop
}
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0

CO_ReturnError_t
CO_LEDs_init(CO_LEDs_t* LEDs) {
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80053a4:	2300      	movs	r3, #0
 80053a6:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d102      	bne.n	80053b4 <CO_LEDs_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80053ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80053b2:	e006      	b.n	80053c2 <CO_LEDs_init+0x26>
    }

    /* clear the object */
    (void)memset(LEDs, 0, sizeof(CO_LEDs_t));
 80053b4:	220c      	movs	r2, #12
 80053b6:	2100      	movs	r1, #0
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f005 ff81 	bl	800b2c0 <memset>

    return ret;
 80053be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
	...

080053cc <CO_LEDs_process>:

void
CO_LEDs_process(CO_LEDs_t* LEDs, uint32_t timeDifference_us, CO_NMT_internalState_t NMTstate, bool_t LSSconfig,
                bool_t ErrCANbusOff, bool_t ErrCANbusWarn, bool_t ErrRpdo, bool_t ErrSync, bool_t ErrHbCons,
                bool_t ErrOther, bool_t firmwareDownload, uint32_t* timerNext_us) {
 80053cc:	b480      	push	{r7}
 80053ce:	b089      	sub	sp, #36	@ 0x24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	603b      	str	r3, [r7, #0]
 80053d8:	4613      	mov	r3, r2
 80053da:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 80053dc:	2300      	movs	r3, #0
 80053de:	77fb      	strb	r3, [r7, #31]
    uint8_t gr = 0;
 80053e0:	2300      	movs	r3, #0
 80053e2:	77bb      	strb	r3, [r7, #30]
    bool_t tick = false;
 80053e4:	2300      	movs	r3, #0
 80053e6:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	441a      	add	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000U) {
 80053f4:	e112      	b.n	800561c <CO_LEDs_process+0x250>
        bool_t rdFlickerNext = (LEDs->LEDred & (uint8_t)CO_LED_flicker) == 0U;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	7a5b      	ldrb	r3, [r3, #9]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	bf0c      	ite	eq
 8005402:	2301      	moveq	r3, #1
 8005404:	2300      	movne	r3, #0
 8005406:	b2db      	uxtb	r3, r3
 8005408:	613b      	str	r3, [r7, #16]

        tick = true;
 800540a:	2301      	movs	r3, #1
 800540c:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000U;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f5a3 4343 	sub.w	r3, r3, #49920	@ 0xc300
 8005416:	3b50      	subs	r3, #80	@ 0x50
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3U) {
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	791b      	ldrb	r3, [r3, #4]
 8005420:	3301      	adds	r3, #1
 8005422:	b2da      	uxtb	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	711a      	strb	r2, [r3, #4]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	791b      	ldrb	r3, [r3, #4]
 800542c:	2b03      	cmp	r3, #3
 800542e:	f240 80dd 	bls.w	80055ec <CO_LEDs_process+0x220>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	711a      	strb	r2, [r3, #4]
            rd = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	77fb      	strb	r3, [r7, #31]
            gr = 0;
 800543c:	2300      	movs	r3, #0
 800543e:	77bb      	strb	r3, [r7, #30]

            if ((LEDs->LEDred & CO_LED_blink) == 0U) {
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	7a5b      	ldrb	r3, [r3, #9]
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d104      	bne.n	8005456 <CO_LEDs_process+0x8a>
                rd |= CO_LED_blink;
 800544c:	7ffb      	ldrb	r3, [r7, #31]
 800544e:	f043 0302 	orr.w	r3, r3, #2
 8005452:	77fb      	strb	r3, [r7, #31]
 8005454:	e003      	b.n	800545e <CO_LEDs_process+0x92>
            } else {
                gr |= CO_LED_blink;
 8005456:	7fbb      	ldrb	r3, [r7, #30]
 8005458:	f043 0302 	orr.w	r3, r3, #2
 800545c:	77bb      	strb	r3, [r7, #30]
            }

            switch (++LEDs->LEDtmrflash_1) {
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	795b      	ldrb	r3, [r3, #5]
 8005462:	3301      	adds	r3, #1
 8005464:	b2da      	uxtb	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	715a      	strb	r2, [r3, #5]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	795b      	ldrb	r3, [r3, #5]
 800546e:	2b06      	cmp	r3, #6
 8005470:	d010      	beq.n	8005494 <CO_LEDs_process+0xc8>
 8005472:	2b06      	cmp	r3, #6
 8005474:	dc12      	bgt.n	800549c <CO_LEDs_process+0xd0>
 8005476:	2b01      	cmp	r3, #1
 8005478:	d002      	beq.n	8005480 <CO_LEDs_process+0xb4>
 800547a:	2b02      	cmp	r3, #2
 800547c:	d005      	beq.n	800548a <CO_LEDs_process+0xbe>
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: /* none */ break;
 800547e:	e00d      	b.n	800549c <CO_LEDs_process+0xd0>
                case 1: rd |= CO_LED_flash_1; break;
 8005480:	7ffb      	ldrb	r3, [r7, #31]
 8005482:	f043 0304 	orr.w	r3, r3, #4
 8005486:	77fb      	strb	r3, [r7, #31]
 8005488:	e009      	b.n	800549e <CO_LEDs_process+0xd2>
                case 2: gr |= CO_LED_flash_1; break;
 800548a:	7fbb      	ldrb	r3, [r7, #30]
 800548c:	f043 0304 	orr.w	r3, r3, #4
 8005490:	77bb      	strb	r3, [r7, #30]
 8005492:	e004      	b.n	800549e <CO_LEDs_process+0xd2>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	715a      	strb	r2, [r3, #5]
 800549a:	e000      	b.n	800549e <CO_LEDs_process+0xd2>
                default: /* none */ break;
 800549c:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_2) {
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	799b      	ldrb	r3, [r3, #6]
 80054a2:	3301      	adds	r3, #1
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	719a      	strb	r2, [r3, #6]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	799b      	ldrb	r3, [r3, #6]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	2b07      	cmp	r3, #7
 80054b2:	d821      	bhi.n	80054f8 <CO_LEDs_process+0x12c>
 80054b4:	a201      	add	r2, pc, #4	@ (adr r2, 80054bc <CO_LEDs_process+0xf0>)
 80054b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ba:	bf00      	nop
 80054bc:	080054dd 	.word	0x080054dd
 80054c0:	080054e7 	.word	0x080054e7
 80054c4:	080054dd 	.word	0x080054dd
 80054c8:	080054e7 	.word	0x080054e7
 80054cc:	080054f9 	.word	0x080054f9
 80054d0:	080054f9 	.word	0x080054f9
 80054d4:	080054f9 	.word	0x080054f9
 80054d8:	080054f1 	.word	0x080054f1
                case 1:
                case 3: rd |= CO_LED_flash_2; break;
 80054dc:	7ffb      	ldrb	r3, [r7, #31]
 80054de:	f043 0308 	orr.w	r3, r3, #8
 80054e2:	77fb      	strb	r3, [r7, #31]
 80054e4:	e009      	b.n	80054fa <CO_LEDs_process+0x12e>
                case 2:
                case 4: gr |= CO_LED_flash_2; break;
 80054e6:	7fbb      	ldrb	r3, [r7, #30]
 80054e8:	f043 0308 	orr.w	r3, r3, #8
 80054ec:	77bb      	strb	r3, [r7, #30]
 80054ee:	e004      	b.n	80054fa <CO_LEDs_process+0x12e>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	719a      	strb	r2, [r3, #6]
 80054f6:	e000      	b.n	80054fa <CO_LEDs_process+0x12e>
                default: /* none */ break;
 80054f8:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_3) {
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	79db      	ldrb	r3, [r3, #7]
 80054fe:	3301      	adds	r3, #1
 8005500:	b2da      	uxtb	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	71da      	strb	r2, [r3, #7]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	79db      	ldrb	r3, [r3, #7]
 800550a:	2b0a      	cmp	r3, #10
 800550c:	bf8c      	ite	hi
 800550e:	2201      	movhi	r2, #1
 8005510:	2200      	movls	r2, #0
 8005512:	b2d2      	uxtb	r2, r2
 8005514:	2a00      	cmp	r2, #0
 8005516:	d12c      	bne.n	8005572 <CO_LEDs_process+0x1a6>
 8005518:	2201      	movs	r2, #1
 800551a:	fa02 f303 	lsl.w	r3, r2, r3
 800551e:	f003 0254 	and.w	r2, r3, #84	@ 0x54
 8005522:	2a00      	cmp	r2, #0
 8005524:	bf14      	ite	ne
 8005526:	2201      	movne	r2, #1
 8005528:	2200      	moveq	r2, #0
 800552a:	b2d2      	uxtb	r2, r2
 800552c:	2a00      	cmp	r2, #0
 800552e:	d117      	bne.n	8005560 <CO_LEDs_process+0x194>
 8005530:	f003 022a 	and.w	r2, r3, #42	@ 0x2a
 8005534:	2a00      	cmp	r2, #0
 8005536:	bf14      	ite	ne
 8005538:	2201      	movne	r2, #1
 800553a:	2200      	moveq	r2, #0
 800553c:	b2d2      	uxtb	r2, r2
 800553e:	2a00      	cmp	r2, #0
 8005540:	d109      	bne.n	8005556 <CO_LEDs_process+0x18a>
 8005542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005546:	2b00      	cmp	r3, #0
 8005548:	bf14      	ite	ne
 800554a:	2301      	movne	r3, #1
 800554c:	2300      	moveq	r3, #0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <CO_LEDs_process+0x19e>
                case 5: rd |= CO_LED_flash_3; break;
                case 2:
                case 4:
                case 6: gr |= CO_LED_flash_3; break;
                case 10: LEDs->LEDtmrflash_3 = 0; break;
                default: /* none */ break;
 8005554:	e00d      	b.n	8005572 <CO_LEDs_process+0x1a6>
                case 5: rd |= CO_LED_flash_3; break;
 8005556:	7ffb      	ldrb	r3, [r7, #31]
 8005558:	f043 0310 	orr.w	r3, r3, #16
 800555c:	77fb      	strb	r3, [r7, #31]
 800555e:	e009      	b.n	8005574 <CO_LEDs_process+0x1a8>
                case 6: gr |= CO_LED_flash_3; break;
 8005560:	7fbb      	ldrb	r3, [r7, #30]
 8005562:	f043 0310 	orr.w	r3, r3, #16
 8005566:	77bb      	strb	r3, [r7, #30]
 8005568:	e004      	b.n	8005574 <CO_LEDs_process+0x1a8>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	71da      	strb	r2, [r3, #7]
 8005570:	e000      	b.n	8005574 <CO_LEDs_process+0x1a8>
                default: /* none */ break;
 8005572:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_4) {
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	7a1b      	ldrb	r3, [r3, #8]
 8005578:	3301      	adds	r3, #1
 800557a:	b2da      	uxtb	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	721a      	strb	r2, [r3, #8]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	7a1b      	ldrb	r3, [r3, #8]
 8005584:	2b0c      	cmp	r3, #12
 8005586:	bf8c      	ite	hi
 8005588:	2201      	movhi	r2, #1
 800558a:	2200      	movls	r2, #0
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	2a00      	cmp	r2, #0
 8005590:	d137      	bne.n	8005602 <CO_LEDs_process+0x236>
 8005592:	2201      	movs	r2, #1
 8005594:	fa02 f303 	lsl.w	r3, r2, r3
 8005598:	f403 72aa 	and.w	r2, r3, #340	@ 0x154
 800559c:	2a00      	cmp	r2, #0
 800559e:	bf14      	ite	ne
 80055a0:	2201      	movne	r2, #1
 80055a2:	2200      	moveq	r2, #0
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	2a00      	cmp	r2, #0
 80055a8:	d117      	bne.n	80055da <CO_LEDs_process+0x20e>
 80055aa:	f003 02aa 	and.w	r2, r3, #170	@ 0xaa
 80055ae:	2a00      	cmp	r2, #0
 80055b0:	bf14      	ite	ne
 80055b2:	2201      	movne	r2, #1
 80055b4:	2200      	moveq	r2, #0
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	2a00      	cmp	r2, #0
 80055ba:	d109      	bne.n	80055d0 <CO_LEDs_process+0x204>
 80055bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	bf14      	ite	ne
 80055c4:	2301      	movne	r3, #1
 80055c6:	2300      	moveq	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10a      	bne.n	80055e4 <CO_LEDs_process+0x218>
                case 2:
                case 4:
                case 6:
                case 8: gr |= CO_LED_flash_4; break;
                case 12: LEDs->LEDtmrflash_4 = 0; break;
                default: /* none */ break;
 80055ce:	e018      	b.n	8005602 <CO_LEDs_process+0x236>
                case 7: rd |= CO_LED_flash_4; break;
 80055d0:	7ffb      	ldrb	r3, [r7, #31]
 80055d2:	f043 0320 	orr.w	r3, r3, #32
 80055d6:	77fb      	strb	r3, [r7, #31]
 80055d8:	e014      	b.n	8005604 <CO_LEDs_process+0x238>
                case 8: gr |= CO_LED_flash_4; break;
 80055da:	7fbb      	ldrb	r3, [r7, #30]
 80055dc:	f043 0320 	orr.w	r3, r3, #32
 80055e0:	77bb      	strb	r3, [r7, #30]
 80055e2:	e00f      	b.n	8005604 <CO_LEDs_process+0x238>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	721a      	strb	r2, [r3, #8]
 80055ea:	e00b      	b.n	8005604 <CO_LEDs_process+0x238>
            }
        } else {
            /* clear flicker and CANopen bits, keep others */
            rd = LEDs->LEDred & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	7a5b      	ldrb	r3, [r3, #9]
 80055f0:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80055f4:	77fb      	strb	r3, [r7, #31]
            gr = LEDs->LEDgreen & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	7a9b      	ldrb	r3, [r3, #10]
 80055fa:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80055fe:	77bb      	strb	r3, [r7, #30]
 8005600:	e000      	b.n	8005604 <CO_LEDs_process+0x238>
                default: /* none */ break;
 8005602:	bf00      	nop
        }

        /* calculate 10Hz flickering */
        if (rdFlickerNext) {
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d004      	beq.n	8005614 <CO_LEDs_process+0x248>
            rd |= CO_LED_flicker;
 800560a:	7ffb      	ldrb	r3, [r7, #31]
 800560c:	f043 0301 	orr.w	r3, r3, #1
 8005610:	77fb      	strb	r3, [r7, #31]
 8005612:	e003      	b.n	800561c <CO_LEDs_process+0x250>
        } else {
            gr |= CO_LED_flicker;
 8005614:	7fbb      	ldrb	r3, [r7, #30]
 8005616:	f043 0301 	orr.w	r3, r3, #1
 800561a:	77bb      	strb	r3, [r7, #30]
    while (LEDs->LEDtmr50ms >= 50000U) {
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8005624:	4293      	cmp	r3, r2
 8005626:	f63f aee6 	bhi.w	80053f6 <CO_LEDs_process+0x2a>
        }

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d077      	beq.n	8005720 <CO_LEDs_process+0x354>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if (ErrCANbusOff) {
 8005630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <CO_LEDs_process+0x270>
            rd_co = 1;
 8005636:	2301      	movs	r3, #1
 8005638:	75fb      	strb	r3, [r7, #23]
 800563a:	e032      	b.n	80056a2 <CO_LEDs_process+0x2d6>
        } else if (NMTstate == CO_NMT_INITIALIZING) {
 800563c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d104      	bne.n	800564e <CO_LEDs_process+0x282>
            rd_co = rd & CO_LED_flicker;
 8005644:	7ffb      	ldrb	r3, [r7, #31]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	75fb      	strb	r3, [r7, #23]
 800564c:	e029      	b.n	80056a2 <CO_LEDs_process+0x2d6>
        } else if (ErrRpdo) {
 800564e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005650:	2b00      	cmp	r3, #0
 8005652:	d004      	beq.n	800565e <CO_LEDs_process+0x292>
            rd_co = rd & CO_LED_flash_4;
 8005654:	7ffb      	ldrb	r3, [r7, #31]
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	75fb      	strb	r3, [r7, #23]
 800565c:	e021      	b.n	80056a2 <CO_LEDs_process+0x2d6>
        } else if (ErrSync) {
 800565e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005660:	2b00      	cmp	r3, #0
 8005662:	d004      	beq.n	800566e <CO_LEDs_process+0x2a2>
            rd_co = rd & CO_LED_flash_3;
 8005664:	7ffb      	ldrb	r3, [r7, #31]
 8005666:	f003 0310 	and.w	r3, r3, #16
 800566a:	75fb      	strb	r3, [r7, #23]
 800566c:	e019      	b.n	80056a2 <CO_LEDs_process+0x2d6>
        } else if (ErrHbCons) {
 800566e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005670:	2b00      	cmp	r3, #0
 8005672:	d004      	beq.n	800567e <CO_LEDs_process+0x2b2>
            rd_co = rd & CO_LED_flash_2;
 8005674:	7ffb      	ldrb	r3, [r7, #31]
 8005676:	f003 0308 	and.w	r3, r3, #8
 800567a:	75fb      	strb	r3, [r7, #23]
 800567c:	e011      	b.n	80056a2 <CO_LEDs_process+0x2d6>
        } else if (ErrCANbusWarn) {
 800567e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005680:	2b00      	cmp	r3, #0
 8005682:	d004      	beq.n	800568e <CO_LEDs_process+0x2c2>
            rd_co = rd & CO_LED_flash_1;
 8005684:	7ffb      	ldrb	r3, [r7, #31]
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	75fb      	strb	r3, [r7, #23]
 800568c:	e009      	b.n	80056a2 <CO_LEDs_process+0x2d6>
        } else if (ErrOther) {
 800568e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005690:	2b00      	cmp	r3, #0
 8005692:	d004      	beq.n	800569e <CO_LEDs_process+0x2d2>
            rd_co = rd & CO_LED_blink;
 8005694:	7ffb      	ldrb	r3, [r7, #31]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	75fb      	strb	r3, [r7, #23]
 800569c:	e001      	b.n	80056a2 <CO_LEDs_process+0x2d6>
        } else {
            rd_co = 0;
 800569e:	2300      	movs	r3, #0
 80056a0:	75fb      	strb	r3, [r7, #23]
        }

        /* CANopen green RUN LED */
        if (LSSconfig) {
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d004      	beq.n	80056b2 <CO_LEDs_process+0x2e6>
            gr_co = gr & CO_LED_flicker;
 80056a8:	7fbb      	ldrb	r3, [r7, #30]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	75bb      	strb	r3, [r7, #22]
 80056b0:	e022      	b.n	80056f8 <CO_LEDs_process+0x32c>
        } else if (firmwareDownload) {
 80056b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d004      	beq.n	80056c2 <CO_LEDs_process+0x2f6>
            gr_co = gr & CO_LED_flash_3;
 80056b8:	7fbb      	ldrb	r3, [r7, #30]
 80056ba:	f003 0310 	and.w	r3, r3, #16
 80056be:	75bb      	strb	r3, [r7, #22]
 80056c0:	e01a      	b.n	80056f8 <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_STOPPED) {
 80056c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	d104      	bne.n	80056d4 <CO_LEDs_process+0x308>
            gr_co = gr & CO_LED_flash_1;
 80056ca:	7fbb      	ldrb	r3, [r7, #30]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	75bb      	strb	r3, [r7, #22]
 80056d2:	e011      	b.n	80056f8 <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_PRE_OPERATIONAL) {
 80056d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80056da:	d104      	bne.n	80056e6 <CO_LEDs_process+0x31a>
            gr_co = gr & CO_LED_blink;
 80056dc:	7fbb      	ldrb	r3, [r7, #30]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	75bb      	strb	r3, [r7, #22]
 80056e4:	e008      	b.n	80056f8 <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_OPERATIONAL) {
 80056e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ea:	2b05      	cmp	r3, #5
 80056ec:	d102      	bne.n	80056f4 <CO_LEDs_process+0x328>
            gr_co = 1;
 80056ee:	2301      	movs	r3, #1
 80056f0:	75bb      	strb	r3, [r7, #22]
 80056f2:	e001      	b.n	80056f8 <CO_LEDs_process+0x32c>
        } else {
            gr_co = 0;
 80056f4:	2300      	movs	r3, #0
 80056f6:	75bb      	strb	r3, [r7, #22]
        }

        if (rd_co != 0U) {
 80056f8:	7dfb      	ldrb	r3, [r7, #23]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <CO_LEDs_process+0x33a>
            rd |= CO_LED_CANopen;
 80056fe:	7ffb      	ldrb	r3, [r7, #31]
 8005700:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005704:	77fb      	strb	r3, [r7, #31]
        }
        if (gr_co != 0U) {
 8005706:	7dbb      	ldrb	r3, [r7, #22]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <CO_LEDs_process+0x348>
            gr |= CO_LED_CANopen;
 800570c:	7fbb      	ldrb	r3, [r7, #30]
 800570e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005712:	77bb      	strb	r3, [r7, #30]
        }
        LEDs->LEDred = rd;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	7ffa      	ldrb	r2, [r7, #31]
 8005718:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	7fba      	ldrb	r2, [r7, #30]
 800571e:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 8005720:	bf00      	nop
 8005722:	3724      	adds	r7, #36	@ 0x24
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <CO_LSSslave_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_LSSslave_receive(void* object, void* msg) {
 800572c:	b580      	push	{r7, lr}
 800572e:	b090      	sub	sp, #64	@ 0x40
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t* LSSslave = (CO_LSSslave_t*)object;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	791b      	ldrb	r3, [r3, #4]
 800573e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    if ((DLC == 8U) && !CO_FLAG_READ(LSSslave->sendResponse)) {
 8005742:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005746:	2b08      	cmp	r3, #8
 8005748:	f040 8159 	bne.w	80059fe <CO_LSSslave_receive+0x2d2>
 800574c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800574e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005750:	2b00      	cmp	r3, #0
 8005752:	f040 8154 	bne.w	80059fe <CO_LSSslave_receive+0x2d2>
        bool_t request_LSSslave_process = false;
 8005756:	2300      	movs	r3, #0
 8005758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        const uint8_t* data = CO_CANrxMsg_readData(msg);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	3305      	adds	r3, #5
 800575e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t cs = data[0];
 8005760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 8005768:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800576c:	2b04      	cmp	r3, #4
 800576e:	d12d      	bne.n	80057cc <CO_LSSslave_receive+0xa0>
            uint8_t mode = data[1];
 8005770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005772:	3301      	adds	r3, #1
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 8005778:	7ffb      	ldrb	r3, [r7, #31]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <CO_LSSslave_receive+0x58>
 800577e:	2b01      	cmp	r3, #1
 8005780:	d020      	beq.n	80057c4 <CO_LSSslave_receive+0x98>
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
                    break;
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
                default:
                    /* none */
                    break;
 8005782:	e12c      	b.n	80059de <CO_LSSslave_receive+0x2b2>
                    if ((LSSslave->lssState == CO_LSS_STATE_CONFIGURATION)
 8005784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005786:	7c1b      	ldrb	r3, [r3, #16]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d110      	bne.n	80057ae <CO_LSSslave_receive+0x82>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 800578c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800578e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005792:	2bff      	cmp	r3, #255	@ 0xff
 8005794:	d10b      	bne.n	80057ae <CO_LSSslave_receive+0x82>
                        && (*LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)) {
 8005796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2bff      	cmp	r3, #255	@ 0xff
 800579e:	d006      	beq.n	80057ae <CO_LSSslave_receive+0x82>
                        LSSslave->service = cs;
 80057a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a2:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80057a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                        request_LSSslave_process = true;
 80057aa:	2301      	movs	r3, #1
 80057ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 80057ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b0:	2200      	movs	r2, #0
 80057b2:	741a      	strb	r2, [r3, #16]
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
 80057b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b6:	3314      	adds	r3, #20
 80057b8:	2210      	movs	r2, #16
 80057ba:	2100      	movs	r1, #0
 80057bc:	4618      	mov	r0, r3
 80057be:	f005 fd7f 	bl	800b2c0 <memset>
                    break;
 80057c2:	e10c      	b.n	80059de <CO_LSSslave_receive+0x2b2>
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
 80057c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c6:	2201      	movs	r2, #1
 80057c8:	741a      	strb	r2, [r3, #16]
 80057ca:	e108      	b.n	80059de <CO_LSSslave_receive+0x2b2>
            }
        } else if (LSSslave->lssState == CO_LSS_STATE_WAITING) {
 80057cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ce:	7c1b      	ldrb	r3, [r3, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f040 80f0 	bne.w	80059b6 <CO_LSSslave_receive+0x28a>
            switch (cs) {
 80057d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80057da:	3b40      	subs	r3, #64	@ 0x40
 80057dc:	2b11      	cmp	r3, #17
 80057de:	f200 80f9 	bhi.w	80059d4 <CO_LSSslave_receive+0x2a8>
 80057e2:	a201      	add	r2, pc, #4	@ (adr r2, 80057e8 <CO_LSSslave_receive+0xbc>)
 80057e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e8:	08005831 	.word	0x08005831
 80057ec:	08005841 	.word	0x08005841
 80057f0:	08005851 	.word	0x08005851
 80057f4:	08005861 	.word	0x08005861
 80057f8:	080059d5 	.word	0x080059d5
 80057fc:	080059d5 	.word	0x080059d5
 8005800:	080059d5 	.word	0x080059d5
 8005804:	080059d5 	.word	0x080059d5
 8005808:	080059d5 	.word	0x080059d5
 800580c:	080059d5 	.word	0x080059d5
 8005810:	080059d5 	.word	0x080059d5
 8005814:	080059d5 	.word	0x080059d5
 8005818:	080059d5 	.word	0x080059d5
 800581c:	080059d5 	.word	0x080059d5
 8005820:	080059d5 	.word	0x080059d5
 8005824:	080059d5 	.word	0x080059d5
 8005828:	080059d5 	.word	0x080059d5
 800582c:	080058bd 	.word	0x080058bd
                case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005832:	3301      	adds	r3, #1
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	61bb      	str	r3, [r7, #24]
                    LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800583c:	615a      	str	r2, [r3, #20]
                    break;
 800583e:	e0ce      	b.n	80059de <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005842:	3301      	adds	r3, #1
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	617b      	str	r3, [r7, #20]
                    LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800584c:	619a      	str	r2, [r3, #24]
                    break;
 800584e:	e0c6      	b.n	80059de <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_REV: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005852:	3301      	adds	r3, #1
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	613b      	str	r3, [r7, #16]
                    LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800585c:	61da      	str	r2, [r3, #28]
                    break;
 800585e:	e0be      	b.n	80059de <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005862:	3301      	adds	r3, #1
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	60fb      	str	r3, [r7, #12]
                    LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800586c:	621a      	str	r2, [r3, #32]

                    if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress, LSSslave->lssSelect)) {
 800586e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	429a      	cmp	r2, r3
 8005878:	f040 80ae 	bne.w	80059d8 <CO_LSSslave_receive+0x2ac>
 800587c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	429a      	cmp	r2, r3
 8005886:	f040 80a7 	bne.w	80059d8 <CO_LSSslave_receive+0x2ac>
 800588a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800588c:	68da      	ldr	r2, [r3, #12]
 800588e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	429a      	cmp	r2, r3
 8005894:	f040 80a0 	bne.w	80059d8 <CO_LSSslave_receive+0x2ac>
 8005898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	f040 8099 	bne.w	80059d8 <CO_LSSslave_receive+0x2ac>
                        LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 80058a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a8:	2201      	movs	r2, #1
 80058aa:	741a      	strb	r2, [r3, #16]
                        LSSslave->service = cs;
 80058ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ae:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80058b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                        request_LSSslave_process = true;
 80058b6:	2301      	movs	r3, #1
 80058b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    }
                    break;
 80058ba:	e08d      	b.n	80059d8 <CO_LSSslave_receive+0x2ac>
                }
                case CO_LSS_IDENT_FASTSCAN: {
                    /* fastscan is only active on unconfigured nodes */
                    if ((*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 80058bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2bff      	cmp	r3, #255	@ 0xff
 80058c4:	f040 808a 	bne.w	80059dc <CO_LSSslave_receive+0x2b0>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)) {
 80058c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058ce:	2bff      	cmp	r3, #255	@ 0xff
 80058d0:	f040 8084 	bne.w	80059dc <CO_LSSslave_receive+0x2b0>
                        uint8_t bitCheck = data[5];
 80058d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d6:	3305      	adds	r3, #5
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                        uint8_t lssSub = data[6];
 80058de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e0:	3306      	adds	r3, #6
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                        uint8_t lssNext = data[7];
 80058e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ea:	3307      	adds	r3, #7
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                        uint32_t valSw;
                        uint32_t idNumber;
                        bool_t ack;

                        if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub)
 80058f2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80058f6:	2b1f      	cmp	r3, #31
 80058f8:	d903      	bls.n	8005902 <CO_LSSslave_receive+0x1d6>
 80058fa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80058fe:	2b80      	cmp	r3, #128	@ 0x80
 8005900:	d16d      	bne.n	80059de <CO_LSSslave_receive+0x2b2>
 8005902:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005906:	2b03      	cmp	r3, #3
 8005908:	d869      	bhi.n	80059de <CO_LSSslave_receive+0x2b2>
                            || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
 800590a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800590e:	2b03      	cmp	r3, #3
 8005910:	d865      	bhi.n	80059de <CO_LSSslave_receive+0x2b2>
                            /* Invalid request */
                            break;
                        }

                        (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005914:	3301      	adds	r3, #1
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	60bb      	str	r3, [r7, #8]
                        idNumber = CO_SWAP_32(valSw);
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	627b      	str	r3, [r7, #36]	@ 0x24
                        ack = false;
 800591e:	2300      	movs	r3, #0
 8005920:	63bb      	str	r3, [r7, #56]	@ 0x38

                        if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 8005922:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005926:	2b80      	cmp	r3, #128	@ 0x80
 8005928:	d10d      	bne.n	8005946 <CO_LSSslave_receive+0x21a>
                            /* Confirm, Reset */
                            ack = true;
 800592a:	2301      	movs	r3, #1
 800592c:	63bb      	str	r3, [r7, #56]	@ 0x38
                            LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 800592e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                            (void)memset(&LSSslave->lssFastscan, 0, sizeof(LSSslave->lssFastscan));
 8005936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005938:	3324      	adds	r3, #36	@ 0x24
 800593a:	2210      	movs	r2, #16
 800593c:	2100      	movs	r1, #0
 800593e:	4618      	mov	r0, r3
 8005940:	f005 fcbe 	bl	800b2c0 <memset>
 8005944:	e02c      	b.n	80059a0 <CO_LSSslave_receive+0x274>
                        } else if (LSSslave->fastscanPos == lssSub) {
 8005946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005948:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800594c:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005950:	429a      	cmp	r2, r3
 8005952:	d125      	bne.n	80059a0 <CO_LSSslave_receive+0x274>
                            uint32_t mask = 0xFFFFFFFFU << bitCheck;
 8005954:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005958:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800595c:	fa02 f303 	lsl.w	r3, r2, r3
 8005960:	623b      	str	r3, [r7, #32]

                            if ((LSSslave->lssAddress.addr[lssSub] & mask) == (idNumber & mask)) {
 8005962:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005968:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800596c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596e:	405a      	eors	r2, r3
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	4013      	ands	r3, r2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d113      	bne.n	80059a0 <CO_LSSslave_receive+0x274>
                                /* all requested bits match */
                                ack = true;
 8005978:	2301      	movs	r3, #1
 800597a:	63bb      	str	r3, [r7, #56]	@ 0x38
                                LSSslave->fastscanPos = lssNext;
 800597c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800597e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005982:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

                                if ((bitCheck == 0U) && (lssNext < lssSub)) {
 8005986:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800598a:	2b00      	cmp	r3, #0
 800598c:	d108      	bne.n	80059a0 <CO_LSSslave_receive+0x274>
 800598e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005992:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005996:	429a      	cmp	r2, r3
 8005998:	d202      	bcs.n	80059a0 <CO_LSSslave_receive+0x274>
                                    /* complete match, enter configuration state */
                                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 800599a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800599c:	2201      	movs	r2, #1
 800599e:	741a      	strb	r2, [r3, #16]
                                }
                            }
                        } else { /* MISRA C 2004 14.10 */
                        }
                        if (ack) {
 80059a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d01a      	beq.n	80059dc <CO_LSSslave_receive+0x2b0>
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE_FASTSCAN_DIRECT_RESPOND) != 0
                            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                            (void)memset(&LSSslave->TXbuff->data[1], 0, sizeof(LSSslave->TXbuff->data) - 1U);
                            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                            LSSslave->service = cs;
 80059a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a8:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80059ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                            request_LSSslave_process = true;
 80059b0:	2301      	movs	r3, #1
 80059b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
                        }
                    }
                    break;
 80059b4:	e012      	b.n	80059dc <CO_LSSslave_receive+0x2b0>
                    /* none */
                    break;
                }
            }
        } else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            (void)memcpy((void*)(&LSSslave->CANdata[0]), (const void*)(&data[0]), sizeof(LSSslave->CANdata));
 80059b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b8:	3349      	adds	r3, #73	@ 0x49
 80059ba:	2208      	movs	r2, #8
 80059bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059be:	4618      	mov	r0, r3
 80059c0:	f005 fd09 	bl	800b3d6 <memcpy>
            LSSslave->service = cs;
 80059c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c6:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80059ca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            request_LSSslave_process = true;
 80059ce:	2301      	movs	r3, #1
 80059d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059d2:	e004      	b.n	80059de <CO_LSSslave_receive+0x2b2>
                    break;
 80059d4:	bf00      	nop
 80059d6:	e002      	b.n	80059de <CO_LSSslave_receive+0x2b2>
                    break;
 80059d8:	bf00      	nop
 80059da:	e000      	b.n	80059de <CO_LSSslave_receive+0x2b2>
                    break;
 80059dc:	bf00      	nop
        }

        if (request_LSSslave_process) {
 80059de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00c      	beq.n	80059fe <CO_LSSslave_receive+0x2d2>
            CO_FLAG_SET(LSSslave->sendResponse);
 80059e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059e6:	2201      	movs	r2, #1
 80059e8:	645a      	str	r2, [r3, #68]	@ 0x44
#if ((CO_CONFIG_LSS)&CO_CONFIG_FLAG_CALLBACK_PRE) != 0
            /* Optional signal to RTOS, which can resume task, which handles further processing. */
            if (LSSslave->pFunctSignalPre != NULL) {
 80059ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d005      	beq.n	80059fe <CO_LSSslave_receive+0x2d2>
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
 80059f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059f8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80059fa:	4610      	mov	r0, r2
 80059fc:	4798      	blx	r3
            }
#endif
        }
    }
}
 80059fe:	bf00      	nop
 8005a00:	3740      	adds	r7, #64	@ 0x40
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop

08005a08 <CO_LSSslave_init>:

CO_ReturnError_t
CO_LSSslave_init(CO_LSSslave_t* LSSslave, CO_LSS_address_t* lssAddress, uint16_t* pendingBitRate,
                 uint8_t* pendingNodeID, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANidLssMaster,
                 CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx, uint16_t CANidLssSlave) {
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08a      	sub	sp, #40	@ 0x28
 8005a0c:	af04      	add	r7, sp, #16
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8005a16:	2300      	movs	r3, #0
 8005a18:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((LSSslave == NULL) || (pendingBitRate == NULL) || (pendingNodeID == NULL) || (CANdevRx == NULL)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d018      	beq.n	8005a52 <CO_LSSslave_init+0x4a>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d015      	beq.n	8005a52 <CO_LSSslave_init+0x4a>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d012      	beq.n	8005a52 <CO_LSSslave_init+0x4a>
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00f      	beq.n	8005a52 <CO_LSSslave_init+0x4a>
        || (CANdevTx == NULL) || !CO_LSS_NODE_ID_VALID(*pendingNodeID)) {
 8005a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00c      	beq.n	8005a52 <CO_LSSslave_init+0x4a>
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d004      	beq.n	8005a4a <CO_LSSslave_init+0x42>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	b25b      	sxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	da06      	bge.n	8005a58 <CO_LSSslave_init+0x50>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2bff      	cmp	r3, #255	@ 0xff
 8005a50:	d002      	beq.n	8005a58 <CO_LSSslave_init+0x50>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005a52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a56:	e046      	b.n	8005ae6 <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    (void)memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 8005a58:	227c      	movs	r2, #124	@ 0x7c
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f005 fc2f 	bl	800b2c0 <memset>

    /* Configure object variables */
    (void)memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2210      	movs	r2, #16
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f005 fcb4 	bl	800b3d6 <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	639a      	str	r2, [r3, #56]	@ 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	63da      	str	r2, [r3, #60]	@ 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	781a      	ldrb	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CANidLssMaster, 0x7FF, false, (void*)LSSslave, CO_LSSslave_receive);
 8005a98:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005a9a:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8005a9c:	4b14      	ldr	r3, [pc, #80]	@ (8005af0 <CO_LSSslave_init+0xe8>)
 8005a9e:	9302      	str	r3, [sp, #8]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	9301      	str	r3, [sp, #4]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8005aac:	6a38      	ldr	r0, [r7, #32]
 8005aae:	f001 fb29 	bl	8007104 <CO_CANrxBufferInit>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	75fb      	strb	r3, [r7, #23]

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005aba:	675a      	str	r2, [r3, #116]	@ 0x74
    LSSslave->TXbuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CANidLssSlave, false, 8, false);
 8005abc:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005abe:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	9301      	str	r3, [sp, #4]
 8005ac4:	2308      	movs	r3, #8
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	2300      	movs	r3, #0
 8005aca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005acc:	f001 fb78 	bl	80071c0 <CO_CANtxBufferInit>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	679a      	str	r2, [r3, #120]	@ 0x78

    if (LSSslave->TXbuff == NULL) {
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8005ade:	23ff      	movs	r3, #255	@ 0xff
 8005ae0:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 8005ae2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	0800572d 	.word	0x0800572d

08005af4 <CO_LSSslave_process>:
        LSSslave->pFunctLSScfgStore = pFunctLSScfgStore;
    }
}

bool_t
CO_LSSslave_process(CO_LSSslave_t* LSSslave) {
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08c      	sub	sp, #48	@ 0x30
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 8005afc:	2300      	movs	r3, #0
 8005afe:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 8202 	beq.w	8005f0e <CO_LSSslave_process+0x41a>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	627b      	str	r3, [r7, #36]	@ 0x24
        uint32_t valSw;

        (void)memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b12:	3305      	adds	r3, #5
 8005b14:	2208      	movs	r2, #8
 8005b16:	2100      	movs	r1, #0
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f005 fbd1 	bl	800b2c0 <memset>

        switch (LSSslave->service) {
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005b24:	3b04      	subs	r3, #4
 8005b26:	2b5a      	cmp	r3, #90	@ 0x5a
 8005b28:	f200 81dc 	bhi.w	8005ee4 <CO_LSSslave_process+0x3f0>
 8005b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b34 <CO_LSSslave_process+0x40>)
 8005b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b32:	bf00      	nop
 8005b34:	08005ca1 	.word	0x08005ca1
 8005b38:	08005ee5 	.word	0x08005ee5
 8005b3c:	08005ee5 	.word	0x08005ee5
 8005b40:	08005ee5 	.word	0x08005ee5
 8005b44:	08005ee5 	.word	0x08005ee5
 8005b48:	08005ee5 	.word	0x08005ee5
 8005b4c:	08005ee5 	.word	0x08005ee5
 8005b50:	08005ee5 	.word	0x08005ee5
 8005b54:	08005ee5 	.word	0x08005ee5
 8005b58:	08005ee5 	.word	0x08005ee5
 8005b5c:	08005ee5 	.word	0x08005ee5
 8005b60:	08005ee5 	.word	0x08005ee5
 8005b64:	08005ee5 	.word	0x08005ee5
 8005b68:	08005cb5 	.word	0x08005cb5
 8005b6c:	08005ee5 	.word	0x08005ee5
 8005b70:	08005d03 	.word	0x08005d03
 8005b74:	08005ee5 	.word	0x08005ee5
 8005b78:	08005d9f 	.word	0x08005d9f
 8005b7c:	08005ee5 	.word	0x08005ee5
 8005b80:	08005ddb 	.word	0x08005ddb
 8005b84:	08005ee5 	.word	0x08005ee5
 8005b88:	08005ee5 	.word	0x08005ee5
 8005b8c:	08005ee5 	.word	0x08005ee5
 8005b90:	08005ee5 	.word	0x08005ee5
 8005b94:	08005ee5 	.word	0x08005ee5
 8005b98:	08005ee5 	.word	0x08005ee5
 8005b9c:	08005ee5 	.word	0x08005ee5
 8005ba0:	08005ee5 	.word	0x08005ee5
 8005ba4:	08005ee5 	.word	0x08005ee5
 8005ba8:	08005ee5 	.word	0x08005ee5
 8005bac:	08005ee5 	.word	0x08005ee5
 8005bb0:	08005ee5 	.word	0x08005ee5
 8005bb4:	08005ee5 	.word	0x08005ee5
 8005bb8:	08005ee5 	.word	0x08005ee5
 8005bbc:	08005ee5 	.word	0x08005ee5
 8005bc0:	08005ee5 	.word	0x08005ee5
 8005bc4:	08005ee5 	.word	0x08005ee5
 8005bc8:	08005ee5 	.word	0x08005ee5
 8005bcc:	08005ee5 	.word	0x08005ee5
 8005bd0:	08005ee5 	.word	0x08005ee5
 8005bd4:	08005ee5 	.word	0x08005ee5
 8005bd8:	08005ee5 	.word	0x08005ee5
 8005bdc:	08005ee5 	.word	0x08005ee5
 8005be0:	08005ee5 	.word	0x08005ee5
 8005be4:	08005ee5 	.word	0x08005ee5
 8005be8:	08005ee5 	.word	0x08005ee5
 8005bec:	08005ee5 	.word	0x08005ee5
 8005bf0:	08005ee5 	.word	0x08005ee5
 8005bf4:	08005ee5 	.word	0x08005ee5
 8005bf8:	08005ee5 	.word	0x08005ee5
 8005bfc:	08005ee5 	.word	0x08005ee5
 8005c00:	08005ee5 	.word	0x08005ee5
 8005c04:	08005ee5 	.word	0x08005ee5
 8005c08:	08005ee5 	.word	0x08005ee5
 8005c0c:	08005ee5 	.word	0x08005ee5
 8005c10:	08005ee5 	.word	0x08005ee5
 8005c14:	08005ee5 	.word	0x08005ee5
 8005c18:	08005ee5 	.word	0x08005ee5
 8005c1c:	08005ee5 	.word	0x08005ee5
 8005c20:	08005ee5 	.word	0x08005ee5
 8005c24:	08005ee5 	.word	0x08005ee5
 8005c28:	08005ee5 	.word	0x08005ee5
 8005c2c:	08005ee5 	.word	0x08005ee5
 8005c30:	08005ca7 	.word	0x08005ca7
 8005c34:	08005ee5 	.word	0x08005ee5
 8005c38:	08005ee5 	.word	0x08005ee5
 8005c3c:	08005ee5 	.word	0x08005ee5
 8005c40:	08005ee5 	.word	0x08005ee5
 8005c44:	08005ee5 	.word	0x08005ee5
 8005c48:	08005ee5 	.word	0x08005ee5
 8005c4c:	08005ee5 	.word	0x08005ee5
 8005c50:	08005ee5 	.word	0x08005ee5
 8005c54:	08005ee5 	.word	0x08005ee5
 8005c58:	08005ee5 	.word	0x08005ee5
 8005c5c:	08005ee5 	.word	0x08005ee5
 8005c60:	08005ee5 	.word	0x08005ee5
 8005c64:	08005ee5 	.word	0x08005ee5
 8005c68:	08005ed7 	.word	0x08005ed7
 8005c6c:	08005ee5 	.word	0x08005ee5
 8005c70:	08005ee5 	.word	0x08005ee5
 8005c74:	08005ee5 	.word	0x08005ee5
 8005c78:	08005ee5 	.word	0x08005ee5
 8005c7c:	08005ee5 	.word	0x08005ee5
 8005c80:	08005ee5 	.word	0x08005ee5
 8005c84:	08005ee5 	.word	0x08005ee5
 8005c88:	08005ee5 	.word	0x08005ee5
 8005c8c:	08005e31 	.word	0x08005e31
 8005c90:	08005e53 	.word	0x08005e53
 8005c94:	08005e75 	.word	0x08005e75
 8005c98:	08005e97 	.word	0x08005e97
 8005c9c:	08005eb9 	.word	0x08005eb9
            case CO_LSS_SWITCH_STATE_GLOBAL: {
                /* Node-Id was unconfigured before, now it is configured,
                 * enter the NMT Reset communication autonomously. */
                resetCommunication = true;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8005ca4:	e125      	b.n	8005ef2 <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005caa:	2244      	movs	r2, #68	@ 0x44
 8005cac:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8005cb2:	e11e      	b.n	8005ef2 <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_CFG_NODE_ID: {
                nid = LSSslave->CANdata[1];
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8005cba:	74fb      	strb	r3, [r7, #19]
                errorCode = CO_LSS_CFG_NODE_ID_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if (CO_LSS_NODE_ID_VALID(nid)) {
 8005cc2:	7cfb      	ldrb	r3, [r7, #19]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <CO_LSSslave_process+0x1dc>
 8005cc8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	da02      	bge.n	8005cd6 <CO_LSSslave_process+0x1e2>
 8005cd0:	7cfb      	ldrb	r3, [r7, #19]
 8005cd2:	2bff      	cmp	r3, #255	@ 0xff
 8005cd4:	d104      	bne.n	8005ce0 <CO_LSSslave_process+0x1ec>
                    *LSSslave->pendingNodeID = nid;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cda:	7cfa      	ldrb	r2, [r7, #19]
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	e002      	b.n	8005ce6 <CO_LSSslave_process+0x1f2>
                } else {
                    errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8005cf0:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cf6:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005cfa:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8005d00:	e0f7      	b.n	8005ef2 <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_CFG_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 80ee 	beq.w	8005ee8 <CO_LSSslave_process+0x3f4>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                tableSelector = LSSslave->CANdata[1];
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8005d12:	777b      	strb	r3, [r7, #29]
                tableIndex = LSSslave->CANdata[2];
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8005d1a:	773b      	strb	r3, [r7, #28]
                errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8005d28:	7f7b      	ldrb	r3, [r7, #29]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d121      	bne.n	8005d72 <CO_LSSslave_process+0x27e>
 8005d2e:	7f3b      	ldrb	r3, [r7, #28]
 8005d30:	2b05      	cmp	r3, #5
 8005d32:	d01e      	beq.n	8005d72 <CO_LSSslave_process+0x27e>
 8005d34:	7f3b      	ldrb	r3, [r7, #28]
 8005d36:	2b09      	cmp	r3, #9
 8005d38:	d81b      	bhi.n	8005d72 <CO_LSSslave_process+0x27e>
                    uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 8005d3a:	7f3b      	ldrb	r3, [r7, #28]
 8005d3c:	4a76      	ldr	r2, [pc, #472]	@ (8005f18 <CO_LSSslave_process+0x424>)
 8005d3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d42:	837b      	strh	r3, [r7, #26]
                    bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(LSSslave->functLSScheckBitRateObject,
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8005d4c:	8b79      	ldrh	r1, [r7, #26]
 8005d4e:	4610      	mov	r0, r2
 8005d50:	4798      	blx	r3
 8005d52:	6178      	str	r0, [r7, #20]
                                                                                bit);

                    if (bit_rate_supported) {
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d004      	beq.n	8005d64 <CO_LSSslave_process+0x270>
                        *LSSslave->pendingBitRate = bit;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5e:	8b7a      	ldrh	r2, [r7, #26]
 8005d60:	801a      	strh	r2, [r3, #0]
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8005d62:	e009      	b.n	8005d78 <CO_LSSslave_process+0x284>
                    } else {
                        errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 8005d64:	23ff      	movs	r3, #255	@ 0xff
 8005d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                        errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8005d70:	e002      	b.n	8005d78 <CO_LSSslave_process+0x284>
                    }
                } else {
                    /* we currently only support CiA301 bit timing table */
                    errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8005d72:	2301      	movs	r3, #1
 8005d74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8005d82:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d88:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005d8c:	719a      	strb	r2, [r3, #6]
                LSSslave->TXbuff->data[2] = errorCodeManuf;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d92:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8005d96:	71da      	strb	r2, [r3, #7]
                CANsend = true;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8005d9c:	e0a9      	b.n	8005ef2 <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 80a2 	beq.w	8005eec <CO_LSSslave_process+0x3f8>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                /* notify application */
                if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 809f 	beq.w	8005ef0 <CO_LSSslave_process+0x3fc>
                    uint16_t delay = ((uint16_t)LSSslave->CANdata[2]) << 8;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8005db8:	021b      	lsls	r3, r3, #8
 8005dba:	83fb      	strh	r3, [r7, #30]
                    delay |= LSSslave->CANdata[1];
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	8bfb      	ldrh	r3, [r7, #30]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	83fb      	strh	r3, [r7, #30]
                    LSSslave->pFunctLSSactivateBitRate(LSSslave->functLSSactivateBitRateObject, delay);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005dd2:	8bf9      	ldrh	r1, [r7, #30]
 8005dd4:	4610      	mov	r0, r2
 8005dd6:	4798      	blx	r3
                }
                break;
 8005dd8:	e08a      	b.n	8005ef0 <CO_LSSslave_process+0x3fc>
            }
            case CO_LSS_CFG_STORE: {
                errorCode = CO_LSS_CFG_STORE_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if (LSSslave->pFunctLSScfgStore == NULL) {
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d103      	bne.n	8005df0 <CO_LSSslave_process+0x2fc>
                    /* storing is not supported. Reply error */
                    errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 8005de8:	2301      	movs	r3, #1
 8005dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dee:	e011      	b.n	8005e14 <CO_LSSslave_process+0x320>
                } else {
                    bool_t result;
                    /* Store "pending" to "persistent" */
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005dfc:	7811      	ldrb	r1, [r2, #0]
                                                         *LSSslave->pendingBitRate);
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6b92      	ldr	r2, [r2, #56]	@ 0x38
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 8005e02:	8812      	ldrh	r2, [r2, #0]
 8005e04:	4798      	blx	r3
 8005e06:	6238      	str	r0, [r7, #32]
                    if (!result) {
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d102      	bne.n	8005e14 <CO_LSSslave_process+0x320>
                        errorCode = CO_LSS_CFG_STORE_FAILED;
 8005e0e:	2302      	movs	r3, #2
 8005e10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                    }
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8005e1e:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e24:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005e28:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8005e2e:	e060      	b.n	8005ef2 <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_VENDOR: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8005e3a:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e46:	3306      	adds	r3, #6
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	601a      	str	r2, [r3, #0]
                CANsend = true;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8005e50:	e04f      	b.n	8005ef2 <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_PRODUCT: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8005e5c:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e68:	3306      	adds	r3, #6
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	601a      	str	r2, [r3, #0]
                CANsend = true;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8005e72:	e03e      	b.n	8005ef2 <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_REV: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8005e7e:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e8a:	3306      	adds	r3, #6
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	601a      	str	r2, [r3, #0]
                CANsend = true;
 8005e90:	2301      	movs	r3, #1
 8005e92:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8005e94:	e02d      	b.n	8005ef2 <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_SERIAL: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8005ea0:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005eac:	3306      	adds	r3, #6
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	601a      	str	r2, [r3, #0]
                CANsend = true;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8005eb6:	e01c      	b.n	8005ef2 <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_NODE_ID: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8005ec2:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8005ece:	719a      	strb	r2, [r3, #6]
                CANsend = true;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8005ed4:	e00d      	b.n	8005ef2 <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005eda:	224f      	movs	r2, #79	@ 0x4f
 8005edc:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8005ee2:	e006      	b.n	8005ef2 <CO_LSSslave_process+0x3fe>
            }
            default: {
                /* none */
                break;
 8005ee4:	bf00      	nop
 8005ee6:	e004      	b.n	8005ef2 <CO_LSSslave_process+0x3fe>
                    break;
 8005ee8:	bf00      	nop
 8005eea:	e002      	b.n	8005ef2 <CO_LSSslave_process+0x3fe>
                    break;
 8005eec:	bf00      	nop
 8005eee:	e000      	b.n	8005ef2 <CO_LSSslave_process+0x3fe>
                break;
 8005ef0:	bf00      	nop
            }
        }

        if (CANsend) {
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d007      	beq.n	8005f08 <CO_LSSslave_process+0x414>
            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f00:	4619      	mov	r1, r3
 8005f02:	4610      	mov	r0, r2
 8005f04:	f001 f9d6 	bl	80072b4 <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    return resetCommunication;
 8005f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3730      	adds	r7, #48	@ 0x30
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	0800bd74 	.word	0x0800bd74

08005f1c <CO_isError>:
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	460b      	mov	r3, r1
 8005f26:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	08db      	lsrs	r3, r3, #3
 8005f2c:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8005f2e:	78fb      	ldrb	r3, [r7, #3]
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	2201      	movs	r2, #1
 8005f36:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3a:	73bb      	strb	r3, [r7, #14]
               : false;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	2b09      	cmp	r3, #9
 8005f46:	d807      	bhi.n	8005f58 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0)
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	5cd2      	ldrb	r2, [r2, r3]
 8005f4e:	7bbb      	ldrb	r3, [r7, #14]
 8005f50:	4013      	ands	r3, r2
 8005f52:	b2db      	uxtb	r3, r3
               : false;
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <CO_isError+0x40>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e000      	b.n	8005f5e <CO_isError+0x42>
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <CO_getErrorRegister>:
CO_getErrorRegister(CO_EM_t* em) {
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d007      	beq.n	8005f88 <CO_getErrorRegister+0x1e>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <CO_getErrorRegister+0x1e>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	e000      	b.n	8005f8a <CO_getErrorRegister+0x20>
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <CO_NMT_getInternalState>:
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t
CO_NMT_getInternalState(CO_NMT_t* NMT) {
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <CO_NMT_getInternalState+0x16>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f993 3000 	ldrsb.w	r3, [r3]
 8005faa:	e000      	b.n	8005fae <CO_NMT_getInternalState+0x18>
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <CO_LSSslave_getState>:
 *
 * @param LSSslave This object.
 * @return @ref CO_LSS_STATE_state
 */
static inline uint8_t
CO_LSSslave_getState(CO_LSSslave_t* LSSslave) {
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <CO_LSSslave_getState+0x14>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	7c1b      	ldrb	r3, [r3, #16]
 8005fcc:	e000      	b.n	8005fd0 <CO_LSSslave_getState+0x16>
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <CO_new>:
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t*
CO_new(CO_config_t* config, uint32_t* heapMemoryUsed) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
    CO_t* co = NULL;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t* coFinal = NULL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	613b      	str	r3, [r7, #16]
#else
        (void)config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1U, sizeof(*co));
 8005ff2:	2144      	movs	r1, #68	@ 0x44
 8005ff4:	2001      	movs	r0, #1
 8005ff6:	f004 fdad 	bl	800ab54 <calloc>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 8104 	beq.w	800620e <CO_new+0x232>
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	3344      	adds	r3, #68	@ 0x44
 800600a:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1U) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 800600c:	2134      	movs	r1, #52	@ 0x34
 800600e:	2001      	movs	r0, #1
 8006010:	f004 fda0 	bl	800ab54 <calloc>
 8006014:	4603      	mov	r3, r0
 8006016:	461a      	mov	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	611a      	str	r2, [r3, #16]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 80f4 	beq.w	800620e <CO_new+0x232>
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	3334      	adds	r3, #52	@ 0x34
 800602a:	613b      	str	r3, [r7, #16]
        }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1U) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 800602c:	2308      	movs	r3, #8
 800602e:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8006030:	2130      	movs	r1, #48	@ 0x30
 8006032:	2001      	movs	r0, #1
 8006034:	f004 fd8e 	bl	800ab54 <calloc>
 8006038:	4603      	mov	r3, r0
 800603a:	461a      	mov	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	615a      	str	r2, [r3, #20]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 80e2 	beq.w	800620e <CO_new+0x232>
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	3330      	adds	r3, #48	@ 0x30
 800604e:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8006050:	7afb      	ldrb	r3, [r7, #11]
 8006052:	2118      	movs	r1, #24
 8006054:	4618      	mov	r0, r3
 8006056:	f004 fd7d 	bl	800ab54 <calloc>
 800605a:	4603      	mov	r3, r0
 800605c:	461a      	mov	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	619a      	str	r2, [r3, #24]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 80d1 	beq.w	800620e <CO_new+0x232>
 800606c:	7afa      	ldrb	r2, [r7, #11]
 800606e:	4613      	mov	r3, r2
 8006070:	005b      	lsls	r3, r3, #1
 8006072:	4413      	add	r3, r2
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	461a      	mov	r2, r3
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	4413      	add	r3, r2
 800607c:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1U) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 800607e:	2158      	movs	r1, #88	@ 0x58
 8006080:	2001      	movs	r0, #1
 8006082:	f004 fd67 	bl	800ab54 <calloc>
 8006086:	4603      	mov	r3, r0
 8006088:	461a      	mov	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	61da      	str	r2, [r3, #28]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 80bb 	beq.w	800620e <CO_new+0x232>
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	3358      	adds	r3, #88	@ 0x58
 800609c:	613b      	str	r3, [r7, #16]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
#endif
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1U;
 800609e:	2311      	movs	r3, #17
 80060a0:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2U) {
 80060a2:	7abb      	ldrb	r3, [r7, #10]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d912      	bls.n	80060ce <CO_new+0xf2>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 80060a8:	7abb      	ldrb	r3, [r7, #10]
 80060aa:	2108      	movs	r1, #8
 80060ac:	4618      	mov	r0, r3
 80060ae:	f004 fd51 	bl	800ab54 <calloc>
 80060b2:	4603      	mov	r3, r0
 80060b4:	461a      	mov	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	621a      	str	r2, [r3, #32]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 80a5 	beq.w	800620e <CO_new+0x232>
 80060c4:	7abb      	ldrb	r3, [r7, #10]
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	4413      	add	r3, r2
 80060cc:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0U) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 80060ce:	21b4      	movs	r1, #180	@ 0xb4
 80060d0:	2001      	movs	r0, #1
 80060d2:	f004 fd3f 	bl	800ab54 <calloc>
 80060d6:	4603      	mov	r3, r0
 80060d8:	461a      	mov	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 8093 	beq.w	800620e <CO_new+0x232>
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	33b4      	adds	r3, #180	@ 0xb4
 80060ec:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_SDO_CLI = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_CLI = 0);
        if (CO_GET_CNT(SDO_CLI) > 0U) {
            CO_alloc_break_on_fail(co->SDOclient, CO_GET_CNT(SDO_CLI), sizeof(*co->SDOclient));
 80060ee:	2194      	movs	r1, #148	@ 0x94
 80060f0:	2001      	movs	r0, #1
 80060f2:	f004 fd2f 	bl	800ab54 <calloc>
 80060f6:	4603      	mov	r3, r0
 80060f8:	461a      	mov	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 8083 	beq.w	800620e <CO_new+0x232>
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	3394      	adds	r3, #148	@ 0x94
 800610c:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1U) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 800610e:	2144      	movs	r1, #68	@ 0x44
 8006110:	2001      	movs	r0, #1
 8006112:	f004 fd1f 	bl	800ab54 <calloc>
 8006116:	4603      	mov	r3, r0
 8006118:	461a      	mov	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006122:	2b00      	cmp	r3, #0
 8006124:	d073      	beq.n	800620e <CO_new+0x232>
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	3344      	adds	r3, #68	@ 0x44
 800612a:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1U) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 800612c:	215c      	movs	r1, #92	@ 0x5c
 800612e:	2001      	movs	r0, #1
 8006130:	f004 fd10 	bl	800ab54 <calloc>
 8006134:	4603      	mov	r3, r0
 8006136:	461a      	mov	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	631a      	str	r2, [r3, #48]	@ 0x30
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006140:	2b00      	cmp	r3, #0
 8006142:	d064      	beq.n	800620e <CO_new+0x232>
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	335c      	adds	r3, #92	@ 0x5c
 8006148:	613b      	str	r3, [r7, #16]
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0U) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 800614a:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 800614e:	2004      	movs	r0, #4
 8006150:	f004 fd00 	bl	800ab54 <calloc>
 8006154:	4603      	mov	r3, r0
 8006156:	461a      	mov	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	639a      	str	r2, [r3, #56]	@ 0x38
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006160:	2b00      	cmp	r3, #0
 8006162:	d054      	beq.n	800620e <CO_new+0x232>
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800616a:	613b      	str	r3, [r7, #16]
        }
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
        if (CO_GET_CNT(LEDS) == 1U) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 800616c:	210c      	movs	r1, #12
 800616e:	2001      	movs	r0, #1
 8006170:	f004 fcf0 	bl	800ab54 <calloc>
 8006174:	4603      	mov	r3, r0
 8006176:	461a      	mov	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006180:	2b00      	cmp	r3, #0
 8006182:	d044      	beq.n	800620e <CO_new+0x232>
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	330c      	adds	r3, #12
 8006188:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1U) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 800618a:	217c      	movs	r1, #124	@ 0x7c
 800618c:	2001      	movs	r0, #1
 800618e:	f004 fce1 	bl	800ab54 <calloc>
 8006192:	4603      	mov	r3, r0
 8006194:	461a      	mov	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	641a      	str	r2, [r3, #64]	@ 0x40
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d035      	beq.n	800620e <CO_new+0x232>
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	337c      	adds	r3, #124	@ 0x7c
 80061a6:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1U, sizeof(*co->CANmodule));
 80061a8:	2138      	movs	r1, #56	@ 0x38
 80061aa:	2001      	movs	r0, #1
 80061ac:	f004 fcd2 	bl	800ab54 <calloc>
 80061b0:	4603      	mov	r3, r0
 80061b2:	461a      	mov	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	605a      	str	r2, [r3, #4]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d026      	beq.n	800620e <CO_new+0x232>
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	3338      	adds	r3, #56	@ 0x38
 80061c4:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 80061c6:	210c      	movs	r1, #12
 80061c8:	200e      	movs	r0, #14
 80061ca:	f004 fcc3 	bl	800ab54 <calloc>
 80061ce:	4603      	mov	r3, r0
 80061d0:	461a      	mov	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	609a      	str	r2, [r3, #8]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d017      	beq.n	800620e <CO_new+0x232>
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	33a8      	adds	r3, #168	@ 0xa8
 80061e2:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 80061e4:	2118      	movs	r1, #24
 80061e6:	200b      	movs	r0, #11
 80061e8:	f004 fcb4 	bl	800ab54 <calloc>
 80061ec:	4603      	mov	r3, r0
 80061ee:	461a      	mov	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	60da      	str	r2, [r3, #12]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d008      	beq.n	800620e <CO_new+0x232>
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8006202:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2201      	movs	r2, #1
 8006208:	601a      	str	r2, [r3, #0]
        coFinal = co;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	617b      	str	r3, [r7, #20]
    } while (false);

    if (coFinal == NULL) {
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d102      	bne.n	800621a <CO_new+0x23e>
        CO_delete(co);
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 f80b 	bl	8006230 <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <CO_new+0x24a>
        *heapMemoryUsed = mem;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 8006226:	697b      	ldr	r3, [r7, #20]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3718      	adds	r7, #24
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <CO_delete>:

void
CO_delete(CO_t* co) {
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d058      	beq.n	80062f0 <CO_delete+0xc0>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	4618      	mov	r0, r3
 8006244:	f000 ff48 	bl	80070d8 <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	4618      	mov	r0, r3
 800624e:	f004 fc9d 	bl	800ab8c <free>
    CO_free(co->CANrx);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	4618      	mov	r0, r3
 8006258:	f004 fc98 	bl	800ab8c <free>
    CO_free(co->CANmodule);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	4618      	mov	r0, r3
 8006262:	f004 fc93 	bl	800ab8c <free>
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_MASTER) != 0
    CO_free(co->LSSmaster);
#endif

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    CO_free(co->LSSslave);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626a:	4618      	mov	r0, r3
 800626c:	f004 fc8e 	bl	800ab8c <free>
#if ((CO_CONFIG_GFC)&CO_CONFIG_GFC_ENABLE) != 0
    CO_free(co->GFC);
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    CO_free(co->LEDs);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006274:	4618      	mov	r0, r3
 8006276:	f004 fc89 	bl	800ab8c <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
    CO_free(co->TPDO);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800627e:	4618      	mov	r0, r3
 8006280:	f004 fc84 	bl	800ab8c <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
    CO_free(co->RPDO);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006288:	4618      	mov	r0, r3
 800628a:	f004 fc7f 	bl	800ab8c <free>
#endif

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
    CO_free(co->SYNC);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006292:	4618      	mov	r0, r3
 8006294:	f004 fc7a 	bl	800ab8c <free>
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    CO_free(co->TIME);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629c:	4618      	mov	r0, r3
 800629e:	f004 fc75 	bl	800ab8c <free>
#endif

#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_ENABLE) != 0
    free(co->SDOclient);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a6:	4618      	mov	r0, r3
 80062a8:	f004 fc70 	bl	800ab8c <free>
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b0:	4618      	mov	r0, r3
 80062b2:	f004 fc6b 	bl	800ab8c <free>

    /* Emergency */
    CO_free(co->em);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f004 fc66 	bl	800ab8c <free>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    CO_free(co->em_fifo);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f004 fc61 	bl	800ab8c <free>
#if ((CO_CONFIG_NODE_GUARDING)&CO_CONFIG_NODE_GUARDING_MASTER_ENABLE) != 0
    CO_free(co->NGmaster);
#endif

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    CO_free(co->HBconsMonitoredNodes);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f004 fc5c 	bl	800ab8c <free>
    CO_free(co->HBcons);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	4618      	mov	r0, r3
 80062da:	f004 fc57 	bl	800ab8c <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f004 fc52 	bl	800ab8c <free>

    /* CANopen object */
    CO_free(co);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f004 fc4f 	bl	800ab8c <free>
 80062ee:	e000      	b.n	80062f2 <CO_delete+0xc2>
        return;
 80062f0:	bf00      	nop
}
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <CO_CANinit>:
#endif
    return en;
}

CO_ReturnError_t
CO_CANinit(CO_t* co, void* CANptr, uint16_t bitRate) {
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08a      	sub	sp, #40	@ 0x28
 80062fc:	af04      	add	r7, sp, #16
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	4613      	mov	r3, r2
 8006304:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) {
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d102      	bne.n	8006312 <CO_CANinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800630c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006310:	e01a      	b.n	8006348 <CO_CANinit+0x50>
    }

    co->CANmodule->CANnormal = false;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 800631a:	68b8      	ldr	r0, [r7, #8]
 800631c:	f000 fdec 	bl	8006ef8 <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule, CANptr, co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), co->CANtx,
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6858      	ldr	r0, [r3, #4]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6899      	ldr	r1, [r3, #8]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	88fa      	ldrh	r2, [r7, #6]
 800632e:	9202      	str	r2, [sp, #8]
 8006330:	220b      	movs	r2, #11
 8006332:	9201      	str	r2, [sp, #4]
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	230e      	movs	r3, #14
 8006338:	460a      	mov	r2, r1
 800633a:	68b9      	ldr	r1, [r7, #8]
 800633c:	f000 fe04 	bl	8006f48 <CO_CANmodule_init>
 8006340:	4603      	mov	r3, r0
 8006342:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_TX_MSGS), bitRate);

    return err;
 8006344:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3718      	adds	r7, #24
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <CO_LSSinit>:

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
CO_ReturnError_t
CO_LSSinit(CO_t* co, CO_LSS_address_t* lssAddress, uint8_t* pendingNodeID, uint16_t* pendingBitRate) {
 8006350:	b580      	push	{r7, lr}
 8006352:	b08c      	sub	sp, #48	@ 0x30
 8006354:	af06      	add	r7, sp, #24
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
 800635c:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if ((co == NULL) || (CO_GET_CNT(LSS_SLV) != 1U)) {
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d102      	bne.n	800636a <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006364:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006368:	e01a      	b.n	80063a0 <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave, lssAddress, pendingBitRate, pendingNodeID, co->CANmodule,
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	6852      	ldr	r2, [r2, #4]
 8006376:	f240 71e4 	movw	r1, #2020	@ 0x7e4
 800637a:	9105      	str	r1, [sp, #20]
 800637c:	210a      	movs	r1, #10
 800637e:	9104      	str	r1, [sp, #16]
 8006380:	9203      	str	r2, [sp, #12]
 8006382:	f240 72e5 	movw	r2, #2021	@ 0x7e5
 8006386:	9202      	str	r2, [sp, #8]
 8006388:	220d      	movs	r2, #13
 800638a:	9201      	str	r2, [sp, #4]
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	68b9      	ldr	r1, [r7, #8]
 8006394:	f7ff fb38 	bl	8005a08 <CO_LSSslave_init>
 8006398:	4603      	mov	r3, r0
 800639a:	75fb      	strb	r3, [r7, #23]
                           CO_GET_CO(RX_IDX_LSS_SLV), CO_CAN_ID_LSS_MST, co->CANmodule, CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 800639c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <CO_CANopenInit>:
#endif /* (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE */

CO_ReturnError_t
CO_CANopenInit(CO_t* co, CO_NMT_t* NMT, CO_EM_t* em, OD_t* od, OD_entry_t* OD_statusBits, uint16_t NMTcontrol,
               uint16_t firstHBTime_ms, uint16_t SDOserverTimeoutTime_ms, uint16_t SDOclientTimeoutTime_ms,
               bool_t SDOclientBlockTransfer, uint8_t nodeId, uint32_t* errInfo) {
 80063a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063aa:	b093      	sub	sp, #76	@ 0x4c
 80063ac:	af0a      	add	r7, sp, #40	@ 0x28
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	603b      	str	r3, [r7, #0]

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_STATUS_BITS) == 0
    (void)OD_statusBits; /* may be unused */
#endif

    if ((co == NULL) || ((CO_GET_CNT(NMT) == 0U) && (NMT == NULL)) || ((CO_GET_CNT(EM) == 0U) && (em == NULL))) {
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d102      	bne.n	80063c2 <CO_CANopenInit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80063bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80063c0:	e170      	b.n	80066a4 <CO_CANopenInit+0x2fc>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0U) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d102      	bne.n	80063ce <CO_CANopenInit+0x26>
        em = co->em;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    if ((CO_GET_CNT(LSS_SLV) == 1U) && (nodeId == CO_LSS_NODE_ID_ASSIGNMENT)) {
 80063d4:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80063d8:	2bff      	cmp	r3, #255	@ 0xff
 80063da:	d103      	bne.n	80063e4 <CO_CANopenInit+0x3c>
        co->nodeIdUnconfigured = true;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2201      	movs	r2, #1
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	e00a      	b.n	80063fa <CO_CANopenInit+0x52>
    } else
#endif
        if ((nodeId < 1U) || (nodeId > 127U)) {
 80063e4:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d003      	beq.n	80063f4 <CO_CANopenInit+0x4c>
 80063ec:	f997 3050 	ldrsb.w	r3, [r7, #80]	@ 0x50
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	da02      	bge.n	80063fa <CO_CANopenInit+0x52>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80063f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80063f8:	e154      	b.n	80066a4 <CO_CANopenInit+0x2fc>
    } else { /* MISRA C 2004 14.10 */
    }

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    if (CO_GET_CNT(LEDS) == 1U) {
        err = CO_LEDs_init(co->LEDs);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fe ffcc 	bl	800539c <CO_LEDs_init>
 8006404:	4603      	mov	r3, r0
 8006406:	747b      	strb	r3, [r7, #17]
        if (err != CO_ERROR_NO) {
 8006408:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <CO_CANopenInit+0x6e>
            return err;
 8006410:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006414:	e146      	b.n	80066a4 <CO_CANopenInit+0x2fc>
        }
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <CO_CANopenInit+0x7c>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 800641e:	f06f 0312 	mvn.w	r3, #18
 8006422:	e13f      	b.n	80066a4 <CO_CANopenInit+0x2fc>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1U) {
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	69d8      	ldr	r0, [r3, #28]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	685c      	ldr	r4, [r3, #4]
 800642c:	4b9f      	ldr	r3, [pc, #636]	@ (80066ac <CO_CANopenInit+0x304>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f103 050c 	add.w	r5, r3, #12
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6a1e      	ldr	r6, [r3, #32]
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
                         co->em_fifo, (CO_GET_CNT(ARR_1003) + 1U),
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY), CO_GET_CO(TX_IDX_EM_PROD),
 800643a:	4b9c      	ldr	r3, [pc, #624]	@ (80066ac <CO_CANopenInit+0x304>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8006440:	336c      	adds	r3, #108	@ 0x6c
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PROD_INHIBIT) != 0
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
#endif
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 8006442:	4a9a      	ldr	r2, [pc, #616]	@ (80066ac <CO_CANopenInit+0x304>)
 8006444:	6812      	ldr	r2, [r2, #0]
 8006446:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8006448:	3218      	adds	r2, #24
 800644a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800644c:	9105      	str	r1, [sp, #20]
 800644e:	f897 1050 	ldrb.w	r1, [r7, #80]	@ 0x50
 8006452:	9104      	str	r1, [sp, #16]
 8006454:	9203      	str	r2, [sp, #12]
 8006456:	2201      	movs	r2, #1
 8006458:	9202      	str	r2, [sp, #8]
 800645a:	9301      	str	r3, [sp, #4]
 800645c:	2311      	movs	r3, #17
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	4633      	mov	r3, r6
 8006462:	462a      	mov	r2, r5
 8006464:	4621      	mov	r1, r4
 8006466:	f7fa f9ed 	bl	8000844 <CO_EM_init>
 800646a:	4603      	mov	r3, r0
 800646c:	747b      	strb	r3, [r7, #17]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
                         co->CANmodule, CO_GET_CO(RX_IDX_EM_CONS),
#endif
                         nodeId, errInfo);
        if (err != CO_ERROR_NO) {
 800646e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <CO_CANopenInit+0xd4>
            return err;
 8006476:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800647a:	e113      	b.n	80066a4 <CO_CANopenInit+0x2fc>
        }
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U) {
        err = CO_NMT_init(co->NMT, OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME), em, nodeId, NMTcontrol, firstHBTime_ms,
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	691c      	ldr	r4, [r3, #16]
 8006480:	4b8a      	ldr	r3, [pc, #552]	@ (80066ac <CO_CANopenInit+0x304>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f103 0590 	add.w	r5, r3, #144	@ 0x90
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	6852      	ldr	r2, [r2, #4]
 8006492:	f897 1050 	ldrb.w	r1, [r7, #80]	@ 0x50
 8006496:	b289      	uxth	r1, r1
 8006498:	f501 61e0 	add.w	r1, r1, #1792	@ 0x700
 800649c:	b289      	uxth	r1, r1
 800649e:	f897 6050 	ldrb.w	r6, [r7, #80]	@ 0x50
 80064a2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80064a4:	9008      	str	r0, [sp, #32]
 80064a6:	9107      	str	r1, [sp, #28]
 80064a8:	2109      	movs	r1, #9
 80064aa:	9106      	str	r1, [sp, #24]
 80064ac:	9205      	str	r2, [sp, #20]
 80064ae:	2200      	movs	r2, #0
 80064b0:	9204      	str	r2, [sp, #16]
 80064b2:	2200      	movs	r2, #0
 80064b4:	9203      	str	r2, [sp, #12]
 80064b6:	9302      	str	r3, [sp, #8]
 80064b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80064bc:	9301      	str	r3, [sp, #4]
 80064be:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	4633      	mov	r3, r6
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	4629      	mov	r1, r5
 80064c8:	4620      	mov	r0, r4
 80064ca:	f7fb f885 	bl	80015d8 <CO_NMT_init>
 80064ce:	4603      	mov	r3, r0
 80064d0:	747b      	strb	r3, [r7, #17]
                          co->CANmodule, CO_GET_CO(RX_IDX_NMT_SLV), CO_CAN_ID_NMT_SERVICE,
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
                          co->CANmodule, CO_GET_CO(TX_IDX_NMT_MST), CO_CAN_ID_NMT_SERVICE,
#endif
                          co->CANmodule, CO_GET_CO(TX_IDX_HB_PROD), CO_CAN_ID_HEARTBEAT + nodeId, errInfo);
        if (err != CO_ERROR_NO) {
 80064d2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <CO_CANopenInit+0x138>
            return err;
 80064da:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80064de:	e0e1      	b.n	80066a4 <CO_CANopenInit+0x2fc>
        }
    }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    if (CO_GET_CNT(HB_CONS) == 1U) {
        err = CO_HBconsumer_init(co->HBcons, em, co->HBconsMonitoredNodes, CO_GET_CNT(ARR_1016),
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6958      	ldr	r0, [r3, #20]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	699c      	ldr	r4, [r3, #24]
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME), co->CANmodule, CO_GET_CO(RX_IDX_HB_CONS),
 80064e8:	4b70      	ldr	r3, [pc, #448]	@ (80066ac <CO_CANopenInit+0x304>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons, em, co->HBconsMonitoredNodes, CO_GET_CNT(ARR_1016),
 80064ee:	3384      	adds	r3, #132	@ 0x84
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	6852      	ldr	r2, [r2, #4]
 80064f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064f6:	9103      	str	r1, [sp, #12]
 80064f8:	2105      	movs	r1, #5
 80064fa:	9102      	str	r1, [sp, #8]
 80064fc:	9201      	str	r2, [sp, #4]
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	2308      	movs	r3, #8
 8006502:	4622      	mov	r2, r4
 8006504:	6879      	ldr	r1, [r7, #4]
 8006506:	f7fa fd49 	bl	8000f9c <CO_HBconsumer_init>
 800650a:	4603      	mov	r3, r0
 800650c:	747b      	strb	r3, [r7, #17]
                                 errInfo);
        if (err != CO_ERROR_NO) {
 800650e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d002      	beq.n	800651c <CO_CANopenInit+0x174>
            return err;
 8006516:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800651a:	e0c3      	b.n	80066a4 <CO_CANopenInit+0x2fc>
    }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0U) {
        OD_entry_t* SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 800651c:	4b63      	ldr	r3, [pc, #396]	@ (80066ac <CO_CANopenInit+0x304>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	33b4      	adds	r3, #180	@ 0xb4
 8006524:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006526:	2300      	movs	r3, #0
 8006528:	837b      	strh	r3, [r7, #26]
 800652a:	e030      	b.n	800658e <CO_CANopenInit+0x1e6>
            err = CO_SDOserver_init(&co->SDOserver[i], od, SDOsrvPar, nodeId, SDOserverTimeoutTime_ms, co->CANmodule,
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006530:	8b7b      	ldrh	r3, [r7, #26]
 8006532:	21b4      	movs	r1, #180	@ 0xb4
 8006534:	fb01 f303 	mul.w	r3, r1, r3
 8006538:	18d5      	adds	r5, r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	8b7a      	ldrh	r2, [r7, #26]
 8006540:	3203      	adds	r2, #3
 8006542:	b292      	uxth	r2, r2
 8006544:	68f9      	ldr	r1, [r7, #12]
 8006546:	6849      	ldr	r1, [r1, #4]
 8006548:	8b78      	ldrh	r0, [r7, #26]
 800654a:	3007      	adds	r0, #7
 800654c:	b280      	uxth	r0, r0
 800654e:	f897 6050 	ldrb.w	r6, [r7, #80]	@ 0x50
 8006552:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 8006554:	9405      	str	r4, [sp, #20]
 8006556:	9004      	str	r0, [sp, #16]
 8006558:	9103      	str	r1, [sp, #12]
 800655a:	9202      	str	r2, [sp, #8]
 800655c:	9301      	str	r3, [sp, #4]
 800655e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	4633      	mov	r3, r6
 8006566:	69fa      	ldr	r2, [r7, #28]
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	4628      	mov	r0, r5
 800656c:	f7fd f88c 	bl	8003688 <CO_SDOserver_init>
 8006570:	4603      	mov	r3, r0
 8006572:	747b      	strb	r3, [r7, #17]
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i, co->CANmodule, CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err != CO_ERROR_NO) {
 8006574:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <CO_CANopenInit+0x1da>
                return err;
 800657c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006580:	e090      	b.n	80066a4 <CO_CANopenInit+0x2fc>
            }
            SDOsrvPar++;
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	330c      	adds	r3, #12
 8006586:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006588:	8b7b      	ldrh	r3, [r7, #26]
 800658a:	3301      	adds	r3, #1
 800658c:	837b      	strh	r3, [r7, #26]
 800658e:	8b7b      	ldrh	r3, [r7, #26]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d0cb      	beq.n	800652c <CO_CANopenInit+0x184>
        }
    }

#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_ENABLE) != 0
    if (CO_GET_CNT(SDO_CLI) > 0U) {
        OD_entry_t* SDOcliPar = OD_GET(H1280, OD_H1280_SDO_CLIENT_1_PARAM);
 8006594:	4b45      	ldr	r3, [pc, #276]	@ (80066ac <CO_CANopenInit+0x304>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	33c0      	adds	r3, #192	@ 0xc0
 800659c:	617b      	str	r3, [r7, #20]
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_CLI); i++) {
 800659e:	2300      	movs	r3, #0
 80065a0:	827b      	strh	r3, [r7, #18]
 80065a2:	e02d      	b.n	8006600 <CO_CANopenInit+0x258>
            err = CO_SDOclient_init(&co->SDOclient[i], od, SDOcliPar, nodeId, co->CANmodule,
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065a8:	8a7b      	ldrh	r3, [r7, #18]
 80065aa:	2194      	movs	r1, #148	@ 0x94
 80065ac:	fb01 f303 	mul.w	r3, r1, r3
 80065b0:	18d5      	adds	r5, r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	8a7a      	ldrh	r2, [r7, #18]
 80065b8:	3204      	adds	r2, #4
 80065ba:	b292      	uxth	r2, r2
 80065bc:	68f9      	ldr	r1, [r7, #12]
 80065be:	6849      	ldr	r1, [r1, #4]
 80065c0:	8a78      	ldrh	r0, [r7, #18]
 80065c2:	3008      	adds	r0, #8
 80065c4:	b280      	uxth	r0, r0
 80065c6:	f897 6050 	ldrb.w	r6, [r7, #80]	@ 0x50
 80065ca:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 80065cc:	9404      	str	r4, [sp, #16]
 80065ce:	9003      	str	r0, [sp, #12]
 80065d0:	9102      	str	r1, [sp, #8]
 80065d2:	9201      	str	r2, [sp, #4]
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	4633      	mov	r3, r6
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	6839      	ldr	r1, [r7, #0]
 80065dc:	4628      	mov	r0, r5
 80065de:	f7fc fd06 	bl	8002fee <CO_SDOclient_init>
 80065e2:	4603      	mov	r3, r0
 80065e4:	747b      	strb	r3, [r7, #17]
                                    CO_GET_CO(RX_IDX_SDO_CLI) + i, co->CANmodule, CO_GET_CO(TX_IDX_SDO_CLI) + i,
                                    errInfo);
            SDOcliPar++;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	330c      	adds	r3, #12
 80065ea:	617b      	str	r3, [r7, #20]
            if (err != CO_ERROR_NO) {
 80065ec:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <CO_CANopenInit+0x252>
                return err;
 80065f4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80065f8:	e054      	b.n	80066a4 <CO_CANopenInit+0x2fc>
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_CLI); i++) {
 80065fa:	8a7b      	ldrh	r3, [r7, #18]
 80065fc:	3301      	adds	r3, #1
 80065fe:	827b      	strh	r3, [r7, #18]
 8006600:	8a7b      	ldrh	r3, [r7, #18]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0ce      	beq.n	80065a4 <CO_CANopenInit+0x1fc>
    }
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    if (CO_GET_CNT(TIME) == 1U) {
        err = CO_TIME_init(co->TIME, OD_GET(H1012, OD_H1012_COBID_TIME), co->CANmodule, CO_GET_CO(RX_IDX_TIME),
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800660a:	4b28      	ldr	r3, [pc, #160]	@ (80066ac <CO_CANopenInit+0x304>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	685c      	ldr	r4, [r3, #4]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800661e:	9202      	str	r2, [sp, #8]
 8006620:	2202      	movs	r2, #2
 8006622:	9201      	str	r2, [sp, #4]
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	2302      	movs	r3, #2
 8006628:	4622      	mov	r2, r4
 800662a:	f7fe fd2d 	bl	8005088 <CO_TIME_init>
 800662e:	4603      	mov	r3, r0
 8006630:	747b      	strb	r3, [r7, #17]
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
                           co->CANmodule, CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err != CO_ERROR_NO) {
 8006632:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d002      	beq.n	8006640 <CO_CANopenInit+0x298>
            return err;
 800663a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800663e:	e031      	b.n	80066a4 <CO_CANopenInit+0x2fc>
    }
#endif

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
    if (CO_GET_CNT(SYNC) == 1U) {
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b1d      	ldr	r5, [r3, #48]	@ 0x30
 8006644:	4b19      	ldr	r3, [pc, #100]	@ (80066ac <CO_CANopenInit+0x304>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f103 0624 	add.w	r6, r3, #36	@ 0x24
 800664e:	4b17      	ldr	r3, [pc, #92]	@ (80066ac <CO_CANopenInit+0x304>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f103 0c30 	add.w	ip, r3, #48	@ 0x30
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN), OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8006658:	4b14      	ldr	r3, [pc, #80]	@ (80066ac <CO_CANopenInit+0x304>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 800665e:	333c      	adds	r3, #60	@ 0x3c
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN), OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8006660:	4a12      	ldr	r2, [pc, #72]	@ (80066ac <CO_CANopenInit+0x304>)
 8006662:	6812      	ldr	r2, [r2, #0]
 8006664:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8006666:	32a8      	adds	r2, #168	@ 0xa8
 8006668:	68f9      	ldr	r1, [r7, #12]
 800666a:	6849      	ldr	r1, [r1, #4]
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	6840      	ldr	r0, [r0, #4]
 8006670:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 8006672:	9406      	str	r4, [sp, #24]
 8006674:	2400      	movs	r4, #0
 8006676:	9405      	str	r4, [sp, #20]
 8006678:	9004      	str	r0, [sp, #16]
 800667a:	2001      	movs	r0, #1
 800667c:	9003      	str	r0, [sp, #12]
 800667e:	9102      	str	r1, [sp, #8]
 8006680:	9201      	str	r2, [sp, #4]
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	4663      	mov	r3, ip
 8006686:	4632      	mov	r2, r6
 8006688:	6879      	ldr	r1, [r7, #4]
 800668a:	4628      	mov	r0, r5
 800668c:	f7fe fa0e 	bl	8004aac <CO_SYNC_init>
 8006690:	4603      	mov	r3, r0
 8006692:	747b      	strb	r3, [r7, #17]
                           co->CANmodule, CO_GET_CO(RX_IDX_SYNC),
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
                           co->CANmodule, CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err != CO_ERROR_NO) {
 8006694:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <CO_CANopenInit+0x2fa>
            return err;
 800669c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80066a0:	e000      	b.n	80066a4 <CO_CANopenInit+0x2fc>
            }
        }
    }
#endif

    return CO_ERROR_NO;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3724      	adds	r7, #36	@ 0x24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ac:	200002bc 	.word	0x200002bc

080066b0 <CO_CANopenInitPDO>:

CO_ReturnError_t
CO_CANopenInitPDO(CO_t* co, CO_EM_t* em, OD_t* od, uint8_t nodeId, uint32_t* errInfo) {
 80066b0:	b590      	push	{r4, r7, lr}
 80066b2:	b08f      	sub	sp, #60	@ 0x3c
 80066b4:	af06      	add	r7, sp, #24
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
 80066bc:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d102      	bne.n	80066ca <CO_CANopenInitPDO+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80066c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80066c8:	e064      	b.n	8006794 <CO_CANopenInitPDO+0xe4>
    }
    if ((nodeId < 1U) || (nodeId > 127U) || co->nodeIdUnconfigured) {
 80066ca:	78fb      	ldrb	r3, [r7, #3]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d007      	beq.n	80066e0 <CO_CANopenInitPDO+0x30>
 80066d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	db03      	blt.n	80066e0 <CO_CANopenInitPDO+0x30>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d009      	beq.n	80066f4 <CO_CANopenInitPDO+0x44>
        return (co->nodeIdUnconfigured) ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <CO_CANopenInitPDO+0x3e>
 80066e8:	f06f 0312 	mvn.w	r3, #18
 80066ec:	e052      	b.n	8006794 <CO_CANopenInitPDO+0xe4>
 80066ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80066f2:	e04f      	b.n	8006794 <CO_CANopenInitPDO+0xe4>
    }
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
    if (CO_GET_CNT(TPDO) > 0U) {
        OD_entry_t* TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 80066f4:	4b29      	ldr	r3, [pc, #164]	@ (800679c <CO_CANopenInitPDO+0xec>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	33cc      	adds	r3, #204	@ 0xcc
 80066fc:	617b      	str	r3, [r7, #20]
        OD_entry_t* TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 80066fe:	4b27      	ldr	r3, [pc, #156]	@ (800679c <CO_CANopenInitPDO+0xec>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	33fc      	adds	r3, #252	@ 0xfc
 8006706:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006708:	2300      	movs	r3, #0
 800670a:	837b      	strh	r3, [r7, #26]
 800670c:	e03e      	b.n	800678c <CO_CANopenInitPDO+0xdc>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 800670e:	2300      	movs	r3, #0
 8006710:	833b      	strh	r3, [r7, #24]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 8006712:	8b7b      	ldrh	r3, [r7, #26]
 8006714:	2b03      	cmp	r3, #3
 8006716:	d809      	bhi.n	800672c <CO_CANopenInitPDO+0x7c>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (uint16_t)((CO_CAN_ID_TPDO_1 + (i * 0x100U)) + nodeId);
 8006718:	8b7b      	ldrh	r3, [r7, #26]
 800671a:	021b      	lsls	r3, r3, #8
 800671c:	b29a      	uxth	r2, r3
 800671e:	78fb      	ldrb	r3, [r7, #3]
 8006720:	b29b      	uxth	r3, r3
 8006722:	4413      	add	r3, r2
 8006724:	b29b      	uxth	r3, r3
 8006726:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800672a:	833b      	strh	r3, [r7, #24]
                uint16_t pdoOffset = i % 4;
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100) + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i], od, em,
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006730:	8b7b      	ldrh	r3, [r7, #26]
 8006732:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8006736:	fb01 f303 	mul.w	r3, r1, r3
 800673a:	18d0      	adds	r0, r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	8b7a      	ldrh	r2, [r7, #26]
 8006746:	3203      	adds	r2, #3
 8006748:	b292      	uxth	r2, r2
 800674a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800674c:	9105      	str	r1, [sp, #20]
 800674e:	9204      	str	r2, [sp, #16]
 8006750:	9303      	str	r3, [sp, #12]
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	9302      	str	r3, [sp, #8]
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	9301      	str	r3, [sp, #4]
 800675a:	8b3b      	ldrh	r3, [r7, #24]
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	4623      	mov	r3, r4
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	6879      	ldr	r1, [r7, #4]
 8006764:	f7fc f8a8 	bl	80028b8 <CO_TPDO_init>
 8006768:	4603      	mov	r3, r0
 800676a:	74fb      	strb	r3, [r7, #19]
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
                               co->SYNC,
#endif
                               preDefinedCanId, TPDOcomm, TPDOmap, co->CANmodule, CO_GET_CO(TX_IDX_TPDO) + i, errInfo);
            if (err != CO_ERROR_NO) {
 800676c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d002      	beq.n	800677a <CO_CANopenInitPDO+0xca>
                return err;
 8006774:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006778:	e00c      	b.n	8006794 <CO_CANopenInitPDO+0xe4>
            }
            TPDOcomm++;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	330c      	adds	r3, #12
 800677e:	617b      	str	r3, [r7, #20]
            TPDOmap++;
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	330c      	adds	r3, #12
 8006784:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006786:	8b7b      	ldrh	r3, [r7, #26]
 8006788:	3301      	adds	r3, #1
 800678a:	837b      	strh	r3, [r7, #26]
 800678c:	8b7b      	ldrh	r3, [r7, #26]
 800678e:	2b03      	cmp	r3, #3
 8006790:	d9bd      	bls.n	800670e <CO_CANopenInitPDO+0x5e>
        }
    }
#endif

    return CO_ERROR_NO;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3724      	adds	r7, #36	@ 0x24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd90      	pop	{r4, r7, pc}
 800679c:	200002bc 	.word	0x200002bc

080067a0 <CO_process>:
    return CO_ERROR_NO;
}
#endif

CO_NMT_reset_cmd_t
CO_process(CO_t* co, bool_t enableGateway, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 80067a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067a2:	b09b      	sub	sp, #108	@ 0x6c
 80067a4:	af08      	add	r7, sp, #32
 80067a6:	61f8      	str	r0, [r7, #28]
 80067a8:	61b9      	str	r1, [r7, #24]
 80067aa:	617a      	str	r2, [r7, #20]
 80067ac:	613b      	str	r3, [r7, #16]
    (void)enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 80067ae:	2300      	movs	r3, #0
 80067b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7ff fbec 	bl	8005f96 <CO_NMT_getInternalState>
 80067be:	4603      	mov	r3, r0
 80067c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    bool_t NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 80067c4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80067c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80067ca:	d003      	beq.n	80067d4 <CO_process+0x34>
 80067cc:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80067d0:	2b05      	cmp	r3, #5
 80067d2:	d101      	bne.n	80067d8 <CO_process+0x38>
 80067d4:	2301      	movs	r3, #1
 80067d6:	e000      	b.n	80067da <CO_process+0x3a>
 80067d8:	2300      	movs	r3, #0
 80067da:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 fe10 	bl	8007406 <CO_CANmodule_process>

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE)
    if (CO_GET_CNT(LSS_SLV) == 1U) {
        if (CO_LSSslave_process(co->LSSslave)) {
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7ff f982 	bl	8005af4 <CO_LSSslave_process>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d002      	beq.n	80067fc <CO_process+0x5c>
            reset = CO_RESET_COMM;
 80067f6:	2301      	movs	r3, #1
 80067f8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    bool_t unc = co->nodeIdUnconfigured;
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	637b      	str	r3, [r7, #52]	@ 0x34
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	8a5b      	ldrh	r3, [r3, #18]
 8006808:	867b      	strh	r3, [r7, #50]	@ 0x32
    bool_t LSSslave_configuration = false;
 800680a:	2300      	movs	r3, #0
 800680c:	643b      	str	r3, [r7, #64]	@ 0x40
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    if (CO_GET_CNT(LSS_SLV) == 1U) {
        if (CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION) {
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff fbd1 	bl	8005fba <CO_LSSslave_getState>
 8006818:	4603      	mov	r3, r0
 800681a:	2b01      	cmp	r3, #1
 800681c:	d101      	bne.n	8006822 <CO_process+0x82>
            LSSslave_configuration = true;
 800681e:	2301      	movs	r3, #1
 8006820:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
#define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS false
#endif

    if (CO_GET_CNT(LEDS) == 1U) {
        bool_t ErrSync = CO_isError(co->em, CO_EM_SYNC_TIME_OUT);
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	2118      	movs	r1, #24
 8006828:	4618      	mov	r0, r3
 800682a:	f7ff fb77 	bl	8005f1c <CO_isError>
 800682e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        bool_t ErrHbCons = CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER);
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	211b      	movs	r1, #27
 8006836:	4618      	mov	r0, r3
 8006838:	f7ff fb70 	bl	8005f1c <CO_isError>
 800683c:	62b8      	str	r0, [r7, #40]	@ 0x28
        bool_t ErrHbConsRemote = CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	211c      	movs	r1, #28
 8006844:	4618      	mov	r0, r3
 8006846:	f7ff fb69 	bl	8005f1c <CO_isError>
 800684a:	6278      	str	r0, [r7, #36]	@ 0x24
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 8006850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006852:	2b00      	cmp	r3, #0
 8006854:	d102      	bne.n	800685c <CO_process+0xbc>
 8006856:	f997 5023 	ldrsb.w	r5, [r7, #35]	@ 0x23
 800685a:	e000      	b.n	800685e <CO_process+0xbe>
 800685c:	2500      	movs	r5, #0
                        (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0U, (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0U,
 800685e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006860:	f003 0304 	and.w	r3, r3, #4
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8006864:	2b00      	cmp	r3, #0
 8006866:	bf14      	ite	ne
 8006868:	2301      	movne	r3, #1
 800686a:	2300      	moveq	r3, #0
 800686c:	b2db      	uxtb	r3, r3
 800686e:	60fb      	str	r3, [r7, #12]
                        (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0U, (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0U,
 8006870:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8006872:	f240 3303 	movw	r3, #771	@ 0x303
 8006876:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8006878:	2b00      	cmp	r3, #0
 800687a:	bf14      	ite	ne
 800687c:	2301      	movne	r3, #1
 800687e:	2300      	moveq	r3, #0
 8006880:	b2db      	uxtb	r3, r3
 8006882:	60bb      	str	r3, [r7, #8]
 8006884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <CO_process+0xee>
 800688a:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 800688c:	e000      	b.n	8006890 <CO_process+0xf0>
 800688e:	2400      	movs	r4, #0
                        false, /* RPDO event timer timeout */
                        unc ? false : ErrSync, unc ? false : (ErrHbCons || ErrHbConsRemote),
 8006890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006892:	2b00      	cmp	r3, #0
 8006894:	d107      	bne.n	80068a6 <CO_process+0x106>
 8006896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006898:	2b00      	cmp	r3, #0
 800689a:	d102      	bne.n	80068a2 <CO_process+0x102>
 800689c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <CO_process+0x106>
 80068a2:	2301      	movs	r3, #1
 80068a4:	e000      	b.n	80068a8 <CO_process+0x108>
 80068a6:	2300      	movs	r3, #0
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 80068a8:	607b      	str	r3, [r7, #4]
                        CO_getErrorRegister(co->em) != 0U, CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS, timerNext_us);
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7ff fb5b 	bl	8005f6a <CO_getErrorRegister>
 80068b4:	4603      	mov	r3, r0
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	bf14      	ite	ne
 80068ba:	2301      	movne	r3, #1
 80068bc:	2300      	moveq	r3, #0
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	461a      	mov	r2, r3
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	9307      	str	r3, [sp, #28]
 80068c6:	2300      	movs	r3, #0
 80068c8:	9306      	str	r3, [sp, #24]
 80068ca:	9205      	str	r2, [sp, #20]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	9304      	str	r3, [sp, #16]
 80068d0:	9403      	str	r4, [sp, #12]
 80068d2:	2300      	movs	r3, #0
 80068d4:	9302      	str	r3, [sp, #8]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	9301      	str	r3, [sp, #4]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068e0:	462a      	mov	r2, r5
 80068e2:	6979      	ldr	r1, [r7, #20]
 80068e4:	4630      	mov	r0, r6
 80068e6:	f7fe fd71 	bl	80053cc <CO_LEDs_process>
    }
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <CO_process+0x158>
        return reset;
 80068f2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80068f6:	e047      	b.n	8006988 <CO_process+0x1e8>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1U) {
        CO_EM_process(co->em, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	69d8      	ldr	r0, [r3, #28]
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006902:	f7fa f87f 	bl	8000a04 <CO_EM_process>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U) {
        reset = CO_NMT_process(co->NMT, &NMTstate, timeDifference_us, timerNext_us);
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	6918      	ldr	r0, [r3, #16]
 800690a:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	f7fa ff1f 	bl	8001754 <CO_NMT_process>
 8006916:	4603      	mov	r3, r0
 8006918:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 800691c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006920:	2b7f      	cmp	r3, #127	@ 0x7f
 8006922:	d003      	beq.n	800692c <CO_process+0x18c>
 8006924:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006928:	2b05      	cmp	r3, #5
 800692a:	d101      	bne.n	8006930 <CO_process+0x190>
 800692c:	2301      	movs	r3, #1
 800692e:	e000      	b.n	8006932 <CO_process+0x192>
 8006930:	2300      	movs	r3, #0
 8006932:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006934:	2300      	movs	r3, #0
 8006936:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800693a:	e011      	b.n	8006960 <CO_process+0x1c0>
        (void)CO_SDOserver_process(&co->SDOserver[i], NMTisPreOrOperational, timeDifference_us, timerNext_us);
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006940:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006944:	21b4      	movs	r1, #180	@ 0xb4
 8006946:	fb01 f303 	mul.w	r3, r1, r3
 800694a:	18d0      	adds	r0, r2, r3
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006952:	f7fd f98b 	bl	8003c6c <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006956:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800695a:	3301      	adds	r3, #1
 800695c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006960:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006964:	2b00      	cmp	r3, #0
 8006966:	d0e9      	beq.n	800693c <CO_process+0x19c>
    }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    if (CO_GET_CNT(HB_CONS) == 1U) {
        CO_HBconsumer_process(co->HBcons, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	6958      	ldr	r0, [r3, #20]
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006972:	f7fa fc6b 	bl	800124c <CO_HBconsumer_process>
    CO_nodeGuardingMaster_process(co->NGmaster, timeDifference_us, timerNext_us);
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    if (CO_GET_CNT(TIME) == 1U) {
        (void)CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800697e:	4618      	mov	r0, r3
 8006980:	f7fe fc32 	bl	80051e8 <CO_TIME_process>
    if (CO_GET_CNT(GTWA) == 1U) {
        CO_GTWA_process(co->gtwa, enableGateway, timeDifference_us, timerNext_us);
    }
#endif

    return reset;
 8006984:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006988:	4618      	mov	r0, r3
 800698a:	374c      	adds	r7, #76	@ 0x4c
 800698c:	46bd      	mov	sp, r7
 800698e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006990 <CO_process_SYNC>:

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
bool_t
CO_process_SYNC(CO_t* co, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 800699c:	2300      	movs	r3, #0
 800699e:	61fb      	str	r3, [r7, #28]

    if ((!co->nodeIdUnconfigured) && (CO_GET_CNT(SYNC) == 1U)) {
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d131      	bne.n	8006a0c <CO_process_SYNC+0x7c>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff faf2 	bl	8005f96 <CO_NMT_getInternalState>
 80069b2:	4603      	mov	r3, r0
 80069b4:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 80069b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80069ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80069bc:	d003      	beq.n	80069c6 <CO_process_SYNC+0x36>
 80069be:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80069c2:	2b05      	cmp	r3, #5
 80069c4:	d101      	bne.n	80069ca <CO_process_SYNC+0x3a>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e000      	b.n	80069cc <CO_process_SYNC+0x3c>
 80069ca:	2300      	movs	r3, #0
 80069cc:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC, NMTisPreOrOperational, timeDifference_us,
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	6979      	ldr	r1, [r7, #20]
 80069d8:	f7fe f98e 	bl	8004cf8 <CO_SYNC_process>
 80069dc:	4603      	mov	r3, r0
 80069de:	74fb      	strb	r3, [r7, #19]
                                                        timerNext_us);

        switch (sync_process) {
 80069e0:	7cfb      	ldrb	r3, [r7, #19]
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d009      	beq.n	80069fa <CO_process_SYNC+0x6a>
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	dc0d      	bgt.n	8006a06 <CO_process_SYNC+0x76>
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00d      	beq.n	8006a0a <CO_process_SYNC+0x7a>
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d000      	beq.n	80069f4 <CO_process_SYNC+0x64>
            case CO_SYNC_NONE: break;
            case CO_SYNC_RX_TX: syncWas = true; break;
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
            default:
                /* MISRA C 2004 15.3 */
                break;
 80069f2:	e008      	b.n	8006a06 <CO_process_SYNC+0x76>
            case CO_SYNC_RX_TX: syncWas = true; break;
 80069f4:	2301      	movs	r3, #1
 80069f6:	61fb      	str	r3, [r7, #28]
 80069f8:	e008      	b.n	8006a0c <CO_process_SYNC+0x7c>
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 fc9b 	bl	800733a <CO_CANclearPendingSyncPDOs>
 8006a04:	e002      	b.n	8006a0c <CO_process_SYNC+0x7c>
                break;
 8006a06:	bf00      	nop
 8006a08:	e000      	b.n	8006a0c <CO_process_SYNC+0x7c>
            case CO_SYNC_NONE: break;
 8006a0a:	bf00      	nop
        }
    }

    return syncWas;
 8006a0c:	69fb      	ldr	r3, [r7, #28]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3720      	adds	r7, #32
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <CO_process_RPDO>:
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
void
CO_process_RPDO(CO_t* co, bool_t syncWas, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b086      	sub	sp, #24
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	607a      	str	r2, [r7, #4]
 8006a22:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10e      	bne.n	8006a4a <CO_process_RPDO+0x34>
        return;
    }

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7ff fab0 	bl	8005f96 <CO_NMT_getInternalState>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b05      	cmp	r3, #5
 8006a3a:	bf0c      	ite	eq
 8006a3c:	2301      	moveq	r3, #1
 8006a3e:	2300      	movne	r3, #0
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	617b      	str	r3, [r7, #20]

    for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006a44:	2300      	movs	r3, #0
 8006a46:	827b      	strh	r3, [r7, #18]
 8006a48:	e000      	b.n	8006a4c <CO_process_RPDO+0x36>
        return;
 8006a4a:	bf00      	nop
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
                        timeDifference_us, timerNext_us,
#endif
                        NMTisOperational, syncWas);
    }
}
 8006a4c:	3718      	adds	r7, #24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <CO_process_TPDO>:
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
void
CO_process_TPDO(CO_t* co, bool_t syncWas, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b088      	sub	sp, #32
 8006a56:	af02      	add	r7, sp, #8
 8006a58:	60f8      	str	r0, [r7, #12]
 8006a5a:	60b9      	str	r1, [r7, #8]
 8006a5c:	607a      	str	r2, [r7, #4]
 8006a5e:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d124      	bne.n	8006ab2 <CO_process_TPDO+0x60>
        return;
    }

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff fa92 	bl	8005f96 <CO_NMT_getInternalState>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b05      	cmp	r3, #5
 8006a76:	bf0c      	ite	eq
 8006a78:	2301      	moveq	r3, #1
 8006a7a:	2300      	movne	r3, #0
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	613b      	str	r3, [r7, #16]

    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006a80:	2300      	movs	r3, #0
 8006a82:	82fb      	strh	r3, [r7, #22]
 8006a84:	e011      	b.n	8006aaa <CO_process_TPDO+0x58>
        CO_TPDO_process(&co->TPDO[i],
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a8a:	8afb      	ldrh	r3, [r7, #22]
 8006a8c:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8006a90:	fb01 f303 	mul.w	r3, r1, r3
 8006a94:	18d0      	adds	r0, r2, r3
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	683a      	ldr	r2, [r7, #0]
 8006a9e:	6879      	ldr	r1, [r7, #4]
 8006aa0:	f7fc f93e 	bl	8002d20 <CO_TPDO_process>
    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006aa4:	8afb      	ldrh	r3, [r7, #22]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	82fb      	strh	r3, [r7, #22]
 8006aaa:	8afb      	ldrh	r3, [r7, #22]
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	d9ea      	bls.n	8006a86 <CO_process_TPDO+0x34>
 8006ab0:	e000      	b.n	8006ab4 <CO_process_TPDO+0x62>
        return;
 8006ab2:	bf00      	nop
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
                        timeDifference_us, timerNext_us,
#endif
                        NMTisOperational, syncWas);
    }
}
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
	...

08006abc <callback_time_rcv>:
#define OD_STATUS_BITS       NULL
#define TIME_PRODUCER_INTERVAL_MS 1000
/* Global variables and objects */
CO_t* CO = NULL; /* CANopen object */
int i;
void callback_time_rcv(void* object) {
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
	++i;
 8006ac4:	4b05      	ldr	r3, [pc, #20]	@ (8006adc <callback_time_rcv+0x20>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	4a04      	ldr	r2, [pc, #16]	@ (8006adc <callback_time_rcv+0x20>)
 8006acc:	6013      	str	r3, [r2, #0]
}
 8006ace:	bf00      	nop
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	2000034c 	.word	0x2000034c

08006ae0 <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 8006ae8:	4a13      	ldr	r2, [pc, #76]	@ (8006b38 <canopen_app_init+0x58>)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 8006aee:	2300      	movs	r3, #0
 8006af0:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 8006af2:	f107 0308 	add.w	r3, r7, #8
 8006af6:	4619      	mov	r1, r3
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f7ff fa6f 	bl	8005fdc <CO_new>
 8006afe:	4603      	mov	r3, r0
 8006b00:	4a0e      	ldr	r2, [pc, #56]	@ (8006b3c <canopen_app_init+0x5c>)
 8006b02:	6013      	str	r3, [r2, #0]
    if (CO == NULL) {
 8006b04:	4b0d      	ldr	r3, [pc, #52]	@ (8006b3c <canopen_app_init+0x5c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d104      	bne.n	8006b16 <canopen_app_init+0x36>
        log_printf("Error: Can't allocate memory\n");
 8006b0c:	480c      	ldr	r0, [pc, #48]	@ (8006b40 <canopen_app_init+0x60>)
 8006b0e:	f004 fadd 	bl	800b0cc <puts>
        return 1;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e00c      	b.n	8006b30 <canopen_app_init+0x50>
    } else {
        log_printf("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	480a      	ldr	r0, [pc, #40]	@ (8006b44 <canopen_app_init+0x64>)
 8006b1c:	f004 fa6e 	bl	800affc <iprintf>
    }

    canopenNodeSTM32->canOpenStack = CO;
 8006b20:	4b05      	ldr	r3, [pc, #20]	@ (8006b38 <canopen_app_init+0x58>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a05      	ldr	r2, [pc, #20]	@ (8006b3c <canopen_app_init+0x5c>)
 8006b26:	6812      	ldr	r2, [r2, #0]
 8006b28:	615a      	str	r2, [r3, #20]
        log_printf("Error: Storage %d\n", storageInitError);
        return 2;
    }
#endif

    canopen_app_resetCommunication();
 8006b2a:	f000 f80d 	bl	8006b48 <canopen_app_resetCommunication>
    return 0;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	20000344 	.word	0x20000344
 8006b3c:	20000348 	.word	0x20000348
 8006b40:	0800bb44 	.word	0x0800bb44
 8006b44:	0800bb64 	.word	0x0800bb64

08006b48 <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication() {
 8006b48:	b590      	push	{r4, r7, lr}
 8006b4a:	b08f      	sub	sp, #60	@ 0x3c
 8006b4c:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 8006b4e:	4882      	ldr	r0, [pc, #520]	@ (8006d58 <canopen_app_resetCommunication+0x210>)
 8006b50:	f004 fabc 	bl	800b0cc <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 8006b54:	4b81      	ldr	r3, [pc, #516]	@ (8006d5c <canopen_app_resetCommunication+0x214>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8006b5e:	4b80      	ldr	r3, [pc, #512]	@ (8006d60 <canopen_app_resetCommunication+0x218>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 f9c8 	bl	8006ef8 <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 8006b68:	4b7c      	ldr	r3, [pc, #496]	@ (8006d5c <canopen_app_resetCommunication+0x214>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 fab2 	bl	80070d8 <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 8006b74:	4b79      	ldr	r3, [pc, #484]	@ (8006d5c <canopen_app_resetCommunication+0x214>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a79      	ldr	r2, [pc, #484]	@ (8006d60 <canopen_app_resetCommunication+0x218>)
 8006b7a:	6811      	ldr	r1, [r2, #0]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7ff fbba 	bl	80062f8 <CO_CANinit>
 8006b84:	4603      	mov	r3, r0
 8006b86:	461a      	mov	r2, r3
 8006b88:	4b76      	ldr	r3, [pc, #472]	@ (8006d64 <canopen_app_resetCommunication+0x21c>)
 8006b8a:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006b8c:	4b75      	ldr	r3, [pc, #468]	@ (8006d64 <canopen_app_resetCommunication+0x21c>)
 8006b8e:	f993 3000 	ldrsb.w	r3, [r3]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d008      	beq.n	8006ba8 <canopen_app_resetCommunication+0x60>
        log_printf("Error: CAN initialization failed: %d\n", err);
 8006b96:	4b73      	ldr	r3, [pc, #460]	@ (8006d64 <canopen_app_resetCommunication+0x21c>)
 8006b98:	f993 3000 	ldrsb.w	r3, [r3]
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4872      	ldr	r0, [pc, #456]	@ (8006d68 <canopen_app_resetCommunication+0x220>)
 8006ba0:	f004 fa2c 	bl	800affc <iprintf>
        return 1;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e0d2      	b.n	8006d4e <canopen_app_resetCommunication+0x206>
    }

    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006ba8:	4b70      	ldr	r3, [pc, #448]	@ (8006d6c <canopen_app_resetCommunication+0x224>)
 8006baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bac:	60bb      	str	r3, [r7, #8]
                                                .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 8006bae:	4b6f      	ldr	r3, [pc, #444]	@ (8006d6c <canopen_app_resetCommunication+0x224>)
 8006bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006bb2:	60fb      	str	r3, [r7, #12]
                                                .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 8006bb4:	4b6d      	ldr	r3, [pc, #436]	@ (8006d6c <canopen_app_resetCommunication+0x224>)
 8006bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006bb8:	613b      	str	r3, [r7, #16]
                                                .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber}};
 8006bba:	4b6c      	ldr	r3, [pc, #432]	@ (8006d6c <canopen_app_resetCommunication+0x224>)
 8006bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006bbe:	617b      	str	r3, [r7, #20]
    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 8006bc0:	4b66      	ldr	r3, [pc, #408]	@ (8006d5c <canopen_app_resetCommunication+0x214>)
 8006bc2:	6818      	ldr	r0, [r3, #0]
 8006bc4:	4b66      	ldr	r3, [pc, #408]	@ (8006d60 <canopen_app_resetCommunication+0x218>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	4b65      	ldr	r3, [pc, #404]	@ (8006d60 <canopen_app_resetCommunication+0x218>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	3302      	adds	r3, #2
 8006bd0:	f107 0108 	add.w	r1, r7, #8
 8006bd4:	f7ff fbbc 	bl	8006350 <CO_LSSinit>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	461a      	mov	r2, r3
 8006bdc:	4b61      	ldr	r3, [pc, #388]	@ (8006d64 <canopen_app_resetCommunication+0x21c>)
 8006bde:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006be0:	4b60      	ldr	r3, [pc, #384]	@ (8006d64 <canopen_app_resetCommunication+0x21c>)
 8006be2:	f993 3000 	ldrsb.w	r3, [r3]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d008      	beq.n	8006bfc <canopen_app_resetCommunication+0xb4>
        log_printf("Error: LSS slave initialization failed: %d\n", err);
 8006bea:	4b5e      	ldr	r3, [pc, #376]	@ (8006d64 <canopen_app_resetCommunication+0x21c>)
 8006bec:	f993 3000 	ldrsb.w	r3, [r3]
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	485f      	ldr	r0, [pc, #380]	@ (8006d70 <canopen_app_resetCommunication+0x228>)
 8006bf4:	f004 fa02 	bl	800affc <iprintf>
        return 2;
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	e0a8      	b.n	8006d4e <canopen_app_resetCommunication+0x206>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 8006bfc:	4b58      	ldr	r3, [pc, #352]	@ (8006d60 <canopen_app_resetCommunication+0x218>)
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	4b57      	ldr	r3, [pc, #348]	@ (8006d60 <canopen_app_resetCommunication+0x218>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	7812      	ldrb	r2, [r2, #0]
 8006c06:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object */
 8006c0c:	4b53      	ldr	r3, [pc, #332]	@ (8006d5c <canopen_app_resetCommunication+0x214>)
 8006c0e:	6818      	ldr	r0, [r3, #0]
 8006c10:	4b58      	ldr	r3, [pc, #352]	@ (8006d74 <canopen_app_resetCommunication+0x22c>)
 8006c12:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t */
                         FIRST_HB_TIME,        /* firstHBTime_ms */
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer */
                         canopenNodeSTM32->activeNodeID, &errInfo);
 8006c14:	4b52      	ldr	r3, [pc, #328]	@ (8006d60 <canopen_app_resetCommunication+0x218>)
 8006c16:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object */
 8006c18:	785b      	ldrb	r3, [r3, #1]
 8006c1a:	1d3a      	adds	r2, r7, #4
 8006c1c:	9207      	str	r2, [sp, #28]
 8006c1e:	9306      	str	r3, [sp, #24]
 8006c20:	2300      	movs	r3, #0
 8006c22:	9305      	str	r3, [sp, #20]
 8006c24:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8006c28:	9304      	str	r3, [sp, #16]
 8006c2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006c2e:	9303      	str	r3, [sp, #12]
 8006c30:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8006c34:	9302      	str	r3, [sp, #8]
 8006c36:	f242 1311 	movw	r3, #8465	@ 0x2111
 8006c3a:	9301      	str	r3, [sp, #4]
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	460b      	mov	r3, r1
 8006c42:	2200      	movs	r2, #0
 8006c44:	2100      	movs	r1, #0
 8006c46:	f7ff fbaf 	bl	80063a8 <CO_CANopenInit>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	4b45      	ldr	r3, [pc, #276]	@ (8006d64 <canopen_app_resetCommunication+0x21c>)
 8006c50:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 8006c52:	4b44      	ldr	r3, [pc, #272]	@ (8006d64 <canopen_app_resetCommunication+0x21c>)
 8006c54:	f993 3000 	ldrsb.w	r3, [r3]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d01a      	beq.n	8006c92 <canopen_app_resetCommunication+0x14a>
 8006c5c:	4b41      	ldr	r3, [pc, #260]	@ (8006d64 <canopen_app_resetCommunication+0x21c>)
 8006c5e:	f993 3000 	ldrsb.w	r3, [r3]
 8006c62:	f113 0f13 	cmn.w	r3, #19
 8006c66:	d014      	beq.n	8006c92 <canopen_app_resetCommunication+0x14a>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8006c68:	4b3e      	ldr	r3, [pc, #248]	@ (8006d64 <canopen_app_resetCommunication+0x21c>)
 8006c6a:	f993 3000 	ldrsb.w	r3, [r3]
 8006c6e:	f113 0f0c 	cmn.w	r3, #12
 8006c72:	d105      	bne.n	8006c80 <canopen_app_resetCommunication+0x138>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4619      	mov	r1, r3
 8006c78:	483f      	ldr	r0, [pc, #252]	@ (8006d78 <canopen_app_resetCommunication+0x230>)
 8006c7a:	f004 f9bf 	bl	800affc <iprintf>
 8006c7e:	e006      	b.n	8006c8e <canopen_app_resetCommunication+0x146>
        } else {
            log_printf("Error: CANopen initialization failed: %d\n", err);
 8006c80:	4b38      	ldr	r3, [pc, #224]	@ (8006d64 <canopen_app_resetCommunication+0x21c>)
 8006c82:	f993 3000 	ldrsb.w	r3, [r3]
 8006c86:	4619      	mov	r1, r3
 8006c88:	483c      	ldr	r0, [pc, #240]	@ (8006d7c <canopen_app_resetCommunication+0x234>)
 8006c8a:	f004 f9b7 	bl	800affc <iprintf>
        }
        return 3;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e05d      	b.n	8006d4e <canopen_app_resetCommunication+0x206>
    }

    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 8006c92:	4b32      	ldr	r3, [pc, #200]	@ (8006d5c <canopen_app_resetCommunication+0x214>)
 8006c94:	6818      	ldr	r0, [r3, #0]
 8006c96:	4b31      	ldr	r3, [pc, #196]	@ (8006d5c <canopen_app_resetCommunication+0x214>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	69d9      	ldr	r1, [r3, #28]
 8006c9c:	4b35      	ldr	r3, [pc, #212]	@ (8006d74 <canopen_app_resetCommunication+0x22c>)
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	4b2f      	ldr	r3, [pc, #188]	@ (8006d60 <canopen_app_resetCommunication+0x218>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	785c      	ldrb	r4, [r3, #1]
 8006ca6:	1d3b      	adds	r3, r7, #4
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	4623      	mov	r3, r4
 8006cac:	f7ff fd00 	bl	80066b0 <CO_CANopenInitPDO>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8006d64 <canopen_app_resetCommunication+0x21c>)
 8006cb6:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8006d64 <canopen_app_resetCommunication+0x21c>)
 8006cba:	f993 3000 	ldrsb.w	r3, [r3]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d014      	beq.n	8006cec <canopen_app_resetCommunication+0x1a4>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8006cc2:	4b28      	ldr	r3, [pc, #160]	@ (8006d64 <canopen_app_resetCommunication+0x21c>)
 8006cc4:	f993 3000 	ldrsb.w	r3, [r3]
 8006cc8:	f113 0f0c 	cmn.w	r3, #12
 8006ccc:	d105      	bne.n	8006cda <canopen_app_resetCommunication+0x192>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	4829      	ldr	r0, [pc, #164]	@ (8006d78 <canopen_app_resetCommunication+0x230>)
 8006cd4:	f004 f992 	bl	800affc <iprintf>
 8006cd8:	e006      	b.n	8006ce8 <canopen_app_resetCommunication+0x1a0>
        } else {
            log_printf("Error: PDO initialization failed: %d\n", err);
 8006cda:	4b22      	ldr	r3, [pc, #136]	@ (8006d64 <canopen_app_resetCommunication+0x21c>)
 8006cdc:	f993 3000 	ldrsb.w	r3, [r3]
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4827      	ldr	r0, [pc, #156]	@ (8006d80 <canopen_app_resetCommunication+0x238>)
 8006ce4:	f004 f98a 	bl	800affc <iprintf>
        }
        return 4;
 8006ce8:	2304      	movs	r3, #4
 8006cea:	e030      	b.n	8006d4e <canopen_app_resetCommunication+0x206>
    }

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 8006cec:	4b1c      	ldr	r3, [pc, #112]	@ (8006d60 <canopen_app_resetCommunication+0x218>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f003 fcbc 	bl	800a670 <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured) {
 8006cf8:	4b18      	ldr	r3, [pc, #96]	@ (8006d5c <canopen_app_resetCommunication+0x214>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <canopen_app_resetCommunication+0x1c0>
        if (storageInitError != 0) {
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
        }
#endif
    } else {
        log_printf("CANopenNode - Node-id not initialized\n");
 8006d02:	4820      	ldr	r0, [pc, #128]	@ (8006d84 <canopen_app_resetCommunication+0x23c>)
 8006d04:	f004 f9e2 	bl	800b0cc <puts>
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 8006d08:	4b14      	ldr	r3, [pc, #80]	@ (8006d5c <canopen_app_resetCommunication+0x214>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 f902 	bl	8006f18 <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 8006d14:	481c      	ldr	r0, [pc, #112]	@ (8006d88 <canopen_app_resetCommunication+0x240>)
 8006d16:	f004 f9d9 	bl	800b0cc <puts>
    fflush(stdout);
 8006d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8006d8c <canopen_app_resetCommunication+0x244>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f004 f895 	bl	800ae50 <fflush>
    time_old = time_current = HAL_GetTick();
 8006d26:	f001 f9a9 	bl	800807c <HAL_GetTick>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	4a18      	ldr	r2, [pc, #96]	@ (8006d90 <canopen_app_resetCommunication+0x248>)
 8006d2e:	6013      	str	r3, [r2, #0]
 8006d30:	4b17      	ldr	r3, [pc, #92]	@ (8006d90 <canopen_app_resetCommunication+0x248>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a17      	ldr	r2, [pc, #92]	@ (8006d94 <canopen_app_resetCommunication+0x24c>)
 8006d36:	6013      	str	r3, [r2, #0]
    CO_TIME_initCallbackPre(CO->TIME, CO->TIME, callback_time_rcv);
 8006d38:	4b08      	ldr	r3, [pc, #32]	@ (8006d5c <canopen_app_resetCommunication+0x214>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006d3e:	4b07      	ldr	r3, [pc, #28]	@ (8006d5c <canopen_app_resetCommunication+0x214>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d44:	4a14      	ldr	r2, [pc, #80]	@ (8006d98 <canopen_app_resetCommunication+0x250>)
 8006d46:	4619      	mov	r1, r3
 8006d48:	f7fe fa38 	bl	80051bc <CO_TIME_initCallbackPre>
    return 0;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd90      	pop	{r4, r7, pc}
 8006d56:	bf00      	nop
 8006d58:	0800bb8c 	.word	0x0800bb8c
 8006d5c:	20000348 	.word	0x20000348
 8006d60:	20000344 	.word	0x20000344
 8006d64:	20000358 	.word	0x20000358
 8006d68:	0800bbb4 	.word	0x0800bbb4
 8006d6c:	20000000 	.word	0x20000000
 8006d70:	0800bbdc 	.word	0x0800bbdc
 8006d74:	200002bc 	.word	0x200002bc
 8006d78:	0800bc08 	.word	0x0800bc08
 8006d7c:	0800bc30 	.word	0x0800bc30
 8006d80:	0800bc5c 	.word	0x0800bc5c
 8006d84:	0800bc84 	.word	0x0800bc84
 8006d88:	0800bcac 	.word	0x0800bcac
 8006d8c:	200002d8 	.word	0x200002d8
 8006d90:	20000354 	.word	0x20000354
 8006d94:	20000350 	.word	0x20000350
 8006d98:	08006abd 	.word	0x08006abd

08006d9c <canopen_app_process>:

void
canopen_app_process() {
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 8006da2:	f001 f96b 	bl	800807c <HAL_GetTick>
 8006da6:	4603      	mov	r3, r0
 8006da8:	4a2c      	ldr	r2, [pc, #176]	@ (8006e5c <canopen_app_process+0xc0>)
 8006daa:	6013      	str	r3, [r2, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 8006dac:	4b2b      	ldr	r3, [pc, #172]	@ (8006e5c <canopen_app_process+0xc0>)
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	4b2b      	ldr	r3, [pc, #172]	@ (8006e60 <canopen_app_process+0xc4>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d04c      	beq.n	8006e52 <canopen_app_process+0xb6>
        /* CANopen process */
        CO_NMT_reset_cmd_t reset_status;
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 8006db8:	4b28      	ldr	r3, [pc, #160]	@ (8006e5c <canopen_app_process+0xc0>)
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	4b28      	ldr	r3, [pc, #160]	@ (8006e60 <canopen_app_process+0xc4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006dc6:	fb02 f303 	mul.w	r3, r2, r3
 8006dca:	607b      	str	r3, [r7, #4]
        time_old = time_current;
 8006dcc:	4b23      	ldr	r3, [pc, #140]	@ (8006e5c <canopen_app_process+0xc0>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a23      	ldr	r2, [pc, #140]	@ (8006e60 <canopen_app_process+0xc4>)
 8006dd2:	6013      	str	r3, [r2, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 8006dd4:	4b23      	ldr	r3, [pc, #140]	@ (8006e64 <canopen_app_process+0xc8>)
 8006dd6:	6818      	ldr	r0, [r3, #0]
 8006dd8:	2300      	movs	r3, #0
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	2100      	movs	r1, #0
 8006dde:	f7ff fcdf 	bl	80067a0 <CO_process>
 8006de2:	4603      	mov	r3, r0
 8006de4:	70fb      	strb	r3, [r7, #3]
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 8006de6:	4b1f      	ldr	r3, [pc, #124]	@ (8006e64 <canopen_app_process+0xc8>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dec:	7a5a      	ldrb	r2, [r3, #9]
 8006dee:	4b1e      	ldr	r3, [pc, #120]	@ (8006e68 <canopen_app_process+0xcc>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	09d2      	lsrs	r2, r2, #7
 8006df4:	b2d2      	uxtb	r2, r2
 8006df6:	745a      	strb	r2, [r3, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 8006df8:	4b1a      	ldr	r3, [pc, #104]	@ (8006e64 <canopen_app_process+0xc8>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dfe:	7a9a      	ldrb	r2, [r3, #10]
 8006e00:	4b19      	ldr	r3, [pc, #100]	@ (8006e68 <canopen_app_process+0xcc>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	09d2      	lsrs	r2, r2, #7
 8006e06:	b2d2      	uxtb	r2, r2
 8006e08:	741a      	strb	r2, [r3, #16]
        if (reset_status == CO_RESET_COMM) {
 8006e0a:	78fb      	ldrb	r3, [r7, #3]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d118      	bne.n	8006e42 <canopen_app_process+0xa6>
            /* delete objects from memory */
        	HAL_TIM_Base_Stop_IT(canopenNodeSTM32->timerHandle);
 8006e10:	4b15      	ldr	r3, [pc, #84]	@ (8006e68 <canopen_app_process+0xcc>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f003 fc9a 	bl	800a750 <HAL_TIM_Base_Stop_IT>
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8006e1c:	4b12      	ldr	r3, [pc, #72]	@ (8006e68 <canopen_app_process+0xcc>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 f869 	bl	8006ef8 <CO_CANsetConfigurationMode>
            CO_delete(CO);
 8006e26:	4b0f      	ldr	r3, [pc, #60]	@ (8006e64 <canopen_app_process+0xc8>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7ff fa00 	bl	8006230 <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 8006e30:	480e      	ldr	r0, [pc, #56]	@ (8006e6c <canopen_app_process+0xd0>)
 8006e32:	f004 f94b 	bl	800b0cc <puts>
            canopen_app_init(canopenNodeSTM32); // Reset Communication routine
 8006e36:	4b0c      	ldr	r3, [pc, #48]	@ (8006e68 <canopen_app_process+0xcc>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7ff fe50 	bl	8006ae0 <canopen_app_init>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 8006e40:	e007      	b.n	8006e52 <canopen_app_process+0xb6>
        } else if (reset_status == CO_RESET_APP) {
 8006e42:	78fb      	ldrb	r3, [r7, #3]
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d104      	bne.n	8006e52 <canopen_app_process+0xb6>
            log_printf("CANopenNode Device Reset\n");
 8006e48:	4809      	ldr	r0, [pc, #36]	@ (8006e70 <canopen_app_process+0xd4>)
 8006e4a:	f004 f93f 	bl	800b0cc <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 8006e4e:	f002 fd84 	bl	800995a <HAL_NVIC_SystemReset>
}
 8006e52:	bf00      	nop
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20000354 	.word	0x20000354
 8006e60:	20000350 	.word	0x20000350
 8006e64:	20000348 	.word	0x20000348
 8006e68:	20000344 	.word	0x20000344
 8006e6c:	0800bcc8 	.word	0x0800bcc8
 8006e70:	0800bcf0 	.word	0x0800bcf0

08006e74 <canopen_app_interrupt>:

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
    CO_LOCK_OD(CO->CANmodule);
 8006e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8006ef4 <canopen_app_interrupt+0x80>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006e80:	f3ef 8210 	mrs	r2, PRIMASK
 8006e84:	607a      	str	r2, [r7, #4]
  return(result);
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8006e8a:	b672      	cpsid	i
}
 8006e8c:	bf00      	nop
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 8006e8e:	4b19      	ldr	r3, [pc, #100]	@ (8006ef4 <canopen_app_interrupt+0x80>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d120      	bne.n	8006eda <canopen_app_interrupt+0x66>
 8006e98:	4b16      	ldr	r3, [pc, #88]	@ (8006ef4 <canopen_app_interrupt+0x80>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d01a      	beq.n	8006eda <canopen_app_interrupt+0x66>
        bool_t syncWas = false;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	60fb      	str	r3, [r7, #12]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000; // 1ms second
 8006ea8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006eac:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 8006eae:	4b11      	ldr	r3, [pc, #68]	@ (8006ef4 <canopen_app_interrupt+0x80>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	68b9      	ldr	r1, [r7, #8]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7ff fd6a 	bl	8006990 <CO_process_SYNC>
 8006ebc:	60f8      	str	r0, [r7, #12]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 8006ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8006ef4 <canopen_app_interrupt+0x80>)
 8006ec0:	6818      	ldr	r0, [r3, #0]
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	68f9      	ldr	r1, [r7, #12]
 8006ec8:	f7ff fda5 	bl	8006a16 <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 8006ecc:	4b09      	ldr	r3, [pc, #36]	@ (8006ef4 <canopen_app_interrupt+0x80>)
 8006ece:	6818      	ldr	r0, [r3, #0]
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	68f9      	ldr	r1, [r7, #12]
 8006ed6:	f7ff fdbc 	bl	8006a52 <CO_process_TPDO>
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 8006eda:	4b06      	ldr	r3, [pc, #24]	@ (8006ef4 <canopen_app_interrupt+0x80>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ee2:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	f383 8810 	msr	PRIMASK, r3
}
 8006eea:	bf00      	nop
}
 8006eec:	bf00      	nop
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	20000348 	.word	0x20000348

08006ef8 <CO_CANsetConfigurationMode>:



/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d004      	beq.n	8006f10 <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f001 ff6c 	bl	8008de8 <HAL_CAN_Stop>
#endif
    }
}
 8006f10:	bf00      	nop
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00b      	beq.n	8006f40 <CO_CANsetNormalMode+0x28>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f001 ff16 	bl	8008d60 <HAL_CAN_Start>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d102      	bne.n	8006f40 <CO_CANsetNormalMode+0x28>
#endif
        {
            CANmodule->CANnormal = true;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	615a      	str	r2, [r3, #20]
        }
    }
}
 8006f40:	bf00      	nop
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b090      	sub	sp, #64	@ 0x40
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
 8006f54:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d005      	beq.n	8006f68 <CO_CANmodule_init+0x20>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d002      	beq.n	8006f68 <CO_CANmodule_init+0x20>
 8006f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d102      	bne.n	8006f6e <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006f68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006f6c:	e0ab      	b.n	80070c6 <CO_CANmodule_init+0x17e>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 8006f74:	4a56      	ldr	r2, [pc, #344]	@ (80070d0 <CO_CANmodule_init+0x188>)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6013      	str	r3, [r2, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	887a      	ldrh	r2, [r7, #2]
 8006f84:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f8a:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8006f92:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	849a      	strh	r2, [r3, #36]	@ 0x24
    CANmodule->errOld = 0U;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006fc2:	e02b      	b.n	800701c <CO_CANmodule_init+0xd4>
        rxArray[i].ident = 0U;
 8006fc4:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	4413      	add	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	461a      	mov	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 8006fd8:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8006fda:	4613      	mov	r3, r2
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	4413      	add	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006fec:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 8006fee:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	005b      	lsls	r3, r3, #1
 8006ff4:	4413      	add	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	2200      	movs	r2, #0
 8007000:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 8007002:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8007004:	4613      	mov	r3, r2
 8007006:	005b      	lsls	r3, r3, #1
 8007008:	4413      	add	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	461a      	mov	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4413      	add	r3, r2
 8007012:	2200      	movs	r2, #0
 8007014:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 8007016:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007018:	3301      	adds	r3, #1
 800701a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800701c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800701e:	887b      	ldrh	r3, [r7, #2]
 8007020:	429a      	cmp	r2, r3
 8007022:	d3cf      	bcc.n	8006fc4 <CO_CANmodule_init+0x7c>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 8007024:	2300      	movs	r3, #0
 8007026:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007028:	e00c      	b.n	8007044 <CO_CANmodule_init+0xfc>
        txArray[i].bufferFull = false;
 800702a:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800702c:	4613      	mov	r3, r2
 800702e:	005b      	lsls	r3, r3, #1
 8007030:	4413      	add	r3, r2
 8007032:	00db      	lsls	r3, r3, #3
 8007034:	461a      	mov	r2, r3
 8007036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007038:	4413      	add	r3, r2
 800703a:	2200      	movs	r2, #0
 800703c:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 800703e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007040:	3301      	adds	r3, #1
 8007042:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007044:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8007046:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800704a:	429a      	cmp	r2, r3
 800704c:	d3ed      	bcc.n	800702a <CO_CANmodule_init+0xe2>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	4798      	blx	r3
#else
    CAN_FilterTypeDef FilterConfig;
#if defined(CAN)
    FilterConfig.FilterBank = 0;
#else
    if (((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance == CAN1) {
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a1d      	ldr	r2, [pc, #116]	@ (80070d4 <CO_CANmodule_init+0x18c>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d102      	bne.n	8007068 <CO_CANmodule_init+0x120>
        FilterConfig.FilterBank = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007066:	e001      	b.n	800706c <CO_CANmodule_init+0x124>
    } else {
        FilterConfig.FilterBank = 14;
 8007068:	230e      	movs	r3, #14
 800706a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
#endif
    FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800706c:	2300      	movs	r3, #0
 800706e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8007070:	2301      	movs	r3, #1
 8007072:	633b      	str	r3, [r7, #48]	@ 0x30
    FilterConfig.FilterIdHigh = 0x0;
 8007074:	2300      	movs	r3, #0
 8007076:	617b      	str	r3, [r7, #20]
    FilterConfig.FilterIdLow = 0x0;
 8007078:	2300      	movs	r3, #0
 800707a:	61bb      	str	r3, [r7, #24]
    FilterConfig.FilterMaskIdHigh = 0x0;
 800707c:	2300      	movs	r3, #0
 800707e:	61fb      	str	r3, [r7, #28]
    FilterConfig.FilterMaskIdLow = 0x0;
 8007080:	2300      	movs	r3, #0
 8007082:	623b      	str	r3, [r7, #32]
    FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8007084:	2300      	movs	r3, #0
 8007086:	627b      	str	r3, [r7, #36]	@ 0x24

    FilterConfig.FilterActivation = ENABLE;
 8007088:	2301      	movs	r3, #1
 800708a:	637b      	str	r3, [r7, #52]	@ 0x34
    FilterConfig.SlaveStartFilterBank = 14;
 800708c:	230e      	movs	r3, #14
 800708e:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (HAL_CAN_ConfigFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, &FilterConfig) != HAL_OK) {
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f107 0214 	add.w	r2, r7, #20
 8007098:	4611      	mov	r1, r2
 800709a:	4618      	mov	r0, r3
 800709c:	f001 fd82 	bl	8008ba4 <HAL_CAN_ConfigFilter>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d002      	beq.n	80070ac <CO_CANmodule_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80070a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80070aa:	e00c      	b.n	80070c6 <CO_CANmodule_init+0x17e>
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#else
    if (HAL_CAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle, CAN_IT_RX_FIFO0_MSG_PENDING
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	2113      	movs	r1, #19
 80070b2:	4618      	mov	r0, r3
 80070b4:	f002 f908 	bl	80092c8 <HAL_CAN_ActivateNotification>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d002      	beq.n	80070c4 <CO_CANmodule_init+0x17c>
                                                                                 | CAN_IT_RX_FIFO1_MSG_PENDING
                                                                                 | CAN_IT_TX_MAILBOX_EMPTY)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80070be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80070c2:	e000      	b.n	80070c6 <CO_CANmodule_init+0x17e>
    }
#endif

    return CO_ERROR_NO;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3740      	adds	r7, #64	@ 0x40
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	2000035c 	.word	0x2000035c
 80070d4:	40006400 	.word	0x40006400

080070d8 <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d009      	beq.n	80070fa <CO_CANmodule_disable+0x22>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d005      	beq.n	80070fa <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	4618      	mov	r0, r3
 80070f6:	f001 fe77 	bl	8008de8 <HAL_CAN_Stop>
#endif
    }
}
 80070fa:	bf00      	nop
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
	...

08007104 <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	4608      	mov	r0, r1
 800710e:	4611      	mov	r1, r2
 8007110:	461a      	mov	r2, r3
 8007112:	4603      	mov	r3, r0
 8007114:	817b      	strh	r3, [r7, #10]
 8007116:	460b      	mov	r3, r1
 8007118:	813b      	strh	r3, [r7, #8]
 800711a:	4613      	mov	r3, r2
 800711c:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800711e:	2300      	movs	r3, #0
 8007120:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d03c      	beq.n	80071a2 <CO_CANrxBufferInit+0x9e>
 8007128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712a:	2b00      	cmp	r3, #0
 800712c:	d039      	beq.n	80071a2 <CO_CANrxBufferInit+0x9e>
 800712e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007130:	2b00      	cmp	r3, #0
 8007132:	d036      	beq.n	80071a2 <CO_CANrxBufferInit+0x9e>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	891b      	ldrh	r3, [r3, #8]
 8007138:	897a      	ldrh	r2, [r7, #10]
 800713a:	429a      	cmp	r2, r3
 800713c:	d231      	bcs.n	80071a2 <CO_CANrxBufferInit+0x9e>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6859      	ldr	r1, [r3, #4]
 8007142:	897a      	ldrh	r2, [r7, #10]
 8007144:	4613      	mov	r3, r2
 8007146:	005b      	lsls	r3, r3, #1
 8007148:	4413      	add	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	440b      	add	r3, r1
 800714e:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007154:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800715a:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 800715c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007160:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007164:	b21b      	sxth	r3, r3
 8007166:	6a3a      	ldr	r2, [r7, #32]
 8007168:	2a00      	cmp	r2, #0
 800716a:	d001      	beq.n	8007170 <CO_CANrxBufferInit+0x6c>
 800716c:	4a13      	ldr	r2, [pc, #76]	@ (80071bc <CO_CANrxBufferInit+0xb8>)
 800716e:	e000      	b.n	8007172 <CO_CANrxBufferInit+0x6e>
 8007170:	2200      	movs	r2, #0
 8007172:	4313      	orrs	r3, r2
 8007174:	b21b      	sxth	r3, r3
 8007176:	b29a      	uxth	r2, r3
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 800717c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007180:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007184:	b21b      	sxth	r3, r3
 8007186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800718a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800718e:	b21b      	sxth	r3, r3
 8007190:	b29a      	uxth	r2, r3
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d004      	beq.n	80071a8 <CO_CANrxBufferInit+0xa4>
            __NOP();
 800719e:	bf00      	nop
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 80071a0:	e002      	b.n	80071a8 <CO_CANrxBufferInit+0xa4>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 80071a2:	23ff      	movs	r3, #255	@ 0xff
 80071a4:	75fb      	strb	r3, [r7, #23]
 80071a6:	e000      	b.n	80071aa <CO_CANrxBufferInit+0xa6>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 80071a8:	bf00      	nop
    }

    return ret;
 80071aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	371c      	adds	r7, #28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	ffff8000 	.word	0xffff8000

080071c0 <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 80071c0:	b480      	push	{r7}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	607b      	str	r3, [r7, #4]
 80071ca:	460b      	mov	r3, r1
 80071cc:	817b      	strh	r3, [r7, #10]
 80071ce:	4613      	mov	r3, r2
 80071d0:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t* buffer = NULL;
 80071d2:	2300      	movs	r3, #0
 80071d4:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d024      	beq.n	8007226 <CO_CANtxBufferInit+0x66>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	8a1b      	ldrh	r3, [r3, #16]
 80071e0:	897a      	ldrh	r2, [r7, #10]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d21f      	bcs.n	8007226 <CO_CANtxBufferInit+0x66>
        buffer = &CANmodule->txArray[index];
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	68d9      	ldr	r1, [r3, #12]
 80071ea:	897a      	ldrh	r2, [r7, #10]
 80071ec:	4613      	mov	r3, r2
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	4413      	add	r3, r2
 80071f2:	00db      	lsls	r3, r3, #3
 80071f4:	440b      	add	r3, r1
 80071f6:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 80071f8:	893b      	ldrh	r3, [r7, #8]
 80071fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	2a00      	cmp	r2, #0
 8007202:	d002      	beq.n	800720a <CO_CANtxBufferInit+0x4a>
 8007204:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007208:	e000      	b.n	800720c <CO_CANtxBufferInit+0x4c>
 800720a:	2200      	movs	r2, #0
 800720c:	431a      	orrs	r2, r3
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007218:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2200      	movs	r2, #0
 800721e:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007224:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 8007226:	697b      	ldr	r3, [r7, #20]
}
 8007228:	4618      	mov	r0, r3
 800722a:	371c      	adds	r7, #28
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 800723e:	2300      	movs	r3, #0
 8007240:	73fb      	strb	r3, [r7, #15]
            == HAL_OK;
    }
#else
    static CAN_TxHeaderTypeDef tx_hdr;
    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_CAN_GetTxMailboxesFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	4618      	mov	r0, r3
 800724a:	f001 fee6 	bl	800901a <HAL_CAN_GetTxMailboxesFreeLevel>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d028      	beq.n	80072a6 <prv_send_can_message+0x72>
        /*
    		 * RTR flag is part of identifier value
    		 * hence it needs to be properly decoded
    		 */
        tx_hdr.ExtId = 0u;
 8007254:	4b16      	ldr	r3, [pc, #88]	@ (80072b0 <prv_send_can_message+0x7c>)
 8007256:	2200      	movs	r2, #0
 8007258:	605a      	str	r2, [r3, #4]
        tx_hdr.IDE = CAN_ID_STD;
 800725a:	4b15      	ldr	r3, [pc, #84]	@ (80072b0 <prv_send_can_message+0x7c>)
 800725c:	2200      	movs	r2, #0
 800725e:	609a      	str	r2, [r3, #8]
        tx_hdr.DLC = buffer->DLC;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	791b      	ldrb	r3, [r3, #4]
 8007264:	461a      	mov	r2, r3
 8007266:	4b12      	ldr	r3, [pc, #72]	@ (80072b0 <prv_send_can_message+0x7c>)
 8007268:	611a      	str	r2, [r3, #16]
        tx_hdr.StdId = buffer->ident & CANID_MASK;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007272:	4a0f      	ldr	r2, [pc, #60]	@ (80072b0 <prv_send_can_message+0x7c>)
 8007274:	6013      	str	r3, [r2, #0]
        tx_hdr.RTR = (buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	0b9b      	lsrs	r3, r3, #14
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	4a0b      	ldr	r2, [pc, #44]	@ (80072b0 <prv_send_can_message+0x7c>)
 8007282:	60d3      	str	r3, [r2, #12]

        uint32_t TxMailboxNum; // Transmission MailBox number

        /* Now add message to FIFO. Should not fail */
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6898      	ldr	r0, [r3, #8]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	1d5a      	adds	r2, r3, #5
 800728e:	f107 0308 	add.w	r3, r7, #8
 8007292:	4907      	ldr	r1, [pc, #28]	@ (80072b0 <prv_send_can_message+0x7c>)
 8007294:	f001 fdf1 	bl	8008e7a <HAL_CAN_AddTxMessage>
 8007298:	4603      	mov	r3, r0
                                       &TxMailboxNum)
                  == HAL_OK;
 800729a:	2b00      	cmp	r3, #0
 800729c:	bf0c      	ite	eq
 800729e:	2301      	moveq	r3, #1
 80072a0:	2300      	movne	r3, #0
 80072a2:	b2db      	uxtb	r3, r3
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 80072a4:	73fb      	strb	r3, [r7, #15]
    }
#endif
    return success;
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	20000360 	.word	0x20000360

080072b4 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 80072be:	2300      	movs	r3, #0
 80072c0:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00c      	beq.n	80072e4 <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d106      	bne.n	80072e0 <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	8a5b      	ldrh	r3, [r3, #18]
 80072d6:	f043 0308 	orr.w	r3, r3, #8
 80072da:	b29a      	uxth	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 80072e0:	23f7      	movs	r3, #247	@ 0xf7
 80072e2:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80072e4:	f3ef 8310 	mrs	r3, PRIMASK
 80072e8:	613b      	str	r3, [r7, #16]
  return(result);
 80072ea:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 80072f0:	b672      	cpsid	i
}
 80072f2:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7ff ff9c 	bl	8007234 <prv_send_can_message>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d004      	beq.n	800730c <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	695a      	ldr	r2, [r3, #20]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	61da      	str	r2, [r3, #28]
 800730a:	e009      	b.n	8007320 <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	2201      	movs	r2, #1
 8007310:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007316:	b29b      	uxth	r3, r3
 8007318:	3301      	adds	r3, #1
 800731a:	b29a      	uxth	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007324:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f383 8810 	msr	PRIMASK, r3
}
 800732c:	bf00      	nop

    return err;
 800732e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3718      	adds	r7, #24
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <CO_CANclearPendingSyncPDOs>:

/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 800733a:	b480      	push	{r7}
 800733c:	b087      	sub	sp, #28
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 8007342:	2300      	movs	r3, #0
 8007344:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007346:	f3ef 8310 	mrs	r3, PRIMASK
 800734a:	60fb      	str	r3, [r7, #12]
  return(result);
 800734c:	68fa      	ldr	r2, [r7, #12]

    CO_LOCK_CAN_SEND(CANmodule);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8007352:	b672      	cpsid	i
}
 8007354:	bf00      	nop
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d004      	beq.n	8007368 <CO_CANclearPendingSyncPDOs+0x2e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 8007364:	2301      	movs	r3, #1
 8007366:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if (CANmodule->CANtxCount > 0) {
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800736c:	b29b      	uxth	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d032      	beq.n	80073d8 <CO_CANclearPendingSyncPDOs+0x9e>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	8a1b      	ldrh	r3, [r3, #16]
 8007376:	827b      	strh	r3, [r7, #18]
 8007378:	e02b      	b.n	80073d2 <CO_CANclearPendingSyncPDOs+0x98>
            if (CANmodule->txArray[i].bufferFull) {
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68d9      	ldr	r1, [r3, #12]
 800737e:	8a7a      	ldrh	r2, [r7, #18]
 8007380:	4613      	mov	r3, r2
 8007382:	005b      	lsls	r3, r3, #1
 8007384:	4413      	add	r3, r2
 8007386:	00db      	lsls	r3, r3, #3
 8007388:	440b      	add	r3, r1
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d01d      	beq.n	80073cc <CO_CANclearPendingSyncPDOs+0x92>
                if (CANmodule->txArray[i].syncFlag) {
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68d9      	ldr	r1, [r3, #12]
 8007394:	8a7a      	ldrh	r2, [r7, #18]
 8007396:	4613      	mov	r3, r2
 8007398:	005b      	lsls	r3, r3, #1
 800739a:	4413      	add	r3, r2
 800739c:	00db      	lsls	r3, r3, #3
 800739e:	440b      	add	r3, r1
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d012      	beq.n	80073cc <CO_CANclearPendingSyncPDOs+0x92>
                    CANmodule->txArray[i].bufferFull = false;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68d9      	ldr	r1, [r3, #12]
 80073aa:	8a7a      	ldrh	r2, [r7, #18]
 80073ac:	4613      	mov	r3, r2
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	4413      	add	r3, r2
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	440b      	add	r3, r1
 80073b6:	2200      	movs	r2, #0
 80073b8:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80073be:	b29b      	uxth	r3, r3
 80073c0:	3b01      	subs	r3, #1
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	849a      	strh	r2, [r3, #36]	@ 0x24
                    tpdoDeleted = 2U;
 80073c8:	2302      	movs	r3, #2
 80073ca:	617b      	str	r3, [r7, #20]
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 80073cc:	8a7b      	ldrh	r3, [r7, #18]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	827b      	strh	r3, [r7, #18]
 80073d2:	8a7b      	ldrh	r3, [r7, #18]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1d0      	bne.n	800737a <CO_CANclearPendingSyncPDOs+0x40>
                }
            }
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073dc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	f383 8810 	msr	PRIMASK, r3
}
 80073e4:	bf00      	nop
    if (tpdoDeleted) {
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d006      	beq.n	80073fa <CO_CANclearPendingSyncPDOs+0xc0>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	8a5b      	ldrh	r3, [r3, #18]
 80073f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	825a      	strh	r2, [r3, #18]
    }
}
 80073fa:	bf00      	nop
 80073fc:	371c      	adds	r7, #28
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;

void
CO_CANmodule_process(CO_CANmodule_t* CANmodule) {
 8007406:	b480      	push	{r7}
 8007408:	b085      	sub	sp, #20
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
    uint32_t err = 0;
 800740e:	2300      	movs	r3, #0
 8007410:	60bb      	str	r3, [r7, #8]

        CANmodule->CANerrorStatus = status;
    }
#else

    err = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	f003 0307 	and.w	r3, r3, #7
 8007420:	60bb      	str	r3, [r7, #8]
          & (CAN_ESR_BOFF | CAN_ESR_EPVF | CAN_ESR_EWGF);

    //    uint32_t esrVal = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR; Debug purpose
    if (CANmodule->errOld != err) {
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	429a      	cmp	r2, r3
 800742a:	d02e      	beq.n	800748a <CO_CANmodule_process+0x84>

        uint16_t status = CANmodule->CANerrorStatus;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	8a5b      	ldrh	r3, [r3, #18]
 8007430:	81fb      	strh	r3, [r7, #14]

        CANmodule->errOld = err;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	629a      	str	r2, [r3, #40]	@ 0x28

        if (err & CAN_ESR_BOFF) {
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	f003 0304 	and.w	r3, r3, #4
 800743e:	2b00      	cmp	r3, #0
 8007440:	d004      	beq.n	800744c <CO_CANmodule_process+0x46>
            status |= CO_CAN_ERRTX_BUS_OFF;
 8007442:	89fb      	ldrh	r3, [r7, #14]
 8007444:	f043 0304 	orr.w	r3, r3, #4
 8007448:	81fb      	strh	r3, [r7, #14]
 800744a:	e01b      	b.n	8007484 <CO_CANmodule_process+0x7e>
            // In this driver, we assume that auto bus recovery is activated ! so this error will eventually handled automatically.

        } else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF
 800744c:	89fb      	ldrh	r3, [r7, #14]
 800744e:	f423 7341 	bic.w	r3, r3, #772	@ 0x304
 8007452:	f023 0303 	bic.w	r3, r3, #3
 8007456:	81fb      	strh	r3, [r7, #14]
                      ^ (CO_CAN_ERRTX_BUS_OFF | CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_WARNING
                         | CO_CAN_ERRTX_PASSIVE);

            if (err & CAN_ESR_EWGF) {
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	d005      	beq.n	800746e <CO_CANmodule_process+0x68>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 8007462:	89fb      	ldrh	r3, [r7, #14]
 8007464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007468:	f043 0301 	orr.w	r3, r3, #1
 800746c:	81fb      	strh	r3, [r7, #14]
            }

            if (err & CAN_ESR_EPVF) {
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	f003 0302 	and.w	r3, r3, #2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <CO_CANmodule_process+0x7e>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 8007478:	89fb      	ldrh	r3, [r7, #14]
 800747a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800747e:	f043 0302 	orr.w	r3, r3, #2
 8007482:	81fb      	strh	r3, [r7, #14]
            }
        }

        CANmodule->CANerrorStatus = status;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	89fa      	ldrh	r2, [r7, #14]
 8007488:	825a      	strh	r2, [r3, #18]
    }

#endif
}
 800748a:	bf00      	nop
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
	...

08007498 <prv_read_can_received_msg>:
 */

static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)

{
 8007498:	b580      	push	{r7, lr}
 800749a:	b08c      	sub	sp, #48	@ 0x30
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 80074a4:	2300      	movs	r3, #0
 80074a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t index;            /* index of received message */
    uint32_t rcvMsgIdent;      /* identifier of the received message */
    uint8_t messageFound = 0;
 80074a8:	2300      	movs	r3, #0
 80074aa:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29


    static CAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_CAN_GetRxMessage(hcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 80074ae:	f107 0314 	add.w	r3, r7, #20
 80074b2:	3305      	adds	r3, #5
 80074b4:	4a2c      	ldr	r2, [pc, #176]	@ (8007568 <prv_read_can_received_msg+0xd0>)
 80074b6:	68b9      	ldr	r1, [r7, #8]
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f001 fde3 	bl	8009084 <HAL_CAN_GetRxMessage>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d14c      	bne.n	800755e <prv_read_can_received_msg+0xc6>
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.StdId | (rx_hdr.RTR == CAN_RTR_REMOTE ? FLAG_RTR : 0x00);
 80074c4:	4b28      	ldr	r3, [pc, #160]	@ (8007568 <prv_read_can_received_msg+0xd0>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a27      	ldr	r2, [pc, #156]	@ (8007568 <prv_read_can_received_msg+0xd0>)
 80074ca:	68d2      	ldr	r2, [r2, #12]
 80074cc:	2a02      	cmp	r2, #2
 80074ce:	d102      	bne.n	80074d6 <prv_read_can_received_msg+0x3e>
 80074d0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80074d4:	e000      	b.n	80074d8 <prv_read_can_received_msg+0x40>
 80074d6:	2200      	movs	r2, #0
 80074d8:	4313      	orrs	r3, r2
 80074da:	617b      	str	r3, [r7, #20]
    rcvMsg.dlc = rx_hdr.DLC;
 80074dc:	4b22      	ldr	r3, [pc, #136]	@ (8007568 <prv_read_can_received_msg+0xd0>)
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	763b      	strb	r3, [r7, #24]
    rcvMsgIdent = rcvMsg.ident;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	627b      	str	r3, [r7, #36]	@ 0x24

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 80074e8:	4b20      	ldr	r3, [pc, #128]	@ (800756c <prv_read_can_received_msg+0xd4>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <prv_read_can_received_msg+0x5e>
        __BKPT(0);
 80074f2:	be00      	bkpt	0x0000
 80074f4:	e01f      	b.n	8007536 <prv_read_can_received_msg+0x9e>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 80074f6:	4b1d      	ldr	r3, [pc, #116]	@ (800756c <prv_read_can_received_msg+0xd4>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 80074fe:	4b1b      	ldr	r3, [pc, #108]	@ (800756c <prv_read_can_received_msg+0xd4>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	891b      	ldrh	r3, [r3, #8]
 8007504:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007506:	e013      	b.n	8007530 <prv_read_can_received_msg+0x98>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 8007508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	461a      	mov	r2, r3
 800750e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007510:	4053      	eors	r3, r2
 8007512:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007514:	8852      	ldrh	r2, [r2, #2]
 8007516:	4013      	ands	r3, r2
 8007518:	2b00      	cmp	r3, #0
 800751a:	d103      	bne.n	8007524 <prv_read_can_received_msg+0x8c>
                messageFound = 1;
 800751c:	2301      	movs	r3, #1
 800751e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                break;
 8007522:	e008      	b.n	8007536 <prv_read_can_received_msg+0x9e>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8007524:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007526:	3b01      	subs	r3, #1
 8007528:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800752a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800752c:	330c      	adds	r3, #12
 800752e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007530:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1e8      	bne.n	8007508 <prv_read_can_received_msg+0x70>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 8007536:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800753a:	2b00      	cmp	r3, #0
 800753c:	d010      	beq.n	8007560 <prv_read_can_received_msg+0xc8>
 800753e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00d      	beq.n	8007560 <prv_read_can_received_msg+0xc8>
 8007544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d009      	beq.n	8007560 <prv_read_can_received_msg+0xc8>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 800754c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007552:	6852      	ldr	r2, [r2, #4]
 8007554:	f107 0114 	add.w	r1, r7, #20
 8007558:	4610      	mov	r0, r2
 800755a:	4798      	blx	r3
 800755c:	e000      	b.n	8007560 <prv_read_can_received_msg+0xc8>
        return;
 800755e:	bf00      	nop
    }
}
 8007560:	3730      	adds	r7, #48	@ 0x30
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	20000378 	.word	0x20000378
 800756c:	2000035c 	.word	0x2000035c

08007570 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \brief           Rx FIFO 0 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO0, 0);
 8007578:	2200      	movs	r2, #0
 800757a:	2100      	movs	r1, #0
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7ff ff8b 	bl	8007498 <prv_read_can_received_msg>

}
 8007582:	bf00      	nop
 8007584:	3708      	adds	r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <HAL_CAN_RxFifo1MsgPendingCallback>:
 * \brief           Rx FIFO 1 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 800758a:	b580      	push	{r7, lr}
 800758c:	b082      	sub	sp, #8
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO1, 0);
 8007592:	2200      	movs	r2, #0
 8007594:	2101      	movs	r1, #1
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7ff ff7e 	bl	8007498 <prv_read_can_received_msg>
}
 800759c:	bf00      	nop
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <CO_CANinterrupt_TX>:
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 * \param[in]       MailboxNumber: the mailbox number that has been transmitted
 */
void
CO_CANinterrupt_TX(CO_CANmodule_t* CANmodule, uint32_t MailboxNumber) {
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]

    CANmodule->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	621a      	str	r2, [r3, #32]
    CANmodule->bufferInhibitFlag = false;            /* Clear flag from previous message */
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	61da      	str	r2, [r3, #28]
    if (CANmodule->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80075be:	b29b      	uxth	r3, r3
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d03d      	beq.n	8007640 <CO_CANinterrupt_TX+0x9c>
        CO_CANtx_t* buffer = &CANmodule->txArray[0]; /* Start with first buffer handle */
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80075ca:	f3ef 8310 	mrs	r3, PRIMASK
 80075ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80075d0:	68fa      	ldr	r2, [r7, #12]
		 * This function is always called from interrupt,
		 * however to make sure no preemption can happen, interrupts are anyway locked
		 * (unless you can guarantee no higher priority interrupt will try to access to CAN instance and send data,
		 *  then no need to lock interrupts..)
		 */
        CO_LOCK_CAN_SEND(CANmodule);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 80075d6:	b672      	cpsid	i
}
 80075d8:	bf00      	nop
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	8a1b      	ldrh	r3, [r3, #16]
 80075de:	827b      	strh	r3, [r7, #18]
 80075e0:	e01e      	b.n	8007620 <CO_CANinterrupt_TX+0x7c>
            /* Try to send message */
            if (buffer->bufferFull) {
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d014      	beq.n	8007614 <CO_CANinterrupt_TX+0x70>
                if (prv_send_can_message(CANmodule, buffer)) {
 80075ea:	6979      	ldr	r1, [r7, #20]
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f7ff fe21 	bl	8007234 <prv_send_can_message>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00d      	beq.n	8007614 <CO_CANinterrupt_TX+0x70>
                    buffer->bufferFull = false;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	2200      	movs	r2, #0
 80075fc:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007602:	b29b      	uxth	r3, r3
 8007604:	3b01      	subs	r3, #1
 8007606:	b29a      	uxth	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	849a      	strh	r2, [r3, #36]	@ 0x24
                    CANmodule->bufferInhibitFlag = buffer->syncFlag;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	695a      	ldr	r2, [r3, #20]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	61da      	str	r2, [r3, #28]
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 8007614:	8a7b      	ldrh	r3, [r7, #18]
 8007616:	3b01      	subs	r3, #1
 8007618:	827b      	strh	r3, [r7, #18]
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	3318      	adds	r3, #24
 800761e:	617b      	str	r3, [r7, #20]
 8007620:	8a7b      	ldrh	r3, [r7, #18]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1dd      	bne.n	80075e2 <CO_CANinterrupt_TX+0x3e>
                }
            }
        }
        /* Clear counter if no more messages */
        if (i == 0U) {
 8007626:	8a7b      	ldrh	r3, [r7, #18]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d102      	bne.n	8007632 <CO_CANinterrupt_TX+0x8e>
            CANmodule->CANtxCount = 0U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	849a      	strh	r2, [r3, #36]	@ 0x24
        }
        CO_UNLOCK_CAN_SEND(CANmodule);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007636:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f383 8810 	msr	PRIMASK, r3
}
 800763e:	bf00      	nop
    }
}
 8007640:	bf00      	nop
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <HAL_CAN_TxMailbox0CompleteCallback>:

void
HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan) {
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8007650:	4b04      	ldr	r3, [pc, #16]	@ (8007664 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2101      	movs	r1, #1
 8007656:	4618      	mov	r0, r3
 8007658:	f7ff ffa4 	bl	80075a4 <CO_CANinterrupt_TX>
}
 800765c:	bf00      	nop
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	2000035c 	.word	0x2000035c

08007668 <HAL_CAN_TxMailbox1CompleteCallback>:

void
HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan) {
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8007670:	4b04      	ldr	r3, [pc, #16]	@ (8007684 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2101      	movs	r1, #1
 8007676:	4618      	mov	r0, r3
 8007678:	f7ff ff94 	bl	80075a4 <CO_CANinterrupt_TX>
}
 800767c:	bf00      	nop
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	2000035c 	.word	0x2000035c

08007688 <HAL_CAN_TxMailbox2CompleteCallback>:

void
HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan) {
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8007690:	4b04      	ldr	r3, [pc, #16]	@ (80076a4 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2101      	movs	r1, #1
 8007696:	4618      	mov	r0, r3
 8007698:	f7ff ff84 	bl	80075a4 <CO_CANinterrupt_TX>
}
 800769c:	bf00      	nop
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	2000035c 	.word	0x2000035c

080076a8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
    if (htim == canopenNodeSTM32->timerHandle) {
 80076b0:	4b05      	ldr	r3, [pc, #20]	@ (80076c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d101      	bne.n	80076c0 <HAL_TIM_PeriodElapsedCallback+0x18>
        canopen_app_interrupt();
 80076bc:	f7ff fbda 	bl	8006e74 <canopen_app_interrupt>
    }
}
 80076c0:	bf00      	nop
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	20000344 	.word	0x20000344

080076cc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a14      	ldr	r2, [pc, #80]	@ (800772c <HAL_ADC_ConvCpltCallback+0x60>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d11e      	bne.n	800771c <HAL_ADC_ConvCpltCallback+0x50>
	{
		test = HAL_ADC_GetValue(hadc);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 ff0a 	bl	80084f8 <HAL_ADC_GetValue>
 80076e4:	ee07 0a90 	vmov	s15, r0
 80076e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ec:	4b10      	ldr	r3, [pc, #64]	@ (8007730 <HAL_ADC_ConvCpltCallback+0x64>)
 80076ee:	edc3 7a00 	vstr	s15, [r3]
		adcValue = (100 *HAL_ADC_GetValue(hadc)) / 980;
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 ff00 	bl	80084f8 <HAL_ADC_GetValue>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2264      	movs	r2, #100	@ 0x64
 80076fc:	fb02 f303 	mul.w	r3, r2, r3
 8007700:	089b      	lsrs	r3, r3, #2
 8007702:	4a0c      	ldr	r2, [pc, #48]	@ (8007734 <HAL_ADC_ConvCpltCallback+0x68>)
 8007704:	fba2 2303 	umull	r2, r3, r2, r3
 8007708:	099b      	lsrs	r3, r3, #6
 800770a:	4a0b      	ldr	r2, [pc, #44]	@ (8007738 <HAL_ADC_ConvCpltCallback+0x6c>)
 800770c:	6013      	str	r3, [r2, #0]
		if (adcValue > 100)
 800770e:	4b0a      	ldr	r3, [pc, #40]	@ (8007738 <HAL_ADC_ConvCpltCallback+0x6c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b64      	cmp	r3, #100	@ 0x64
 8007714:	d902      	bls.n	800771c <HAL_ADC_ConvCpltCallback+0x50>
		{
			adcValue = 100;
 8007716:	4b08      	ldr	r3, [pc, #32]	@ (8007738 <HAL_ADC_ConvCpltCallback+0x6c>)
 8007718:	2264      	movs	r2, #100	@ 0x64
 800771a:	601a      	str	r2, [r3, #0]
		}
	}
	HAL_ADC_Start_IT(&hadc1);
 800771c:	4807      	ldr	r0, [pc, #28]	@ (800773c <HAL_ADC_ConvCpltCallback+0x70>)
 800771e:	f000 fcfd 	bl	800811c <HAL_ADC_Start_IT>
}
 8007722:	bf00      	nop
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	40012000 	.word	0x40012000
 8007730:	20000450 	.word	0x20000450
 8007734:	42df9bb1 	.word	0x42df9bb1
 8007738:	2000044c 	.word	0x2000044c
 800773c:	20000394 	.word	0x20000394

08007740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007746:	f000 fc33 	bl	8007fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800774a:	f000 f849 	bl	80077e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800774e:	f000 f95f 	bl	8007a10 <MX_GPIO_Init>
  MX_ADC1_Init();
 8007752:	f000 f8af 	bl	80078b4 <MX_ADC1_Init>
  MX_CAN1_Init();
 8007756:	f000 f901 	bl	800795c <MX_CAN1_Init>
  MX_TIM14_Init();
 800775a:	f000 f935 	bl	80079c8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 800775e:	4819      	ldr	r0, [pc, #100]	@ (80077c4 <main+0x84>)
 8007760:	f000 fcdc 	bl	800811c <HAL_ADC_Start_IT>
  CANopenNodeSTM32 canOpenNodeSTM32;
  canOpenNodeSTM32.CANHandle = &hcan1;
 8007764:	4b18      	ldr	r3, [pc, #96]	@ (80077c8 <main+0x88>)
 8007766:	60bb      	str	r3, [r7, #8]
  canOpenNodeSTM32.HWInitFunction = MX_CAN1_Init;
 8007768:	4b18      	ldr	r3, [pc, #96]	@ (80077cc <main+0x8c>)
 800776a:	60fb      	str	r3, [r7, #12]
  canOpenNodeSTM32.timerHandle = &htim14;
 800776c:	4b18      	ldr	r3, [pc, #96]	@ (80077d0 <main+0x90>)
 800776e:	607b      	str	r3, [r7, #4]
  canOpenNodeSTM32.desiredNodeID = CANOPEN_ID;
 8007770:	2303      	movs	r3, #3
 8007772:	703b      	strb	r3, [r7, #0]
  canOpenNodeSTM32.baudrate = 100;
 8007774:	2364      	movs	r3, #100	@ 0x64
 8007776:	807b      	strh	r3, [r7, #2]
  canopen_app_init(&canOpenNodeSTM32);
 8007778:	463b      	mov	r3, r7
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff f9b0 	bl	8006ae0 <canopen_app_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, !canOpenNodeSTM32.outStatusLEDGreen);
 8007780:	7c3b      	ldrb	r3, [r7, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	bf0c      	ite	eq
 8007786:	2301      	moveq	r3, #1
 8007788:	2300      	movne	r3, #0
 800778a:	b2db      	uxtb	r3, r3
 800778c:	461a      	mov	r2, r3
 800778e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007792:	4810      	ldr	r0, [pc, #64]	@ (80077d4 <main+0x94>)
 8007794:	f002 fa9e 	bl	8009cd4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, !canOpenNodeSTM32.outStatusLEDRed);
 8007798:	7c7b      	ldrb	r3, [r7, #17]
 800779a:	2b00      	cmp	r3, #0
 800779c:	bf0c      	ite	eq
 800779e:	2301      	moveq	r3, #1
 80077a0:	2300      	movne	r3, #0
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	461a      	mov	r2, r3
 80077a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80077aa:	480a      	ldr	r0, [pc, #40]	@ (80077d4 <main+0x94>)
 80077ac:	f002 fa92 	bl	8009cd4 <HAL_GPIO_WritePin>
	  canopen_app_process();
 80077b0:	f7ff faf4 	bl	8006d9c <canopen_app_process>
	  OD_PERSIST_COMM.x6000_POT_VALUE = adcValue;
 80077b4:	4b08      	ldr	r3, [pc, #32]	@ (80077d8 <main+0x98>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a08      	ldr	r2, [pc, #32]	@ (80077dc <main+0x9c>)
 80077ba:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, !canOpenNodeSTM32.outStatusLEDGreen);
 80077be:	bf00      	nop
 80077c0:	e7de      	b.n	8007780 <main+0x40>
 80077c2:	bf00      	nop
 80077c4:	20000394 	.word	0x20000394
 80077c8:	200003dc 	.word	0x200003dc
 80077cc:	0800795d 	.word	0x0800795d
 80077d0:	20000404 	.word	0x20000404
 80077d4:	40021800 	.word	0x40021800
 80077d8:	2000044c 	.word	0x2000044c
 80077dc:	20000000 	.word	0x20000000

080077e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b094      	sub	sp, #80	@ 0x50
 80077e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80077e6:	f107 0320 	add.w	r3, r7, #32
 80077ea:	2230      	movs	r2, #48	@ 0x30
 80077ec:	2100      	movs	r1, #0
 80077ee:	4618      	mov	r0, r3
 80077f0:	f003 fd66 	bl	800b2c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80077f4:	f107 030c 	add.w	r3, r7, #12
 80077f8:	2200      	movs	r2, #0
 80077fa:	601a      	str	r2, [r3, #0]
 80077fc:	605a      	str	r2, [r3, #4]
 80077fe:	609a      	str	r2, [r3, #8]
 8007800:	60da      	str	r2, [r3, #12]
 8007802:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007804:	2300      	movs	r3, #0
 8007806:	60bb      	str	r3, [r7, #8]
 8007808:	4b28      	ldr	r3, [pc, #160]	@ (80078ac <SystemClock_Config+0xcc>)
 800780a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800780c:	4a27      	ldr	r2, [pc, #156]	@ (80078ac <SystemClock_Config+0xcc>)
 800780e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007812:	6413      	str	r3, [r2, #64]	@ 0x40
 8007814:	4b25      	ldr	r3, [pc, #148]	@ (80078ac <SystemClock_Config+0xcc>)
 8007816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800781c:	60bb      	str	r3, [r7, #8]
 800781e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007820:	2300      	movs	r3, #0
 8007822:	607b      	str	r3, [r7, #4]
 8007824:	4b22      	ldr	r3, [pc, #136]	@ (80078b0 <SystemClock_Config+0xd0>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a21      	ldr	r2, [pc, #132]	@ (80078b0 <SystemClock_Config+0xd0>)
 800782a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800782e:	6013      	str	r3, [r2, #0]
 8007830:	4b1f      	ldr	r3, [pc, #124]	@ (80078b0 <SystemClock_Config+0xd0>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007838:	607b      	str	r3, [r7, #4]
 800783a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800783c:	2301      	movs	r3, #1
 800783e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007840:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007844:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007846:	2302      	movs	r3, #2
 8007848:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800784a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800784e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007850:	2304      	movs	r3, #4
 8007852:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007854:	23a8      	movs	r3, #168	@ 0xa8
 8007856:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007858:	2302      	movs	r3, #2
 800785a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800785c:	2307      	movs	r3, #7
 800785e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007860:	f107 0320 	add.w	r3, r7, #32
 8007864:	4618      	mov	r0, r3
 8007866:	f002 fa4f 	bl	8009d08 <HAL_RCC_OscConfig>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007870:	f000 f963 	bl	8007b3a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007874:	230f      	movs	r3, #15
 8007876:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007878:	2302      	movs	r3, #2
 800787a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800787c:	2300      	movs	r3, #0
 800787e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007880:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8007884:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007886:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800788a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800788c:	f107 030c 	add.w	r3, r7, #12
 8007890:	2105      	movs	r1, #5
 8007892:	4618      	mov	r0, r3
 8007894:	f002 fcb0 	bl	800a1f8 <HAL_RCC_ClockConfig>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800789e:	f000 f94c 	bl	8007b3a <Error_Handler>
  }
}
 80078a2:	bf00      	nop
 80078a4:	3750      	adds	r7, #80	@ 0x50
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	40023800 	.word	0x40023800
 80078b0:	40007000 	.word	0x40007000

080078b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80078ba:	463b      	mov	r3, r7
 80078bc:	2200      	movs	r2, #0
 80078be:	601a      	str	r2, [r3, #0]
 80078c0:	605a      	str	r2, [r3, #4]
 80078c2:	609a      	str	r2, [r3, #8]
 80078c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80078c6:	4b22      	ldr	r3, [pc, #136]	@ (8007950 <MX_ADC1_Init+0x9c>)
 80078c8:	4a22      	ldr	r2, [pc, #136]	@ (8007954 <MX_ADC1_Init+0xa0>)
 80078ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80078cc:	4b20      	ldr	r3, [pc, #128]	@ (8007950 <MX_ADC1_Init+0x9c>)
 80078ce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80078d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80078d4:	4b1e      	ldr	r3, [pc, #120]	@ (8007950 <MX_ADC1_Init+0x9c>)
 80078d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80078da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80078dc:	4b1c      	ldr	r3, [pc, #112]	@ (8007950 <MX_ADC1_Init+0x9c>)
 80078de:	2200      	movs	r2, #0
 80078e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80078e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007950 <MX_ADC1_Init+0x9c>)
 80078e4:	2201      	movs	r2, #1
 80078e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80078e8:	4b19      	ldr	r3, [pc, #100]	@ (8007950 <MX_ADC1_Init+0x9c>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80078f0:	4b17      	ldr	r3, [pc, #92]	@ (8007950 <MX_ADC1_Init+0x9c>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80078f6:	4b16      	ldr	r3, [pc, #88]	@ (8007950 <MX_ADC1_Init+0x9c>)
 80078f8:	4a17      	ldr	r2, [pc, #92]	@ (8007958 <MX_ADC1_Init+0xa4>)
 80078fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80078fc:	4b14      	ldr	r3, [pc, #80]	@ (8007950 <MX_ADC1_Init+0x9c>)
 80078fe:	2200      	movs	r2, #0
 8007900:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8007902:	4b13      	ldr	r3, [pc, #76]	@ (8007950 <MX_ADC1_Init+0x9c>)
 8007904:	2201      	movs	r2, #1
 8007906:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007908:	4b11      	ldr	r3, [pc, #68]	@ (8007950 <MX_ADC1_Init+0x9c>)
 800790a:	2200      	movs	r2, #0
 800790c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007910:	4b0f      	ldr	r3, [pc, #60]	@ (8007950 <MX_ADC1_Init+0x9c>)
 8007912:	2201      	movs	r2, #1
 8007914:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007916:	480e      	ldr	r0, [pc, #56]	@ (8007950 <MX_ADC1_Init+0x9c>)
 8007918:	f000 fbbc 	bl	8008094 <HAL_ADC_Init>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8007922:	f000 f90a 	bl	8007b3a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8007926:	2301      	movs	r3, #1
 8007928:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800792a:	2301      	movs	r3, #1
 800792c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800792e:	2307      	movs	r3, #7
 8007930:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007932:	463b      	mov	r3, r7
 8007934:	4619      	mov	r1, r3
 8007936:	4806      	ldr	r0, [pc, #24]	@ (8007950 <MX_ADC1_Init+0x9c>)
 8007938:	f000 fe00 	bl	800853c <HAL_ADC_ConfigChannel>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8007942:	f000 f8fa 	bl	8007b3a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007946:	bf00      	nop
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	20000394 	.word	0x20000394
 8007954:	40012000 	.word	0x40012000
 8007958:	0f000001 	.word	0x0f000001

0800795c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8007960:	4b17      	ldr	r3, [pc, #92]	@ (80079c0 <MX_CAN1_Init+0x64>)
 8007962:	4a18      	ldr	r2, [pc, #96]	@ (80079c4 <MX_CAN1_Init+0x68>)
 8007964:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8007966:	4b16      	ldr	r3, [pc, #88]	@ (80079c0 <MX_CAN1_Init+0x64>)
 8007968:	2215      	movs	r2, #21
 800796a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800796c:	4b14      	ldr	r3, [pc, #80]	@ (80079c0 <MX_CAN1_Init+0x64>)
 800796e:	2200      	movs	r2, #0
 8007970:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007972:	4b13      	ldr	r3, [pc, #76]	@ (80079c0 <MX_CAN1_Init+0x64>)
 8007974:	2200      	movs	r2, #0
 8007976:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 8007978:	4b11      	ldr	r3, [pc, #68]	@ (80079c0 <MX_CAN1_Init+0x64>)
 800797a:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 800797e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8007980:	4b0f      	ldr	r3, [pc, #60]	@ (80079c0 <MX_CAN1_Init+0x64>)
 8007982:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007986:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8007988:	4b0d      	ldr	r3, [pc, #52]	@ (80079c0 <MX_CAN1_Init+0x64>)
 800798a:	2200      	movs	r2, #0
 800798c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800798e:	4b0c      	ldr	r3, [pc, #48]	@ (80079c0 <MX_CAN1_Init+0x64>)
 8007990:	2200      	movs	r2, #0
 8007992:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8007994:	4b0a      	ldr	r3, [pc, #40]	@ (80079c0 <MX_CAN1_Init+0x64>)
 8007996:	2200      	movs	r2, #0
 8007998:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800799a:	4b09      	ldr	r3, [pc, #36]	@ (80079c0 <MX_CAN1_Init+0x64>)
 800799c:	2200      	movs	r2, #0
 800799e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80079a0:	4b07      	ldr	r3, [pc, #28]	@ (80079c0 <MX_CAN1_Init+0x64>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80079a6:	4b06      	ldr	r3, [pc, #24]	@ (80079c0 <MX_CAN1_Init+0x64>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80079ac:	4804      	ldr	r0, [pc, #16]	@ (80079c0 <MX_CAN1_Init+0x64>)
 80079ae:	f000 fffd 	bl	80089ac <HAL_CAN_Init>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80079b8:	f000 f8bf 	bl	8007b3a <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80079bc:	bf00      	nop
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	200003dc 	.word	0x200003dc
 80079c4:	40006400 	.word	0x40006400

080079c8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80079cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007a08 <MX_TIM14_Init+0x40>)
 80079ce:	4a0f      	ldr	r2, [pc, #60]	@ (8007a0c <MX_TIM14_Init+0x44>)
 80079d0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 83;
 80079d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007a08 <MX_TIM14_Init+0x40>)
 80079d4:	2253      	movs	r2, #83	@ 0x53
 80079d6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80079d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007a08 <MX_TIM14_Init+0x40>)
 80079da:	2200      	movs	r2, #0
 80079dc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 80079de:	4b0a      	ldr	r3, [pc, #40]	@ (8007a08 <MX_TIM14_Init+0x40>)
 80079e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80079e4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80079e6:	4b08      	ldr	r3, [pc, #32]	@ (8007a08 <MX_TIM14_Init+0x40>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80079ec:	4b06      	ldr	r3, [pc, #24]	@ (8007a08 <MX_TIM14_Init+0x40>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80079f2:	4805      	ldr	r0, [pc, #20]	@ (8007a08 <MX_TIM14_Init+0x40>)
 80079f4:	f002 fdec 	bl	800a5d0 <HAL_TIM_Base_Init>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80079fe:	f000 f89c 	bl	8007b3a <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8007a02:	bf00      	nop
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	20000404 	.word	0x20000404
 8007a0c:	40002000 	.word	0x40002000

08007a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a16:	f107 030c 	add.w	r3, r7, #12
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	601a      	str	r2, [r3, #0]
 8007a1e:	605a      	str	r2, [r3, #4]
 8007a20:	609a      	str	r2, [r3, #8]
 8007a22:	60da      	str	r2, [r3, #12]
 8007a24:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007a26:	2300      	movs	r3, #0
 8007a28:	60bb      	str	r3, [r7, #8]
 8007a2a:	4b20      	ldr	r3, [pc, #128]	@ (8007aac <MX_GPIO_Init+0x9c>)
 8007a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8007aac <MX_GPIO_Init+0x9c>)
 8007a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a36:	4b1d      	ldr	r3, [pc, #116]	@ (8007aac <MX_GPIO_Init+0x9c>)
 8007a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a3e:	60bb      	str	r3, [r7, #8]
 8007a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a42:	2300      	movs	r3, #0
 8007a44:	607b      	str	r3, [r7, #4]
 8007a46:	4b19      	ldr	r3, [pc, #100]	@ (8007aac <MX_GPIO_Init+0x9c>)
 8007a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a4a:	4a18      	ldr	r2, [pc, #96]	@ (8007aac <MX_GPIO_Init+0x9c>)
 8007a4c:	f043 0301 	orr.w	r3, r3, #1
 8007a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a52:	4b16      	ldr	r3, [pc, #88]	@ (8007aac <MX_GPIO_Init+0x9c>)
 8007a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	607b      	str	r3, [r7, #4]
 8007a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007a5e:	2300      	movs	r3, #0
 8007a60:	603b      	str	r3, [r7, #0]
 8007a62:	4b12      	ldr	r3, [pc, #72]	@ (8007aac <MX_GPIO_Init+0x9c>)
 8007a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a66:	4a11      	ldr	r2, [pc, #68]	@ (8007aac <MX_GPIO_Init+0x9c>)
 8007a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8007aac <MX_GPIO_Init+0x9c>)
 8007a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a76:	603b      	str	r3, [r7, #0]
 8007a78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8007a80:	480b      	ldr	r0, [pc, #44]	@ (8007ab0 <MX_GPIO_Init+0xa0>)
 8007a82:	f002 f927 	bl	8009cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8007a86:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8007a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a90:	2300      	movs	r3, #0
 8007a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a94:	2300      	movs	r3, #0
 8007a96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007a98:	f107 030c 	add.w	r3, r7, #12
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	4804      	ldr	r0, [pc, #16]	@ (8007ab0 <MX_GPIO_Init+0xa0>)
 8007aa0:	f001 ff6c 	bl	800997c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8007aa4:	bf00      	nop
 8007aa6:	3720      	adds	r7, #32
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	40023800 	.word	0x40023800
 8007ab0:	40021800 	.word	0x40021800

08007ab4 <My_ITM_SendChar>:

/* USER CODE BEGIN 4 */

__STATIC_INLINE uint32_t My_ITM_SendChar (uint32_t ch)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007abc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8007ac0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d013      	beq.n	8007af4 <My_ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007acc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8007ad0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8007ad4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00b      	beq.n	8007af4 <My_ITM_SendChar+0x40>
  {
    while (ITM->PORT[ITM_CHANNEL].u32 == 0UL)
 8007adc:	e000      	b.n	8007ae0 <My_ITM_SendChar+0x2c>
    {
      __NOP();
 8007ade:	bf00      	nop
    while (ITM->PORT[ITM_CHANNEL].u32 == 0UL)
 8007ae0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d0f9      	beq.n	8007ade <My_ITM_SendChar+0x2a>
    }
    ITM->PORT[ITM_CHANNEL].u8 = (uint8_t)ch;
 8007aea:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	b2d2      	uxtb	r2, r2
 8007af2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8007af4:	687b      	ldr	r3, [r7, #4]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <_write>:

int _write(int file, char *ptr, int len) {
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b086      	sub	sp, #24
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	60f8      	str	r0, [r7, #12]
 8007b0a:	60b9      	str	r1, [r7, #8]
 8007b0c:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0; i < len; i++) {
 8007b0e:	2300      	movs	r3, #0
 8007b10:	617b      	str	r3, [r7, #20]
 8007b12:	e009      	b.n	8007b28 <_write+0x26>
		My_ITM_SendChar(*ptr++);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	1c5a      	adds	r2, r3, #1
 8007b18:	60ba      	str	r2, [r7, #8]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7ff ffc9 	bl	8007ab4 <My_ITM_SendChar>
	for(i = 0; i < len; i++) {
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	3301      	adds	r3, #1
 8007b26:	617b      	str	r3, [r7, #20]
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	dbf1      	blt.n	8007b14 <_write+0x12>
	}
	return len;
 8007b30:	687b      	ldr	r3, [r7, #4]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3718      	adds	r7, #24
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007b3e:	b672      	cpsid	i
}
 8007b40:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007b42:	bf00      	nop
 8007b44:	e7fd      	b.n	8007b42 <Error_Handler+0x8>
	...

08007b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b4e:	2300      	movs	r3, #0
 8007b50:	607b      	str	r3, [r7, #4]
 8007b52:	4b10      	ldr	r3, [pc, #64]	@ (8007b94 <HAL_MspInit+0x4c>)
 8007b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b56:	4a0f      	ldr	r2, [pc, #60]	@ (8007b94 <HAL_MspInit+0x4c>)
 8007b58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b94 <HAL_MspInit+0x4c>)
 8007b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b66:	607b      	str	r3, [r7, #4]
 8007b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	603b      	str	r3, [r7, #0]
 8007b6e:	4b09      	ldr	r3, [pc, #36]	@ (8007b94 <HAL_MspInit+0x4c>)
 8007b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b72:	4a08      	ldr	r2, [pc, #32]	@ (8007b94 <HAL_MspInit+0x4c>)
 8007b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b7a:	4b06      	ldr	r3, [pc, #24]	@ (8007b94 <HAL_MspInit+0x4c>)
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b82:	603b      	str	r3, [r7, #0]
 8007b84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007b86:	2007      	movs	r0, #7
 8007b88:	f001 feb2 	bl	80098f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007b8c:	bf00      	nop
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	40023800 	.word	0x40023800

08007b98 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08a      	sub	sp, #40	@ 0x28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ba0:	f107 0314 	add.w	r3, r7, #20
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	601a      	str	r2, [r3, #0]
 8007ba8:	605a      	str	r2, [r3, #4]
 8007baa:	609a      	str	r2, [r3, #8]
 8007bac:	60da      	str	r2, [r3, #12]
 8007bae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8007c24 <HAL_ADC_MspInit+0x8c>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d12f      	bne.n	8007c1a <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007bba:	2300      	movs	r3, #0
 8007bbc:	613b      	str	r3, [r7, #16]
 8007bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8007c28 <HAL_ADC_MspInit+0x90>)
 8007bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bc2:	4a19      	ldr	r2, [pc, #100]	@ (8007c28 <HAL_ADC_MspInit+0x90>)
 8007bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8007bca:	4b17      	ldr	r3, [pc, #92]	@ (8007c28 <HAL_ADC_MspInit+0x90>)
 8007bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bd2:	613b      	str	r3, [r7, #16]
 8007bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	60fb      	str	r3, [r7, #12]
 8007bda:	4b13      	ldr	r3, [pc, #76]	@ (8007c28 <HAL_ADC_MspInit+0x90>)
 8007bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bde:	4a12      	ldr	r2, [pc, #72]	@ (8007c28 <HAL_ADC_MspInit+0x90>)
 8007be0:	f043 0301 	orr.w	r3, r3, #1
 8007be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8007be6:	4b10      	ldr	r3, [pc, #64]	@ (8007c28 <HAL_ADC_MspInit+0x90>)
 8007be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bfe:	f107 0314 	add.w	r3, r7, #20
 8007c02:	4619      	mov	r1, r3
 8007c04:	4809      	ldr	r0, [pc, #36]	@ (8007c2c <HAL_ADC_MspInit+0x94>)
 8007c06:	f001 feb9 	bl	800997c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	2012      	movs	r0, #18
 8007c10:	f001 fe79 	bl	8009906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007c14:	2012      	movs	r0, #18
 8007c16:	f001 fe92 	bl	800993e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8007c1a:	bf00      	nop
 8007c1c:	3728      	adds	r7, #40	@ 0x28
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	40012000 	.word	0x40012000
 8007c28:	40023800 	.word	0x40023800
 8007c2c:	40020000 	.word	0x40020000

08007c30 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b08a      	sub	sp, #40	@ 0x28
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c38:	f107 0314 	add.w	r3, r7, #20
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	601a      	str	r2, [r3, #0]
 8007c40:	605a      	str	r2, [r3, #4]
 8007c42:	609a      	str	r2, [r3, #8]
 8007c44:	60da      	str	r2, [r3, #12]
 8007c46:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a29      	ldr	r2, [pc, #164]	@ (8007cf4 <HAL_CAN_MspInit+0xc4>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d14c      	bne.n	8007cec <HAL_CAN_MspInit+0xbc>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007c52:	2300      	movs	r3, #0
 8007c54:	613b      	str	r3, [r7, #16]
 8007c56:	4b28      	ldr	r3, [pc, #160]	@ (8007cf8 <HAL_CAN_MspInit+0xc8>)
 8007c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c5a:	4a27      	ldr	r2, [pc, #156]	@ (8007cf8 <HAL_CAN_MspInit+0xc8>)
 8007c5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8007c62:	4b25      	ldr	r3, [pc, #148]	@ (8007cf8 <HAL_CAN_MspInit+0xc8>)
 8007c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c6a:	613b      	str	r3, [r7, #16]
 8007c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c6e:	2300      	movs	r3, #0
 8007c70:	60fb      	str	r3, [r7, #12]
 8007c72:	4b21      	ldr	r3, [pc, #132]	@ (8007cf8 <HAL_CAN_MspInit+0xc8>)
 8007c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c76:	4a20      	ldr	r2, [pc, #128]	@ (8007cf8 <HAL_CAN_MspInit+0xc8>)
 8007c78:	f043 0301 	orr.w	r3, r3, #1
 8007c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8007cf8 <HAL_CAN_MspInit+0xc8>)
 8007c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007c8a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c90:	2302      	movs	r3, #2
 8007c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c94:	2300      	movs	r3, #0
 8007c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8007c9c:	2309      	movs	r3, #9
 8007c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ca0:	f107 0314 	add.w	r3, r7, #20
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	4815      	ldr	r0, [pc, #84]	@ (8007cfc <HAL_CAN_MspInit+0xcc>)
 8007ca8:	f001 fe68 	bl	800997c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8007cac:	2200      	movs	r2, #0
 8007cae:	2100      	movs	r1, #0
 8007cb0:	2013      	movs	r0, #19
 8007cb2:	f001 fe28 	bl	8009906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8007cb6:	2013      	movs	r0, #19
 8007cb8:	f001 fe41 	bl	800993e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	2014      	movs	r0, #20
 8007cc2:	f001 fe20 	bl	8009906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8007cc6:	2014      	movs	r0, #20
 8007cc8:	f001 fe39 	bl	800993e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8007ccc:	2200      	movs	r2, #0
 8007cce:	2100      	movs	r1, #0
 8007cd0:	2015      	movs	r0, #21
 8007cd2:	f001 fe18 	bl	8009906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8007cd6:	2015      	movs	r0, #21
 8007cd8:	f001 fe31 	bl	800993e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8007cdc:	2200      	movs	r2, #0
 8007cde:	2100      	movs	r1, #0
 8007ce0:	2016      	movs	r0, #22
 8007ce2:	f001 fe10 	bl	8009906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8007ce6:	2016      	movs	r0, #22
 8007ce8:	f001 fe29 	bl	800993e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8007cec:	bf00      	nop
 8007cee:	3728      	adds	r7, #40	@ 0x28
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	40006400 	.word	0x40006400
 8007cf8:	40023800 	.word	0x40023800
 8007cfc:	40020000 	.word	0x40020000

08007d00 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8007d48 <HAL_TIM_Base_MspInit+0x48>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d115      	bne.n	8007d3e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8007d12:	2300      	movs	r3, #0
 8007d14:	60fb      	str	r3, [r7, #12]
 8007d16:	4b0d      	ldr	r3, [pc, #52]	@ (8007d4c <HAL_TIM_Base_MspInit+0x4c>)
 8007d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8007d4c <HAL_TIM_Base_MspInit+0x4c>)
 8007d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d20:	6413      	str	r3, [r2, #64]	@ 0x40
 8007d22:	4b0a      	ldr	r3, [pc, #40]	@ (8007d4c <HAL_TIM_Base_MspInit+0x4c>)
 8007d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2100      	movs	r1, #0
 8007d32:	202d      	movs	r0, #45	@ 0x2d
 8007d34:	f001 fde7 	bl	8009906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8007d38:	202d      	movs	r0, #45	@ 0x2d
 8007d3a:	f001 fe00 	bl	800993e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 8007d3e:	bf00      	nop
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	40002000 	.word	0x40002000
 8007d4c:	40023800 	.word	0x40023800

08007d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007d50:	b480      	push	{r7}
 8007d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007d54:	bf00      	nop
 8007d56:	e7fd      	b.n	8007d54 <NMI_Handler+0x4>

08007d58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007d5c:	bf00      	nop
 8007d5e:	e7fd      	b.n	8007d5c <HardFault_Handler+0x4>

08007d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007d60:	b480      	push	{r7}
 8007d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007d64:	bf00      	nop
 8007d66:	e7fd      	b.n	8007d64 <MemManage_Handler+0x4>

08007d68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007d6c:	bf00      	nop
 8007d6e:	e7fd      	b.n	8007d6c <BusFault_Handler+0x4>

08007d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007d70:	b480      	push	{r7}
 8007d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007d74:	bf00      	nop
 8007d76:	e7fd      	b.n	8007d74 <UsageFault_Handler+0x4>

08007d78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007d7c:	bf00      	nop
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007d86:	b480      	push	{r7}
 8007d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007d8a:	bf00      	nop
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007d94:	b480      	push	{r7}
 8007d96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007d98:	bf00      	nop
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007da6:	f000 f955 	bl	8008054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007daa:	bf00      	nop
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8007db4:	4802      	ldr	r0, [pc, #8]	@ (8007dc0 <ADC_IRQHandler+0x10>)
 8007db6:	f000 fa8f 	bl	80082d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8007dba:	bf00      	nop
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20000394 	.word	0x20000394

08007dc4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007dc8:	4802      	ldr	r0, [pc, #8]	@ (8007dd4 <CAN1_TX_IRQHandler+0x10>)
 8007dca:	f001 faa3 	bl	8009314 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8007dce:	bf00      	nop
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	200003dc 	.word	0x200003dc

08007dd8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007ddc:	4802      	ldr	r0, [pc, #8]	@ (8007de8 <CAN1_RX0_IRQHandler+0x10>)
 8007dde:	f001 fa99 	bl	8009314 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8007de2:	bf00      	nop
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	200003dc 	.word	0x200003dc

08007dec <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007df0:	4802      	ldr	r0, [pc, #8]	@ (8007dfc <CAN1_RX1_IRQHandler+0x10>)
 8007df2:	f001 fa8f 	bl	8009314 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8007df6:	bf00      	nop
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	200003dc 	.word	0x200003dc

08007e00 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007e04:	4802      	ldr	r0, [pc, #8]	@ (8007e10 <CAN1_SCE_IRQHandler+0x10>)
 8007e06:	f001 fa85 	bl	8009314 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8007e0a:	bf00      	nop
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	200003dc 	.word	0x200003dc

08007e14 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8007e18:	4802      	ldr	r0, [pc, #8]	@ (8007e24 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8007e1a:	f002 fcc8 	bl	800a7ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8007e1e:	bf00      	nop
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	20000404 	.word	0x20000404

08007e28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b086      	sub	sp, #24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e34:	2300      	movs	r3, #0
 8007e36:	617b      	str	r3, [r7, #20]
 8007e38:	e00a      	b.n	8007e50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007e3a:	f3af 8000 	nop.w
 8007e3e:	4601      	mov	r1, r0
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	60ba      	str	r2, [r7, #8]
 8007e46:	b2ca      	uxtb	r2, r1
 8007e48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	617b      	str	r3, [r7, #20]
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	dbf0      	blt.n	8007e3a <_read+0x12>
  }

  return len;
 8007e58:	687b      	ldr	r3, [r7, #4]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <_close>:
  }
  return len;
}

int _close(int file)
{
 8007e62:	b480      	push	{r7}
 8007e64:	b083      	sub	sp, #12
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007e6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b083      	sub	sp, #12
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007e8a:	605a      	str	r2, [r3, #4]
  return 0;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <_isatty>:

int _isatty(int file)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007ea2:	2301      	movs	r3, #1
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3714      	adds	r7, #20
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
	...

08007ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007ed4:	4a14      	ldr	r2, [pc, #80]	@ (8007f28 <_sbrk+0x5c>)
 8007ed6:	4b15      	ldr	r3, [pc, #84]	@ (8007f2c <_sbrk+0x60>)
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007ee0:	4b13      	ldr	r3, [pc, #76]	@ (8007f30 <_sbrk+0x64>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d102      	bne.n	8007eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007ee8:	4b11      	ldr	r3, [pc, #68]	@ (8007f30 <_sbrk+0x64>)
 8007eea:	4a12      	ldr	r2, [pc, #72]	@ (8007f34 <_sbrk+0x68>)
 8007eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007eee:	4b10      	ldr	r3, [pc, #64]	@ (8007f30 <_sbrk+0x64>)
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d207      	bcs.n	8007f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007efc:	f003 fa3e 	bl	800b37c <__errno>
 8007f00:	4603      	mov	r3, r0
 8007f02:	220c      	movs	r2, #12
 8007f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007f06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f0a:	e009      	b.n	8007f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007f0c:	4b08      	ldr	r3, [pc, #32]	@ (8007f30 <_sbrk+0x64>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007f12:	4b07      	ldr	r3, [pc, #28]	@ (8007f30 <_sbrk+0x64>)
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4413      	add	r3, r2
 8007f1a:	4a05      	ldr	r2, [pc, #20]	@ (8007f30 <_sbrk+0x64>)
 8007f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3718      	adds	r7, #24
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	20030000 	.word	0x20030000
 8007f2c:	00000400 	.word	0x00000400
 8007f30:	20000454 	.word	0x20000454
 8007f34:	200005a8 	.word	0x200005a8

08007f38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007f3c:	4b06      	ldr	r3, [pc, #24]	@ (8007f58 <SystemInit+0x20>)
 8007f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f42:	4a05      	ldr	r2, [pc, #20]	@ (8007f58 <SystemInit+0x20>)
 8007f44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007f48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007f4c:	bf00      	nop
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	e000ed00 	.word	0xe000ed00

08007f5c <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack       /* set stack pointer */
 8007f5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007f94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007f60:	f7ff ffea 	bl	8007f38 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007f64:	480c      	ldr	r0, [pc, #48]	@ (8007f98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007f66:	490d      	ldr	r1, [pc, #52]	@ (8007f9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007f68:	4a0d      	ldr	r2, [pc, #52]	@ (8007fa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007f6c:	e002      	b.n	8007f74 <LoopCopyDataInit>

08007f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007f72:	3304      	adds	r3, #4

08007f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007f78:	d3f9      	bcc.n	8007f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8007fa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007f7c:	4c0a      	ldr	r4, [pc, #40]	@ (8007fa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007f80:	e001      	b.n	8007f86 <LoopFillZerobss>

08007f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007f84:	3204      	adds	r2, #4

08007f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007f88:	d3fb      	bcc.n	8007f82 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8007f8a:	f003 f9fd 	bl	800b388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007f8e:	f7ff fbd7 	bl	8007740 <main>
  bx  lr    
 8007f92:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack       /* set stack pointer */
 8007f94:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8007f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007f9c:	20000328 	.word	0x20000328
  ldr r2, =_sidata
 8007fa0:	0800c210 	.word	0x0800c210
  ldr r2, =_sbss
 8007fa4:	20000328 	.word	0x20000328
  ldr r4, =_ebss
 8007fa8:	200005a8 	.word	0x200005a8

08007fac <CAN2_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007fac:	e7fe      	b.n	8007fac <CAN2_RX0_IRQHandler>
	...

08007fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8007ff0 <HAL_Init+0x40>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8007ff0 <HAL_Init+0x40>)
 8007fba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007fbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ff0 <HAL_Init+0x40>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8007ff0 <HAL_Init+0x40>)
 8007fc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007fca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007fcc:	4b08      	ldr	r3, [pc, #32]	@ (8007ff0 <HAL_Init+0x40>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a07      	ldr	r2, [pc, #28]	@ (8007ff0 <HAL_Init+0x40>)
 8007fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007fd8:	2003      	movs	r0, #3
 8007fda:	f001 fc89 	bl	80098f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007fde:	2000      	movs	r0, #0
 8007fe0:	f000 f808 	bl	8007ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007fe4:	f7ff fdb0 	bl	8007b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	40023c00 	.word	0x40023c00

08007ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007ffc:	4b12      	ldr	r3, [pc, #72]	@ (8008048 <HAL_InitTick+0x54>)
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	4b12      	ldr	r3, [pc, #72]	@ (800804c <HAL_InitTick+0x58>)
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	4619      	mov	r1, r3
 8008006:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800800a:	fbb3 f3f1 	udiv	r3, r3, r1
 800800e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008012:	4618      	mov	r0, r3
 8008014:	f001 fca5 	bl	8009962 <HAL_SYSTICK_Config>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e00e      	b.n	8008040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b0f      	cmp	r3, #15
 8008026:	d80a      	bhi.n	800803e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008028:	2200      	movs	r2, #0
 800802a:	6879      	ldr	r1, [r7, #4]
 800802c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008030:	f001 fc69 	bl	8009906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008034:	4a06      	ldr	r2, [pc, #24]	@ (8008050 <HAL_InitTick+0x5c>)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	e000      	b.n	8008040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
}
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	200002c0 	.word	0x200002c0
 800804c:	200002c8 	.word	0x200002c8
 8008050:	200002c4 	.word	0x200002c4

08008054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008054:	b480      	push	{r7}
 8008056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008058:	4b06      	ldr	r3, [pc, #24]	@ (8008074 <HAL_IncTick+0x20>)
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	461a      	mov	r2, r3
 800805e:	4b06      	ldr	r3, [pc, #24]	@ (8008078 <HAL_IncTick+0x24>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4413      	add	r3, r2
 8008064:	4a04      	ldr	r2, [pc, #16]	@ (8008078 <HAL_IncTick+0x24>)
 8008066:	6013      	str	r3, [r2, #0]
}
 8008068:	bf00      	nop
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	200002c8 	.word	0x200002c8
 8008078:	20000458 	.word	0x20000458

0800807c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800807c:	b480      	push	{r7}
 800807e:	af00      	add	r7, sp, #0
  return uwTick;
 8008080:	4b03      	ldr	r3, [pc, #12]	@ (8008090 <HAL_GetTick+0x14>)
 8008082:	681b      	ldr	r3, [r3, #0]
}
 8008084:	4618      	mov	r0, r3
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	20000458 	.word	0x20000458

08008094 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d101      	bne.n	80080aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e033      	b.n	8008112 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d109      	bne.n	80080c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7ff fd70 	bl	8007b98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ca:	f003 0310 	and.w	r3, r3, #16
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d118      	bne.n	8008104 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080d6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80080da:	f023 0302 	bic.w	r3, r3, #2
 80080de:	f043 0202 	orr.w	r2, r3, #2
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fb5a 	bl	80087a0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080f6:	f023 0303 	bic.w	r3, r3, #3
 80080fa:	f043 0201 	orr.w	r2, r3, #1
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	641a      	str	r2, [r3, #64]	@ 0x40
 8008102:	e001      	b.n	8008108 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008110:	7bfb      	ldrb	r3, [r7, #15]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
	...

0800811c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8008124:	2300      	movs	r3, #0
 8008126:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800812e:	2b01      	cmp	r3, #1
 8008130:	d101      	bne.n	8008136 <HAL_ADC_Start_IT+0x1a>
 8008132:	2302      	movs	r3, #2
 8008134:	e0bd      	b.n	80082b2 <HAL_ADC_Start_IT+0x196>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f003 0301 	and.w	r3, r3, #1
 8008148:	2b01      	cmp	r3, #1
 800814a:	d018      	beq.n	800817e <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689a      	ldr	r2, [r3, #8]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f042 0201 	orr.w	r2, r2, #1
 800815a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800815c:	4b58      	ldr	r3, [pc, #352]	@ (80082c0 <HAL_ADC_Start_IT+0x1a4>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a58      	ldr	r2, [pc, #352]	@ (80082c4 <HAL_ADC_Start_IT+0x1a8>)
 8008162:	fba2 2303 	umull	r2, r3, r2, r3
 8008166:	0c9a      	lsrs	r2, r3, #18
 8008168:	4613      	mov	r3, r2
 800816a:	005b      	lsls	r3, r3, #1
 800816c:	4413      	add	r3, r2
 800816e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8008170:	e002      	b.n	8008178 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	3b01      	subs	r3, #1
 8008176:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1f9      	bne.n	8008172 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f003 0301 	and.w	r3, r3, #1
 8008188:	2b01      	cmp	r3, #1
 800818a:	f040 8085 	bne.w	8008298 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008192:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008196:	f023 0301 	bic.w	r3, r3, #1
 800819a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d007      	beq.n	80081c0 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80081b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80081c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081cc:	d106      	bne.n	80081dc <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081d2:	f023 0206 	bic.w	r2, r3, #6
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	645a      	str	r2, [r3, #68]	@ 0x44
 80081da:	e002      	b.n	80081e2 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80081ea:	4b37      	ldr	r3, [pc, #220]	@ (80082c8 <HAL_ADC_Start_IT+0x1ac>)
 80081ec:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80081f6:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	6812      	ldr	r2, [r2, #0]
 8008202:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008206:	f043 0320 	orr.w	r3, r3, #32
 800820a:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	f003 031f 	and.w	r3, r3, #31
 8008214:	2b00      	cmp	r3, #0
 8008216:	d12a      	bne.n	800826e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a2b      	ldr	r2, [pc, #172]	@ (80082cc <HAL_ADC_Start_IT+0x1b0>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d015      	beq.n	800824e <HAL_ADC_Start_IT+0x132>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a2a      	ldr	r2, [pc, #168]	@ (80082d0 <HAL_ADC_Start_IT+0x1b4>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d105      	bne.n	8008238 <HAL_ADC_Start_IT+0x11c>
 800822c:	4b26      	ldr	r3, [pc, #152]	@ (80082c8 <HAL_ADC_Start_IT+0x1ac>)
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	f003 031f 	and.w	r3, r3, #31
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00a      	beq.n	800824e <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a25      	ldr	r2, [pc, #148]	@ (80082d4 <HAL_ADC_Start_IT+0x1b8>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d136      	bne.n	80082b0 <HAL_ADC_Start_IT+0x194>
 8008242:	4b21      	ldr	r3, [pc, #132]	@ (80082c8 <HAL_ADC_Start_IT+0x1ac>)
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	f003 0310 	and.w	r3, r3, #16
 800824a:	2b00      	cmp	r3, #0
 800824c:	d130      	bne.n	80082b0 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d129      	bne.n	80082b0 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	689a      	ldr	r2, [r3, #8]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800826a:	609a      	str	r2, [r3, #8]
 800826c:	e020      	b.n	80082b0 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a16      	ldr	r2, [pc, #88]	@ (80082cc <HAL_ADC_Start_IT+0x1b0>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d11b      	bne.n	80082b0 <HAL_ADC_Start_IT+0x194>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d114      	bne.n	80082b0 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	689a      	ldr	r2, [r3, #8]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008294:	609a      	str	r2, [r3, #8]
 8008296:	e00b      	b.n	80082b0 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800829c:	f043 0210 	orr.w	r2, r3, #16
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082a8:	f043 0201 	orr.w	r2, r3, #1
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	200002c0 	.word	0x200002c0
 80082c4:	431bde83 	.word	0x431bde83
 80082c8:	40012300 	.word	0x40012300
 80082cc:	40012000 	.word	0x40012000
 80082d0:	40012100 	.word	0x40012100
 80082d4:	40012200 	.word	0x40012200

080082d8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80082e0:	2300      	movs	r3, #0
 80082e2:	617b      	str	r3, [r7, #20]
 80082e4:	2300      	movs	r3, #0
 80082e6:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	f003 0320 	and.w	r3, r3, #32
 8008306:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d049      	beq.n	80083a2 <HAL_ADC_IRQHandler+0xca>
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d046      	beq.n	80083a2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008318:	f003 0310 	and.w	r3, r3, #16
 800831c:	2b00      	cmp	r3, #0
 800831e:	d105      	bne.n	800832c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008324:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d12b      	bne.n	8008392 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800833e:	2b00      	cmp	r3, #0
 8008340:	d127      	bne.n	8008392 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008348:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800834c:	2b00      	cmp	r3, #0
 800834e:	d006      	beq.n	800835e <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800835a:	2b00      	cmp	r3, #0
 800835c:	d119      	bne.n	8008392 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f022 0220 	bic.w	r2, r2, #32
 800836c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008372:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800837e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d105      	bne.n	8008392 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800838a:	f043 0201 	orr.w	r2, r3, #1
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7ff f99a 	bl	80076cc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f06f 0212 	mvn.w	r2, #18
 80083a0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f003 0304 	and.w	r3, r3, #4
 80083a8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083b0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d057      	beq.n	8008468 <HAL_ADC_IRQHandler+0x190>
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d054      	beq.n	8008468 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c2:	f003 0310 	and.w	r3, r3, #16
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d105      	bne.n	80083d6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ce:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d139      	bne.n	8008458 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ea:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d006      	beq.n	8008400 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d12b      	bne.n	8008458 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800840a:	2b00      	cmp	r3, #0
 800840c:	d124      	bne.n	8008458 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008418:	2b00      	cmp	r3, #0
 800841a:	d11d      	bne.n	8008458 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8008420:	2b00      	cmp	r3, #0
 8008422:	d119      	bne.n	8008458 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008432:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008438:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008448:	2b00      	cmp	r3, #0
 800844a:	d105      	bne.n	8008458 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008450:	f043 0201 	orr.w	r2, r3, #1
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fa9d 	bl	8008998 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f06f 020c 	mvn.w	r2, #12
 8008466:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008476:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d017      	beq.n	80084ae <HAL_ADC_IRQHandler+0x1d6>
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d014      	beq.n	80084ae <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 0301 	and.w	r3, r3, #1
 800848e:	2b01      	cmp	r3, #1
 8008490:	d10d      	bne.n	80084ae <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008496:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f837 	bl	8008512 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f06f 0201 	mvn.w	r2, #1
 80084ac:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f003 0320 	and.w	r3, r3, #32
 80084b4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80084bc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d015      	beq.n	80084f0 <HAL_ADC_IRQHandler+0x218>
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d012      	beq.n	80084f0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084ce:	f043 0202 	orr.w	r2, r3, #2
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f06f 0220 	mvn.w	r2, #32
 80084de:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f820 	bl	8008526 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f06f 0220 	mvn.w	r2, #32
 80084ee:	601a      	str	r2, [r3, #0]
  }
}
 80084f0:	bf00      	nop
 80084f2:	3718      	adds	r7, #24
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8008506:	4618      	mov	r0, r3
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8008512:	b480      	push	{r7}
 8008514:	b083      	sub	sp, #12
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800851a:	bf00      	nop
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr

08008526 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008526:	b480      	push	{r7}
 8008528:	b083      	sub	sp, #12
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800852e:	bf00      	nop
 8008530:	370c      	adds	r7, #12
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
	...

0800853c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008546:	2300      	movs	r3, #0
 8008548:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008550:	2b01      	cmp	r3, #1
 8008552:	d101      	bne.n	8008558 <HAL_ADC_ConfigChannel+0x1c>
 8008554:	2302      	movs	r3, #2
 8008556:	e113      	b.n	8008780 <HAL_ADC_ConfigChannel+0x244>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b09      	cmp	r3, #9
 8008566:	d925      	bls.n	80085b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68d9      	ldr	r1, [r3, #12]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	b29b      	uxth	r3, r3
 8008574:	461a      	mov	r2, r3
 8008576:	4613      	mov	r3, r2
 8008578:	005b      	lsls	r3, r3, #1
 800857a:	4413      	add	r3, r2
 800857c:	3b1e      	subs	r3, #30
 800857e:	2207      	movs	r2, #7
 8008580:	fa02 f303 	lsl.w	r3, r2, r3
 8008584:	43da      	mvns	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	400a      	ands	r2, r1
 800858c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68d9      	ldr	r1, [r3, #12]
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	689a      	ldr	r2, [r3, #8]
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	b29b      	uxth	r3, r3
 800859e:	4618      	mov	r0, r3
 80085a0:	4603      	mov	r3, r0
 80085a2:	005b      	lsls	r3, r3, #1
 80085a4:	4403      	add	r3, r0
 80085a6:	3b1e      	subs	r3, #30
 80085a8:	409a      	lsls	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	430a      	orrs	r2, r1
 80085b0:	60da      	str	r2, [r3, #12]
 80085b2:	e022      	b.n	80085fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6919      	ldr	r1, [r3, #16]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	b29b      	uxth	r3, r3
 80085c0:	461a      	mov	r2, r3
 80085c2:	4613      	mov	r3, r2
 80085c4:	005b      	lsls	r3, r3, #1
 80085c6:	4413      	add	r3, r2
 80085c8:	2207      	movs	r2, #7
 80085ca:	fa02 f303 	lsl.w	r3, r2, r3
 80085ce:	43da      	mvns	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	400a      	ands	r2, r1
 80085d6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	6919      	ldr	r1, [r3, #16]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	689a      	ldr	r2, [r3, #8]
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	4618      	mov	r0, r3
 80085ea:	4603      	mov	r3, r0
 80085ec:	005b      	lsls	r3, r3, #1
 80085ee:	4403      	add	r3, r0
 80085f0:	409a      	lsls	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	430a      	orrs	r2, r1
 80085f8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	2b06      	cmp	r3, #6
 8008600:	d824      	bhi.n	800864c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	4613      	mov	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	3b05      	subs	r3, #5
 8008614:	221f      	movs	r2, #31
 8008616:	fa02 f303 	lsl.w	r3, r2, r3
 800861a:	43da      	mvns	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	400a      	ands	r2, r1
 8008622:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	b29b      	uxth	r3, r3
 8008630:	4618      	mov	r0, r3
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	4613      	mov	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	4413      	add	r3, r2
 800863c:	3b05      	subs	r3, #5
 800863e:	fa00 f203 	lsl.w	r2, r0, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	430a      	orrs	r2, r1
 8008648:	635a      	str	r2, [r3, #52]	@ 0x34
 800864a:	e04c      	b.n	80086e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	2b0c      	cmp	r3, #12
 8008652:	d824      	bhi.n	800869e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	685a      	ldr	r2, [r3, #4]
 800865e:	4613      	mov	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4413      	add	r3, r2
 8008664:	3b23      	subs	r3, #35	@ 0x23
 8008666:	221f      	movs	r2, #31
 8008668:	fa02 f303 	lsl.w	r3, r2, r3
 800866c:	43da      	mvns	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	400a      	ands	r2, r1
 8008674:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	b29b      	uxth	r3, r3
 8008682:	4618      	mov	r0, r3
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	4613      	mov	r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4413      	add	r3, r2
 800868e:	3b23      	subs	r3, #35	@ 0x23
 8008690:	fa00 f203 	lsl.w	r2, r0, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	430a      	orrs	r2, r1
 800869a:	631a      	str	r2, [r3, #48]	@ 0x30
 800869c:	e023      	b.n	80086e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	4613      	mov	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	3b41      	subs	r3, #65	@ 0x41
 80086b0:	221f      	movs	r2, #31
 80086b2:	fa02 f303 	lsl.w	r3, r2, r3
 80086b6:	43da      	mvns	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	400a      	ands	r2, r1
 80086be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	4618      	mov	r0, r3
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	685a      	ldr	r2, [r3, #4]
 80086d2:	4613      	mov	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4413      	add	r3, r2
 80086d8:	3b41      	subs	r3, #65	@ 0x41
 80086da:	fa00 f203 	lsl.w	r2, r0, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	430a      	orrs	r2, r1
 80086e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80086e6:	4b29      	ldr	r3, [pc, #164]	@ (800878c <HAL_ADC_ConfigChannel+0x250>)
 80086e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a28      	ldr	r2, [pc, #160]	@ (8008790 <HAL_ADC_ConfigChannel+0x254>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d10f      	bne.n	8008714 <HAL_ADC_ConfigChannel+0x1d8>
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2b12      	cmp	r3, #18
 80086fa:	d10b      	bne.n	8008714 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a1d      	ldr	r2, [pc, #116]	@ (8008790 <HAL_ADC_ConfigChannel+0x254>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d12b      	bne.n	8008776 <HAL_ADC_ConfigChannel+0x23a>
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a1c      	ldr	r2, [pc, #112]	@ (8008794 <HAL_ADC_ConfigChannel+0x258>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d003      	beq.n	8008730 <HAL_ADC_ConfigChannel+0x1f4>
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b11      	cmp	r3, #17
 800872e:	d122      	bne.n	8008776 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a11      	ldr	r2, [pc, #68]	@ (8008794 <HAL_ADC_ConfigChannel+0x258>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d111      	bne.n	8008776 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008752:	4b11      	ldr	r3, [pc, #68]	@ (8008798 <HAL_ADC_ConfigChannel+0x25c>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a11      	ldr	r2, [pc, #68]	@ (800879c <HAL_ADC_ConfigChannel+0x260>)
 8008758:	fba2 2303 	umull	r2, r3, r2, r3
 800875c:	0c9a      	lsrs	r2, r3, #18
 800875e:	4613      	mov	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4413      	add	r3, r2
 8008764:	005b      	lsls	r3, r3, #1
 8008766:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8008768:	e002      	b.n	8008770 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	3b01      	subs	r3, #1
 800876e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1f9      	bne.n	800876a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3714      	adds	r7, #20
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	40012300 	.word	0x40012300
 8008790:	40012000 	.word	0x40012000
 8008794:	10000012 	.word	0x10000012
 8008798:	200002c0 	.word	0x200002c0
 800879c:	431bde83 	.word	0x431bde83

080087a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80087a8:	4b79      	ldr	r3, [pc, #484]	@ (8008990 <ADC_Init+0x1f0>)
 80087aa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	431a      	orrs	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	685a      	ldr	r2, [r3, #4]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80087d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	6859      	ldr	r1, [r3, #4]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	021a      	lsls	r2, r3, #8
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	430a      	orrs	r2, r1
 80087e8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	685a      	ldr	r2, [r3, #4]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80087f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	6859      	ldr	r1, [r3, #4]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	689a      	ldr	r2, [r3, #8]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	430a      	orrs	r2, r1
 800880a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689a      	ldr	r2, [r3, #8]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800881a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6899      	ldr	r1, [r3, #8]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68da      	ldr	r2, [r3, #12]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	430a      	orrs	r2, r1
 800882c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008832:	4a58      	ldr	r2, [pc, #352]	@ (8008994 <ADC_Init+0x1f4>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d022      	beq.n	800887e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	689a      	ldr	r2, [r3, #8]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008846:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6899      	ldr	r1, [r3, #8]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	430a      	orrs	r2, r1
 8008858:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689a      	ldr	r2, [r3, #8]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8008868:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	6899      	ldr	r1, [r3, #8]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	430a      	orrs	r2, r1
 800887a:	609a      	str	r2, [r3, #8]
 800887c:	e00f      	b.n	800889e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	689a      	ldr	r2, [r3, #8]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800888c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	689a      	ldr	r2, [r3, #8]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800889c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689a      	ldr	r2, [r3, #8]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f022 0202 	bic.w	r2, r2, #2
 80088ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	6899      	ldr	r1, [r3, #8]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	7e1b      	ldrb	r3, [r3, #24]
 80088b8:	005a      	lsls	r2, r3, #1
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	430a      	orrs	r2, r1
 80088c0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d01b      	beq.n	8008904 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	685a      	ldr	r2, [r3, #4]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088da:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685a      	ldr	r2, [r3, #4]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80088ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6859      	ldr	r1, [r3, #4]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f6:	3b01      	subs	r3, #1
 80088f8:	035a      	lsls	r2, r3, #13
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	430a      	orrs	r2, r1
 8008900:	605a      	str	r2, [r3, #4]
 8008902:	e007      	b.n	8008914 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	685a      	ldr	r2, [r3, #4]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008912:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8008922:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	3b01      	subs	r3, #1
 8008930:	051a      	lsls	r2, r3, #20
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	430a      	orrs	r2, r1
 8008938:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	689a      	ldr	r2, [r3, #8]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008948:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6899      	ldr	r1, [r3, #8]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008956:	025a      	lsls	r2, r3, #9
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	430a      	orrs	r2, r1
 800895e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	689a      	ldr	r2, [r3, #8]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800896e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6899      	ldr	r1, [r3, #8]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	029a      	lsls	r2, r3, #10
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	430a      	orrs	r2, r1
 8008982:	609a      	str	r2, [r3, #8]
}
 8008984:	bf00      	nop
 8008986:	3714      	adds	r7, #20
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr
 8008990:	40012300 	.word	0x40012300
 8008994:	0f000001 	.word	0x0f000001

08008998 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e0ed      	b.n	8008b9a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d102      	bne.n	80089d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7ff f930 	bl	8007c30 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f042 0201 	orr.w	r2, r2, #1
 80089de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80089e0:	f7ff fb4c 	bl	800807c <HAL_GetTick>
 80089e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80089e6:	e012      	b.n	8008a0e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80089e8:	f7ff fb48 	bl	800807c <HAL_GetTick>
 80089ec:	4602      	mov	r2, r0
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	2b0a      	cmp	r3, #10
 80089f4:	d90b      	bls.n	8008a0e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2205      	movs	r2, #5
 8008a06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e0c5      	b.n	8008b9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	f003 0301 	and.w	r3, r3, #1
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d0e5      	beq.n	80089e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 0202 	bic.w	r2, r2, #2
 8008a2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008a2c:	f7ff fb26 	bl	800807c <HAL_GetTick>
 8008a30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008a32:	e012      	b.n	8008a5a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008a34:	f7ff fb22 	bl	800807c <HAL_GetTick>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	2b0a      	cmp	r3, #10
 8008a40:	d90b      	bls.n	8008a5a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a46:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2205      	movs	r2, #5
 8008a52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e09f      	b.n	8008b9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	f003 0302 	and.w	r3, r3, #2
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1e5      	bne.n	8008a34 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	7e1b      	ldrb	r3, [r3, #24]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d108      	bne.n	8008a82 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008a7e:	601a      	str	r2, [r3, #0]
 8008a80:	e007      	b.n	8008a92 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008a90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	7e5b      	ldrb	r3, [r3, #25]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d108      	bne.n	8008aac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008aa8:	601a      	str	r2, [r3, #0]
 8008aaa:	e007      	b.n	8008abc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008aba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	7e9b      	ldrb	r3, [r3, #26]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d108      	bne.n	8008ad6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f042 0220 	orr.w	r2, r2, #32
 8008ad2:	601a      	str	r2, [r3, #0]
 8008ad4:	e007      	b.n	8008ae6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f022 0220 	bic.w	r2, r2, #32
 8008ae4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	7edb      	ldrb	r3, [r3, #27]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d108      	bne.n	8008b00 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f022 0210 	bic.w	r2, r2, #16
 8008afc:	601a      	str	r2, [r3, #0]
 8008afe:	e007      	b.n	8008b10 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f042 0210 	orr.w	r2, r2, #16
 8008b0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	7f1b      	ldrb	r3, [r3, #28]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d108      	bne.n	8008b2a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f042 0208 	orr.w	r2, r2, #8
 8008b26:	601a      	str	r2, [r3, #0]
 8008b28:	e007      	b.n	8008b3a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f022 0208 	bic.w	r2, r2, #8
 8008b38:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	7f5b      	ldrb	r3, [r3, #29]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d108      	bne.n	8008b54 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f042 0204 	orr.w	r2, r2, #4
 8008b50:	601a      	str	r2, [r3, #0]
 8008b52:	e007      	b.n	8008b64 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f022 0204 	bic.w	r2, r2, #4
 8008b62:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	689a      	ldr	r2, [r3, #8]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	431a      	orrs	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	431a      	orrs	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	695b      	ldr	r3, [r3, #20]
 8008b78:	ea42 0103 	orr.w	r1, r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	1e5a      	subs	r2, r3, #1
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	430a      	orrs	r2, r1
 8008b88:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
	...

08008ba4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b087      	sub	sp, #28
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008bb4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8008bb6:	7dfb      	ldrb	r3, [r7, #23]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d003      	beq.n	8008bc4 <HAL_CAN_ConfigFilter+0x20>
 8008bbc:	7dfb      	ldrb	r3, [r7, #23]
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	f040 80be 	bne.w	8008d40 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8008bc4:	4b65      	ldr	r3, [pc, #404]	@ (8008d5c <HAL_CAN_ConfigFilter+0x1b8>)
 8008bc6:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008bce:	f043 0201 	orr.w	r2, r3, #1
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008bde:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf2:	021b      	lsls	r3, r3, #8
 8008bf4:	431a      	orrs	r2, r3
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	695b      	ldr	r3, [r3, #20]
 8008c00:	f003 031f 	and.w	r3, r3, #31
 8008c04:	2201      	movs	r2, #1
 8008c06:	fa02 f303 	lsl.w	r3, r2, r3
 8008c0a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	43db      	mvns	r3, r3
 8008c16:	401a      	ands	r2, r3
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	69db      	ldr	r3, [r3, #28]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d123      	bne.n	8008c6e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	43db      	mvns	r3, r3
 8008c30:	401a      	ands	r2, r3
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008c44:	683a      	ldr	r2, [r7, #0]
 8008c46:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008c48:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	3248      	adds	r2, #72	@ 0x48
 8008c4e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008c62:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008c64:	6939      	ldr	r1, [r7, #16]
 8008c66:	3348      	adds	r3, #72	@ 0x48
 8008c68:	00db      	lsls	r3, r3, #3
 8008c6a:	440b      	add	r3, r1
 8008c6c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	69db      	ldr	r3, [r3, #28]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d122      	bne.n	8008cbc <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	431a      	orrs	r2, r3
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008c92:	683a      	ldr	r2, [r7, #0]
 8008c94:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008c96:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	3248      	adds	r2, #72	@ 0x48
 8008c9c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008cb0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008cb2:	6939      	ldr	r1, [r7, #16]
 8008cb4:	3348      	adds	r3, #72	@ 0x48
 8008cb6:	00db      	lsls	r3, r3, #3
 8008cb8:	440b      	add	r3, r1
 8008cba:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d109      	bne.n	8008cd8 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	43db      	mvns	r3, r3
 8008cce:	401a      	ands	r2, r3
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8008cd6:	e007      	b.n	8008ce8 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	431a      	orrs	r2, r3
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d109      	bne.n	8008d04 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	43db      	mvns	r3, r3
 8008cfa:	401a      	ands	r2, r3
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8008d02:	e007      	b.n	8008d14 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	431a      	orrs	r2, r3
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	6a1b      	ldr	r3, [r3, #32]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d107      	bne.n	8008d2c <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	431a      	orrs	r2, r3
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008d32:	f023 0201 	bic.w	r2, r3, #1
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	e006      	b.n	8008d4e <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d44:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
  }
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	371c      	adds	r7, #28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	40006400 	.word	0x40006400

08008d60 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d12e      	bne.n	8008dd2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2202      	movs	r2, #2
 8008d78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f022 0201 	bic.w	r2, r2, #1
 8008d8a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d8c:	f7ff f976 	bl	800807c <HAL_GetTick>
 8008d90:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008d92:	e012      	b.n	8008dba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008d94:	f7ff f972 	bl	800807c <HAL_GetTick>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	2b0a      	cmp	r3, #10
 8008da0:	d90b      	bls.n	8008dba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008da6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2205      	movs	r2, #5
 8008db2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e012      	b.n	8008de0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f003 0301 	and.w	r3, r3, #1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d1e5      	bne.n	8008d94 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	e006      	b.n	8008de0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
  }
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d133      	bne.n	8008e64 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f042 0201 	orr.w	r2, r2, #1
 8008e0a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e0c:	f7ff f936 	bl	800807c <HAL_GetTick>
 8008e10:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008e12:	e012      	b.n	8008e3a <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008e14:	f7ff f932 	bl	800807c <HAL_GetTick>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	2b0a      	cmp	r3, #10
 8008e20:	d90b      	bls.n	8008e3a <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e26:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2205      	movs	r2, #5
 8008e32:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e01b      	b.n	8008e72 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d0e5      	beq.n	8008e14 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f022 0202 	bic.w	r2, r2, #2
 8008e56:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8008e60:	2300      	movs	r3, #0
 8008e62:	e006      	b.n	8008e72 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e68:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
  }
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8008e7a:	b480      	push	{r7}
 8008e7c:	b089      	sub	sp, #36	@ 0x24
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	60f8      	str	r0, [r7, #12]
 8008e82:	60b9      	str	r1, [r7, #8]
 8008e84:	607a      	str	r2, [r7, #4]
 8008e86:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8008e98:	7ffb      	ldrb	r3, [r7, #31]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d003      	beq.n	8008ea6 <HAL_CAN_AddTxMessage+0x2c>
 8008e9e:	7ffb      	ldrb	r3, [r7, #31]
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	f040 80ad 	bne.w	8009000 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10a      	bne.n	8008ec6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d105      	bne.n	8008ec6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 8095 	beq.w	8008ff0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	0e1b      	lsrs	r3, r3, #24
 8008eca:	f003 0303 	and.w	r3, r3, #3
 8008ece:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	409a      	lsls	r2, r3
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d10d      	bne.n	8008efe <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008eec:	68f9      	ldr	r1, [r7, #12]
 8008eee:	6809      	ldr	r1, [r1, #0]
 8008ef0:	431a      	orrs	r2, r3
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	3318      	adds	r3, #24
 8008ef6:	011b      	lsls	r3, r3, #4
 8008ef8:	440b      	add	r3, r1
 8008efa:	601a      	str	r2, [r3, #0]
 8008efc:	e00f      	b.n	8008f1e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008f08:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008f0e:	68f9      	ldr	r1, [r7, #12]
 8008f10:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8008f12:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	3318      	adds	r3, #24
 8008f18:	011b      	lsls	r3, r3, #4
 8008f1a:	440b      	add	r3, r1
 8008f1c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6819      	ldr	r1, [r3, #0]
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	691a      	ldr	r2, [r3, #16]
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	3318      	adds	r3, #24
 8008f2a:	011b      	lsls	r3, r3, #4
 8008f2c:	440b      	add	r3, r1
 8008f2e:	3304      	adds	r3, #4
 8008f30:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	7d1b      	ldrb	r3, [r3, #20]
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d111      	bne.n	8008f5e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	3318      	adds	r3, #24
 8008f42:	011b      	lsls	r3, r3, #4
 8008f44:	4413      	add	r3, r2
 8008f46:	3304      	adds	r3, #4
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	6811      	ldr	r1, [r2, #0]
 8008f4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	3318      	adds	r3, #24
 8008f56:	011b      	lsls	r3, r3, #4
 8008f58:	440b      	add	r3, r1
 8008f5a:	3304      	adds	r3, #4
 8008f5c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	3307      	adds	r3, #7
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	061a      	lsls	r2, r3, #24
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	3306      	adds	r3, #6
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	041b      	lsls	r3, r3, #16
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	3305      	adds	r3, #5
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	021b      	lsls	r3, r3, #8
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	3204      	adds	r2, #4
 8008f7e:	7812      	ldrb	r2, [r2, #0]
 8008f80:	4610      	mov	r0, r2
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	6811      	ldr	r1, [r2, #0]
 8008f86:	ea43 0200 	orr.w	r2, r3, r0
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	011b      	lsls	r3, r3, #4
 8008f8e:	440b      	add	r3, r1
 8008f90:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8008f94:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	3303      	adds	r3, #3
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	061a      	lsls	r2, r3, #24
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	3302      	adds	r3, #2
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	041b      	lsls	r3, r3, #16
 8008fa6:	431a      	orrs	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	3301      	adds	r3, #1
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	021b      	lsls	r3, r3, #8
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	7812      	ldrb	r2, [r2, #0]
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	6811      	ldr	r1, [r2, #0]
 8008fbc:	ea43 0200 	orr.w	r2, r3, r0
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	011b      	lsls	r3, r3, #4
 8008fc4:	440b      	add	r3, r1
 8008fc6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8008fca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	3318      	adds	r3, #24
 8008fd4:	011b      	lsls	r3, r3, #4
 8008fd6:	4413      	add	r3, r2
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	6811      	ldr	r1, [r2, #0]
 8008fde:	f043 0201 	orr.w	r2, r3, #1
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	3318      	adds	r3, #24
 8008fe6:	011b      	lsls	r3, r3, #4
 8008fe8:	440b      	add	r3, r1
 8008fea:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	e00e      	b.n	800900e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e006      	b.n	800900e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009004:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
  }
}
 800900e:	4618      	mov	r0, r3
 8009010:	3724      	adds	r7, #36	@ 0x24
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr

0800901a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800901a:	b480      	push	{r7}
 800901c:	b085      	sub	sp, #20
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8009022:	2300      	movs	r3, #0
 8009024:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 3020 	ldrb.w	r3, [r3, #32]
 800902c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800902e:	7afb      	ldrb	r3, [r7, #11]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d002      	beq.n	800903a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8009034:	7afb      	ldrb	r3, [r7, #11]
 8009036:	2b02      	cmp	r3, #2
 8009038:	d11d      	bne.n	8009076 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009044:	2b00      	cmp	r3, #0
 8009046:	d002      	beq.n	800904e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	3301      	adds	r3, #1
 800904c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d002      	beq.n	8009062 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	3301      	adds	r3, #1
 8009060:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800906c:	2b00      	cmp	r3, #0
 800906e:	d002      	beq.n	8009076 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	3301      	adds	r3, #1
 8009074:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8009076:	68fb      	ldr	r3, [r7, #12]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3714      	adds	r7, #20
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009084:	b480      	push	{r7}
 8009086:	b087      	sub	sp, #28
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
 8009090:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009098:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800909a:	7dfb      	ldrb	r3, [r7, #23]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d003      	beq.n	80090a8 <HAL_CAN_GetRxMessage+0x24>
 80090a0:	7dfb      	ldrb	r3, [r7, #23]
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	f040 8103 	bne.w	80092ae <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d10e      	bne.n	80090cc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	f003 0303 	and.w	r3, r3, #3
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d116      	bne.n	80090ea <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	e0f7      	b.n	80092bc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	f003 0303 	and.w	r3, r3, #3
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d107      	bne.n	80090ea <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090de:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e0e8      	b.n	80092bc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	331b      	adds	r3, #27
 80090f2:	011b      	lsls	r3, r3, #4
 80090f4:	4413      	add	r3, r2
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f003 0204 	and.w	r2, r3, #4
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10c      	bne.n	8009122 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	331b      	adds	r3, #27
 8009110:	011b      	lsls	r3, r3, #4
 8009112:	4413      	add	r3, r2
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	0d5b      	lsrs	r3, r3, #21
 8009118:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	601a      	str	r2, [r3, #0]
 8009120:	e00b      	b.n	800913a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	331b      	adds	r3, #27
 800912a:	011b      	lsls	r3, r3, #4
 800912c:	4413      	add	r3, r2
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	08db      	lsrs	r3, r3, #3
 8009132:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	331b      	adds	r3, #27
 8009142:	011b      	lsls	r3, r3, #4
 8009144:	4413      	add	r3, r2
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 0202 	and.w	r2, r3, #2
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	331b      	adds	r3, #27
 8009158:	011b      	lsls	r3, r3, #4
 800915a:	4413      	add	r3, r2
 800915c:	3304      	adds	r3, #4
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 0308 	and.w	r3, r3, #8
 8009164:	2b00      	cmp	r3, #0
 8009166:	d003      	beq.n	8009170 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2208      	movs	r2, #8
 800916c:	611a      	str	r2, [r3, #16]
 800916e:	e00b      	b.n	8009188 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	331b      	adds	r3, #27
 8009178:	011b      	lsls	r3, r3, #4
 800917a:	4413      	add	r3, r2
 800917c:	3304      	adds	r3, #4
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 020f 	and.w	r2, r3, #15
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	331b      	adds	r3, #27
 8009190:	011b      	lsls	r3, r3, #4
 8009192:	4413      	add	r3, r2
 8009194:	3304      	adds	r3, #4
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	0a1b      	lsrs	r3, r3, #8
 800919a:	b2da      	uxtb	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	331b      	adds	r3, #27
 80091a8:	011b      	lsls	r3, r3, #4
 80091aa:	4413      	add	r3, r2
 80091ac:	3304      	adds	r3, #4
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	0c1b      	lsrs	r3, r3, #16
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	011b      	lsls	r3, r3, #4
 80091c0:	4413      	add	r3, r2
 80091c2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	011b      	lsls	r3, r3, #4
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	0a1a      	lsrs	r2, r3, #8
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	3301      	adds	r3, #1
 80091e4:	b2d2      	uxtb	r2, r2
 80091e6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	011b      	lsls	r3, r3, #4
 80091f0:	4413      	add	r3, r2
 80091f2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	0c1a      	lsrs	r2, r3, #16
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	3302      	adds	r3, #2
 80091fe:	b2d2      	uxtb	r2, r2
 8009200:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	011b      	lsls	r3, r3, #4
 800920a:	4413      	add	r3, r2
 800920c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	0e1a      	lsrs	r2, r3, #24
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	3303      	adds	r3, #3
 8009218:	b2d2      	uxtb	r2, r2
 800921a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	011b      	lsls	r3, r3, #4
 8009224:	4413      	add	r3, r2
 8009226:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	3304      	adds	r3, #4
 8009230:	b2d2      	uxtb	r2, r2
 8009232:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	011b      	lsls	r3, r3, #4
 800923c:	4413      	add	r3, r2
 800923e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	0a1a      	lsrs	r2, r3, #8
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	3305      	adds	r3, #5
 800924a:	b2d2      	uxtb	r2, r2
 800924c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	011b      	lsls	r3, r3, #4
 8009256:	4413      	add	r3, r2
 8009258:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	0c1a      	lsrs	r2, r3, #16
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	3306      	adds	r3, #6
 8009264:	b2d2      	uxtb	r2, r2
 8009266:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	011b      	lsls	r3, r3, #4
 8009270:	4413      	add	r3, r2
 8009272:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	0e1a      	lsrs	r2, r3, #24
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	3307      	adds	r3, #7
 800927e:	b2d2      	uxtb	r2, r2
 8009280:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d108      	bne.n	800929a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68da      	ldr	r2, [r3, #12]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f042 0220 	orr.w	r2, r2, #32
 8009296:	60da      	str	r2, [r3, #12]
 8009298:	e007      	b.n	80092aa <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	691a      	ldr	r2, [r3, #16]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f042 0220 	orr.w	r2, r2, #32
 80092a8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80092aa:	2300      	movs	r3, #0
 80092ac:	e006      	b.n	80092bc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092b2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
  }
}
 80092bc:	4618      	mov	r0, r3
 80092be:	371c      	adds	r7, #28
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80092d8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80092da:	7bfb      	ldrb	r3, [r7, #15]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d002      	beq.n	80092e6 <HAL_CAN_ActivateNotification+0x1e>
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	d109      	bne.n	80092fa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	6959      	ldr	r1, [r3, #20]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	683a      	ldr	r2, [r7, #0]
 80092f2:	430a      	orrs	r2, r1
 80092f4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	e006      	b.n	8009308 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092fe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
  }
}
 8009308:	4618      	mov	r0, r3
 800930a:	3714      	adds	r7, #20
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b08a      	sub	sp, #40	@ 0x28
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800931c:	2300      	movs	r3, #0
 800931e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009350:	6a3b      	ldr	r3, [r7, #32]
 8009352:	f003 0301 	and.w	r3, r3, #1
 8009356:	2b00      	cmp	r3, #0
 8009358:	d07c      	beq.n	8009454 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800935a:	69bb      	ldr	r3, [r7, #24]
 800935c:	f003 0301 	and.w	r3, r3, #1
 8009360:	2b00      	cmp	r3, #0
 8009362:	d023      	beq.n	80093ac <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2201      	movs	r2, #1
 800936a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	f003 0302 	and.w	r3, r3, #2
 8009372:	2b00      	cmp	r3, #0
 8009374:	d003      	beq.n	800937e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7fe f966 	bl	8007648 <HAL_CAN_TxMailbox0CompleteCallback>
 800937c:	e016      	b.n	80093ac <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	f003 0304 	and.w	r3, r3, #4
 8009384:	2b00      	cmp	r3, #0
 8009386:	d004      	beq.n	8009392 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800938e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009390:	e00c      	b.n	80093ac <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	f003 0308 	and.w	r3, r3, #8
 8009398:	2b00      	cmp	r3, #0
 800939a:	d004      	beq.n	80093a6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800939c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80093a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80093a4:	e002      	b.n	80093ac <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f96b 	bl	8009682 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d024      	beq.n	8009400 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80093be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d003      	beq.n	80093d2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f7fe f94c 	bl	8007668 <HAL_CAN_TxMailbox1CompleteCallback>
 80093d0:	e016      	b.n	8009400 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d004      	beq.n	80093e6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80093dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80093e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80093e4:	e00c      	b.n	8009400 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d004      	beq.n	80093fa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80093f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80093f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80093f8:	e002      	b.n	8009400 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f94b 	bl	8009696 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009406:	2b00      	cmp	r3, #0
 8009408:	d024      	beq.n	8009454 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009412:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800941a:	2b00      	cmp	r3, #0
 800941c:	d003      	beq.n	8009426 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7fe f932 	bl	8007688 <HAL_CAN_TxMailbox2CompleteCallback>
 8009424:	e016      	b.n	8009454 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d004      	beq.n	800943a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009432:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009436:	627b      	str	r3, [r7, #36]	@ 0x24
 8009438:	e00c      	b.n	8009454 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009440:	2b00      	cmp	r3, #0
 8009442:	d004      	beq.n	800944e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8009444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009446:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800944a:	627b      	str	r3, [r7, #36]	@ 0x24
 800944c:	e002      	b.n	8009454 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 f92b 	bl	80096aa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009454:	6a3b      	ldr	r3, [r7, #32]
 8009456:	f003 0308 	and.w	r3, r3, #8
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00c      	beq.n	8009478 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f003 0310 	and.w	r3, r3, #16
 8009464:	2b00      	cmp	r3, #0
 8009466:	d007      	beq.n	8009478 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800946a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800946e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2210      	movs	r2, #16
 8009476:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009478:	6a3b      	ldr	r3, [r7, #32]
 800947a:	f003 0304 	and.w	r3, r3, #4
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00b      	beq.n	800949a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f003 0308 	and.w	r3, r3, #8
 8009488:	2b00      	cmp	r3, #0
 800948a:	d006      	beq.n	800949a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2208      	movs	r2, #8
 8009492:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f912 	bl	80096be <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800949a:	6a3b      	ldr	r3, [r7, #32]
 800949c:	f003 0302 	and.w	r3, r3, #2
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d009      	beq.n	80094b8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	f003 0303 	and.w	r3, r3, #3
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d002      	beq.n	80094b8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7fe f85c 	bl	8007570 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80094b8:	6a3b      	ldr	r3, [r7, #32]
 80094ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00c      	beq.n	80094dc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	f003 0310 	and.w	r3, r3, #16
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d007      	beq.n	80094dc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80094cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80094d2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2210      	movs	r2, #16
 80094da:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80094dc:	6a3b      	ldr	r3, [r7, #32]
 80094de:	f003 0320 	and.w	r3, r3, #32
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00b      	beq.n	80094fe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	f003 0308 	and.w	r3, r3, #8
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d006      	beq.n	80094fe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2208      	movs	r2, #8
 80094f6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f8ea 	bl	80096d2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80094fe:	6a3b      	ldr	r3, [r7, #32]
 8009500:	f003 0310 	and.w	r3, r3, #16
 8009504:	2b00      	cmp	r3, #0
 8009506:	d009      	beq.n	800951c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	f003 0303 	and.w	r3, r3, #3
 8009512:	2b00      	cmp	r3, #0
 8009514:	d002      	beq.n	800951c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7fe f837 	bl	800758a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00b      	beq.n	800953e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	f003 0310 	and.w	r3, r3, #16
 800952c:	2b00      	cmp	r3, #0
 800952e:	d006      	beq.n	800953e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2210      	movs	r2, #16
 8009536:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f8d4 	bl	80096e6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800953e:	6a3b      	ldr	r3, [r7, #32]
 8009540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00b      	beq.n	8009560 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	f003 0308 	and.w	r3, r3, #8
 800954e:	2b00      	cmp	r3, #0
 8009550:	d006      	beq.n	8009560 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2208      	movs	r2, #8
 8009558:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f8cd 	bl	80096fa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009560:	6a3b      	ldr	r3, [r7, #32]
 8009562:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009566:	2b00      	cmp	r3, #0
 8009568:	d07b      	beq.n	8009662 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	f003 0304 	and.w	r3, r3, #4
 8009570:	2b00      	cmp	r3, #0
 8009572:	d072      	beq.n	800965a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800957a:	2b00      	cmp	r3, #0
 800957c:	d008      	beq.n	8009590 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009584:	2b00      	cmp	r3, #0
 8009586:	d003      	beq.n	8009590 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800958a:	f043 0301 	orr.w	r3, r3, #1
 800958e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009596:	2b00      	cmp	r3, #0
 8009598:	d008      	beq.n	80095ac <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d003      	beq.n	80095ac <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80095a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a6:	f043 0302 	orr.w	r3, r3, #2
 80095aa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80095ac:	6a3b      	ldr	r3, [r7, #32]
 80095ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d008      	beq.n	80095c8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d003      	beq.n	80095c8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80095c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c2:	f043 0304 	orr.w	r3, r3, #4
 80095c6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80095c8:	6a3b      	ldr	r3, [r7, #32]
 80095ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d043      	beq.n	800965a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d03e      	beq.n	800965a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80095e2:	2b60      	cmp	r3, #96	@ 0x60
 80095e4:	d02b      	beq.n	800963e <HAL_CAN_IRQHandler+0x32a>
 80095e6:	2b60      	cmp	r3, #96	@ 0x60
 80095e8:	d82e      	bhi.n	8009648 <HAL_CAN_IRQHandler+0x334>
 80095ea:	2b50      	cmp	r3, #80	@ 0x50
 80095ec:	d022      	beq.n	8009634 <HAL_CAN_IRQHandler+0x320>
 80095ee:	2b50      	cmp	r3, #80	@ 0x50
 80095f0:	d82a      	bhi.n	8009648 <HAL_CAN_IRQHandler+0x334>
 80095f2:	2b40      	cmp	r3, #64	@ 0x40
 80095f4:	d019      	beq.n	800962a <HAL_CAN_IRQHandler+0x316>
 80095f6:	2b40      	cmp	r3, #64	@ 0x40
 80095f8:	d826      	bhi.n	8009648 <HAL_CAN_IRQHandler+0x334>
 80095fa:	2b30      	cmp	r3, #48	@ 0x30
 80095fc:	d010      	beq.n	8009620 <HAL_CAN_IRQHandler+0x30c>
 80095fe:	2b30      	cmp	r3, #48	@ 0x30
 8009600:	d822      	bhi.n	8009648 <HAL_CAN_IRQHandler+0x334>
 8009602:	2b10      	cmp	r3, #16
 8009604:	d002      	beq.n	800960c <HAL_CAN_IRQHandler+0x2f8>
 8009606:	2b20      	cmp	r3, #32
 8009608:	d005      	beq.n	8009616 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800960a:	e01d      	b.n	8009648 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800960c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800960e:	f043 0308 	orr.w	r3, r3, #8
 8009612:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8009614:	e019      	b.n	800964a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009618:	f043 0310 	orr.w	r3, r3, #16
 800961c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800961e:	e014      	b.n	800964a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009622:	f043 0320 	orr.w	r3, r3, #32
 8009626:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8009628:	e00f      	b.n	800964a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800962a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009630:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8009632:	e00a      	b.n	800964a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8009634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800963a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800963c:	e005      	b.n	800964a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800963e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009644:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8009646:	e000      	b.n	800964a <HAL_CAN_IRQHandler+0x336>
            break;
 8009648:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	699a      	ldr	r2, [r3, #24]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009658:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2204      	movs	r2, #4
 8009660:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8009662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009664:	2b00      	cmp	r3, #0
 8009666:	d008      	beq.n	800967a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800966c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966e:	431a      	orrs	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f84a 	bl	800970e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800967a:	bf00      	nop
 800967c:	3728      	adds	r7, #40	@ 0x28
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009682:	b480      	push	{r7}
 8009684:	b083      	sub	sp, #12
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800968a:	bf00      	nop
 800968c:	370c      	adds	r7, #12
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr

08009696 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009696:	b480      	push	{r7}
 8009698:	b083      	sub	sp, #12
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800969e:	bf00      	nop
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80096aa:	b480      	push	{r7}
 80096ac:	b083      	sub	sp, #12
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80096b2:	bf00      	nop
 80096b4:	370c      	adds	r7, #12
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80096be:	b480      	push	{r7}
 80096c0:	b083      	sub	sp, #12
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80096c6:	bf00      	nop
 80096c8:	370c      	adds	r7, #12
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80096d2:	b480      	push	{r7}
 80096d4:	b083      	sub	sp, #12
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80096da:	bf00      	nop
 80096dc:	370c      	adds	r7, #12
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b083      	sub	sp, #12
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80096ee:	bf00      	nop
 80096f0:	370c      	adds	r7, #12
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr

080096fa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80096fa:	b480      	push	{r7}
 80096fc:	b083      	sub	sp, #12
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8009702:	bf00      	nop
 8009704:	370c      	adds	r7, #12
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr

0800970e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800970e:	b480      	push	{r7}
 8009710:	b083      	sub	sp, #12
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8009716:	bf00      	nop
 8009718:	370c      	adds	r7, #12
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
	...

08009724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f003 0307 	and.w	r3, r3, #7
 8009732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009734:	4b0c      	ldr	r3, [pc, #48]	@ (8009768 <__NVIC_SetPriorityGrouping+0x44>)
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800973a:	68ba      	ldr	r2, [r7, #8]
 800973c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009740:	4013      	ands	r3, r2
 8009742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800974c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009756:	4a04      	ldr	r2, [pc, #16]	@ (8009768 <__NVIC_SetPriorityGrouping+0x44>)
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	60d3      	str	r3, [r2, #12]
}
 800975c:	bf00      	nop
 800975e:	3714      	adds	r7, #20
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr
 8009768:	e000ed00 	.word	0xe000ed00

0800976c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800976c:	b480      	push	{r7}
 800976e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009770:	4b04      	ldr	r3, [pc, #16]	@ (8009784 <__NVIC_GetPriorityGrouping+0x18>)
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	0a1b      	lsrs	r3, r3, #8
 8009776:	f003 0307 	and.w	r3, r3, #7
}
 800977a:	4618      	mov	r0, r3
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr
 8009784:	e000ed00 	.word	0xe000ed00

08009788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	4603      	mov	r3, r0
 8009790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009796:	2b00      	cmp	r3, #0
 8009798:	db0b      	blt.n	80097b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800979a:	79fb      	ldrb	r3, [r7, #7]
 800979c:	f003 021f 	and.w	r2, r3, #31
 80097a0:	4907      	ldr	r1, [pc, #28]	@ (80097c0 <__NVIC_EnableIRQ+0x38>)
 80097a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097a6:	095b      	lsrs	r3, r3, #5
 80097a8:	2001      	movs	r0, #1
 80097aa:	fa00 f202 	lsl.w	r2, r0, r2
 80097ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80097b2:	bf00      	nop
 80097b4:	370c      	adds	r7, #12
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	e000e100 	.word	0xe000e100

080097c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	4603      	mov	r3, r0
 80097cc:	6039      	str	r1, [r7, #0]
 80097ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80097d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	db0a      	blt.n	80097ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	b2da      	uxtb	r2, r3
 80097dc:	490c      	ldr	r1, [pc, #48]	@ (8009810 <__NVIC_SetPriority+0x4c>)
 80097de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097e2:	0112      	lsls	r2, r2, #4
 80097e4:	b2d2      	uxtb	r2, r2
 80097e6:	440b      	add	r3, r1
 80097e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80097ec:	e00a      	b.n	8009804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	b2da      	uxtb	r2, r3
 80097f2:	4908      	ldr	r1, [pc, #32]	@ (8009814 <__NVIC_SetPriority+0x50>)
 80097f4:	79fb      	ldrb	r3, [r7, #7]
 80097f6:	f003 030f 	and.w	r3, r3, #15
 80097fa:	3b04      	subs	r3, #4
 80097fc:	0112      	lsls	r2, r2, #4
 80097fe:	b2d2      	uxtb	r2, r2
 8009800:	440b      	add	r3, r1
 8009802:	761a      	strb	r2, [r3, #24]
}
 8009804:	bf00      	nop
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	e000e100 	.word	0xe000e100
 8009814:	e000ed00 	.word	0xe000ed00

08009818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009818:	b480      	push	{r7}
 800981a:	b089      	sub	sp, #36	@ 0x24
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f003 0307 	and.w	r3, r3, #7
 800982a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	f1c3 0307 	rsb	r3, r3, #7
 8009832:	2b04      	cmp	r3, #4
 8009834:	bf28      	it	cs
 8009836:	2304      	movcs	r3, #4
 8009838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	3304      	adds	r3, #4
 800983e:	2b06      	cmp	r3, #6
 8009840:	d902      	bls.n	8009848 <NVIC_EncodePriority+0x30>
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	3b03      	subs	r3, #3
 8009846:	e000      	b.n	800984a <NVIC_EncodePriority+0x32>
 8009848:	2300      	movs	r3, #0
 800984a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800984c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	fa02 f303 	lsl.w	r3, r2, r3
 8009856:	43da      	mvns	r2, r3
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	401a      	ands	r2, r3
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009860:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	fa01 f303 	lsl.w	r3, r1, r3
 800986a:	43d9      	mvns	r1, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009870:	4313      	orrs	r3, r2
         );
}
 8009872:	4618      	mov	r0, r3
 8009874:	3724      	adds	r7, #36	@ 0x24
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
	...

08009880 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009880:	b480      	push	{r7}
 8009882:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009884:	f3bf 8f4f 	dsb	sy
}
 8009888:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800988a:	4b06      	ldr	r3, [pc, #24]	@ (80098a4 <__NVIC_SystemReset+0x24>)
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009892:	4904      	ldr	r1, [pc, #16]	@ (80098a4 <__NVIC_SystemReset+0x24>)
 8009894:	4b04      	ldr	r3, [pc, #16]	@ (80098a8 <__NVIC_SystemReset+0x28>)
 8009896:	4313      	orrs	r3, r2
 8009898:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800989a:	f3bf 8f4f 	dsb	sy
}
 800989e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80098a0:	bf00      	nop
 80098a2:	e7fd      	b.n	80098a0 <__NVIC_SystemReset+0x20>
 80098a4:	e000ed00 	.word	0xe000ed00
 80098a8:	05fa0004 	.word	0x05fa0004

080098ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	3b01      	subs	r3, #1
 80098b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80098bc:	d301      	bcc.n	80098c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80098be:	2301      	movs	r3, #1
 80098c0:	e00f      	b.n	80098e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80098c2:	4a0a      	ldr	r2, [pc, #40]	@ (80098ec <SysTick_Config+0x40>)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	3b01      	subs	r3, #1
 80098c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80098ca:	210f      	movs	r1, #15
 80098cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098d0:	f7ff ff78 	bl	80097c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80098d4:	4b05      	ldr	r3, [pc, #20]	@ (80098ec <SysTick_Config+0x40>)
 80098d6:	2200      	movs	r2, #0
 80098d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80098da:	4b04      	ldr	r3, [pc, #16]	@ (80098ec <SysTick_Config+0x40>)
 80098dc:	2207      	movs	r2, #7
 80098de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	e000e010 	.word	0xe000e010

080098f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7ff ff13 	bl	8009724 <__NVIC_SetPriorityGrouping>
}
 80098fe:	bf00      	nop
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009906:	b580      	push	{r7, lr}
 8009908:	b086      	sub	sp, #24
 800990a:	af00      	add	r7, sp, #0
 800990c:	4603      	mov	r3, r0
 800990e:	60b9      	str	r1, [r7, #8]
 8009910:	607a      	str	r2, [r7, #4]
 8009912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009914:	2300      	movs	r3, #0
 8009916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009918:	f7ff ff28 	bl	800976c <__NVIC_GetPriorityGrouping>
 800991c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	68b9      	ldr	r1, [r7, #8]
 8009922:	6978      	ldr	r0, [r7, #20]
 8009924:	f7ff ff78 	bl	8009818 <NVIC_EncodePriority>
 8009928:	4602      	mov	r2, r0
 800992a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800992e:	4611      	mov	r1, r2
 8009930:	4618      	mov	r0, r3
 8009932:	f7ff ff47 	bl	80097c4 <__NVIC_SetPriority>
}
 8009936:	bf00      	nop
 8009938:	3718      	adds	r7, #24
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b082      	sub	sp, #8
 8009942:	af00      	add	r7, sp, #0
 8009944:	4603      	mov	r3, r0
 8009946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800994c:	4618      	mov	r0, r3
 800994e:	f7ff ff1b 	bl	8009788 <__NVIC_EnableIRQ>
}
 8009952:	bf00      	nop
 8009954:	3708      	adds	r7, #8
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800995e:	f7ff ff8f 	bl	8009880 <__NVIC_SystemReset>

08009962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b082      	sub	sp, #8
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f7ff ff9e 	bl	80098ac <SysTick_Config>
 8009970:	4603      	mov	r3, r0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
	...

0800997c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800997c:	b480      	push	{r7}
 800997e:	b089      	sub	sp, #36	@ 0x24
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009986:	2300      	movs	r3, #0
 8009988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800998a:	2300      	movs	r3, #0
 800998c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800998e:	2300      	movs	r3, #0
 8009990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009992:	2300      	movs	r3, #0
 8009994:	61fb      	str	r3, [r7, #28]
 8009996:	e177      	b.n	8009c88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009998:	2201      	movs	r2, #1
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	fa02 f303 	lsl.w	r3, r2, r3
 80099a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	697a      	ldr	r2, [r7, #20]
 80099a8:	4013      	ands	r3, r2
 80099aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80099ac:	693a      	ldr	r2, [r7, #16]
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	f040 8166 	bne.w	8009c82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	f003 0303 	and.w	r3, r3, #3
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d005      	beq.n	80099ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	d130      	bne.n	8009a30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	005b      	lsls	r3, r3, #1
 80099d8:	2203      	movs	r2, #3
 80099da:	fa02 f303 	lsl.w	r3, r2, r3
 80099de:	43db      	mvns	r3, r3
 80099e0:	69ba      	ldr	r2, [r7, #24]
 80099e2:	4013      	ands	r3, r2
 80099e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	68da      	ldr	r2, [r3, #12]
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	005b      	lsls	r3, r3, #1
 80099ee:	fa02 f303 	lsl.w	r3, r2, r3
 80099f2:	69ba      	ldr	r2, [r7, #24]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	69ba      	ldr	r2, [r7, #24]
 80099fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009a04:	2201      	movs	r2, #1
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	fa02 f303 	lsl.w	r3, r2, r3
 8009a0c:	43db      	mvns	r3, r3
 8009a0e:	69ba      	ldr	r2, [r7, #24]
 8009a10:	4013      	ands	r3, r2
 8009a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	091b      	lsrs	r3, r3, #4
 8009a1a:	f003 0201 	and.w	r2, r3, #1
 8009a1e:	69fb      	ldr	r3, [r7, #28]
 8009a20:	fa02 f303 	lsl.w	r3, r2, r3
 8009a24:	69ba      	ldr	r2, [r7, #24]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	69ba      	ldr	r2, [r7, #24]
 8009a2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	f003 0303 	and.w	r3, r3, #3
 8009a38:	2b03      	cmp	r3, #3
 8009a3a:	d017      	beq.n	8009a6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	005b      	lsls	r3, r3, #1
 8009a46:	2203      	movs	r2, #3
 8009a48:	fa02 f303 	lsl.w	r3, r2, r3
 8009a4c:	43db      	mvns	r3, r3
 8009a4e:	69ba      	ldr	r2, [r7, #24]
 8009a50:	4013      	ands	r3, r2
 8009a52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	689a      	ldr	r2, [r3, #8]
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	005b      	lsls	r3, r3, #1
 8009a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a60:	69ba      	ldr	r2, [r7, #24]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	69ba      	ldr	r2, [r7, #24]
 8009a6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	f003 0303 	and.w	r3, r3, #3
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	d123      	bne.n	8009ac0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	08da      	lsrs	r2, r3, #3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	3208      	adds	r2, #8
 8009a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	f003 0307 	and.w	r3, r3, #7
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	220f      	movs	r2, #15
 8009a90:	fa02 f303 	lsl.w	r3, r2, r3
 8009a94:	43db      	mvns	r3, r3
 8009a96:	69ba      	ldr	r2, [r7, #24]
 8009a98:	4013      	ands	r3, r2
 8009a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	691a      	ldr	r2, [r3, #16]
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	f003 0307 	and.w	r3, r3, #7
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8009aac:	69ba      	ldr	r2, [r7, #24]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	08da      	lsrs	r2, r3, #3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	3208      	adds	r2, #8
 8009aba:	69b9      	ldr	r1, [r7, #24]
 8009abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	005b      	lsls	r3, r3, #1
 8009aca:	2203      	movs	r2, #3
 8009acc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad0:	43db      	mvns	r3, r3
 8009ad2:	69ba      	ldr	r2, [r7, #24]
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	f003 0203 	and.w	r2, r3, #3
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	005b      	lsls	r3, r3, #1
 8009ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae8:	69ba      	ldr	r2, [r7, #24]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	69ba      	ldr	r2, [r7, #24]
 8009af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f000 80c0 	beq.w	8009c82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b02:	2300      	movs	r3, #0
 8009b04:	60fb      	str	r3, [r7, #12]
 8009b06:	4b66      	ldr	r3, [pc, #408]	@ (8009ca0 <HAL_GPIO_Init+0x324>)
 8009b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b0a:	4a65      	ldr	r2, [pc, #404]	@ (8009ca0 <HAL_GPIO_Init+0x324>)
 8009b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009b10:	6453      	str	r3, [r2, #68]	@ 0x44
 8009b12:	4b63      	ldr	r3, [pc, #396]	@ (8009ca0 <HAL_GPIO_Init+0x324>)
 8009b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b1a:	60fb      	str	r3, [r7, #12]
 8009b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009b1e:	4a61      	ldr	r2, [pc, #388]	@ (8009ca4 <HAL_GPIO_Init+0x328>)
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	089b      	lsrs	r3, r3, #2
 8009b24:	3302      	adds	r3, #2
 8009b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	f003 0303 	and.w	r3, r3, #3
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	220f      	movs	r2, #15
 8009b36:	fa02 f303 	lsl.w	r3, r2, r3
 8009b3a:	43db      	mvns	r3, r3
 8009b3c:	69ba      	ldr	r2, [r7, #24]
 8009b3e:	4013      	ands	r3, r2
 8009b40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4a58      	ldr	r2, [pc, #352]	@ (8009ca8 <HAL_GPIO_Init+0x32c>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d037      	beq.n	8009bba <HAL_GPIO_Init+0x23e>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4a57      	ldr	r2, [pc, #348]	@ (8009cac <HAL_GPIO_Init+0x330>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d031      	beq.n	8009bb6 <HAL_GPIO_Init+0x23a>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	4a56      	ldr	r2, [pc, #344]	@ (8009cb0 <HAL_GPIO_Init+0x334>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d02b      	beq.n	8009bb2 <HAL_GPIO_Init+0x236>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	4a55      	ldr	r2, [pc, #340]	@ (8009cb4 <HAL_GPIO_Init+0x338>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d025      	beq.n	8009bae <HAL_GPIO_Init+0x232>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	4a54      	ldr	r2, [pc, #336]	@ (8009cb8 <HAL_GPIO_Init+0x33c>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d01f      	beq.n	8009baa <HAL_GPIO_Init+0x22e>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4a53      	ldr	r2, [pc, #332]	@ (8009cbc <HAL_GPIO_Init+0x340>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d019      	beq.n	8009ba6 <HAL_GPIO_Init+0x22a>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	4a52      	ldr	r2, [pc, #328]	@ (8009cc0 <HAL_GPIO_Init+0x344>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d013      	beq.n	8009ba2 <HAL_GPIO_Init+0x226>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4a51      	ldr	r2, [pc, #324]	@ (8009cc4 <HAL_GPIO_Init+0x348>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d00d      	beq.n	8009b9e <HAL_GPIO_Init+0x222>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4a50      	ldr	r2, [pc, #320]	@ (8009cc8 <HAL_GPIO_Init+0x34c>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d007      	beq.n	8009b9a <HAL_GPIO_Init+0x21e>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a4f      	ldr	r2, [pc, #316]	@ (8009ccc <HAL_GPIO_Init+0x350>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d101      	bne.n	8009b96 <HAL_GPIO_Init+0x21a>
 8009b92:	2309      	movs	r3, #9
 8009b94:	e012      	b.n	8009bbc <HAL_GPIO_Init+0x240>
 8009b96:	230a      	movs	r3, #10
 8009b98:	e010      	b.n	8009bbc <HAL_GPIO_Init+0x240>
 8009b9a:	2308      	movs	r3, #8
 8009b9c:	e00e      	b.n	8009bbc <HAL_GPIO_Init+0x240>
 8009b9e:	2307      	movs	r3, #7
 8009ba0:	e00c      	b.n	8009bbc <HAL_GPIO_Init+0x240>
 8009ba2:	2306      	movs	r3, #6
 8009ba4:	e00a      	b.n	8009bbc <HAL_GPIO_Init+0x240>
 8009ba6:	2305      	movs	r3, #5
 8009ba8:	e008      	b.n	8009bbc <HAL_GPIO_Init+0x240>
 8009baa:	2304      	movs	r3, #4
 8009bac:	e006      	b.n	8009bbc <HAL_GPIO_Init+0x240>
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e004      	b.n	8009bbc <HAL_GPIO_Init+0x240>
 8009bb2:	2302      	movs	r3, #2
 8009bb4:	e002      	b.n	8009bbc <HAL_GPIO_Init+0x240>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e000      	b.n	8009bbc <HAL_GPIO_Init+0x240>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	69fa      	ldr	r2, [r7, #28]
 8009bbe:	f002 0203 	and.w	r2, r2, #3
 8009bc2:	0092      	lsls	r2, r2, #2
 8009bc4:	4093      	lsls	r3, r2
 8009bc6:	69ba      	ldr	r2, [r7, #24]
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009bcc:	4935      	ldr	r1, [pc, #212]	@ (8009ca4 <HAL_GPIO_Init+0x328>)
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	089b      	lsrs	r3, r3, #2
 8009bd2:	3302      	adds	r3, #2
 8009bd4:	69ba      	ldr	r2, [r7, #24]
 8009bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009bda:	4b3d      	ldr	r3, [pc, #244]	@ (8009cd0 <HAL_GPIO_Init+0x354>)
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	43db      	mvns	r3, r3
 8009be4:	69ba      	ldr	r2, [r7, #24]
 8009be6:	4013      	ands	r3, r2
 8009be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d003      	beq.n	8009bfe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009bf6:	69ba      	ldr	r2, [r7, #24]
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009bfe:	4a34      	ldr	r2, [pc, #208]	@ (8009cd0 <HAL_GPIO_Init+0x354>)
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009c04:	4b32      	ldr	r3, [pc, #200]	@ (8009cd0 <HAL_GPIO_Init+0x354>)
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	43db      	mvns	r3, r3
 8009c0e:	69ba      	ldr	r2, [r7, #24]
 8009c10:	4013      	ands	r3, r2
 8009c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d003      	beq.n	8009c28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009c20:	69ba      	ldr	r2, [r7, #24]
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009c28:	4a29      	ldr	r2, [pc, #164]	@ (8009cd0 <HAL_GPIO_Init+0x354>)
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009c2e:	4b28      	ldr	r3, [pc, #160]	@ (8009cd0 <HAL_GPIO_Init+0x354>)
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	43db      	mvns	r3, r3
 8009c38:	69ba      	ldr	r2, [r7, #24]
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d003      	beq.n	8009c52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009c4a:	69ba      	ldr	r2, [r7, #24]
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009c52:	4a1f      	ldr	r2, [pc, #124]	@ (8009cd0 <HAL_GPIO_Init+0x354>)
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009c58:	4b1d      	ldr	r3, [pc, #116]	@ (8009cd0 <HAL_GPIO_Init+0x354>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	43db      	mvns	r3, r3
 8009c62:	69ba      	ldr	r2, [r7, #24]
 8009c64:	4013      	ands	r3, r2
 8009c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d003      	beq.n	8009c7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009c74:	69ba      	ldr	r2, [r7, #24]
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009c7c:	4a14      	ldr	r2, [pc, #80]	@ (8009cd0 <HAL_GPIO_Init+0x354>)
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	3301      	adds	r3, #1
 8009c86:	61fb      	str	r3, [r7, #28]
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	2b0f      	cmp	r3, #15
 8009c8c:	f67f ae84 	bls.w	8009998 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009c90:	bf00      	nop
 8009c92:	bf00      	nop
 8009c94:	3724      	adds	r7, #36	@ 0x24
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	40023800 	.word	0x40023800
 8009ca4:	40013800 	.word	0x40013800
 8009ca8:	40020000 	.word	0x40020000
 8009cac:	40020400 	.word	0x40020400
 8009cb0:	40020800 	.word	0x40020800
 8009cb4:	40020c00 	.word	0x40020c00
 8009cb8:	40021000 	.word	0x40021000
 8009cbc:	40021400 	.word	0x40021400
 8009cc0:	40021800 	.word	0x40021800
 8009cc4:	40021c00 	.word	0x40021c00
 8009cc8:	40022000 	.word	0x40022000
 8009ccc:	40022400 	.word	0x40022400
 8009cd0:	40013c00 	.word	0x40013c00

08009cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	460b      	mov	r3, r1
 8009cde:	807b      	strh	r3, [r7, #2]
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009ce4:	787b      	ldrb	r3, [r7, #1]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d003      	beq.n	8009cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009cea:	887a      	ldrh	r2, [r7, #2]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009cf0:	e003      	b.n	8009cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009cf2:	887b      	ldrh	r3, [r7, #2]
 8009cf4:	041a      	lsls	r2, r3, #16
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	619a      	str	r2, [r3, #24]
}
 8009cfa:	bf00      	nop
 8009cfc:	370c      	adds	r7, #12
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr
	...

08009d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d101      	bne.n	8009d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	e267      	b.n	800a1ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f003 0301 	and.w	r3, r3, #1
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d075      	beq.n	8009e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009d26:	4b88      	ldr	r3, [pc, #544]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	f003 030c 	and.w	r3, r3, #12
 8009d2e:	2b04      	cmp	r3, #4
 8009d30:	d00c      	beq.n	8009d4c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009d32:	4b85      	ldr	r3, [pc, #532]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009d3a:	2b08      	cmp	r3, #8
 8009d3c:	d112      	bne.n	8009d64 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009d3e:	4b82      	ldr	r3, [pc, #520]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009d4a:	d10b      	bne.n	8009d64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d4c:	4b7e      	ldr	r3, [pc, #504]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d05b      	beq.n	8009e10 <HAL_RCC_OscConfig+0x108>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d157      	bne.n	8009e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	e242      	b.n	800a1ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d6c:	d106      	bne.n	8009d7c <HAL_RCC_OscConfig+0x74>
 8009d6e:	4b76      	ldr	r3, [pc, #472]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a75      	ldr	r2, [pc, #468]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d78:	6013      	str	r3, [r2, #0]
 8009d7a:	e01d      	b.n	8009db8 <HAL_RCC_OscConfig+0xb0>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009d84:	d10c      	bne.n	8009da0 <HAL_RCC_OscConfig+0x98>
 8009d86:	4b70      	ldr	r3, [pc, #448]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a6f      	ldr	r2, [pc, #444]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009d90:	6013      	str	r3, [r2, #0]
 8009d92:	4b6d      	ldr	r3, [pc, #436]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a6c      	ldr	r2, [pc, #432]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d9c:	6013      	str	r3, [r2, #0]
 8009d9e:	e00b      	b.n	8009db8 <HAL_RCC_OscConfig+0xb0>
 8009da0:	4b69      	ldr	r3, [pc, #420]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a68      	ldr	r2, [pc, #416]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009daa:	6013      	str	r3, [r2, #0]
 8009dac:	4b66      	ldr	r3, [pc, #408]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a65      	ldr	r2, [pc, #404]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009db2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d013      	beq.n	8009de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009dc0:	f7fe f95c 	bl	800807c <HAL_GetTick>
 8009dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009dc6:	e008      	b.n	8009dda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009dc8:	f7fe f958 	bl	800807c <HAL_GetTick>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	2b64      	cmp	r3, #100	@ 0x64
 8009dd4:	d901      	bls.n	8009dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009dd6:	2303      	movs	r3, #3
 8009dd8:	e207      	b.n	800a1ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009dda:	4b5b      	ldr	r3, [pc, #364]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d0f0      	beq.n	8009dc8 <HAL_RCC_OscConfig+0xc0>
 8009de6:	e014      	b.n	8009e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009de8:	f7fe f948 	bl	800807c <HAL_GetTick>
 8009dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009dee:	e008      	b.n	8009e02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009df0:	f7fe f944 	bl	800807c <HAL_GetTick>
 8009df4:	4602      	mov	r2, r0
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	1ad3      	subs	r3, r2, r3
 8009dfa:	2b64      	cmp	r3, #100	@ 0x64
 8009dfc:	d901      	bls.n	8009e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	e1f3      	b.n	800a1ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e02:	4b51      	ldr	r3, [pc, #324]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1f0      	bne.n	8009df0 <HAL_RCC_OscConfig+0xe8>
 8009e0e:	e000      	b.n	8009e12 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 0302 	and.w	r3, r3, #2
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d063      	beq.n	8009ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	f003 030c 	and.w	r3, r3, #12
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00b      	beq.n	8009e42 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009e2a:	4b47      	ldr	r3, [pc, #284]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009e32:	2b08      	cmp	r3, #8
 8009e34:	d11c      	bne.n	8009e70 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009e36:	4b44      	ldr	r3, [pc, #272]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d116      	bne.n	8009e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009e42:	4b41      	ldr	r3, [pc, #260]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f003 0302 	and.w	r3, r3, #2
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d005      	beq.n	8009e5a <HAL_RCC_OscConfig+0x152>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d001      	beq.n	8009e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	e1c7      	b.n	800a1ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	00db      	lsls	r3, r3, #3
 8009e68:	4937      	ldr	r1, [pc, #220]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009e6e:	e03a      	b.n	8009ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d020      	beq.n	8009eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009e78:	4b34      	ldr	r3, [pc, #208]	@ (8009f4c <HAL_RCC_OscConfig+0x244>)
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e7e:	f7fe f8fd 	bl	800807c <HAL_GetTick>
 8009e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e84:	e008      	b.n	8009e98 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e86:	f7fe f8f9 	bl	800807c <HAL_GetTick>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	1ad3      	subs	r3, r2, r3
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d901      	bls.n	8009e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009e94:	2303      	movs	r3, #3
 8009e96:	e1a8      	b.n	800a1ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e98:	4b2b      	ldr	r3, [pc, #172]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f003 0302 	and.w	r3, r3, #2
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d0f0      	beq.n	8009e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ea4:	4b28      	ldr	r3, [pc, #160]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	00db      	lsls	r3, r3, #3
 8009eb2:	4925      	ldr	r1, [pc, #148]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	600b      	str	r3, [r1, #0]
 8009eb8:	e015      	b.n	8009ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009eba:	4b24      	ldr	r3, [pc, #144]	@ (8009f4c <HAL_RCC_OscConfig+0x244>)
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ec0:	f7fe f8dc 	bl	800807c <HAL_GetTick>
 8009ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ec6:	e008      	b.n	8009eda <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ec8:	f7fe f8d8 	bl	800807c <HAL_GetTick>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d901      	bls.n	8009eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	e187      	b.n	800a1ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009eda:	4b1b      	ldr	r3, [pc, #108]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f003 0302 	and.w	r3, r3, #2
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1f0      	bne.n	8009ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f003 0308 	and.w	r3, r3, #8
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d036      	beq.n	8009f60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	695b      	ldr	r3, [r3, #20]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d016      	beq.n	8009f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009efa:	4b15      	ldr	r3, [pc, #84]	@ (8009f50 <HAL_RCC_OscConfig+0x248>)
 8009efc:	2201      	movs	r2, #1
 8009efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f00:	f7fe f8bc 	bl	800807c <HAL_GetTick>
 8009f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f06:	e008      	b.n	8009f1a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f08:	f7fe f8b8 	bl	800807c <HAL_GetTick>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	1ad3      	subs	r3, r2, r3
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d901      	bls.n	8009f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009f16:	2303      	movs	r3, #3
 8009f18:	e167      	b.n	800a1ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8009f48 <HAL_RCC_OscConfig+0x240>)
 8009f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f1e:	f003 0302 	and.w	r3, r3, #2
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d0f0      	beq.n	8009f08 <HAL_RCC_OscConfig+0x200>
 8009f26:	e01b      	b.n	8009f60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009f28:	4b09      	ldr	r3, [pc, #36]	@ (8009f50 <HAL_RCC_OscConfig+0x248>)
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f2e:	f7fe f8a5 	bl	800807c <HAL_GetTick>
 8009f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009f34:	e00e      	b.n	8009f54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f36:	f7fe f8a1 	bl	800807c <HAL_GetTick>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d907      	bls.n	8009f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e150      	b.n	800a1ea <HAL_RCC_OscConfig+0x4e2>
 8009f48:	40023800 	.word	0x40023800
 8009f4c:	42470000 	.word	0x42470000
 8009f50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009f54:	4b88      	ldr	r3, [pc, #544]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 8009f56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f58:	f003 0302 	and.w	r3, r3, #2
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d1ea      	bne.n	8009f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f003 0304 	and.w	r3, r3, #4
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	f000 8097 	beq.w	800a09c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009f72:	4b81      	ldr	r3, [pc, #516]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 8009f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d10f      	bne.n	8009f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f7e:	2300      	movs	r3, #0
 8009f80:	60bb      	str	r3, [r7, #8]
 8009f82:	4b7d      	ldr	r3, [pc, #500]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 8009f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f86:	4a7c      	ldr	r2, [pc, #496]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 8009f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8009f8e:	4b7a      	ldr	r3, [pc, #488]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 8009f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f96:	60bb      	str	r3, [r7, #8]
 8009f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f9e:	4b77      	ldr	r3, [pc, #476]	@ (800a17c <HAL_RCC_OscConfig+0x474>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d118      	bne.n	8009fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009faa:	4b74      	ldr	r3, [pc, #464]	@ (800a17c <HAL_RCC_OscConfig+0x474>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a73      	ldr	r2, [pc, #460]	@ (800a17c <HAL_RCC_OscConfig+0x474>)
 8009fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009fb6:	f7fe f861 	bl	800807c <HAL_GetTick>
 8009fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009fbc:	e008      	b.n	8009fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fbe:	f7fe f85d 	bl	800807c <HAL_GetTick>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	1ad3      	subs	r3, r2, r3
 8009fc8:	2b02      	cmp	r3, #2
 8009fca:	d901      	bls.n	8009fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009fcc:	2303      	movs	r3, #3
 8009fce:	e10c      	b.n	800a1ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009fd0:	4b6a      	ldr	r3, [pc, #424]	@ (800a17c <HAL_RCC_OscConfig+0x474>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d0f0      	beq.n	8009fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d106      	bne.n	8009ff2 <HAL_RCC_OscConfig+0x2ea>
 8009fe4:	4b64      	ldr	r3, [pc, #400]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 8009fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fe8:	4a63      	ldr	r2, [pc, #396]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 8009fea:	f043 0301 	orr.w	r3, r3, #1
 8009fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ff0:	e01c      	b.n	800a02c <HAL_RCC_OscConfig+0x324>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	2b05      	cmp	r3, #5
 8009ff8:	d10c      	bne.n	800a014 <HAL_RCC_OscConfig+0x30c>
 8009ffa:	4b5f      	ldr	r3, [pc, #380]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 8009ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ffe:	4a5e      	ldr	r2, [pc, #376]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 800a000:	f043 0304 	orr.w	r3, r3, #4
 800a004:	6713      	str	r3, [r2, #112]	@ 0x70
 800a006:	4b5c      	ldr	r3, [pc, #368]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 800a008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a00a:	4a5b      	ldr	r2, [pc, #364]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 800a00c:	f043 0301 	orr.w	r3, r3, #1
 800a010:	6713      	str	r3, [r2, #112]	@ 0x70
 800a012:	e00b      	b.n	800a02c <HAL_RCC_OscConfig+0x324>
 800a014:	4b58      	ldr	r3, [pc, #352]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 800a016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a018:	4a57      	ldr	r2, [pc, #348]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 800a01a:	f023 0301 	bic.w	r3, r3, #1
 800a01e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a020:	4b55      	ldr	r3, [pc, #340]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 800a022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a024:	4a54      	ldr	r2, [pc, #336]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 800a026:	f023 0304 	bic.w	r3, r3, #4
 800a02a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d015      	beq.n	800a060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a034:	f7fe f822 	bl	800807c <HAL_GetTick>
 800a038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a03a:	e00a      	b.n	800a052 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a03c:	f7fe f81e 	bl	800807c <HAL_GetTick>
 800a040:	4602      	mov	r2, r0
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d901      	bls.n	800a052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a04e:	2303      	movs	r3, #3
 800a050:	e0cb      	b.n	800a1ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a052:	4b49      	ldr	r3, [pc, #292]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 800a054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a056:	f003 0302 	and.w	r3, r3, #2
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d0ee      	beq.n	800a03c <HAL_RCC_OscConfig+0x334>
 800a05e:	e014      	b.n	800a08a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a060:	f7fe f80c 	bl	800807c <HAL_GetTick>
 800a064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a066:	e00a      	b.n	800a07e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a068:	f7fe f808 	bl	800807c <HAL_GetTick>
 800a06c:	4602      	mov	r2, r0
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a076:	4293      	cmp	r3, r2
 800a078:	d901      	bls.n	800a07e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a07a:	2303      	movs	r3, #3
 800a07c:	e0b5      	b.n	800a1ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a07e:	4b3e      	ldr	r3, [pc, #248]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 800a080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a082:	f003 0302 	and.w	r3, r3, #2
 800a086:	2b00      	cmp	r3, #0
 800a088:	d1ee      	bne.n	800a068 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a08a:	7dfb      	ldrb	r3, [r7, #23]
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d105      	bne.n	800a09c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a090:	4b39      	ldr	r3, [pc, #228]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 800a092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a094:	4a38      	ldr	r2, [pc, #224]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 800a096:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a09a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	699b      	ldr	r3, [r3, #24]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 80a1 	beq.w	800a1e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a0a6:	4b34      	ldr	r3, [pc, #208]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	f003 030c 	and.w	r3, r3, #12
 800a0ae:	2b08      	cmp	r3, #8
 800a0b0:	d05c      	beq.n	800a16c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	699b      	ldr	r3, [r3, #24]
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d141      	bne.n	800a13e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0ba:	4b31      	ldr	r3, [pc, #196]	@ (800a180 <HAL_RCC_OscConfig+0x478>)
 800a0bc:	2200      	movs	r2, #0
 800a0be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0c0:	f7fd ffdc 	bl	800807c <HAL_GetTick>
 800a0c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0c6:	e008      	b.n	800a0da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0c8:	f7fd ffd8 	bl	800807c <HAL_GetTick>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d901      	bls.n	800a0da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	e087      	b.n	800a1ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0da:	4b27      	ldr	r3, [pc, #156]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d1f0      	bne.n	800a0c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	69da      	ldr	r2, [r3, #28]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a1b      	ldr	r3, [r3, #32]
 800a0ee:	431a      	orrs	r2, r3
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0f4:	019b      	lsls	r3, r3, #6
 800a0f6:	431a      	orrs	r2, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0fc:	085b      	lsrs	r3, r3, #1
 800a0fe:	3b01      	subs	r3, #1
 800a100:	041b      	lsls	r3, r3, #16
 800a102:	431a      	orrs	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a108:	061b      	lsls	r3, r3, #24
 800a10a:	491b      	ldr	r1, [pc, #108]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 800a10c:	4313      	orrs	r3, r2
 800a10e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a110:	4b1b      	ldr	r3, [pc, #108]	@ (800a180 <HAL_RCC_OscConfig+0x478>)
 800a112:	2201      	movs	r2, #1
 800a114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a116:	f7fd ffb1 	bl	800807c <HAL_GetTick>
 800a11a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a11c:	e008      	b.n	800a130 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a11e:	f7fd ffad 	bl	800807c <HAL_GetTick>
 800a122:	4602      	mov	r2, r0
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	1ad3      	subs	r3, r2, r3
 800a128:	2b02      	cmp	r3, #2
 800a12a:	d901      	bls.n	800a130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a12c:	2303      	movs	r3, #3
 800a12e:	e05c      	b.n	800a1ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a130:	4b11      	ldr	r3, [pc, #68]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d0f0      	beq.n	800a11e <HAL_RCC_OscConfig+0x416>
 800a13c:	e054      	b.n	800a1e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a13e:	4b10      	ldr	r3, [pc, #64]	@ (800a180 <HAL_RCC_OscConfig+0x478>)
 800a140:	2200      	movs	r2, #0
 800a142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a144:	f7fd ff9a 	bl	800807c <HAL_GetTick>
 800a148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a14a:	e008      	b.n	800a15e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a14c:	f7fd ff96 	bl	800807c <HAL_GetTick>
 800a150:	4602      	mov	r2, r0
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	1ad3      	subs	r3, r2, r3
 800a156:	2b02      	cmp	r3, #2
 800a158:	d901      	bls.n	800a15e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a15a:	2303      	movs	r3, #3
 800a15c:	e045      	b.n	800a1ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a15e:	4b06      	ldr	r3, [pc, #24]	@ (800a178 <HAL_RCC_OscConfig+0x470>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a166:	2b00      	cmp	r3, #0
 800a168:	d1f0      	bne.n	800a14c <HAL_RCC_OscConfig+0x444>
 800a16a:	e03d      	b.n	800a1e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	2b01      	cmp	r3, #1
 800a172:	d107      	bne.n	800a184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	e038      	b.n	800a1ea <HAL_RCC_OscConfig+0x4e2>
 800a178:	40023800 	.word	0x40023800
 800a17c:	40007000 	.word	0x40007000
 800a180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a184:	4b1b      	ldr	r3, [pc, #108]	@ (800a1f4 <HAL_RCC_OscConfig+0x4ec>)
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d028      	beq.n	800a1e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d121      	bne.n	800a1e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d11a      	bne.n	800a1e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a1ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d111      	bne.n	800a1e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ca:	085b      	lsrs	r3, r3, #1
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d107      	bne.n	800a1e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d001      	beq.n	800a1e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	e000      	b.n	800a1ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3718      	adds	r7, #24
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	40023800 	.word	0x40023800

0800a1f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d101      	bne.n	800a20c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a208:	2301      	movs	r3, #1
 800a20a:	e0cc      	b.n	800a3a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a20c:	4b68      	ldr	r3, [pc, #416]	@ (800a3b0 <HAL_RCC_ClockConfig+0x1b8>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f003 030f 	and.w	r3, r3, #15
 800a214:	683a      	ldr	r2, [r7, #0]
 800a216:	429a      	cmp	r2, r3
 800a218:	d90c      	bls.n	800a234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a21a:	4b65      	ldr	r3, [pc, #404]	@ (800a3b0 <HAL_RCC_ClockConfig+0x1b8>)
 800a21c:	683a      	ldr	r2, [r7, #0]
 800a21e:	b2d2      	uxtb	r2, r2
 800a220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a222:	4b63      	ldr	r3, [pc, #396]	@ (800a3b0 <HAL_RCC_ClockConfig+0x1b8>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 030f 	and.w	r3, r3, #15
 800a22a:	683a      	ldr	r2, [r7, #0]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d001      	beq.n	800a234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a230:	2301      	movs	r3, #1
 800a232:	e0b8      	b.n	800a3a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 0302 	and.w	r3, r3, #2
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d020      	beq.n	800a282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f003 0304 	and.w	r3, r3, #4
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d005      	beq.n	800a258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a24c:	4b59      	ldr	r3, [pc, #356]	@ (800a3b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	4a58      	ldr	r2, [pc, #352]	@ (800a3b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a252:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a256:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f003 0308 	and.w	r3, r3, #8
 800a260:	2b00      	cmp	r3, #0
 800a262:	d005      	beq.n	800a270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a264:	4b53      	ldr	r3, [pc, #332]	@ (800a3b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	4a52      	ldr	r2, [pc, #328]	@ (800a3b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a26a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a26e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a270:	4b50      	ldr	r3, [pc, #320]	@ (800a3b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	494d      	ldr	r1, [pc, #308]	@ (800a3b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a27e:	4313      	orrs	r3, r2
 800a280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 0301 	and.w	r3, r3, #1
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d044      	beq.n	800a318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	2b01      	cmp	r3, #1
 800a294:	d107      	bne.n	800a2a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a296:	4b47      	ldr	r3, [pc, #284]	@ (800a3b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d119      	bne.n	800a2d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e07f      	b.n	800a3a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d003      	beq.n	800a2b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a2b2:	2b03      	cmp	r3, #3
 800a2b4:	d107      	bne.n	800a2c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2b6:	4b3f      	ldr	r3, [pc, #252]	@ (800a3b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d109      	bne.n	800a2d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e06f      	b.n	800a3a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2c6:	4b3b      	ldr	r3, [pc, #236]	@ (800a3b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f003 0302 	and.w	r3, r3, #2
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d101      	bne.n	800a2d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e067      	b.n	800a3a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a2d6:	4b37      	ldr	r3, [pc, #220]	@ (800a3b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	f023 0203 	bic.w	r2, r3, #3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	4934      	ldr	r1, [pc, #208]	@ (800a3b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a2e8:	f7fd fec8 	bl	800807c <HAL_GetTick>
 800a2ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a2ee:	e00a      	b.n	800a306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a2f0:	f7fd fec4 	bl	800807c <HAL_GetTick>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	1ad3      	subs	r3, r2, r3
 800a2fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d901      	bls.n	800a306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a302:	2303      	movs	r3, #3
 800a304:	e04f      	b.n	800a3a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a306:	4b2b      	ldr	r3, [pc, #172]	@ (800a3b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	f003 020c 	and.w	r2, r3, #12
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	429a      	cmp	r2, r3
 800a316:	d1eb      	bne.n	800a2f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a318:	4b25      	ldr	r3, [pc, #148]	@ (800a3b0 <HAL_RCC_ClockConfig+0x1b8>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f003 030f 	and.w	r3, r3, #15
 800a320:	683a      	ldr	r2, [r7, #0]
 800a322:	429a      	cmp	r2, r3
 800a324:	d20c      	bcs.n	800a340 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a326:	4b22      	ldr	r3, [pc, #136]	@ (800a3b0 <HAL_RCC_ClockConfig+0x1b8>)
 800a328:	683a      	ldr	r2, [r7, #0]
 800a32a:	b2d2      	uxtb	r2, r2
 800a32c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a32e:	4b20      	ldr	r3, [pc, #128]	@ (800a3b0 <HAL_RCC_ClockConfig+0x1b8>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 030f 	and.w	r3, r3, #15
 800a336:	683a      	ldr	r2, [r7, #0]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d001      	beq.n	800a340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	e032      	b.n	800a3a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 0304 	and.w	r3, r3, #4
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d008      	beq.n	800a35e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a34c:	4b19      	ldr	r3, [pc, #100]	@ (800a3b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	4916      	ldr	r1, [pc, #88]	@ (800a3b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a35a:	4313      	orrs	r3, r2
 800a35c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f003 0308 	and.w	r3, r3, #8
 800a366:	2b00      	cmp	r3, #0
 800a368:	d009      	beq.n	800a37e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a36a:	4b12      	ldr	r3, [pc, #72]	@ (800a3b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	00db      	lsls	r3, r3, #3
 800a378:	490e      	ldr	r1, [pc, #56]	@ (800a3b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a37a:	4313      	orrs	r3, r2
 800a37c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a37e:	f000 f821 	bl	800a3c4 <HAL_RCC_GetSysClockFreq>
 800a382:	4602      	mov	r2, r0
 800a384:	4b0b      	ldr	r3, [pc, #44]	@ (800a3b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	091b      	lsrs	r3, r3, #4
 800a38a:	f003 030f 	and.w	r3, r3, #15
 800a38e:	490a      	ldr	r1, [pc, #40]	@ (800a3b8 <HAL_RCC_ClockConfig+0x1c0>)
 800a390:	5ccb      	ldrb	r3, [r1, r3]
 800a392:	fa22 f303 	lsr.w	r3, r2, r3
 800a396:	4a09      	ldr	r2, [pc, #36]	@ (800a3bc <HAL_RCC_ClockConfig+0x1c4>)
 800a398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a39a:	4b09      	ldr	r3, [pc, #36]	@ (800a3c0 <HAL_RCC_ClockConfig+0x1c8>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7fd fe28 	bl	8007ff4 <HAL_InitTick>

  return HAL_OK;
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	40023c00 	.word	0x40023c00
 800a3b4:	40023800 	.word	0x40023800
 800a3b8:	0800c1bc 	.word	0x0800c1bc
 800a3bc:	200002c0 	.word	0x200002c0
 800a3c0:	200002c4 	.word	0x200002c4

0800a3c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a3c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a3c8:	b094      	sub	sp, #80	@ 0x50
 800a3ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a3dc:	4b79      	ldr	r3, [pc, #484]	@ (800a5c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	f003 030c 	and.w	r3, r3, #12
 800a3e4:	2b08      	cmp	r3, #8
 800a3e6:	d00d      	beq.n	800a404 <HAL_RCC_GetSysClockFreq+0x40>
 800a3e8:	2b08      	cmp	r3, #8
 800a3ea:	f200 80e1 	bhi.w	800a5b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d002      	beq.n	800a3f8 <HAL_RCC_GetSysClockFreq+0x34>
 800a3f2:	2b04      	cmp	r3, #4
 800a3f4:	d003      	beq.n	800a3fe <HAL_RCC_GetSysClockFreq+0x3a>
 800a3f6:	e0db      	b.n	800a5b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a3f8:	4b73      	ldr	r3, [pc, #460]	@ (800a5c8 <HAL_RCC_GetSysClockFreq+0x204>)
 800a3fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a3fc:	e0db      	b.n	800a5b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a3fe:	4b73      	ldr	r3, [pc, #460]	@ (800a5cc <HAL_RCC_GetSysClockFreq+0x208>)
 800a400:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a402:	e0d8      	b.n	800a5b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a404:	4b6f      	ldr	r3, [pc, #444]	@ (800a5c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a40c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a40e:	4b6d      	ldr	r3, [pc, #436]	@ (800a5c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a416:	2b00      	cmp	r3, #0
 800a418:	d063      	beq.n	800a4e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a41a:	4b6a      	ldr	r3, [pc, #424]	@ (800a5c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	099b      	lsrs	r3, r3, #6
 800a420:	2200      	movs	r2, #0
 800a422:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a424:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a42c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a42e:	2300      	movs	r3, #0
 800a430:	637b      	str	r3, [r7, #52]	@ 0x34
 800a432:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a436:	4622      	mov	r2, r4
 800a438:	462b      	mov	r3, r5
 800a43a:	f04f 0000 	mov.w	r0, #0
 800a43e:	f04f 0100 	mov.w	r1, #0
 800a442:	0159      	lsls	r1, r3, #5
 800a444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a448:	0150      	lsls	r0, r2, #5
 800a44a:	4602      	mov	r2, r0
 800a44c:	460b      	mov	r3, r1
 800a44e:	4621      	mov	r1, r4
 800a450:	1a51      	subs	r1, r2, r1
 800a452:	6139      	str	r1, [r7, #16]
 800a454:	4629      	mov	r1, r5
 800a456:	eb63 0301 	sbc.w	r3, r3, r1
 800a45a:	617b      	str	r3, [r7, #20]
 800a45c:	f04f 0200 	mov.w	r2, #0
 800a460:	f04f 0300 	mov.w	r3, #0
 800a464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a468:	4659      	mov	r1, fp
 800a46a:	018b      	lsls	r3, r1, #6
 800a46c:	4651      	mov	r1, sl
 800a46e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a472:	4651      	mov	r1, sl
 800a474:	018a      	lsls	r2, r1, #6
 800a476:	4651      	mov	r1, sl
 800a478:	ebb2 0801 	subs.w	r8, r2, r1
 800a47c:	4659      	mov	r1, fp
 800a47e:	eb63 0901 	sbc.w	r9, r3, r1
 800a482:	f04f 0200 	mov.w	r2, #0
 800a486:	f04f 0300 	mov.w	r3, #0
 800a48a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a48e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a492:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a496:	4690      	mov	r8, r2
 800a498:	4699      	mov	r9, r3
 800a49a:	4623      	mov	r3, r4
 800a49c:	eb18 0303 	adds.w	r3, r8, r3
 800a4a0:	60bb      	str	r3, [r7, #8]
 800a4a2:	462b      	mov	r3, r5
 800a4a4:	eb49 0303 	adc.w	r3, r9, r3
 800a4a8:	60fb      	str	r3, [r7, #12]
 800a4aa:	f04f 0200 	mov.w	r2, #0
 800a4ae:	f04f 0300 	mov.w	r3, #0
 800a4b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a4b6:	4629      	mov	r1, r5
 800a4b8:	024b      	lsls	r3, r1, #9
 800a4ba:	4621      	mov	r1, r4
 800a4bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a4c0:	4621      	mov	r1, r4
 800a4c2:	024a      	lsls	r2, r1, #9
 800a4c4:	4610      	mov	r0, r2
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a4d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a4d4:	f7f5 fee4 	bl	80002a0 <__aeabi_uldivmod>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	460b      	mov	r3, r1
 800a4dc:	4613      	mov	r3, r2
 800a4de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4e0:	e058      	b.n	800a594 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a4e2:	4b38      	ldr	r3, [pc, #224]	@ (800a5c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	099b      	lsrs	r3, r3, #6
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a4f2:	623b      	str	r3, [r7, #32]
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a4fc:	4642      	mov	r2, r8
 800a4fe:	464b      	mov	r3, r9
 800a500:	f04f 0000 	mov.w	r0, #0
 800a504:	f04f 0100 	mov.w	r1, #0
 800a508:	0159      	lsls	r1, r3, #5
 800a50a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a50e:	0150      	lsls	r0, r2, #5
 800a510:	4602      	mov	r2, r0
 800a512:	460b      	mov	r3, r1
 800a514:	4641      	mov	r1, r8
 800a516:	ebb2 0a01 	subs.w	sl, r2, r1
 800a51a:	4649      	mov	r1, r9
 800a51c:	eb63 0b01 	sbc.w	fp, r3, r1
 800a520:	f04f 0200 	mov.w	r2, #0
 800a524:	f04f 0300 	mov.w	r3, #0
 800a528:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a52c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a530:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a534:	ebb2 040a 	subs.w	r4, r2, sl
 800a538:	eb63 050b 	sbc.w	r5, r3, fp
 800a53c:	f04f 0200 	mov.w	r2, #0
 800a540:	f04f 0300 	mov.w	r3, #0
 800a544:	00eb      	lsls	r3, r5, #3
 800a546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a54a:	00e2      	lsls	r2, r4, #3
 800a54c:	4614      	mov	r4, r2
 800a54e:	461d      	mov	r5, r3
 800a550:	4643      	mov	r3, r8
 800a552:	18e3      	adds	r3, r4, r3
 800a554:	603b      	str	r3, [r7, #0]
 800a556:	464b      	mov	r3, r9
 800a558:	eb45 0303 	adc.w	r3, r5, r3
 800a55c:	607b      	str	r3, [r7, #4]
 800a55e:	f04f 0200 	mov.w	r2, #0
 800a562:	f04f 0300 	mov.w	r3, #0
 800a566:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a56a:	4629      	mov	r1, r5
 800a56c:	028b      	lsls	r3, r1, #10
 800a56e:	4621      	mov	r1, r4
 800a570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a574:	4621      	mov	r1, r4
 800a576:	028a      	lsls	r2, r1, #10
 800a578:	4610      	mov	r0, r2
 800a57a:	4619      	mov	r1, r3
 800a57c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a57e:	2200      	movs	r2, #0
 800a580:	61bb      	str	r3, [r7, #24]
 800a582:	61fa      	str	r2, [r7, #28]
 800a584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a588:	f7f5 fe8a 	bl	80002a0 <__aeabi_uldivmod>
 800a58c:	4602      	mov	r2, r0
 800a58e:	460b      	mov	r3, r1
 800a590:	4613      	mov	r3, r2
 800a592:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a594:	4b0b      	ldr	r3, [pc, #44]	@ (800a5c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	0c1b      	lsrs	r3, r3, #16
 800a59a:	f003 0303 	and.w	r3, r3, #3
 800a59e:	3301      	adds	r3, #1
 800a5a0:	005b      	lsls	r3, r3, #1
 800a5a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800a5a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a5a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a5ae:	e002      	b.n	800a5b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a5b0:	4b05      	ldr	r3, [pc, #20]	@ (800a5c8 <HAL_RCC_GetSysClockFreq+0x204>)
 800a5b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a5b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a5b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3750      	adds	r7, #80	@ 0x50
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5c2:	bf00      	nop
 800a5c4:	40023800 	.word	0x40023800
 800a5c8:	00f42400 	.word	0x00f42400
 800a5cc:	007a1200 	.word	0x007a1200

0800a5d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d101      	bne.n	800a5e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e041      	b.n	800a666 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d106      	bne.n	800a5fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f7fd fb82 	bl	8007d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2202      	movs	r2, #2
 800a600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	3304      	adds	r3, #4
 800a60c:	4619      	mov	r1, r3
 800a60e:	4610      	mov	r0, r2
 800a610:	f000 f9e6 	bl	800a9e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
	...

0800a670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a670:	b480      	push	{r7}
 800a672:	b085      	sub	sp, #20
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	2b01      	cmp	r3, #1
 800a682:	d001      	beq.n	800a688 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	e04e      	b.n	800a726 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2202      	movs	r2, #2
 800a68c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68da      	ldr	r2, [r3, #12]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f042 0201 	orr.w	r2, r2, #1
 800a69e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a23      	ldr	r2, [pc, #140]	@ (800a734 <HAL_TIM_Base_Start_IT+0xc4>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d022      	beq.n	800a6f0 <HAL_TIM_Base_Start_IT+0x80>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6b2:	d01d      	beq.n	800a6f0 <HAL_TIM_Base_Start_IT+0x80>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a1f      	ldr	r2, [pc, #124]	@ (800a738 <HAL_TIM_Base_Start_IT+0xc8>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d018      	beq.n	800a6f0 <HAL_TIM_Base_Start_IT+0x80>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a1e      	ldr	r2, [pc, #120]	@ (800a73c <HAL_TIM_Base_Start_IT+0xcc>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d013      	beq.n	800a6f0 <HAL_TIM_Base_Start_IT+0x80>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a1c      	ldr	r2, [pc, #112]	@ (800a740 <HAL_TIM_Base_Start_IT+0xd0>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d00e      	beq.n	800a6f0 <HAL_TIM_Base_Start_IT+0x80>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a1b      	ldr	r2, [pc, #108]	@ (800a744 <HAL_TIM_Base_Start_IT+0xd4>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d009      	beq.n	800a6f0 <HAL_TIM_Base_Start_IT+0x80>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a19      	ldr	r2, [pc, #100]	@ (800a748 <HAL_TIM_Base_Start_IT+0xd8>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d004      	beq.n	800a6f0 <HAL_TIM_Base_Start_IT+0x80>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a18      	ldr	r2, [pc, #96]	@ (800a74c <HAL_TIM_Base_Start_IT+0xdc>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d111      	bne.n	800a714 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	f003 0307 	and.w	r3, r3, #7
 800a6fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2b06      	cmp	r3, #6
 800a700:	d010      	beq.n	800a724 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f042 0201 	orr.w	r2, r2, #1
 800a710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a712:	e007      	b.n	800a724 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f042 0201 	orr.w	r2, r2, #1
 800a722:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3714      	adds	r7, #20
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	40010000 	.word	0x40010000
 800a738:	40000400 	.word	0x40000400
 800a73c:	40000800 	.word	0x40000800
 800a740:	40000c00 	.word	0x40000c00
 800a744:	40010400 	.word	0x40010400
 800a748:	40014000 	.word	0x40014000
 800a74c:	40001800 	.word	0x40001800

0800a750 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	68da      	ldr	r2, [r3, #12]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f022 0201 	bic.w	r2, r2, #1
 800a766:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	6a1a      	ldr	r2, [r3, #32]
 800a76e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a772:	4013      	ands	r3, r2
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10f      	bne.n	800a798 <HAL_TIM_Base_Stop_IT+0x48>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	6a1a      	ldr	r2, [r3, #32]
 800a77e:	f240 4344 	movw	r3, #1092	@ 0x444
 800a782:	4013      	ands	r3, r2
 800a784:	2b00      	cmp	r3, #0
 800a786:	d107      	bne.n	800a798 <HAL_TIM_Base_Stop_IT+0x48>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f022 0201 	bic.w	r2, r2, #1
 800a796:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	370c      	adds	r7, #12
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr

0800a7ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b084      	sub	sp, #16
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	691b      	ldr	r3, [r3, #16]
 800a7c4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	f003 0302 	and.w	r3, r3, #2
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d020      	beq.n	800a812 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f003 0302 	and.w	r3, r3, #2
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d01b      	beq.n	800a812 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f06f 0202 	mvn.w	r2, #2
 800a7e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	699b      	ldr	r3, [r3, #24]
 800a7f0:	f003 0303 	and.w	r3, r3, #3
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d003      	beq.n	800a800 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 f8d2 	bl	800a9a2 <HAL_TIM_IC_CaptureCallback>
 800a7fe:	e005      	b.n	800a80c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 f8c4 	bl	800a98e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 f8d5 	bl	800a9b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	f003 0304 	and.w	r3, r3, #4
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d020      	beq.n	800a85e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f003 0304 	and.w	r3, r3, #4
 800a822:	2b00      	cmp	r3, #0
 800a824:	d01b      	beq.n	800a85e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f06f 0204 	mvn.w	r2, #4
 800a82e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2202      	movs	r2, #2
 800a834:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	699b      	ldr	r3, [r3, #24]
 800a83c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a840:	2b00      	cmp	r3, #0
 800a842:	d003      	beq.n	800a84c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 f8ac 	bl	800a9a2 <HAL_TIM_IC_CaptureCallback>
 800a84a:	e005      	b.n	800a858 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 f89e 	bl	800a98e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f8af 	bl	800a9b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	f003 0308 	and.w	r3, r3, #8
 800a864:	2b00      	cmp	r3, #0
 800a866:	d020      	beq.n	800a8aa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f003 0308 	and.w	r3, r3, #8
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d01b      	beq.n	800a8aa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f06f 0208 	mvn.w	r2, #8
 800a87a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2204      	movs	r2, #4
 800a880:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	69db      	ldr	r3, [r3, #28]
 800a888:	f003 0303 	and.w	r3, r3, #3
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d003      	beq.n	800a898 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f886 	bl	800a9a2 <HAL_TIM_IC_CaptureCallback>
 800a896:	e005      	b.n	800a8a4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 f878 	bl	800a98e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f889 	bl	800a9b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	f003 0310 	and.w	r3, r3, #16
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d020      	beq.n	800a8f6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f003 0310 	and.w	r3, r3, #16
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d01b      	beq.n	800a8f6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f06f 0210 	mvn.w	r2, #16
 800a8c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2208      	movs	r2, #8
 800a8cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	69db      	ldr	r3, [r3, #28]
 800a8d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d003      	beq.n	800a8e4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 f860 	bl	800a9a2 <HAL_TIM_IC_CaptureCallback>
 800a8e2:	e005      	b.n	800a8f0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 f852 	bl	800a98e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f863 	bl	800a9b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	f003 0301 	and.w	r3, r3, #1
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d00c      	beq.n	800a91a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f003 0301 	and.w	r3, r3, #1
 800a906:	2b00      	cmp	r3, #0
 800a908:	d007      	beq.n	800a91a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f06f 0201 	mvn.w	r2, #1
 800a912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f7fc fec7 	bl	80076a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a920:	2b00      	cmp	r3, #0
 800a922:	d00c      	beq.n	800a93e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d007      	beq.n	800a93e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 f901 	bl	800ab40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00c      	beq.n	800a962 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d007      	beq.n	800a962 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a95a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 f834 	bl	800a9ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	f003 0320 	and.w	r3, r3, #32
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d00c      	beq.n	800a986 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f003 0320 	and.w	r3, r3, #32
 800a972:	2b00      	cmp	r3, #0
 800a974:	d007      	beq.n	800a986 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f06f 0220 	mvn.w	r2, #32
 800a97e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 f8d3 	bl	800ab2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a986:	bf00      	nop
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a98e:	b480      	push	{r7}
 800a990:	b083      	sub	sp, #12
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a996:	bf00      	nop
 800a998:	370c      	adds	r7, #12
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr

0800a9a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a9a2:	b480      	push	{r7}
 800a9a4:	b083      	sub	sp, #12
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a9aa:	bf00      	nop
 800a9ac:	370c      	adds	r7, #12
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr

0800a9b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a9b6:	b480      	push	{r7}
 800a9b8:	b083      	sub	sp, #12
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a9be:	bf00      	nop
 800a9c0:	370c      	adds	r7, #12
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr

0800a9ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	b083      	sub	sp, #12
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a9d2:	bf00      	nop
 800a9d4:	370c      	adds	r7, #12
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr
	...

0800a9e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b085      	sub	sp, #20
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a43      	ldr	r2, [pc, #268]	@ (800ab00 <TIM_Base_SetConfig+0x120>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d013      	beq.n	800aa20 <TIM_Base_SetConfig+0x40>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9fe:	d00f      	beq.n	800aa20 <TIM_Base_SetConfig+0x40>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4a40      	ldr	r2, [pc, #256]	@ (800ab04 <TIM_Base_SetConfig+0x124>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d00b      	beq.n	800aa20 <TIM_Base_SetConfig+0x40>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	4a3f      	ldr	r2, [pc, #252]	@ (800ab08 <TIM_Base_SetConfig+0x128>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d007      	beq.n	800aa20 <TIM_Base_SetConfig+0x40>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	4a3e      	ldr	r2, [pc, #248]	@ (800ab0c <TIM_Base_SetConfig+0x12c>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d003      	beq.n	800aa20 <TIM_Base_SetConfig+0x40>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	4a3d      	ldr	r2, [pc, #244]	@ (800ab10 <TIM_Base_SetConfig+0x130>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d108      	bne.n	800aa32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	4a32      	ldr	r2, [pc, #200]	@ (800ab00 <TIM_Base_SetConfig+0x120>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d02b      	beq.n	800aa92 <TIM_Base_SetConfig+0xb2>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa40:	d027      	beq.n	800aa92 <TIM_Base_SetConfig+0xb2>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	4a2f      	ldr	r2, [pc, #188]	@ (800ab04 <TIM_Base_SetConfig+0x124>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d023      	beq.n	800aa92 <TIM_Base_SetConfig+0xb2>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4a2e      	ldr	r2, [pc, #184]	@ (800ab08 <TIM_Base_SetConfig+0x128>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d01f      	beq.n	800aa92 <TIM_Base_SetConfig+0xb2>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4a2d      	ldr	r2, [pc, #180]	@ (800ab0c <TIM_Base_SetConfig+0x12c>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d01b      	beq.n	800aa92 <TIM_Base_SetConfig+0xb2>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4a2c      	ldr	r2, [pc, #176]	@ (800ab10 <TIM_Base_SetConfig+0x130>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d017      	beq.n	800aa92 <TIM_Base_SetConfig+0xb2>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4a2b      	ldr	r2, [pc, #172]	@ (800ab14 <TIM_Base_SetConfig+0x134>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d013      	beq.n	800aa92 <TIM_Base_SetConfig+0xb2>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a2a      	ldr	r2, [pc, #168]	@ (800ab18 <TIM_Base_SetConfig+0x138>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d00f      	beq.n	800aa92 <TIM_Base_SetConfig+0xb2>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4a29      	ldr	r2, [pc, #164]	@ (800ab1c <TIM_Base_SetConfig+0x13c>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d00b      	beq.n	800aa92 <TIM_Base_SetConfig+0xb2>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4a28      	ldr	r2, [pc, #160]	@ (800ab20 <TIM_Base_SetConfig+0x140>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d007      	beq.n	800aa92 <TIM_Base_SetConfig+0xb2>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a27      	ldr	r2, [pc, #156]	@ (800ab24 <TIM_Base_SetConfig+0x144>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d003      	beq.n	800aa92 <TIM_Base_SetConfig+0xb2>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4a26      	ldr	r2, [pc, #152]	@ (800ab28 <TIM_Base_SetConfig+0x148>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d108      	bne.n	800aaa4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	695b      	ldr	r3, [r3, #20]
 800aaae:	4313      	orrs	r3, r2
 800aab0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	689a      	ldr	r2, [r3, #8]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4a0e      	ldr	r2, [pc, #56]	@ (800ab00 <TIM_Base_SetConfig+0x120>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d003      	beq.n	800aad2 <TIM_Base_SetConfig+0xf2>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4a10      	ldr	r2, [pc, #64]	@ (800ab10 <TIM_Base_SetConfig+0x130>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d103      	bne.n	800aada <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	691a      	ldr	r2, [r3, #16]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f043 0204 	orr.w	r2, r3, #4
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2201      	movs	r2, #1
 800aaea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	601a      	str	r2, [r3, #0]
}
 800aaf2:	bf00      	nop
 800aaf4:	3714      	adds	r7, #20
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	40010000 	.word	0x40010000
 800ab04:	40000400 	.word	0x40000400
 800ab08:	40000800 	.word	0x40000800
 800ab0c:	40000c00 	.word	0x40000c00
 800ab10:	40010400 	.word	0x40010400
 800ab14:	40014000 	.word	0x40014000
 800ab18:	40014400 	.word	0x40014400
 800ab1c:	40014800 	.word	0x40014800
 800ab20:	40001800 	.word	0x40001800
 800ab24:	40001c00 	.word	0x40001c00
 800ab28:	40002000 	.word	0x40002000

0800ab2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab34:	bf00      	nop
 800ab36:	370c      	adds	r7, #12
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab48:	bf00      	nop
 800ab4a:	370c      	adds	r7, #12
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <calloc>:
 800ab54:	4b02      	ldr	r3, [pc, #8]	@ (800ab60 <calloc+0xc>)
 800ab56:	460a      	mov	r2, r1
 800ab58:	4601      	mov	r1, r0
 800ab5a:	6818      	ldr	r0, [r3, #0]
 800ab5c:	f000 b802 	b.w	800ab64 <_calloc_r>
 800ab60:	200002d8 	.word	0x200002d8

0800ab64 <_calloc_r>:
 800ab64:	b570      	push	{r4, r5, r6, lr}
 800ab66:	fba1 5402 	umull	r5, r4, r1, r2
 800ab6a:	b934      	cbnz	r4, 800ab7a <_calloc_r+0x16>
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	f000 f837 	bl	800abe0 <_malloc_r>
 800ab72:	4606      	mov	r6, r0
 800ab74:	b928      	cbnz	r0, 800ab82 <_calloc_r+0x1e>
 800ab76:	4630      	mov	r0, r6
 800ab78:	bd70      	pop	{r4, r5, r6, pc}
 800ab7a:	220c      	movs	r2, #12
 800ab7c:	6002      	str	r2, [r0, #0]
 800ab7e:	2600      	movs	r6, #0
 800ab80:	e7f9      	b.n	800ab76 <_calloc_r+0x12>
 800ab82:	462a      	mov	r2, r5
 800ab84:	4621      	mov	r1, r4
 800ab86:	f000 fb9b 	bl	800b2c0 <memset>
 800ab8a:	e7f4      	b.n	800ab76 <_calloc_r+0x12>

0800ab8c <free>:
 800ab8c:	4b02      	ldr	r3, [pc, #8]	@ (800ab98 <free+0xc>)
 800ab8e:	4601      	mov	r1, r0
 800ab90:	6818      	ldr	r0, [r3, #0]
 800ab92:	f000 bc2f 	b.w	800b3f4 <_free_r>
 800ab96:	bf00      	nop
 800ab98:	200002d8 	.word	0x200002d8

0800ab9c <sbrk_aligned>:
 800ab9c:	b570      	push	{r4, r5, r6, lr}
 800ab9e:	4e0f      	ldr	r6, [pc, #60]	@ (800abdc <sbrk_aligned+0x40>)
 800aba0:	460c      	mov	r4, r1
 800aba2:	6831      	ldr	r1, [r6, #0]
 800aba4:	4605      	mov	r5, r0
 800aba6:	b911      	cbnz	r1, 800abae <sbrk_aligned+0x12>
 800aba8:	f000 fbc6 	bl	800b338 <_sbrk_r>
 800abac:	6030      	str	r0, [r6, #0]
 800abae:	4621      	mov	r1, r4
 800abb0:	4628      	mov	r0, r5
 800abb2:	f000 fbc1 	bl	800b338 <_sbrk_r>
 800abb6:	1c43      	adds	r3, r0, #1
 800abb8:	d103      	bne.n	800abc2 <sbrk_aligned+0x26>
 800abba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800abbe:	4620      	mov	r0, r4
 800abc0:	bd70      	pop	{r4, r5, r6, pc}
 800abc2:	1cc4      	adds	r4, r0, #3
 800abc4:	f024 0403 	bic.w	r4, r4, #3
 800abc8:	42a0      	cmp	r0, r4
 800abca:	d0f8      	beq.n	800abbe <sbrk_aligned+0x22>
 800abcc:	1a21      	subs	r1, r4, r0
 800abce:	4628      	mov	r0, r5
 800abd0:	f000 fbb2 	bl	800b338 <_sbrk_r>
 800abd4:	3001      	adds	r0, #1
 800abd6:	d1f2      	bne.n	800abbe <sbrk_aligned+0x22>
 800abd8:	e7ef      	b.n	800abba <sbrk_aligned+0x1e>
 800abda:	bf00      	nop
 800abdc:	2000045c 	.word	0x2000045c

0800abe0 <_malloc_r>:
 800abe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abe4:	1ccd      	adds	r5, r1, #3
 800abe6:	f025 0503 	bic.w	r5, r5, #3
 800abea:	3508      	adds	r5, #8
 800abec:	2d0c      	cmp	r5, #12
 800abee:	bf38      	it	cc
 800abf0:	250c      	movcc	r5, #12
 800abf2:	2d00      	cmp	r5, #0
 800abf4:	4606      	mov	r6, r0
 800abf6:	db01      	blt.n	800abfc <_malloc_r+0x1c>
 800abf8:	42a9      	cmp	r1, r5
 800abfa:	d904      	bls.n	800ac06 <_malloc_r+0x26>
 800abfc:	230c      	movs	r3, #12
 800abfe:	6033      	str	r3, [r6, #0]
 800ac00:	2000      	movs	r0, #0
 800ac02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800acdc <_malloc_r+0xfc>
 800ac0a:	f000 f869 	bl	800ace0 <__malloc_lock>
 800ac0e:	f8d8 3000 	ldr.w	r3, [r8]
 800ac12:	461c      	mov	r4, r3
 800ac14:	bb44      	cbnz	r4, 800ac68 <_malloc_r+0x88>
 800ac16:	4629      	mov	r1, r5
 800ac18:	4630      	mov	r0, r6
 800ac1a:	f7ff ffbf 	bl	800ab9c <sbrk_aligned>
 800ac1e:	1c43      	adds	r3, r0, #1
 800ac20:	4604      	mov	r4, r0
 800ac22:	d158      	bne.n	800acd6 <_malloc_r+0xf6>
 800ac24:	f8d8 4000 	ldr.w	r4, [r8]
 800ac28:	4627      	mov	r7, r4
 800ac2a:	2f00      	cmp	r7, #0
 800ac2c:	d143      	bne.n	800acb6 <_malloc_r+0xd6>
 800ac2e:	2c00      	cmp	r4, #0
 800ac30:	d04b      	beq.n	800acca <_malloc_r+0xea>
 800ac32:	6823      	ldr	r3, [r4, #0]
 800ac34:	4639      	mov	r1, r7
 800ac36:	4630      	mov	r0, r6
 800ac38:	eb04 0903 	add.w	r9, r4, r3
 800ac3c:	f000 fb7c 	bl	800b338 <_sbrk_r>
 800ac40:	4581      	cmp	r9, r0
 800ac42:	d142      	bne.n	800acca <_malloc_r+0xea>
 800ac44:	6821      	ldr	r1, [r4, #0]
 800ac46:	1a6d      	subs	r5, r5, r1
 800ac48:	4629      	mov	r1, r5
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	f7ff ffa6 	bl	800ab9c <sbrk_aligned>
 800ac50:	3001      	adds	r0, #1
 800ac52:	d03a      	beq.n	800acca <_malloc_r+0xea>
 800ac54:	6823      	ldr	r3, [r4, #0]
 800ac56:	442b      	add	r3, r5
 800ac58:	6023      	str	r3, [r4, #0]
 800ac5a:	f8d8 3000 	ldr.w	r3, [r8]
 800ac5e:	685a      	ldr	r2, [r3, #4]
 800ac60:	bb62      	cbnz	r2, 800acbc <_malloc_r+0xdc>
 800ac62:	f8c8 7000 	str.w	r7, [r8]
 800ac66:	e00f      	b.n	800ac88 <_malloc_r+0xa8>
 800ac68:	6822      	ldr	r2, [r4, #0]
 800ac6a:	1b52      	subs	r2, r2, r5
 800ac6c:	d420      	bmi.n	800acb0 <_malloc_r+0xd0>
 800ac6e:	2a0b      	cmp	r2, #11
 800ac70:	d917      	bls.n	800aca2 <_malloc_r+0xc2>
 800ac72:	1961      	adds	r1, r4, r5
 800ac74:	42a3      	cmp	r3, r4
 800ac76:	6025      	str	r5, [r4, #0]
 800ac78:	bf18      	it	ne
 800ac7a:	6059      	strne	r1, [r3, #4]
 800ac7c:	6863      	ldr	r3, [r4, #4]
 800ac7e:	bf08      	it	eq
 800ac80:	f8c8 1000 	streq.w	r1, [r8]
 800ac84:	5162      	str	r2, [r4, r5]
 800ac86:	604b      	str	r3, [r1, #4]
 800ac88:	4630      	mov	r0, r6
 800ac8a:	f000 f82f 	bl	800acec <__malloc_unlock>
 800ac8e:	f104 000b 	add.w	r0, r4, #11
 800ac92:	1d23      	adds	r3, r4, #4
 800ac94:	f020 0007 	bic.w	r0, r0, #7
 800ac98:	1ac2      	subs	r2, r0, r3
 800ac9a:	bf1c      	itt	ne
 800ac9c:	1a1b      	subne	r3, r3, r0
 800ac9e:	50a3      	strne	r3, [r4, r2]
 800aca0:	e7af      	b.n	800ac02 <_malloc_r+0x22>
 800aca2:	6862      	ldr	r2, [r4, #4]
 800aca4:	42a3      	cmp	r3, r4
 800aca6:	bf0c      	ite	eq
 800aca8:	f8c8 2000 	streq.w	r2, [r8]
 800acac:	605a      	strne	r2, [r3, #4]
 800acae:	e7eb      	b.n	800ac88 <_malloc_r+0xa8>
 800acb0:	4623      	mov	r3, r4
 800acb2:	6864      	ldr	r4, [r4, #4]
 800acb4:	e7ae      	b.n	800ac14 <_malloc_r+0x34>
 800acb6:	463c      	mov	r4, r7
 800acb8:	687f      	ldr	r7, [r7, #4]
 800acba:	e7b6      	b.n	800ac2a <_malloc_r+0x4a>
 800acbc:	461a      	mov	r2, r3
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	42a3      	cmp	r3, r4
 800acc2:	d1fb      	bne.n	800acbc <_malloc_r+0xdc>
 800acc4:	2300      	movs	r3, #0
 800acc6:	6053      	str	r3, [r2, #4]
 800acc8:	e7de      	b.n	800ac88 <_malloc_r+0xa8>
 800acca:	230c      	movs	r3, #12
 800accc:	6033      	str	r3, [r6, #0]
 800acce:	4630      	mov	r0, r6
 800acd0:	f000 f80c 	bl	800acec <__malloc_unlock>
 800acd4:	e794      	b.n	800ac00 <_malloc_r+0x20>
 800acd6:	6005      	str	r5, [r0, #0]
 800acd8:	e7d6      	b.n	800ac88 <_malloc_r+0xa8>
 800acda:	bf00      	nop
 800acdc:	20000460 	.word	0x20000460

0800ace0 <__malloc_lock>:
 800ace0:	4801      	ldr	r0, [pc, #4]	@ (800ace8 <__malloc_lock+0x8>)
 800ace2:	f000 bb76 	b.w	800b3d2 <__retarget_lock_acquire_recursive>
 800ace6:	bf00      	nop
 800ace8:	200005a4 	.word	0x200005a4

0800acec <__malloc_unlock>:
 800acec:	4801      	ldr	r0, [pc, #4]	@ (800acf4 <__malloc_unlock+0x8>)
 800acee:	f000 bb71 	b.w	800b3d4 <__retarget_lock_release_recursive>
 800acf2:	bf00      	nop
 800acf4:	200005a4 	.word	0x200005a4

0800acf8 <__sflush_r>:
 800acf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800acfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad00:	0716      	lsls	r6, r2, #28
 800ad02:	4605      	mov	r5, r0
 800ad04:	460c      	mov	r4, r1
 800ad06:	d454      	bmi.n	800adb2 <__sflush_r+0xba>
 800ad08:	684b      	ldr	r3, [r1, #4]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	dc02      	bgt.n	800ad14 <__sflush_r+0x1c>
 800ad0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	dd48      	ble.n	800ada6 <__sflush_r+0xae>
 800ad14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad16:	2e00      	cmp	r6, #0
 800ad18:	d045      	beq.n	800ada6 <__sflush_r+0xae>
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ad20:	682f      	ldr	r7, [r5, #0]
 800ad22:	6a21      	ldr	r1, [r4, #32]
 800ad24:	602b      	str	r3, [r5, #0]
 800ad26:	d030      	beq.n	800ad8a <__sflush_r+0x92>
 800ad28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ad2a:	89a3      	ldrh	r3, [r4, #12]
 800ad2c:	0759      	lsls	r1, r3, #29
 800ad2e:	d505      	bpl.n	800ad3c <__sflush_r+0x44>
 800ad30:	6863      	ldr	r3, [r4, #4]
 800ad32:	1ad2      	subs	r2, r2, r3
 800ad34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ad36:	b10b      	cbz	r3, 800ad3c <__sflush_r+0x44>
 800ad38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad3a:	1ad2      	subs	r2, r2, r3
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad40:	6a21      	ldr	r1, [r4, #32]
 800ad42:	4628      	mov	r0, r5
 800ad44:	47b0      	blx	r6
 800ad46:	1c43      	adds	r3, r0, #1
 800ad48:	89a3      	ldrh	r3, [r4, #12]
 800ad4a:	d106      	bne.n	800ad5a <__sflush_r+0x62>
 800ad4c:	6829      	ldr	r1, [r5, #0]
 800ad4e:	291d      	cmp	r1, #29
 800ad50:	d82b      	bhi.n	800adaa <__sflush_r+0xb2>
 800ad52:	4a2a      	ldr	r2, [pc, #168]	@ (800adfc <__sflush_r+0x104>)
 800ad54:	40ca      	lsrs	r2, r1
 800ad56:	07d6      	lsls	r6, r2, #31
 800ad58:	d527      	bpl.n	800adaa <__sflush_r+0xb2>
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	6062      	str	r2, [r4, #4]
 800ad5e:	04d9      	lsls	r1, r3, #19
 800ad60:	6922      	ldr	r2, [r4, #16]
 800ad62:	6022      	str	r2, [r4, #0]
 800ad64:	d504      	bpl.n	800ad70 <__sflush_r+0x78>
 800ad66:	1c42      	adds	r2, r0, #1
 800ad68:	d101      	bne.n	800ad6e <__sflush_r+0x76>
 800ad6a:	682b      	ldr	r3, [r5, #0]
 800ad6c:	b903      	cbnz	r3, 800ad70 <__sflush_r+0x78>
 800ad6e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ad70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad72:	602f      	str	r7, [r5, #0]
 800ad74:	b1b9      	cbz	r1, 800ada6 <__sflush_r+0xae>
 800ad76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad7a:	4299      	cmp	r1, r3
 800ad7c:	d002      	beq.n	800ad84 <__sflush_r+0x8c>
 800ad7e:	4628      	mov	r0, r5
 800ad80:	f000 fb38 	bl	800b3f4 <_free_r>
 800ad84:	2300      	movs	r3, #0
 800ad86:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad88:	e00d      	b.n	800ada6 <__sflush_r+0xae>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	47b0      	blx	r6
 800ad90:	4602      	mov	r2, r0
 800ad92:	1c50      	adds	r0, r2, #1
 800ad94:	d1c9      	bne.n	800ad2a <__sflush_r+0x32>
 800ad96:	682b      	ldr	r3, [r5, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d0c6      	beq.n	800ad2a <__sflush_r+0x32>
 800ad9c:	2b1d      	cmp	r3, #29
 800ad9e:	d001      	beq.n	800ada4 <__sflush_r+0xac>
 800ada0:	2b16      	cmp	r3, #22
 800ada2:	d11e      	bne.n	800ade2 <__sflush_r+0xea>
 800ada4:	602f      	str	r7, [r5, #0]
 800ada6:	2000      	movs	r0, #0
 800ada8:	e022      	b.n	800adf0 <__sflush_r+0xf8>
 800adaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adae:	b21b      	sxth	r3, r3
 800adb0:	e01b      	b.n	800adea <__sflush_r+0xf2>
 800adb2:	690f      	ldr	r7, [r1, #16]
 800adb4:	2f00      	cmp	r7, #0
 800adb6:	d0f6      	beq.n	800ada6 <__sflush_r+0xae>
 800adb8:	0793      	lsls	r3, r2, #30
 800adba:	680e      	ldr	r6, [r1, #0]
 800adbc:	bf08      	it	eq
 800adbe:	694b      	ldreq	r3, [r1, #20]
 800adc0:	600f      	str	r7, [r1, #0]
 800adc2:	bf18      	it	ne
 800adc4:	2300      	movne	r3, #0
 800adc6:	eba6 0807 	sub.w	r8, r6, r7
 800adca:	608b      	str	r3, [r1, #8]
 800adcc:	f1b8 0f00 	cmp.w	r8, #0
 800add0:	dde9      	ble.n	800ada6 <__sflush_r+0xae>
 800add2:	6a21      	ldr	r1, [r4, #32]
 800add4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800add6:	4643      	mov	r3, r8
 800add8:	463a      	mov	r2, r7
 800adda:	4628      	mov	r0, r5
 800addc:	47b0      	blx	r6
 800adde:	2800      	cmp	r0, #0
 800ade0:	dc08      	bgt.n	800adf4 <__sflush_r+0xfc>
 800ade2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ade6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adea:	81a3      	strh	r3, [r4, #12]
 800adec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800adf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf4:	4407      	add	r7, r0
 800adf6:	eba8 0800 	sub.w	r8, r8, r0
 800adfa:	e7e7      	b.n	800adcc <__sflush_r+0xd4>
 800adfc:	20400001 	.word	0x20400001

0800ae00 <_fflush_r>:
 800ae00:	b538      	push	{r3, r4, r5, lr}
 800ae02:	690b      	ldr	r3, [r1, #16]
 800ae04:	4605      	mov	r5, r0
 800ae06:	460c      	mov	r4, r1
 800ae08:	b913      	cbnz	r3, 800ae10 <_fflush_r+0x10>
 800ae0a:	2500      	movs	r5, #0
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	bd38      	pop	{r3, r4, r5, pc}
 800ae10:	b118      	cbz	r0, 800ae1a <_fflush_r+0x1a>
 800ae12:	6a03      	ldr	r3, [r0, #32]
 800ae14:	b90b      	cbnz	r3, 800ae1a <_fflush_r+0x1a>
 800ae16:	f000 f8bb 	bl	800af90 <__sinit>
 800ae1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d0f3      	beq.n	800ae0a <_fflush_r+0xa>
 800ae22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae24:	07d0      	lsls	r0, r2, #31
 800ae26:	d404      	bmi.n	800ae32 <_fflush_r+0x32>
 800ae28:	0599      	lsls	r1, r3, #22
 800ae2a:	d402      	bmi.n	800ae32 <_fflush_r+0x32>
 800ae2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae2e:	f000 fad0 	bl	800b3d2 <__retarget_lock_acquire_recursive>
 800ae32:	4628      	mov	r0, r5
 800ae34:	4621      	mov	r1, r4
 800ae36:	f7ff ff5f 	bl	800acf8 <__sflush_r>
 800ae3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae3c:	07da      	lsls	r2, r3, #31
 800ae3e:	4605      	mov	r5, r0
 800ae40:	d4e4      	bmi.n	800ae0c <_fflush_r+0xc>
 800ae42:	89a3      	ldrh	r3, [r4, #12]
 800ae44:	059b      	lsls	r3, r3, #22
 800ae46:	d4e1      	bmi.n	800ae0c <_fflush_r+0xc>
 800ae48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae4a:	f000 fac3 	bl	800b3d4 <__retarget_lock_release_recursive>
 800ae4e:	e7dd      	b.n	800ae0c <_fflush_r+0xc>

0800ae50 <fflush>:
 800ae50:	4601      	mov	r1, r0
 800ae52:	b920      	cbnz	r0, 800ae5e <fflush+0xe>
 800ae54:	4a04      	ldr	r2, [pc, #16]	@ (800ae68 <fflush+0x18>)
 800ae56:	4905      	ldr	r1, [pc, #20]	@ (800ae6c <fflush+0x1c>)
 800ae58:	4805      	ldr	r0, [pc, #20]	@ (800ae70 <fflush+0x20>)
 800ae5a:	f000 b8b1 	b.w	800afc0 <_fwalk_sglue>
 800ae5e:	4b05      	ldr	r3, [pc, #20]	@ (800ae74 <fflush+0x24>)
 800ae60:	6818      	ldr	r0, [r3, #0]
 800ae62:	f7ff bfcd 	b.w	800ae00 <_fflush_r>
 800ae66:	bf00      	nop
 800ae68:	200002cc 	.word	0x200002cc
 800ae6c:	0800ae01 	.word	0x0800ae01
 800ae70:	200002dc 	.word	0x200002dc
 800ae74:	200002d8 	.word	0x200002d8

0800ae78 <std>:
 800ae78:	2300      	movs	r3, #0
 800ae7a:	b510      	push	{r4, lr}
 800ae7c:	4604      	mov	r4, r0
 800ae7e:	e9c0 3300 	strd	r3, r3, [r0]
 800ae82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae86:	6083      	str	r3, [r0, #8]
 800ae88:	8181      	strh	r1, [r0, #12]
 800ae8a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ae8c:	81c2      	strh	r2, [r0, #14]
 800ae8e:	6183      	str	r3, [r0, #24]
 800ae90:	4619      	mov	r1, r3
 800ae92:	2208      	movs	r2, #8
 800ae94:	305c      	adds	r0, #92	@ 0x5c
 800ae96:	f000 fa13 	bl	800b2c0 <memset>
 800ae9a:	4b0d      	ldr	r3, [pc, #52]	@ (800aed0 <std+0x58>)
 800ae9c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ae9e:	4b0d      	ldr	r3, [pc, #52]	@ (800aed4 <std+0x5c>)
 800aea0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aea2:	4b0d      	ldr	r3, [pc, #52]	@ (800aed8 <std+0x60>)
 800aea4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aea6:	4b0d      	ldr	r3, [pc, #52]	@ (800aedc <std+0x64>)
 800aea8:	6323      	str	r3, [r4, #48]	@ 0x30
 800aeaa:	4b0d      	ldr	r3, [pc, #52]	@ (800aee0 <std+0x68>)
 800aeac:	6224      	str	r4, [r4, #32]
 800aeae:	429c      	cmp	r4, r3
 800aeb0:	d006      	beq.n	800aec0 <std+0x48>
 800aeb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aeb6:	4294      	cmp	r4, r2
 800aeb8:	d002      	beq.n	800aec0 <std+0x48>
 800aeba:	33d0      	adds	r3, #208	@ 0xd0
 800aebc:	429c      	cmp	r4, r3
 800aebe:	d105      	bne.n	800aecc <std+0x54>
 800aec0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aec8:	f000 ba82 	b.w	800b3d0 <__retarget_lock_init_recursive>
 800aecc:	bd10      	pop	{r4, pc}
 800aece:	bf00      	nop
 800aed0:	0800b0dd 	.word	0x0800b0dd
 800aed4:	0800b0ff 	.word	0x0800b0ff
 800aed8:	0800b137 	.word	0x0800b137
 800aedc:	0800b15b 	.word	0x0800b15b
 800aee0:	20000464 	.word	0x20000464

0800aee4 <stdio_exit_handler>:
 800aee4:	4a02      	ldr	r2, [pc, #8]	@ (800aef0 <stdio_exit_handler+0xc>)
 800aee6:	4903      	ldr	r1, [pc, #12]	@ (800aef4 <stdio_exit_handler+0x10>)
 800aee8:	4803      	ldr	r0, [pc, #12]	@ (800aef8 <stdio_exit_handler+0x14>)
 800aeea:	f000 b869 	b.w	800afc0 <_fwalk_sglue>
 800aeee:	bf00      	nop
 800aef0:	200002cc 	.word	0x200002cc
 800aef4:	0800ae01 	.word	0x0800ae01
 800aef8:	200002dc 	.word	0x200002dc

0800aefc <cleanup_stdio>:
 800aefc:	6841      	ldr	r1, [r0, #4]
 800aefe:	4b0c      	ldr	r3, [pc, #48]	@ (800af30 <cleanup_stdio+0x34>)
 800af00:	4299      	cmp	r1, r3
 800af02:	b510      	push	{r4, lr}
 800af04:	4604      	mov	r4, r0
 800af06:	d001      	beq.n	800af0c <cleanup_stdio+0x10>
 800af08:	f7ff ff7a 	bl	800ae00 <_fflush_r>
 800af0c:	68a1      	ldr	r1, [r4, #8]
 800af0e:	4b09      	ldr	r3, [pc, #36]	@ (800af34 <cleanup_stdio+0x38>)
 800af10:	4299      	cmp	r1, r3
 800af12:	d002      	beq.n	800af1a <cleanup_stdio+0x1e>
 800af14:	4620      	mov	r0, r4
 800af16:	f7ff ff73 	bl	800ae00 <_fflush_r>
 800af1a:	68e1      	ldr	r1, [r4, #12]
 800af1c:	4b06      	ldr	r3, [pc, #24]	@ (800af38 <cleanup_stdio+0x3c>)
 800af1e:	4299      	cmp	r1, r3
 800af20:	d004      	beq.n	800af2c <cleanup_stdio+0x30>
 800af22:	4620      	mov	r0, r4
 800af24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af28:	f7ff bf6a 	b.w	800ae00 <_fflush_r>
 800af2c:	bd10      	pop	{r4, pc}
 800af2e:	bf00      	nop
 800af30:	20000464 	.word	0x20000464
 800af34:	200004cc 	.word	0x200004cc
 800af38:	20000534 	.word	0x20000534

0800af3c <global_stdio_init.part.0>:
 800af3c:	b510      	push	{r4, lr}
 800af3e:	4b0b      	ldr	r3, [pc, #44]	@ (800af6c <global_stdio_init.part.0+0x30>)
 800af40:	4c0b      	ldr	r4, [pc, #44]	@ (800af70 <global_stdio_init.part.0+0x34>)
 800af42:	4a0c      	ldr	r2, [pc, #48]	@ (800af74 <global_stdio_init.part.0+0x38>)
 800af44:	601a      	str	r2, [r3, #0]
 800af46:	4620      	mov	r0, r4
 800af48:	2200      	movs	r2, #0
 800af4a:	2104      	movs	r1, #4
 800af4c:	f7ff ff94 	bl	800ae78 <std>
 800af50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800af54:	2201      	movs	r2, #1
 800af56:	2109      	movs	r1, #9
 800af58:	f7ff ff8e 	bl	800ae78 <std>
 800af5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800af60:	2202      	movs	r2, #2
 800af62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af66:	2112      	movs	r1, #18
 800af68:	f7ff bf86 	b.w	800ae78 <std>
 800af6c:	2000059c 	.word	0x2000059c
 800af70:	20000464 	.word	0x20000464
 800af74:	0800aee5 	.word	0x0800aee5

0800af78 <__sfp_lock_acquire>:
 800af78:	4801      	ldr	r0, [pc, #4]	@ (800af80 <__sfp_lock_acquire+0x8>)
 800af7a:	f000 ba2a 	b.w	800b3d2 <__retarget_lock_acquire_recursive>
 800af7e:	bf00      	nop
 800af80:	200005a5 	.word	0x200005a5

0800af84 <__sfp_lock_release>:
 800af84:	4801      	ldr	r0, [pc, #4]	@ (800af8c <__sfp_lock_release+0x8>)
 800af86:	f000 ba25 	b.w	800b3d4 <__retarget_lock_release_recursive>
 800af8a:	bf00      	nop
 800af8c:	200005a5 	.word	0x200005a5

0800af90 <__sinit>:
 800af90:	b510      	push	{r4, lr}
 800af92:	4604      	mov	r4, r0
 800af94:	f7ff fff0 	bl	800af78 <__sfp_lock_acquire>
 800af98:	6a23      	ldr	r3, [r4, #32]
 800af9a:	b11b      	cbz	r3, 800afa4 <__sinit+0x14>
 800af9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afa0:	f7ff bff0 	b.w	800af84 <__sfp_lock_release>
 800afa4:	4b04      	ldr	r3, [pc, #16]	@ (800afb8 <__sinit+0x28>)
 800afa6:	6223      	str	r3, [r4, #32]
 800afa8:	4b04      	ldr	r3, [pc, #16]	@ (800afbc <__sinit+0x2c>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d1f5      	bne.n	800af9c <__sinit+0xc>
 800afb0:	f7ff ffc4 	bl	800af3c <global_stdio_init.part.0>
 800afb4:	e7f2      	b.n	800af9c <__sinit+0xc>
 800afb6:	bf00      	nop
 800afb8:	0800aefd 	.word	0x0800aefd
 800afbc:	2000059c 	.word	0x2000059c

0800afc0 <_fwalk_sglue>:
 800afc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afc4:	4607      	mov	r7, r0
 800afc6:	4688      	mov	r8, r1
 800afc8:	4614      	mov	r4, r2
 800afca:	2600      	movs	r6, #0
 800afcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afd0:	f1b9 0901 	subs.w	r9, r9, #1
 800afd4:	d505      	bpl.n	800afe2 <_fwalk_sglue+0x22>
 800afd6:	6824      	ldr	r4, [r4, #0]
 800afd8:	2c00      	cmp	r4, #0
 800afda:	d1f7      	bne.n	800afcc <_fwalk_sglue+0xc>
 800afdc:	4630      	mov	r0, r6
 800afde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afe2:	89ab      	ldrh	r3, [r5, #12]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d907      	bls.n	800aff8 <_fwalk_sglue+0x38>
 800afe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afec:	3301      	adds	r3, #1
 800afee:	d003      	beq.n	800aff8 <_fwalk_sglue+0x38>
 800aff0:	4629      	mov	r1, r5
 800aff2:	4638      	mov	r0, r7
 800aff4:	47c0      	blx	r8
 800aff6:	4306      	orrs	r6, r0
 800aff8:	3568      	adds	r5, #104	@ 0x68
 800affa:	e7e9      	b.n	800afd0 <_fwalk_sglue+0x10>

0800affc <iprintf>:
 800affc:	b40f      	push	{r0, r1, r2, r3}
 800affe:	b507      	push	{r0, r1, r2, lr}
 800b000:	4906      	ldr	r1, [pc, #24]	@ (800b01c <iprintf+0x20>)
 800b002:	ab04      	add	r3, sp, #16
 800b004:	6808      	ldr	r0, [r1, #0]
 800b006:	f853 2b04 	ldr.w	r2, [r3], #4
 800b00a:	6881      	ldr	r1, [r0, #8]
 800b00c:	9301      	str	r3, [sp, #4]
 800b00e:	f000 fa65 	bl	800b4dc <_vfiprintf_r>
 800b012:	b003      	add	sp, #12
 800b014:	f85d eb04 	ldr.w	lr, [sp], #4
 800b018:	b004      	add	sp, #16
 800b01a:	4770      	bx	lr
 800b01c:	200002d8 	.word	0x200002d8

0800b020 <_puts_r>:
 800b020:	6a03      	ldr	r3, [r0, #32]
 800b022:	b570      	push	{r4, r5, r6, lr}
 800b024:	6884      	ldr	r4, [r0, #8]
 800b026:	4605      	mov	r5, r0
 800b028:	460e      	mov	r6, r1
 800b02a:	b90b      	cbnz	r3, 800b030 <_puts_r+0x10>
 800b02c:	f7ff ffb0 	bl	800af90 <__sinit>
 800b030:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b032:	07db      	lsls	r3, r3, #31
 800b034:	d405      	bmi.n	800b042 <_puts_r+0x22>
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	0598      	lsls	r0, r3, #22
 800b03a:	d402      	bmi.n	800b042 <_puts_r+0x22>
 800b03c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b03e:	f000 f9c8 	bl	800b3d2 <__retarget_lock_acquire_recursive>
 800b042:	89a3      	ldrh	r3, [r4, #12]
 800b044:	0719      	lsls	r1, r3, #28
 800b046:	d502      	bpl.n	800b04e <_puts_r+0x2e>
 800b048:	6923      	ldr	r3, [r4, #16]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d135      	bne.n	800b0ba <_puts_r+0x9a>
 800b04e:	4621      	mov	r1, r4
 800b050:	4628      	mov	r0, r5
 800b052:	f000 f8c5 	bl	800b1e0 <__swsetup_r>
 800b056:	b380      	cbz	r0, 800b0ba <_puts_r+0x9a>
 800b058:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b05c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b05e:	07da      	lsls	r2, r3, #31
 800b060:	d405      	bmi.n	800b06e <_puts_r+0x4e>
 800b062:	89a3      	ldrh	r3, [r4, #12]
 800b064:	059b      	lsls	r3, r3, #22
 800b066:	d402      	bmi.n	800b06e <_puts_r+0x4e>
 800b068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b06a:	f000 f9b3 	bl	800b3d4 <__retarget_lock_release_recursive>
 800b06e:	4628      	mov	r0, r5
 800b070:	bd70      	pop	{r4, r5, r6, pc}
 800b072:	2b00      	cmp	r3, #0
 800b074:	da04      	bge.n	800b080 <_puts_r+0x60>
 800b076:	69a2      	ldr	r2, [r4, #24]
 800b078:	429a      	cmp	r2, r3
 800b07a:	dc17      	bgt.n	800b0ac <_puts_r+0x8c>
 800b07c:	290a      	cmp	r1, #10
 800b07e:	d015      	beq.n	800b0ac <_puts_r+0x8c>
 800b080:	6823      	ldr	r3, [r4, #0]
 800b082:	1c5a      	adds	r2, r3, #1
 800b084:	6022      	str	r2, [r4, #0]
 800b086:	7019      	strb	r1, [r3, #0]
 800b088:	68a3      	ldr	r3, [r4, #8]
 800b08a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b08e:	3b01      	subs	r3, #1
 800b090:	60a3      	str	r3, [r4, #8]
 800b092:	2900      	cmp	r1, #0
 800b094:	d1ed      	bne.n	800b072 <_puts_r+0x52>
 800b096:	2b00      	cmp	r3, #0
 800b098:	da11      	bge.n	800b0be <_puts_r+0x9e>
 800b09a:	4622      	mov	r2, r4
 800b09c:	210a      	movs	r1, #10
 800b09e:	4628      	mov	r0, r5
 800b0a0:	f000 f85f 	bl	800b162 <__swbuf_r>
 800b0a4:	3001      	adds	r0, #1
 800b0a6:	d0d7      	beq.n	800b058 <_puts_r+0x38>
 800b0a8:	250a      	movs	r5, #10
 800b0aa:	e7d7      	b.n	800b05c <_puts_r+0x3c>
 800b0ac:	4622      	mov	r2, r4
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	f000 f857 	bl	800b162 <__swbuf_r>
 800b0b4:	3001      	adds	r0, #1
 800b0b6:	d1e7      	bne.n	800b088 <_puts_r+0x68>
 800b0b8:	e7ce      	b.n	800b058 <_puts_r+0x38>
 800b0ba:	3e01      	subs	r6, #1
 800b0bc:	e7e4      	b.n	800b088 <_puts_r+0x68>
 800b0be:	6823      	ldr	r3, [r4, #0]
 800b0c0:	1c5a      	adds	r2, r3, #1
 800b0c2:	6022      	str	r2, [r4, #0]
 800b0c4:	220a      	movs	r2, #10
 800b0c6:	701a      	strb	r2, [r3, #0]
 800b0c8:	e7ee      	b.n	800b0a8 <_puts_r+0x88>
	...

0800b0cc <puts>:
 800b0cc:	4b02      	ldr	r3, [pc, #8]	@ (800b0d8 <puts+0xc>)
 800b0ce:	4601      	mov	r1, r0
 800b0d0:	6818      	ldr	r0, [r3, #0]
 800b0d2:	f7ff bfa5 	b.w	800b020 <_puts_r>
 800b0d6:	bf00      	nop
 800b0d8:	200002d8 	.word	0x200002d8

0800b0dc <__sread>:
 800b0dc:	b510      	push	{r4, lr}
 800b0de:	460c      	mov	r4, r1
 800b0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0e4:	f000 f916 	bl	800b314 <_read_r>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	bfab      	itete	ge
 800b0ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b0ee:	89a3      	ldrhlt	r3, [r4, #12]
 800b0f0:	181b      	addge	r3, r3, r0
 800b0f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b0f6:	bfac      	ite	ge
 800b0f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b0fa:	81a3      	strhlt	r3, [r4, #12]
 800b0fc:	bd10      	pop	{r4, pc}

0800b0fe <__swrite>:
 800b0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b102:	461f      	mov	r7, r3
 800b104:	898b      	ldrh	r3, [r1, #12]
 800b106:	05db      	lsls	r3, r3, #23
 800b108:	4605      	mov	r5, r0
 800b10a:	460c      	mov	r4, r1
 800b10c:	4616      	mov	r6, r2
 800b10e:	d505      	bpl.n	800b11c <__swrite+0x1e>
 800b110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b114:	2302      	movs	r3, #2
 800b116:	2200      	movs	r2, #0
 800b118:	f000 f8ea 	bl	800b2f0 <_lseek_r>
 800b11c:	89a3      	ldrh	r3, [r4, #12]
 800b11e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b122:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b126:	81a3      	strh	r3, [r4, #12]
 800b128:	4632      	mov	r2, r6
 800b12a:	463b      	mov	r3, r7
 800b12c:	4628      	mov	r0, r5
 800b12e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b132:	f000 b911 	b.w	800b358 <_write_r>

0800b136 <__sseek>:
 800b136:	b510      	push	{r4, lr}
 800b138:	460c      	mov	r4, r1
 800b13a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b13e:	f000 f8d7 	bl	800b2f0 <_lseek_r>
 800b142:	1c43      	adds	r3, r0, #1
 800b144:	89a3      	ldrh	r3, [r4, #12]
 800b146:	bf15      	itete	ne
 800b148:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b14a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b14e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b152:	81a3      	strheq	r3, [r4, #12]
 800b154:	bf18      	it	ne
 800b156:	81a3      	strhne	r3, [r4, #12]
 800b158:	bd10      	pop	{r4, pc}

0800b15a <__sclose>:
 800b15a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b15e:	f000 b8b7 	b.w	800b2d0 <_close_r>

0800b162 <__swbuf_r>:
 800b162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b164:	460e      	mov	r6, r1
 800b166:	4614      	mov	r4, r2
 800b168:	4605      	mov	r5, r0
 800b16a:	b118      	cbz	r0, 800b174 <__swbuf_r+0x12>
 800b16c:	6a03      	ldr	r3, [r0, #32]
 800b16e:	b90b      	cbnz	r3, 800b174 <__swbuf_r+0x12>
 800b170:	f7ff ff0e 	bl	800af90 <__sinit>
 800b174:	69a3      	ldr	r3, [r4, #24]
 800b176:	60a3      	str	r3, [r4, #8]
 800b178:	89a3      	ldrh	r3, [r4, #12]
 800b17a:	071a      	lsls	r2, r3, #28
 800b17c:	d501      	bpl.n	800b182 <__swbuf_r+0x20>
 800b17e:	6923      	ldr	r3, [r4, #16]
 800b180:	b943      	cbnz	r3, 800b194 <__swbuf_r+0x32>
 800b182:	4621      	mov	r1, r4
 800b184:	4628      	mov	r0, r5
 800b186:	f000 f82b 	bl	800b1e0 <__swsetup_r>
 800b18a:	b118      	cbz	r0, 800b194 <__swbuf_r+0x32>
 800b18c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b190:	4638      	mov	r0, r7
 800b192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b194:	6823      	ldr	r3, [r4, #0]
 800b196:	6922      	ldr	r2, [r4, #16]
 800b198:	1a98      	subs	r0, r3, r2
 800b19a:	6963      	ldr	r3, [r4, #20]
 800b19c:	b2f6      	uxtb	r6, r6
 800b19e:	4283      	cmp	r3, r0
 800b1a0:	4637      	mov	r7, r6
 800b1a2:	dc05      	bgt.n	800b1b0 <__swbuf_r+0x4e>
 800b1a4:	4621      	mov	r1, r4
 800b1a6:	4628      	mov	r0, r5
 800b1a8:	f7ff fe2a 	bl	800ae00 <_fflush_r>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d1ed      	bne.n	800b18c <__swbuf_r+0x2a>
 800b1b0:	68a3      	ldr	r3, [r4, #8]
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	60a3      	str	r3, [r4, #8]
 800b1b6:	6823      	ldr	r3, [r4, #0]
 800b1b8:	1c5a      	adds	r2, r3, #1
 800b1ba:	6022      	str	r2, [r4, #0]
 800b1bc:	701e      	strb	r6, [r3, #0]
 800b1be:	6962      	ldr	r2, [r4, #20]
 800b1c0:	1c43      	adds	r3, r0, #1
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d004      	beq.n	800b1d0 <__swbuf_r+0x6e>
 800b1c6:	89a3      	ldrh	r3, [r4, #12]
 800b1c8:	07db      	lsls	r3, r3, #31
 800b1ca:	d5e1      	bpl.n	800b190 <__swbuf_r+0x2e>
 800b1cc:	2e0a      	cmp	r6, #10
 800b1ce:	d1df      	bne.n	800b190 <__swbuf_r+0x2e>
 800b1d0:	4621      	mov	r1, r4
 800b1d2:	4628      	mov	r0, r5
 800b1d4:	f7ff fe14 	bl	800ae00 <_fflush_r>
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	d0d9      	beq.n	800b190 <__swbuf_r+0x2e>
 800b1dc:	e7d6      	b.n	800b18c <__swbuf_r+0x2a>
	...

0800b1e0 <__swsetup_r>:
 800b1e0:	b538      	push	{r3, r4, r5, lr}
 800b1e2:	4b29      	ldr	r3, [pc, #164]	@ (800b288 <__swsetup_r+0xa8>)
 800b1e4:	4605      	mov	r5, r0
 800b1e6:	6818      	ldr	r0, [r3, #0]
 800b1e8:	460c      	mov	r4, r1
 800b1ea:	b118      	cbz	r0, 800b1f4 <__swsetup_r+0x14>
 800b1ec:	6a03      	ldr	r3, [r0, #32]
 800b1ee:	b90b      	cbnz	r3, 800b1f4 <__swsetup_r+0x14>
 800b1f0:	f7ff fece 	bl	800af90 <__sinit>
 800b1f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1f8:	0719      	lsls	r1, r3, #28
 800b1fa:	d422      	bmi.n	800b242 <__swsetup_r+0x62>
 800b1fc:	06da      	lsls	r2, r3, #27
 800b1fe:	d407      	bmi.n	800b210 <__swsetup_r+0x30>
 800b200:	2209      	movs	r2, #9
 800b202:	602a      	str	r2, [r5, #0]
 800b204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b208:	81a3      	strh	r3, [r4, #12]
 800b20a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b20e:	e033      	b.n	800b278 <__swsetup_r+0x98>
 800b210:	0758      	lsls	r0, r3, #29
 800b212:	d512      	bpl.n	800b23a <__swsetup_r+0x5a>
 800b214:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b216:	b141      	cbz	r1, 800b22a <__swsetup_r+0x4a>
 800b218:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b21c:	4299      	cmp	r1, r3
 800b21e:	d002      	beq.n	800b226 <__swsetup_r+0x46>
 800b220:	4628      	mov	r0, r5
 800b222:	f000 f8e7 	bl	800b3f4 <_free_r>
 800b226:	2300      	movs	r3, #0
 800b228:	6363      	str	r3, [r4, #52]	@ 0x34
 800b22a:	89a3      	ldrh	r3, [r4, #12]
 800b22c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b230:	81a3      	strh	r3, [r4, #12]
 800b232:	2300      	movs	r3, #0
 800b234:	6063      	str	r3, [r4, #4]
 800b236:	6923      	ldr	r3, [r4, #16]
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	89a3      	ldrh	r3, [r4, #12]
 800b23c:	f043 0308 	orr.w	r3, r3, #8
 800b240:	81a3      	strh	r3, [r4, #12]
 800b242:	6923      	ldr	r3, [r4, #16]
 800b244:	b94b      	cbnz	r3, 800b25a <__swsetup_r+0x7a>
 800b246:	89a3      	ldrh	r3, [r4, #12]
 800b248:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b24c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b250:	d003      	beq.n	800b25a <__swsetup_r+0x7a>
 800b252:	4621      	mov	r1, r4
 800b254:	4628      	mov	r0, r5
 800b256:	f000 fc0b 	bl	800ba70 <__smakebuf_r>
 800b25a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b25e:	f013 0201 	ands.w	r2, r3, #1
 800b262:	d00a      	beq.n	800b27a <__swsetup_r+0x9a>
 800b264:	2200      	movs	r2, #0
 800b266:	60a2      	str	r2, [r4, #8]
 800b268:	6962      	ldr	r2, [r4, #20]
 800b26a:	4252      	negs	r2, r2
 800b26c:	61a2      	str	r2, [r4, #24]
 800b26e:	6922      	ldr	r2, [r4, #16]
 800b270:	b942      	cbnz	r2, 800b284 <__swsetup_r+0xa4>
 800b272:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b276:	d1c5      	bne.n	800b204 <__swsetup_r+0x24>
 800b278:	bd38      	pop	{r3, r4, r5, pc}
 800b27a:	0799      	lsls	r1, r3, #30
 800b27c:	bf58      	it	pl
 800b27e:	6962      	ldrpl	r2, [r4, #20]
 800b280:	60a2      	str	r2, [r4, #8]
 800b282:	e7f4      	b.n	800b26e <__swsetup_r+0x8e>
 800b284:	2000      	movs	r0, #0
 800b286:	e7f7      	b.n	800b278 <__swsetup_r+0x98>
 800b288:	200002d8 	.word	0x200002d8

0800b28c <memmove>:
 800b28c:	4288      	cmp	r0, r1
 800b28e:	b510      	push	{r4, lr}
 800b290:	eb01 0402 	add.w	r4, r1, r2
 800b294:	d902      	bls.n	800b29c <memmove+0x10>
 800b296:	4284      	cmp	r4, r0
 800b298:	4623      	mov	r3, r4
 800b29a:	d807      	bhi.n	800b2ac <memmove+0x20>
 800b29c:	1e43      	subs	r3, r0, #1
 800b29e:	42a1      	cmp	r1, r4
 800b2a0:	d008      	beq.n	800b2b4 <memmove+0x28>
 800b2a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2aa:	e7f8      	b.n	800b29e <memmove+0x12>
 800b2ac:	4402      	add	r2, r0
 800b2ae:	4601      	mov	r1, r0
 800b2b0:	428a      	cmp	r2, r1
 800b2b2:	d100      	bne.n	800b2b6 <memmove+0x2a>
 800b2b4:	bd10      	pop	{r4, pc}
 800b2b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2be:	e7f7      	b.n	800b2b0 <memmove+0x24>

0800b2c0 <memset>:
 800b2c0:	4402      	add	r2, r0
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d100      	bne.n	800b2ca <memset+0xa>
 800b2c8:	4770      	bx	lr
 800b2ca:	f803 1b01 	strb.w	r1, [r3], #1
 800b2ce:	e7f9      	b.n	800b2c4 <memset+0x4>

0800b2d0 <_close_r>:
 800b2d0:	b538      	push	{r3, r4, r5, lr}
 800b2d2:	4d06      	ldr	r5, [pc, #24]	@ (800b2ec <_close_r+0x1c>)
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	4608      	mov	r0, r1
 800b2da:	602b      	str	r3, [r5, #0]
 800b2dc:	f7fc fdc1 	bl	8007e62 <_close>
 800b2e0:	1c43      	adds	r3, r0, #1
 800b2e2:	d102      	bne.n	800b2ea <_close_r+0x1a>
 800b2e4:	682b      	ldr	r3, [r5, #0]
 800b2e6:	b103      	cbz	r3, 800b2ea <_close_r+0x1a>
 800b2e8:	6023      	str	r3, [r4, #0]
 800b2ea:	bd38      	pop	{r3, r4, r5, pc}
 800b2ec:	200005a0 	.word	0x200005a0

0800b2f0 <_lseek_r>:
 800b2f0:	b538      	push	{r3, r4, r5, lr}
 800b2f2:	4d07      	ldr	r5, [pc, #28]	@ (800b310 <_lseek_r+0x20>)
 800b2f4:	4604      	mov	r4, r0
 800b2f6:	4608      	mov	r0, r1
 800b2f8:	4611      	mov	r1, r2
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	602a      	str	r2, [r5, #0]
 800b2fe:	461a      	mov	r2, r3
 800b300:	f7fc fdd6 	bl	8007eb0 <_lseek>
 800b304:	1c43      	adds	r3, r0, #1
 800b306:	d102      	bne.n	800b30e <_lseek_r+0x1e>
 800b308:	682b      	ldr	r3, [r5, #0]
 800b30a:	b103      	cbz	r3, 800b30e <_lseek_r+0x1e>
 800b30c:	6023      	str	r3, [r4, #0]
 800b30e:	bd38      	pop	{r3, r4, r5, pc}
 800b310:	200005a0 	.word	0x200005a0

0800b314 <_read_r>:
 800b314:	b538      	push	{r3, r4, r5, lr}
 800b316:	4d07      	ldr	r5, [pc, #28]	@ (800b334 <_read_r+0x20>)
 800b318:	4604      	mov	r4, r0
 800b31a:	4608      	mov	r0, r1
 800b31c:	4611      	mov	r1, r2
 800b31e:	2200      	movs	r2, #0
 800b320:	602a      	str	r2, [r5, #0]
 800b322:	461a      	mov	r2, r3
 800b324:	f7fc fd80 	bl	8007e28 <_read>
 800b328:	1c43      	adds	r3, r0, #1
 800b32a:	d102      	bne.n	800b332 <_read_r+0x1e>
 800b32c:	682b      	ldr	r3, [r5, #0]
 800b32e:	b103      	cbz	r3, 800b332 <_read_r+0x1e>
 800b330:	6023      	str	r3, [r4, #0]
 800b332:	bd38      	pop	{r3, r4, r5, pc}
 800b334:	200005a0 	.word	0x200005a0

0800b338 <_sbrk_r>:
 800b338:	b538      	push	{r3, r4, r5, lr}
 800b33a:	4d06      	ldr	r5, [pc, #24]	@ (800b354 <_sbrk_r+0x1c>)
 800b33c:	2300      	movs	r3, #0
 800b33e:	4604      	mov	r4, r0
 800b340:	4608      	mov	r0, r1
 800b342:	602b      	str	r3, [r5, #0]
 800b344:	f7fc fdc2 	bl	8007ecc <_sbrk>
 800b348:	1c43      	adds	r3, r0, #1
 800b34a:	d102      	bne.n	800b352 <_sbrk_r+0x1a>
 800b34c:	682b      	ldr	r3, [r5, #0]
 800b34e:	b103      	cbz	r3, 800b352 <_sbrk_r+0x1a>
 800b350:	6023      	str	r3, [r4, #0]
 800b352:	bd38      	pop	{r3, r4, r5, pc}
 800b354:	200005a0 	.word	0x200005a0

0800b358 <_write_r>:
 800b358:	b538      	push	{r3, r4, r5, lr}
 800b35a:	4d07      	ldr	r5, [pc, #28]	@ (800b378 <_write_r+0x20>)
 800b35c:	4604      	mov	r4, r0
 800b35e:	4608      	mov	r0, r1
 800b360:	4611      	mov	r1, r2
 800b362:	2200      	movs	r2, #0
 800b364:	602a      	str	r2, [r5, #0]
 800b366:	461a      	mov	r2, r3
 800b368:	f7fc fbcb 	bl	8007b02 <_write>
 800b36c:	1c43      	adds	r3, r0, #1
 800b36e:	d102      	bne.n	800b376 <_write_r+0x1e>
 800b370:	682b      	ldr	r3, [r5, #0]
 800b372:	b103      	cbz	r3, 800b376 <_write_r+0x1e>
 800b374:	6023      	str	r3, [r4, #0]
 800b376:	bd38      	pop	{r3, r4, r5, pc}
 800b378:	200005a0 	.word	0x200005a0

0800b37c <__errno>:
 800b37c:	4b01      	ldr	r3, [pc, #4]	@ (800b384 <__errno+0x8>)
 800b37e:	6818      	ldr	r0, [r3, #0]
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	200002d8 	.word	0x200002d8

0800b388 <__libc_init_array>:
 800b388:	b570      	push	{r4, r5, r6, lr}
 800b38a:	4d0d      	ldr	r5, [pc, #52]	@ (800b3c0 <__libc_init_array+0x38>)
 800b38c:	4c0d      	ldr	r4, [pc, #52]	@ (800b3c4 <__libc_init_array+0x3c>)
 800b38e:	1b64      	subs	r4, r4, r5
 800b390:	10a4      	asrs	r4, r4, #2
 800b392:	2600      	movs	r6, #0
 800b394:	42a6      	cmp	r6, r4
 800b396:	d109      	bne.n	800b3ac <__libc_init_array+0x24>
 800b398:	4d0b      	ldr	r5, [pc, #44]	@ (800b3c8 <__libc_init_array+0x40>)
 800b39a:	4c0c      	ldr	r4, [pc, #48]	@ (800b3cc <__libc_init_array+0x44>)
 800b39c:	f000 fbc6 	bl	800bb2c <_init>
 800b3a0:	1b64      	subs	r4, r4, r5
 800b3a2:	10a4      	asrs	r4, r4, #2
 800b3a4:	2600      	movs	r6, #0
 800b3a6:	42a6      	cmp	r6, r4
 800b3a8:	d105      	bne.n	800b3b6 <__libc_init_array+0x2e>
 800b3aa:	bd70      	pop	{r4, r5, r6, pc}
 800b3ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3b0:	4798      	blx	r3
 800b3b2:	3601      	adds	r6, #1
 800b3b4:	e7ee      	b.n	800b394 <__libc_init_array+0xc>
 800b3b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3ba:	4798      	blx	r3
 800b3bc:	3601      	adds	r6, #1
 800b3be:	e7f2      	b.n	800b3a6 <__libc_init_array+0x1e>
 800b3c0:	0800c208 	.word	0x0800c208
 800b3c4:	0800c208 	.word	0x0800c208
 800b3c8:	0800c208 	.word	0x0800c208
 800b3cc:	0800c20c 	.word	0x0800c20c

0800b3d0 <__retarget_lock_init_recursive>:
 800b3d0:	4770      	bx	lr

0800b3d2 <__retarget_lock_acquire_recursive>:
 800b3d2:	4770      	bx	lr

0800b3d4 <__retarget_lock_release_recursive>:
 800b3d4:	4770      	bx	lr

0800b3d6 <memcpy>:
 800b3d6:	440a      	add	r2, r1
 800b3d8:	4291      	cmp	r1, r2
 800b3da:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b3de:	d100      	bne.n	800b3e2 <memcpy+0xc>
 800b3e0:	4770      	bx	lr
 800b3e2:	b510      	push	{r4, lr}
 800b3e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3ec:	4291      	cmp	r1, r2
 800b3ee:	d1f9      	bne.n	800b3e4 <memcpy+0xe>
 800b3f0:	bd10      	pop	{r4, pc}
	...

0800b3f4 <_free_r>:
 800b3f4:	b538      	push	{r3, r4, r5, lr}
 800b3f6:	4605      	mov	r5, r0
 800b3f8:	2900      	cmp	r1, #0
 800b3fa:	d041      	beq.n	800b480 <_free_r+0x8c>
 800b3fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b400:	1f0c      	subs	r4, r1, #4
 800b402:	2b00      	cmp	r3, #0
 800b404:	bfb8      	it	lt
 800b406:	18e4      	addlt	r4, r4, r3
 800b408:	f7ff fc6a 	bl	800ace0 <__malloc_lock>
 800b40c:	4a1d      	ldr	r2, [pc, #116]	@ (800b484 <_free_r+0x90>)
 800b40e:	6813      	ldr	r3, [r2, #0]
 800b410:	b933      	cbnz	r3, 800b420 <_free_r+0x2c>
 800b412:	6063      	str	r3, [r4, #4]
 800b414:	6014      	str	r4, [r2, #0]
 800b416:	4628      	mov	r0, r5
 800b418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b41c:	f7ff bc66 	b.w	800acec <__malloc_unlock>
 800b420:	42a3      	cmp	r3, r4
 800b422:	d908      	bls.n	800b436 <_free_r+0x42>
 800b424:	6820      	ldr	r0, [r4, #0]
 800b426:	1821      	adds	r1, r4, r0
 800b428:	428b      	cmp	r3, r1
 800b42a:	bf01      	itttt	eq
 800b42c:	6819      	ldreq	r1, [r3, #0]
 800b42e:	685b      	ldreq	r3, [r3, #4]
 800b430:	1809      	addeq	r1, r1, r0
 800b432:	6021      	streq	r1, [r4, #0]
 800b434:	e7ed      	b.n	800b412 <_free_r+0x1e>
 800b436:	461a      	mov	r2, r3
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	b10b      	cbz	r3, 800b440 <_free_r+0x4c>
 800b43c:	42a3      	cmp	r3, r4
 800b43e:	d9fa      	bls.n	800b436 <_free_r+0x42>
 800b440:	6811      	ldr	r1, [r2, #0]
 800b442:	1850      	adds	r0, r2, r1
 800b444:	42a0      	cmp	r0, r4
 800b446:	d10b      	bne.n	800b460 <_free_r+0x6c>
 800b448:	6820      	ldr	r0, [r4, #0]
 800b44a:	4401      	add	r1, r0
 800b44c:	1850      	adds	r0, r2, r1
 800b44e:	4283      	cmp	r3, r0
 800b450:	6011      	str	r1, [r2, #0]
 800b452:	d1e0      	bne.n	800b416 <_free_r+0x22>
 800b454:	6818      	ldr	r0, [r3, #0]
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	6053      	str	r3, [r2, #4]
 800b45a:	4408      	add	r0, r1
 800b45c:	6010      	str	r0, [r2, #0]
 800b45e:	e7da      	b.n	800b416 <_free_r+0x22>
 800b460:	d902      	bls.n	800b468 <_free_r+0x74>
 800b462:	230c      	movs	r3, #12
 800b464:	602b      	str	r3, [r5, #0]
 800b466:	e7d6      	b.n	800b416 <_free_r+0x22>
 800b468:	6820      	ldr	r0, [r4, #0]
 800b46a:	1821      	adds	r1, r4, r0
 800b46c:	428b      	cmp	r3, r1
 800b46e:	bf04      	itt	eq
 800b470:	6819      	ldreq	r1, [r3, #0]
 800b472:	685b      	ldreq	r3, [r3, #4]
 800b474:	6063      	str	r3, [r4, #4]
 800b476:	bf04      	itt	eq
 800b478:	1809      	addeq	r1, r1, r0
 800b47a:	6021      	streq	r1, [r4, #0]
 800b47c:	6054      	str	r4, [r2, #4]
 800b47e:	e7ca      	b.n	800b416 <_free_r+0x22>
 800b480:	bd38      	pop	{r3, r4, r5, pc}
 800b482:	bf00      	nop
 800b484:	20000460 	.word	0x20000460

0800b488 <__sfputc_r>:
 800b488:	6893      	ldr	r3, [r2, #8]
 800b48a:	3b01      	subs	r3, #1
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	b410      	push	{r4}
 800b490:	6093      	str	r3, [r2, #8]
 800b492:	da08      	bge.n	800b4a6 <__sfputc_r+0x1e>
 800b494:	6994      	ldr	r4, [r2, #24]
 800b496:	42a3      	cmp	r3, r4
 800b498:	db01      	blt.n	800b49e <__sfputc_r+0x16>
 800b49a:	290a      	cmp	r1, #10
 800b49c:	d103      	bne.n	800b4a6 <__sfputc_r+0x1e>
 800b49e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4a2:	f7ff be5e 	b.w	800b162 <__swbuf_r>
 800b4a6:	6813      	ldr	r3, [r2, #0]
 800b4a8:	1c58      	adds	r0, r3, #1
 800b4aa:	6010      	str	r0, [r2, #0]
 800b4ac:	7019      	strb	r1, [r3, #0]
 800b4ae:	4608      	mov	r0, r1
 800b4b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4b4:	4770      	bx	lr

0800b4b6 <__sfputs_r>:
 800b4b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4b8:	4606      	mov	r6, r0
 800b4ba:	460f      	mov	r7, r1
 800b4bc:	4614      	mov	r4, r2
 800b4be:	18d5      	adds	r5, r2, r3
 800b4c0:	42ac      	cmp	r4, r5
 800b4c2:	d101      	bne.n	800b4c8 <__sfputs_r+0x12>
 800b4c4:	2000      	movs	r0, #0
 800b4c6:	e007      	b.n	800b4d8 <__sfputs_r+0x22>
 800b4c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4cc:	463a      	mov	r2, r7
 800b4ce:	4630      	mov	r0, r6
 800b4d0:	f7ff ffda 	bl	800b488 <__sfputc_r>
 800b4d4:	1c43      	adds	r3, r0, #1
 800b4d6:	d1f3      	bne.n	800b4c0 <__sfputs_r+0xa>
 800b4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b4dc <_vfiprintf_r>:
 800b4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e0:	460d      	mov	r5, r1
 800b4e2:	b09d      	sub	sp, #116	@ 0x74
 800b4e4:	4614      	mov	r4, r2
 800b4e6:	4698      	mov	r8, r3
 800b4e8:	4606      	mov	r6, r0
 800b4ea:	b118      	cbz	r0, 800b4f4 <_vfiprintf_r+0x18>
 800b4ec:	6a03      	ldr	r3, [r0, #32]
 800b4ee:	b90b      	cbnz	r3, 800b4f4 <_vfiprintf_r+0x18>
 800b4f0:	f7ff fd4e 	bl	800af90 <__sinit>
 800b4f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4f6:	07d9      	lsls	r1, r3, #31
 800b4f8:	d405      	bmi.n	800b506 <_vfiprintf_r+0x2a>
 800b4fa:	89ab      	ldrh	r3, [r5, #12]
 800b4fc:	059a      	lsls	r2, r3, #22
 800b4fe:	d402      	bmi.n	800b506 <_vfiprintf_r+0x2a>
 800b500:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b502:	f7ff ff66 	bl	800b3d2 <__retarget_lock_acquire_recursive>
 800b506:	89ab      	ldrh	r3, [r5, #12]
 800b508:	071b      	lsls	r3, r3, #28
 800b50a:	d501      	bpl.n	800b510 <_vfiprintf_r+0x34>
 800b50c:	692b      	ldr	r3, [r5, #16]
 800b50e:	b99b      	cbnz	r3, 800b538 <_vfiprintf_r+0x5c>
 800b510:	4629      	mov	r1, r5
 800b512:	4630      	mov	r0, r6
 800b514:	f7ff fe64 	bl	800b1e0 <__swsetup_r>
 800b518:	b170      	cbz	r0, 800b538 <_vfiprintf_r+0x5c>
 800b51a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b51c:	07dc      	lsls	r4, r3, #31
 800b51e:	d504      	bpl.n	800b52a <_vfiprintf_r+0x4e>
 800b520:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b524:	b01d      	add	sp, #116	@ 0x74
 800b526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b52a:	89ab      	ldrh	r3, [r5, #12]
 800b52c:	0598      	lsls	r0, r3, #22
 800b52e:	d4f7      	bmi.n	800b520 <_vfiprintf_r+0x44>
 800b530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b532:	f7ff ff4f 	bl	800b3d4 <__retarget_lock_release_recursive>
 800b536:	e7f3      	b.n	800b520 <_vfiprintf_r+0x44>
 800b538:	2300      	movs	r3, #0
 800b53a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b53c:	2320      	movs	r3, #32
 800b53e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b542:	f8cd 800c 	str.w	r8, [sp, #12]
 800b546:	2330      	movs	r3, #48	@ 0x30
 800b548:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b6f8 <_vfiprintf_r+0x21c>
 800b54c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b550:	f04f 0901 	mov.w	r9, #1
 800b554:	4623      	mov	r3, r4
 800b556:	469a      	mov	sl, r3
 800b558:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b55c:	b10a      	cbz	r2, 800b562 <_vfiprintf_r+0x86>
 800b55e:	2a25      	cmp	r2, #37	@ 0x25
 800b560:	d1f9      	bne.n	800b556 <_vfiprintf_r+0x7a>
 800b562:	ebba 0b04 	subs.w	fp, sl, r4
 800b566:	d00b      	beq.n	800b580 <_vfiprintf_r+0xa4>
 800b568:	465b      	mov	r3, fp
 800b56a:	4622      	mov	r2, r4
 800b56c:	4629      	mov	r1, r5
 800b56e:	4630      	mov	r0, r6
 800b570:	f7ff ffa1 	bl	800b4b6 <__sfputs_r>
 800b574:	3001      	adds	r0, #1
 800b576:	f000 80a7 	beq.w	800b6c8 <_vfiprintf_r+0x1ec>
 800b57a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b57c:	445a      	add	r2, fp
 800b57e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b580:	f89a 3000 	ldrb.w	r3, [sl]
 800b584:	2b00      	cmp	r3, #0
 800b586:	f000 809f 	beq.w	800b6c8 <_vfiprintf_r+0x1ec>
 800b58a:	2300      	movs	r3, #0
 800b58c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b594:	f10a 0a01 	add.w	sl, sl, #1
 800b598:	9304      	str	r3, [sp, #16]
 800b59a:	9307      	str	r3, [sp, #28]
 800b59c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5a2:	4654      	mov	r4, sl
 800b5a4:	2205      	movs	r2, #5
 800b5a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5aa:	4853      	ldr	r0, [pc, #332]	@ (800b6f8 <_vfiprintf_r+0x21c>)
 800b5ac:	f7f4 fe28 	bl	8000200 <memchr>
 800b5b0:	9a04      	ldr	r2, [sp, #16]
 800b5b2:	b9d8      	cbnz	r0, 800b5ec <_vfiprintf_r+0x110>
 800b5b4:	06d1      	lsls	r1, r2, #27
 800b5b6:	bf44      	itt	mi
 800b5b8:	2320      	movmi	r3, #32
 800b5ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5be:	0713      	lsls	r3, r2, #28
 800b5c0:	bf44      	itt	mi
 800b5c2:	232b      	movmi	r3, #43	@ 0x2b
 800b5c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b5cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5ce:	d015      	beq.n	800b5fc <_vfiprintf_r+0x120>
 800b5d0:	9a07      	ldr	r2, [sp, #28]
 800b5d2:	4654      	mov	r4, sl
 800b5d4:	2000      	movs	r0, #0
 800b5d6:	f04f 0c0a 	mov.w	ip, #10
 800b5da:	4621      	mov	r1, r4
 800b5dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5e0:	3b30      	subs	r3, #48	@ 0x30
 800b5e2:	2b09      	cmp	r3, #9
 800b5e4:	d94b      	bls.n	800b67e <_vfiprintf_r+0x1a2>
 800b5e6:	b1b0      	cbz	r0, 800b616 <_vfiprintf_r+0x13a>
 800b5e8:	9207      	str	r2, [sp, #28]
 800b5ea:	e014      	b.n	800b616 <_vfiprintf_r+0x13a>
 800b5ec:	eba0 0308 	sub.w	r3, r0, r8
 800b5f0:	fa09 f303 	lsl.w	r3, r9, r3
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	9304      	str	r3, [sp, #16]
 800b5f8:	46a2      	mov	sl, r4
 800b5fa:	e7d2      	b.n	800b5a2 <_vfiprintf_r+0xc6>
 800b5fc:	9b03      	ldr	r3, [sp, #12]
 800b5fe:	1d19      	adds	r1, r3, #4
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	9103      	str	r1, [sp, #12]
 800b604:	2b00      	cmp	r3, #0
 800b606:	bfbb      	ittet	lt
 800b608:	425b      	neglt	r3, r3
 800b60a:	f042 0202 	orrlt.w	r2, r2, #2
 800b60e:	9307      	strge	r3, [sp, #28]
 800b610:	9307      	strlt	r3, [sp, #28]
 800b612:	bfb8      	it	lt
 800b614:	9204      	strlt	r2, [sp, #16]
 800b616:	7823      	ldrb	r3, [r4, #0]
 800b618:	2b2e      	cmp	r3, #46	@ 0x2e
 800b61a:	d10a      	bne.n	800b632 <_vfiprintf_r+0x156>
 800b61c:	7863      	ldrb	r3, [r4, #1]
 800b61e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b620:	d132      	bne.n	800b688 <_vfiprintf_r+0x1ac>
 800b622:	9b03      	ldr	r3, [sp, #12]
 800b624:	1d1a      	adds	r2, r3, #4
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	9203      	str	r2, [sp, #12]
 800b62a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b62e:	3402      	adds	r4, #2
 800b630:	9305      	str	r3, [sp, #20]
 800b632:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b708 <_vfiprintf_r+0x22c>
 800b636:	7821      	ldrb	r1, [r4, #0]
 800b638:	2203      	movs	r2, #3
 800b63a:	4650      	mov	r0, sl
 800b63c:	f7f4 fde0 	bl	8000200 <memchr>
 800b640:	b138      	cbz	r0, 800b652 <_vfiprintf_r+0x176>
 800b642:	9b04      	ldr	r3, [sp, #16]
 800b644:	eba0 000a 	sub.w	r0, r0, sl
 800b648:	2240      	movs	r2, #64	@ 0x40
 800b64a:	4082      	lsls	r2, r0
 800b64c:	4313      	orrs	r3, r2
 800b64e:	3401      	adds	r4, #1
 800b650:	9304      	str	r3, [sp, #16]
 800b652:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b656:	4829      	ldr	r0, [pc, #164]	@ (800b6fc <_vfiprintf_r+0x220>)
 800b658:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b65c:	2206      	movs	r2, #6
 800b65e:	f7f4 fdcf 	bl	8000200 <memchr>
 800b662:	2800      	cmp	r0, #0
 800b664:	d03f      	beq.n	800b6e6 <_vfiprintf_r+0x20a>
 800b666:	4b26      	ldr	r3, [pc, #152]	@ (800b700 <_vfiprintf_r+0x224>)
 800b668:	bb1b      	cbnz	r3, 800b6b2 <_vfiprintf_r+0x1d6>
 800b66a:	9b03      	ldr	r3, [sp, #12]
 800b66c:	3307      	adds	r3, #7
 800b66e:	f023 0307 	bic.w	r3, r3, #7
 800b672:	3308      	adds	r3, #8
 800b674:	9303      	str	r3, [sp, #12]
 800b676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b678:	443b      	add	r3, r7
 800b67a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b67c:	e76a      	b.n	800b554 <_vfiprintf_r+0x78>
 800b67e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b682:	460c      	mov	r4, r1
 800b684:	2001      	movs	r0, #1
 800b686:	e7a8      	b.n	800b5da <_vfiprintf_r+0xfe>
 800b688:	2300      	movs	r3, #0
 800b68a:	3401      	adds	r4, #1
 800b68c:	9305      	str	r3, [sp, #20]
 800b68e:	4619      	mov	r1, r3
 800b690:	f04f 0c0a 	mov.w	ip, #10
 800b694:	4620      	mov	r0, r4
 800b696:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b69a:	3a30      	subs	r2, #48	@ 0x30
 800b69c:	2a09      	cmp	r2, #9
 800b69e:	d903      	bls.n	800b6a8 <_vfiprintf_r+0x1cc>
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d0c6      	beq.n	800b632 <_vfiprintf_r+0x156>
 800b6a4:	9105      	str	r1, [sp, #20]
 800b6a6:	e7c4      	b.n	800b632 <_vfiprintf_r+0x156>
 800b6a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6ac:	4604      	mov	r4, r0
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e7f0      	b.n	800b694 <_vfiprintf_r+0x1b8>
 800b6b2:	ab03      	add	r3, sp, #12
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	462a      	mov	r2, r5
 800b6b8:	4b12      	ldr	r3, [pc, #72]	@ (800b704 <_vfiprintf_r+0x228>)
 800b6ba:	a904      	add	r1, sp, #16
 800b6bc:	4630      	mov	r0, r6
 800b6be:	f3af 8000 	nop.w
 800b6c2:	4607      	mov	r7, r0
 800b6c4:	1c78      	adds	r0, r7, #1
 800b6c6:	d1d6      	bne.n	800b676 <_vfiprintf_r+0x19a>
 800b6c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b6ca:	07d9      	lsls	r1, r3, #31
 800b6cc:	d405      	bmi.n	800b6da <_vfiprintf_r+0x1fe>
 800b6ce:	89ab      	ldrh	r3, [r5, #12]
 800b6d0:	059a      	lsls	r2, r3, #22
 800b6d2:	d402      	bmi.n	800b6da <_vfiprintf_r+0x1fe>
 800b6d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6d6:	f7ff fe7d 	bl	800b3d4 <__retarget_lock_release_recursive>
 800b6da:	89ab      	ldrh	r3, [r5, #12]
 800b6dc:	065b      	lsls	r3, r3, #25
 800b6de:	f53f af1f 	bmi.w	800b520 <_vfiprintf_r+0x44>
 800b6e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6e4:	e71e      	b.n	800b524 <_vfiprintf_r+0x48>
 800b6e6:	ab03      	add	r3, sp, #12
 800b6e8:	9300      	str	r3, [sp, #0]
 800b6ea:	462a      	mov	r2, r5
 800b6ec:	4b05      	ldr	r3, [pc, #20]	@ (800b704 <_vfiprintf_r+0x228>)
 800b6ee:	a904      	add	r1, sp, #16
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	f000 f879 	bl	800b7e8 <_printf_i>
 800b6f6:	e7e4      	b.n	800b6c2 <_vfiprintf_r+0x1e6>
 800b6f8:	0800c1cc 	.word	0x0800c1cc
 800b6fc:	0800c1d6 	.word	0x0800c1d6
 800b700:	00000000 	.word	0x00000000
 800b704:	0800b4b7 	.word	0x0800b4b7
 800b708:	0800c1d2 	.word	0x0800c1d2

0800b70c <_printf_common>:
 800b70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b710:	4616      	mov	r6, r2
 800b712:	4698      	mov	r8, r3
 800b714:	688a      	ldr	r2, [r1, #8]
 800b716:	690b      	ldr	r3, [r1, #16]
 800b718:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b71c:	4293      	cmp	r3, r2
 800b71e:	bfb8      	it	lt
 800b720:	4613      	movlt	r3, r2
 800b722:	6033      	str	r3, [r6, #0]
 800b724:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b728:	4607      	mov	r7, r0
 800b72a:	460c      	mov	r4, r1
 800b72c:	b10a      	cbz	r2, 800b732 <_printf_common+0x26>
 800b72e:	3301      	adds	r3, #1
 800b730:	6033      	str	r3, [r6, #0]
 800b732:	6823      	ldr	r3, [r4, #0]
 800b734:	0699      	lsls	r1, r3, #26
 800b736:	bf42      	ittt	mi
 800b738:	6833      	ldrmi	r3, [r6, #0]
 800b73a:	3302      	addmi	r3, #2
 800b73c:	6033      	strmi	r3, [r6, #0]
 800b73e:	6825      	ldr	r5, [r4, #0]
 800b740:	f015 0506 	ands.w	r5, r5, #6
 800b744:	d106      	bne.n	800b754 <_printf_common+0x48>
 800b746:	f104 0a19 	add.w	sl, r4, #25
 800b74a:	68e3      	ldr	r3, [r4, #12]
 800b74c:	6832      	ldr	r2, [r6, #0]
 800b74e:	1a9b      	subs	r3, r3, r2
 800b750:	42ab      	cmp	r3, r5
 800b752:	dc26      	bgt.n	800b7a2 <_printf_common+0x96>
 800b754:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b758:	6822      	ldr	r2, [r4, #0]
 800b75a:	3b00      	subs	r3, #0
 800b75c:	bf18      	it	ne
 800b75e:	2301      	movne	r3, #1
 800b760:	0692      	lsls	r2, r2, #26
 800b762:	d42b      	bmi.n	800b7bc <_printf_common+0xb0>
 800b764:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b768:	4641      	mov	r1, r8
 800b76a:	4638      	mov	r0, r7
 800b76c:	47c8      	blx	r9
 800b76e:	3001      	adds	r0, #1
 800b770:	d01e      	beq.n	800b7b0 <_printf_common+0xa4>
 800b772:	6823      	ldr	r3, [r4, #0]
 800b774:	6922      	ldr	r2, [r4, #16]
 800b776:	f003 0306 	and.w	r3, r3, #6
 800b77a:	2b04      	cmp	r3, #4
 800b77c:	bf02      	ittt	eq
 800b77e:	68e5      	ldreq	r5, [r4, #12]
 800b780:	6833      	ldreq	r3, [r6, #0]
 800b782:	1aed      	subeq	r5, r5, r3
 800b784:	68a3      	ldr	r3, [r4, #8]
 800b786:	bf0c      	ite	eq
 800b788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b78c:	2500      	movne	r5, #0
 800b78e:	4293      	cmp	r3, r2
 800b790:	bfc4      	itt	gt
 800b792:	1a9b      	subgt	r3, r3, r2
 800b794:	18ed      	addgt	r5, r5, r3
 800b796:	2600      	movs	r6, #0
 800b798:	341a      	adds	r4, #26
 800b79a:	42b5      	cmp	r5, r6
 800b79c:	d11a      	bne.n	800b7d4 <_printf_common+0xc8>
 800b79e:	2000      	movs	r0, #0
 800b7a0:	e008      	b.n	800b7b4 <_printf_common+0xa8>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	4652      	mov	r2, sl
 800b7a6:	4641      	mov	r1, r8
 800b7a8:	4638      	mov	r0, r7
 800b7aa:	47c8      	blx	r9
 800b7ac:	3001      	adds	r0, #1
 800b7ae:	d103      	bne.n	800b7b8 <_printf_common+0xac>
 800b7b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7b8:	3501      	adds	r5, #1
 800b7ba:	e7c6      	b.n	800b74a <_printf_common+0x3e>
 800b7bc:	18e1      	adds	r1, r4, r3
 800b7be:	1c5a      	adds	r2, r3, #1
 800b7c0:	2030      	movs	r0, #48	@ 0x30
 800b7c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b7c6:	4422      	add	r2, r4
 800b7c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b7cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b7d0:	3302      	adds	r3, #2
 800b7d2:	e7c7      	b.n	800b764 <_printf_common+0x58>
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	4622      	mov	r2, r4
 800b7d8:	4641      	mov	r1, r8
 800b7da:	4638      	mov	r0, r7
 800b7dc:	47c8      	blx	r9
 800b7de:	3001      	adds	r0, #1
 800b7e0:	d0e6      	beq.n	800b7b0 <_printf_common+0xa4>
 800b7e2:	3601      	adds	r6, #1
 800b7e4:	e7d9      	b.n	800b79a <_printf_common+0x8e>
	...

0800b7e8 <_printf_i>:
 800b7e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7ec:	7e0f      	ldrb	r7, [r1, #24]
 800b7ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b7f0:	2f78      	cmp	r7, #120	@ 0x78
 800b7f2:	4691      	mov	r9, r2
 800b7f4:	4680      	mov	r8, r0
 800b7f6:	460c      	mov	r4, r1
 800b7f8:	469a      	mov	sl, r3
 800b7fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b7fe:	d807      	bhi.n	800b810 <_printf_i+0x28>
 800b800:	2f62      	cmp	r7, #98	@ 0x62
 800b802:	d80a      	bhi.n	800b81a <_printf_i+0x32>
 800b804:	2f00      	cmp	r7, #0
 800b806:	f000 80d1 	beq.w	800b9ac <_printf_i+0x1c4>
 800b80a:	2f58      	cmp	r7, #88	@ 0x58
 800b80c:	f000 80b8 	beq.w	800b980 <_printf_i+0x198>
 800b810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b814:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b818:	e03a      	b.n	800b890 <_printf_i+0xa8>
 800b81a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b81e:	2b15      	cmp	r3, #21
 800b820:	d8f6      	bhi.n	800b810 <_printf_i+0x28>
 800b822:	a101      	add	r1, pc, #4	@ (adr r1, 800b828 <_printf_i+0x40>)
 800b824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b828:	0800b881 	.word	0x0800b881
 800b82c:	0800b895 	.word	0x0800b895
 800b830:	0800b811 	.word	0x0800b811
 800b834:	0800b811 	.word	0x0800b811
 800b838:	0800b811 	.word	0x0800b811
 800b83c:	0800b811 	.word	0x0800b811
 800b840:	0800b895 	.word	0x0800b895
 800b844:	0800b811 	.word	0x0800b811
 800b848:	0800b811 	.word	0x0800b811
 800b84c:	0800b811 	.word	0x0800b811
 800b850:	0800b811 	.word	0x0800b811
 800b854:	0800b993 	.word	0x0800b993
 800b858:	0800b8bf 	.word	0x0800b8bf
 800b85c:	0800b94d 	.word	0x0800b94d
 800b860:	0800b811 	.word	0x0800b811
 800b864:	0800b811 	.word	0x0800b811
 800b868:	0800b9b5 	.word	0x0800b9b5
 800b86c:	0800b811 	.word	0x0800b811
 800b870:	0800b8bf 	.word	0x0800b8bf
 800b874:	0800b811 	.word	0x0800b811
 800b878:	0800b811 	.word	0x0800b811
 800b87c:	0800b955 	.word	0x0800b955
 800b880:	6833      	ldr	r3, [r6, #0]
 800b882:	1d1a      	adds	r2, r3, #4
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	6032      	str	r2, [r6, #0]
 800b888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b88c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b890:	2301      	movs	r3, #1
 800b892:	e09c      	b.n	800b9ce <_printf_i+0x1e6>
 800b894:	6833      	ldr	r3, [r6, #0]
 800b896:	6820      	ldr	r0, [r4, #0]
 800b898:	1d19      	adds	r1, r3, #4
 800b89a:	6031      	str	r1, [r6, #0]
 800b89c:	0606      	lsls	r6, r0, #24
 800b89e:	d501      	bpl.n	800b8a4 <_printf_i+0xbc>
 800b8a0:	681d      	ldr	r5, [r3, #0]
 800b8a2:	e003      	b.n	800b8ac <_printf_i+0xc4>
 800b8a4:	0645      	lsls	r5, r0, #25
 800b8a6:	d5fb      	bpl.n	800b8a0 <_printf_i+0xb8>
 800b8a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b8ac:	2d00      	cmp	r5, #0
 800b8ae:	da03      	bge.n	800b8b8 <_printf_i+0xd0>
 800b8b0:	232d      	movs	r3, #45	@ 0x2d
 800b8b2:	426d      	negs	r5, r5
 800b8b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8b8:	4858      	ldr	r0, [pc, #352]	@ (800ba1c <_printf_i+0x234>)
 800b8ba:	230a      	movs	r3, #10
 800b8bc:	e011      	b.n	800b8e2 <_printf_i+0xfa>
 800b8be:	6821      	ldr	r1, [r4, #0]
 800b8c0:	6833      	ldr	r3, [r6, #0]
 800b8c2:	0608      	lsls	r0, r1, #24
 800b8c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b8c8:	d402      	bmi.n	800b8d0 <_printf_i+0xe8>
 800b8ca:	0649      	lsls	r1, r1, #25
 800b8cc:	bf48      	it	mi
 800b8ce:	b2ad      	uxthmi	r5, r5
 800b8d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b8d2:	4852      	ldr	r0, [pc, #328]	@ (800ba1c <_printf_i+0x234>)
 800b8d4:	6033      	str	r3, [r6, #0]
 800b8d6:	bf14      	ite	ne
 800b8d8:	230a      	movne	r3, #10
 800b8da:	2308      	moveq	r3, #8
 800b8dc:	2100      	movs	r1, #0
 800b8de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b8e2:	6866      	ldr	r6, [r4, #4]
 800b8e4:	60a6      	str	r6, [r4, #8]
 800b8e6:	2e00      	cmp	r6, #0
 800b8e8:	db05      	blt.n	800b8f6 <_printf_i+0x10e>
 800b8ea:	6821      	ldr	r1, [r4, #0]
 800b8ec:	432e      	orrs	r6, r5
 800b8ee:	f021 0104 	bic.w	r1, r1, #4
 800b8f2:	6021      	str	r1, [r4, #0]
 800b8f4:	d04b      	beq.n	800b98e <_printf_i+0x1a6>
 800b8f6:	4616      	mov	r6, r2
 800b8f8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b8fc:	fb03 5711 	mls	r7, r3, r1, r5
 800b900:	5dc7      	ldrb	r7, [r0, r7]
 800b902:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b906:	462f      	mov	r7, r5
 800b908:	42bb      	cmp	r3, r7
 800b90a:	460d      	mov	r5, r1
 800b90c:	d9f4      	bls.n	800b8f8 <_printf_i+0x110>
 800b90e:	2b08      	cmp	r3, #8
 800b910:	d10b      	bne.n	800b92a <_printf_i+0x142>
 800b912:	6823      	ldr	r3, [r4, #0]
 800b914:	07df      	lsls	r7, r3, #31
 800b916:	d508      	bpl.n	800b92a <_printf_i+0x142>
 800b918:	6923      	ldr	r3, [r4, #16]
 800b91a:	6861      	ldr	r1, [r4, #4]
 800b91c:	4299      	cmp	r1, r3
 800b91e:	bfde      	ittt	le
 800b920:	2330      	movle	r3, #48	@ 0x30
 800b922:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b926:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b92a:	1b92      	subs	r2, r2, r6
 800b92c:	6122      	str	r2, [r4, #16]
 800b92e:	f8cd a000 	str.w	sl, [sp]
 800b932:	464b      	mov	r3, r9
 800b934:	aa03      	add	r2, sp, #12
 800b936:	4621      	mov	r1, r4
 800b938:	4640      	mov	r0, r8
 800b93a:	f7ff fee7 	bl	800b70c <_printf_common>
 800b93e:	3001      	adds	r0, #1
 800b940:	d14a      	bne.n	800b9d8 <_printf_i+0x1f0>
 800b942:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b946:	b004      	add	sp, #16
 800b948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b94c:	6823      	ldr	r3, [r4, #0]
 800b94e:	f043 0320 	orr.w	r3, r3, #32
 800b952:	6023      	str	r3, [r4, #0]
 800b954:	4832      	ldr	r0, [pc, #200]	@ (800ba20 <_printf_i+0x238>)
 800b956:	2778      	movs	r7, #120	@ 0x78
 800b958:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b95c:	6823      	ldr	r3, [r4, #0]
 800b95e:	6831      	ldr	r1, [r6, #0]
 800b960:	061f      	lsls	r7, r3, #24
 800b962:	f851 5b04 	ldr.w	r5, [r1], #4
 800b966:	d402      	bmi.n	800b96e <_printf_i+0x186>
 800b968:	065f      	lsls	r7, r3, #25
 800b96a:	bf48      	it	mi
 800b96c:	b2ad      	uxthmi	r5, r5
 800b96e:	6031      	str	r1, [r6, #0]
 800b970:	07d9      	lsls	r1, r3, #31
 800b972:	bf44      	itt	mi
 800b974:	f043 0320 	orrmi.w	r3, r3, #32
 800b978:	6023      	strmi	r3, [r4, #0]
 800b97a:	b11d      	cbz	r5, 800b984 <_printf_i+0x19c>
 800b97c:	2310      	movs	r3, #16
 800b97e:	e7ad      	b.n	800b8dc <_printf_i+0xf4>
 800b980:	4826      	ldr	r0, [pc, #152]	@ (800ba1c <_printf_i+0x234>)
 800b982:	e7e9      	b.n	800b958 <_printf_i+0x170>
 800b984:	6823      	ldr	r3, [r4, #0]
 800b986:	f023 0320 	bic.w	r3, r3, #32
 800b98a:	6023      	str	r3, [r4, #0]
 800b98c:	e7f6      	b.n	800b97c <_printf_i+0x194>
 800b98e:	4616      	mov	r6, r2
 800b990:	e7bd      	b.n	800b90e <_printf_i+0x126>
 800b992:	6833      	ldr	r3, [r6, #0]
 800b994:	6825      	ldr	r5, [r4, #0]
 800b996:	6961      	ldr	r1, [r4, #20]
 800b998:	1d18      	adds	r0, r3, #4
 800b99a:	6030      	str	r0, [r6, #0]
 800b99c:	062e      	lsls	r6, r5, #24
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	d501      	bpl.n	800b9a6 <_printf_i+0x1be>
 800b9a2:	6019      	str	r1, [r3, #0]
 800b9a4:	e002      	b.n	800b9ac <_printf_i+0x1c4>
 800b9a6:	0668      	lsls	r0, r5, #25
 800b9a8:	d5fb      	bpl.n	800b9a2 <_printf_i+0x1ba>
 800b9aa:	8019      	strh	r1, [r3, #0]
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	6123      	str	r3, [r4, #16]
 800b9b0:	4616      	mov	r6, r2
 800b9b2:	e7bc      	b.n	800b92e <_printf_i+0x146>
 800b9b4:	6833      	ldr	r3, [r6, #0]
 800b9b6:	1d1a      	adds	r2, r3, #4
 800b9b8:	6032      	str	r2, [r6, #0]
 800b9ba:	681e      	ldr	r6, [r3, #0]
 800b9bc:	6862      	ldr	r2, [r4, #4]
 800b9be:	2100      	movs	r1, #0
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	f7f4 fc1d 	bl	8000200 <memchr>
 800b9c6:	b108      	cbz	r0, 800b9cc <_printf_i+0x1e4>
 800b9c8:	1b80      	subs	r0, r0, r6
 800b9ca:	6060      	str	r0, [r4, #4]
 800b9cc:	6863      	ldr	r3, [r4, #4]
 800b9ce:	6123      	str	r3, [r4, #16]
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9d6:	e7aa      	b.n	800b92e <_printf_i+0x146>
 800b9d8:	6923      	ldr	r3, [r4, #16]
 800b9da:	4632      	mov	r2, r6
 800b9dc:	4649      	mov	r1, r9
 800b9de:	4640      	mov	r0, r8
 800b9e0:	47d0      	blx	sl
 800b9e2:	3001      	adds	r0, #1
 800b9e4:	d0ad      	beq.n	800b942 <_printf_i+0x15a>
 800b9e6:	6823      	ldr	r3, [r4, #0]
 800b9e8:	079b      	lsls	r3, r3, #30
 800b9ea:	d413      	bmi.n	800ba14 <_printf_i+0x22c>
 800b9ec:	68e0      	ldr	r0, [r4, #12]
 800b9ee:	9b03      	ldr	r3, [sp, #12]
 800b9f0:	4298      	cmp	r0, r3
 800b9f2:	bfb8      	it	lt
 800b9f4:	4618      	movlt	r0, r3
 800b9f6:	e7a6      	b.n	800b946 <_printf_i+0x15e>
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	4632      	mov	r2, r6
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	4640      	mov	r0, r8
 800ba00:	47d0      	blx	sl
 800ba02:	3001      	adds	r0, #1
 800ba04:	d09d      	beq.n	800b942 <_printf_i+0x15a>
 800ba06:	3501      	adds	r5, #1
 800ba08:	68e3      	ldr	r3, [r4, #12]
 800ba0a:	9903      	ldr	r1, [sp, #12]
 800ba0c:	1a5b      	subs	r3, r3, r1
 800ba0e:	42ab      	cmp	r3, r5
 800ba10:	dcf2      	bgt.n	800b9f8 <_printf_i+0x210>
 800ba12:	e7eb      	b.n	800b9ec <_printf_i+0x204>
 800ba14:	2500      	movs	r5, #0
 800ba16:	f104 0619 	add.w	r6, r4, #25
 800ba1a:	e7f5      	b.n	800ba08 <_printf_i+0x220>
 800ba1c:	0800c1dd 	.word	0x0800c1dd
 800ba20:	0800c1ee 	.word	0x0800c1ee

0800ba24 <__swhatbuf_r>:
 800ba24:	b570      	push	{r4, r5, r6, lr}
 800ba26:	460c      	mov	r4, r1
 800ba28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba2c:	2900      	cmp	r1, #0
 800ba2e:	b096      	sub	sp, #88	@ 0x58
 800ba30:	4615      	mov	r5, r2
 800ba32:	461e      	mov	r6, r3
 800ba34:	da0d      	bge.n	800ba52 <__swhatbuf_r+0x2e>
 800ba36:	89a3      	ldrh	r3, [r4, #12]
 800ba38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ba3c:	f04f 0100 	mov.w	r1, #0
 800ba40:	bf14      	ite	ne
 800ba42:	2340      	movne	r3, #64	@ 0x40
 800ba44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ba48:	2000      	movs	r0, #0
 800ba4a:	6031      	str	r1, [r6, #0]
 800ba4c:	602b      	str	r3, [r5, #0]
 800ba4e:	b016      	add	sp, #88	@ 0x58
 800ba50:	bd70      	pop	{r4, r5, r6, pc}
 800ba52:	466a      	mov	r2, sp
 800ba54:	f000 f848 	bl	800bae8 <_fstat_r>
 800ba58:	2800      	cmp	r0, #0
 800ba5a:	dbec      	blt.n	800ba36 <__swhatbuf_r+0x12>
 800ba5c:	9901      	ldr	r1, [sp, #4]
 800ba5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ba62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ba66:	4259      	negs	r1, r3
 800ba68:	4159      	adcs	r1, r3
 800ba6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba6e:	e7eb      	b.n	800ba48 <__swhatbuf_r+0x24>

0800ba70 <__smakebuf_r>:
 800ba70:	898b      	ldrh	r3, [r1, #12]
 800ba72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba74:	079d      	lsls	r5, r3, #30
 800ba76:	4606      	mov	r6, r0
 800ba78:	460c      	mov	r4, r1
 800ba7a:	d507      	bpl.n	800ba8c <__smakebuf_r+0x1c>
 800ba7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	6123      	str	r3, [r4, #16]
 800ba84:	2301      	movs	r3, #1
 800ba86:	6163      	str	r3, [r4, #20]
 800ba88:	b003      	add	sp, #12
 800ba8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba8c:	ab01      	add	r3, sp, #4
 800ba8e:	466a      	mov	r2, sp
 800ba90:	f7ff ffc8 	bl	800ba24 <__swhatbuf_r>
 800ba94:	9f00      	ldr	r7, [sp, #0]
 800ba96:	4605      	mov	r5, r0
 800ba98:	4639      	mov	r1, r7
 800ba9a:	4630      	mov	r0, r6
 800ba9c:	f7ff f8a0 	bl	800abe0 <_malloc_r>
 800baa0:	b948      	cbnz	r0, 800bab6 <__smakebuf_r+0x46>
 800baa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baa6:	059a      	lsls	r2, r3, #22
 800baa8:	d4ee      	bmi.n	800ba88 <__smakebuf_r+0x18>
 800baaa:	f023 0303 	bic.w	r3, r3, #3
 800baae:	f043 0302 	orr.w	r3, r3, #2
 800bab2:	81a3      	strh	r3, [r4, #12]
 800bab4:	e7e2      	b.n	800ba7c <__smakebuf_r+0xc>
 800bab6:	89a3      	ldrh	r3, [r4, #12]
 800bab8:	6020      	str	r0, [r4, #0]
 800baba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800babe:	81a3      	strh	r3, [r4, #12]
 800bac0:	9b01      	ldr	r3, [sp, #4]
 800bac2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bac6:	b15b      	cbz	r3, 800bae0 <__smakebuf_r+0x70>
 800bac8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bacc:	4630      	mov	r0, r6
 800bace:	f000 f81d 	bl	800bb0c <_isatty_r>
 800bad2:	b128      	cbz	r0, 800bae0 <__smakebuf_r+0x70>
 800bad4:	89a3      	ldrh	r3, [r4, #12]
 800bad6:	f023 0303 	bic.w	r3, r3, #3
 800bada:	f043 0301 	orr.w	r3, r3, #1
 800bade:	81a3      	strh	r3, [r4, #12]
 800bae0:	89a3      	ldrh	r3, [r4, #12]
 800bae2:	431d      	orrs	r5, r3
 800bae4:	81a5      	strh	r5, [r4, #12]
 800bae6:	e7cf      	b.n	800ba88 <__smakebuf_r+0x18>

0800bae8 <_fstat_r>:
 800bae8:	b538      	push	{r3, r4, r5, lr}
 800baea:	4d07      	ldr	r5, [pc, #28]	@ (800bb08 <_fstat_r+0x20>)
 800baec:	2300      	movs	r3, #0
 800baee:	4604      	mov	r4, r0
 800baf0:	4608      	mov	r0, r1
 800baf2:	4611      	mov	r1, r2
 800baf4:	602b      	str	r3, [r5, #0]
 800baf6:	f7fc f9c0 	bl	8007e7a <_fstat>
 800bafa:	1c43      	adds	r3, r0, #1
 800bafc:	d102      	bne.n	800bb04 <_fstat_r+0x1c>
 800bafe:	682b      	ldr	r3, [r5, #0]
 800bb00:	b103      	cbz	r3, 800bb04 <_fstat_r+0x1c>
 800bb02:	6023      	str	r3, [r4, #0]
 800bb04:	bd38      	pop	{r3, r4, r5, pc}
 800bb06:	bf00      	nop
 800bb08:	200005a0 	.word	0x200005a0

0800bb0c <_isatty_r>:
 800bb0c:	b538      	push	{r3, r4, r5, lr}
 800bb0e:	4d06      	ldr	r5, [pc, #24]	@ (800bb28 <_isatty_r+0x1c>)
 800bb10:	2300      	movs	r3, #0
 800bb12:	4604      	mov	r4, r0
 800bb14:	4608      	mov	r0, r1
 800bb16:	602b      	str	r3, [r5, #0]
 800bb18:	f7fc f9bf 	bl	8007e9a <_isatty>
 800bb1c:	1c43      	adds	r3, r0, #1
 800bb1e:	d102      	bne.n	800bb26 <_isatty_r+0x1a>
 800bb20:	682b      	ldr	r3, [r5, #0]
 800bb22:	b103      	cbz	r3, 800bb26 <_isatty_r+0x1a>
 800bb24:	6023      	str	r3, [r4, #0]
 800bb26:	bd38      	pop	{r3, r4, r5, pc}
 800bb28:	200005a0 	.word	0x200005a0

0800bb2c <_init>:
 800bb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb2e:	bf00      	nop
 800bb30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb32:	bc08      	pop	{r3}
 800bb34:	469e      	mov	lr, r3
 800bb36:	4770      	bx	lr

0800bb38 <_fini>:
 800bb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb3a:	bf00      	nop
 800bb3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb3e:	bc08      	pop	{r3}
 800bb40:	469e      	mov	lr, r3
 800bb42:	4770      	bx	lr
