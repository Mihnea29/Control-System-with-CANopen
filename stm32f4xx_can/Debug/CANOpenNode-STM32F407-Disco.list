
CANOpenNode-STM32F407-Disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000928  0800ba30  0800ba30  0000ca30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c358  0800c358  0000e438  2**0
                  CONTENTS
  4 .ARM          00000008  0800c358  0800c358  0000d358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c360  0800c360  0000e438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c360  0800c360  0000d360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c364  0800c364  0000d364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000438  20000000  0800c368  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e438  2**0
                  CONTENTS
 10 .bss          000002d8  20000438  20000438  0000e438  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000710  20000710  0000e438  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e438  2**0
                  CONTENTS, READONLY
 13 .debug_info   000220b7  00000000  00000000  0000e468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049bc  00000000  00000000  0003051f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001610  00000000  00000000  00034ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011b3  00000000  00000000  000364f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000267b8  00000000  00000000  000376a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f4e1  00000000  00000000  0005de5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9e66  00000000  00000000  0007d33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001571a2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000064dc  00000000  00000000  001571e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0015d6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000438 	.word	0x20000438
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ba18 	.word	0x0800ba18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000043c 	.word	0x2000043c
 80001cc:	0800ba18 	.word	0x0800ba18

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <CO_getUint8>:
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t
CO_getUint8(const void* buf) {
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
    uint8_t value;
    (void)memmove((void*)&value, buf, sizeof(value));
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	73fb      	strb	r3, [r7, #15]
    return value;
 800057e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000580:	4618      	mov	r0, r3
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <CO_setUint8>:
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t
CO_setUint8(void* buf, uint8_t value) {
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	460b      	mov	r3, r1
 8000596:	70fb      	strb	r3, [r7, #3]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8000598:	78fa      	ldrb	r2, [r7, #3]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	701a      	strb	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <CO_setUint32>:
    return (uint8_t)(sizeof(value));
}

/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t
CO_setUint32(void* buf, uint32_t value) {
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 80005bc:	2304      	movs	r3, #4
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <OD_getIndex>:
 * @param entry Object Dictionary entry.
 *
 * @return OD index
 */
static inline uint16_t
OD_getIndex(const OD_entry_t* entry) {
 80005ca:	b480      	push	{r7}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d002      	beq.n	80005de <OD_getIndex+0x14>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	e000      	b.n	80005e0 <OD_getIndex+0x16>
 80005de:	2300      	movs	r3, #0
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <OD_extension_init>:
 * NULL, extension will be removed.
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d101      	bne.n	8000600 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 80005fc:	2305      	movs	r3, #5
 80005fe:	e003      	b.n	8000608 <OD_extension_init+0x1c>
    }
    entry->extension = extension;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	683a      	ldr	r2, [r7, #0]
 8000604:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000606:	2300      	movs	r3, #0
}
 8000608:	4618      	mov	r0, r3
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <OD_get_u32>:
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af02      	add	r7, sp, #8
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	607a      	str	r2, [r7, #4]
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	460b      	mov	r3, r1
 8000622:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000624:	7af9      	ldrb	r1, [r7, #11]
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2304      	movs	r3, #4
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	68f8      	ldr	r0, [r7, #12]
 8000630:	f001 fba0 	bl	8001d74 <OD_get_value>
 8000634:	4603      	mov	r3, r0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <OD_read_1014_default>:
 * Custom functions for read/write OD object "COB-ID EMCY"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1014_default(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 800063e:	b580      	push	{r7, lr}
 8000640:	b086      	sub	sp, #24
 8000642:	af00      	add	r7, sp, #0
 8000644:	60f8      	str	r0, [r7, #12]
 8000646:	60b9      	str	r1, [r7, #8]
 8000648:	607a      	str	r2, [r7, #4]
 800064a:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count < sizeof(uint32_t))
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d00c      	beq.n	800066c <OD_read_1014_default+0x2e>
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	7d1b      	ldrb	r3, [r3, #20]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d108      	bne.n	800066c <OD_read_1014_default+0x2e>
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d005      	beq.n	800066c <OD_read_1014_default+0x2e>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b03      	cmp	r3, #3
 8000664:	d902      	bls.n	800066c <OD_read_1014_default+0x2e>
        || (countRead == NULL)) {
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d101      	bne.n	8000670 <OD_read_1014_default+0x32>
        return ODR_DEV_INCOMPAT;
 800066c:	2309      	movs	r3, #9
 800066e:	e01a      	b.n	80006a6 <OD_read_1014_default+0x68>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0U : 0x80000000U;
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <OD_read_1014_default+0x44>
 800067e:	2300      	movs	r3, #0
 8000680:	e001      	b.n	8000686 <OD_read_1014_default+0x48>
 8000682:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000686:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + (uint32_t)em->nodeId;
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800068e:	3380      	adds	r3, #128	@ 0x80
 8000690:	693a      	ldr	r2, [r7, #16]
 8000692:	4313      	orrs	r3, r2
 8000694:	613b      	str	r3, [r7, #16]
    (void)CO_setUint32(buf, COB_IDEmergency32);
 8000696:	6939      	ldr	r1, [r7, #16]
 8000698:	68b8      	ldr	r0, [r7, #8]
 800069a:	f7ff ff87 	bl	80005ac <CO_setUint32>

    *countRead = sizeof(uint32_t);
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	2204      	movs	r2, #4
 80006a2:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <OD_read_1003>:
 * Custom functions for read/write OD object _OD_statusBits_, optional
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1003(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b086      	sub	sp, #24
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	60f8      	str	r0, [r7, #12]
 80006b6:	60b9      	str	r1, [r7, #8]
 80006b8:	607a      	str	r2, [r7, #4]
 80006ba:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL) || ((count < 4U) && (stream->subIndex > 0U))
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d00f      	beq.n	80006e2 <OD_read_1003+0x34>
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d00c      	beq.n	80006e2 <OD_read_1003+0x34>
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d009      	beq.n	80006e2 <OD_read_1003+0x34>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2b03      	cmp	r3, #3
 80006d2:	d803      	bhi.n	80006dc <OD_read_1003+0x2e>
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	7d1b      	ldrb	r3, [r3, #20]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d102      	bne.n	80006e2 <OD_read_1003+0x34>
        || (count < 1U)) {
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d101      	bne.n	80006e6 <OD_read_1003+0x38>
        return ODR_DEV_INCOMPAT;
 80006e2:	2309      	movs	r3, #9
 80006e4:	e04c      	b.n	8000780 <OD_read_1003+0xd2>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2U) {
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	7f1b      	ldrb	r3, [r3, #28]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d801      	bhi.n	80006f8 <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 80006f4:	2309      	movs	r3, #9
 80006f6:	e043      	b.n	8000780 <OD_read_1003+0xd2>
    }
    if (stream->subIndex == 0U) {
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	7d1b      	ldrb	r3, [r3, #20]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d10b      	bne.n	8000718 <OD_read_1003+0x6a>
        (void)CO_setUint8(buf, em->fifoCount);
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000706:	4619      	mov	r1, r3
 8000708:	68b8      	ldr	r0, [r7, #8]
 800070a:	f7ff ff3f 	bl	800058c <CO_setUint8>

        *countRead = sizeof(uint8_t);
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	2201      	movs	r2, #1
 8000712:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8000714:	2300      	movs	r3, #0
 8000716:	e033      	b.n	8000780 <OD_read_1003+0xd2>
    } else if (stream->subIndex <= em->fifoCount) {
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	7d1a      	ldrb	r2, [r3, #20]
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000722:	429a      	cmp	r2, r3
 8000724:	d82b      	bhi.n	800077e <OD_read_1003+0xd0>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - (int16_t)stream->subIndex;
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	7f5b      	ldrb	r3, [r3, #29]
 800072a:	461a      	mov	r2, r3
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	7d1b      	ldrb	r3, [r3, #20]
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	b29b      	uxth	r3, r3
 8000734:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 8000736:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800073a:	2b00      	cmp	r3, #0
 800073c:	da07      	bge.n	800074e <OD_read_1003+0xa0>
            index += (int16_t)em->fifoSize;
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	7f1b      	ldrb	r3, [r3, #28]
 8000742:	461a      	mov	r2, r3
 8000744:	8afb      	ldrh	r3, [r7, #22]
 8000746:	4413      	add	r3, r2
 8000748:	b29b      	uxth	r3, r3
 800074a:	82fb      	strh	r3, [r7, #22]
 800074c:	e007      	b.n	800075e <OD_read_1003+0xb0>
        } else if (index >= (int16_t)(em->fifoSize)) {
 800074e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000752:	693a      	ldr	r2, [r7, #16]
 8000754:	7f12      	ldrb	r2, [r2, #28]
 8000756:	4293      	cmp	r3, r2
 8000758:	db01      	blt.n	800075e <OD_read_1003+0xb0>
            return ODR_DEV_INCOMPAT;
 800075a:	2309      	movs	r3, #9
 800075c:	e010      	b.n	8000780 <OD_read_1003+0xd2>
        } else { /* MISRA C 2004 14.10 */
        }
        (void)CO_setUint32(buf, em->fifo[index].msg);
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	699a      	ldr	r2, [r3, #24]
 8000762:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	4413      	add	r3, r2
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	68b8      	ldr	r0, [r7, #8]
 8000770:	f7ff ff1c 	bl	80005ac <CO_setUint32>

        *countRead = sizeof(uint32_t);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	2204      	movs	r2, #4
 8000778:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 800077a:	2300      	movs	r3, #0
 800077c:	e000      	b.n	8000780 <OD_read_1003+0xd2>
    } else {
        return ODR_NO_DATA;
 800077e:	2319      	movs	r3, #25
    }
}
 8000780:	4618      	mov	r0, r3
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <OD_write_1003>:

static ODR_t
OD_write_1003(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
 8000794:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != 1U) || (countWritten == NULL)) {
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d00c      	beq.n	80007b6 <OD_write_1003+0x2e>
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	7d1b      	ldrb	r3, [r3, #20]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d108      	bne.n	80007b6 <OD_write_1003+0x2e>
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d005      	beq.n	80007b6 <OD_write_1003+0x2e>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d102      	bne.n	80007b6 <OD_write_1003+0x2e>
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d101      	bne.n	80007ba <OD_write_1003+0x32>
        return ODR_DEV_INCOMPAT;
 80007b6:	2309      	movs	r3, #9
 80007b8:	e012      	b.n	80007e0 <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0U) {
 80007ba:	68b8      	ldr	r0, [r7, #8]
 80007bc:	f7ff fed8 	bl	8000570 <CO_getUint8>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 80007c6:	230f      	movs	r3, #15
 80007c8:	e00a      	b.n	80007e0 <OD_write_1003+0x58>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	2201      	movs	r2, #1
 80007dc:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80007de:	2300      	movs	r3, #0
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3718      	adds	r7, #24
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <CO_EM_init>:
           OD_entry_t* OD_statusBits,
#endif
#if (((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0) || defined CO_DOXYGEN
           CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#endif
           const uint8_t nodeId, uint32_t* errInfo) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af02      	add	r7, sp, #8
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
 80007f4:	603b      	str	r3, [r7, #0]
    (void)nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 80007f6:	2300      	movs	r3, #0
 80007f8:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((em == NULL) || (OD_1001_errReg == NULL)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d01a      	beq.n	8000836 <CO_EM_init+0x4e>
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d017      	beq.n	8000836 <CO_EM_init+0x4e>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
        || ((fifo == NULL) && (fifoSize >= 2U))
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d103      	bne.n	8000814 <CO_EM_init+0x2c>
 800080c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d810      	bhi.n	8000836 <CO_EM_init+0x4e>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
        || (OD_1014_cobIdEm == NULL) || (CANdevTx == NULL) || (nodeId < 1U) || (nodeId > 127U)
 8000814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000816:	2b00      	cmp	r3, #0
 8000818:	d00d      	beq.n	8000836 <CO_EM_init+0x4e>
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d00a      	beq.n	8000836 <CO_EM_init+0x4e>
 8000820:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000824:	2b00      	cmp	r3, #0
 8000826:	d006      	beq.n	8000836 <CO_EM_init+0x4e>
 8000828:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 800082c:	2b00      	cmp	r3, #0
 800082e:	db02      	blt.n	8000836 <CO_EM_init+0x4e>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
        || (OD_1003_preDefErr == NULL)
 8000830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000832:	2b00      	cmp	r3, #0
 8000834:	d102      	bne.n	800083c <CO_EM_init+0x54>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
        || (CANdevRx == NULL)
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000836:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800083a:	e0a7      	b.n	800098c <CO_EM_init+0x1a4>
    }

    /* clear the object */
    (void)memset(em, 0, sizeof(CO_EM_t));
 800083c:	2250      	movs	r2, #80	@ 0x50
 800083e:	2100      	movs	r1, #0
 8000840:	68f8      	ldr	r0, [r7, #12]
 8000842:	f00a fcb1 	bl	800b1a8 <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	68ba      	ldr	r2, [r7, #8]
 800084a:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 800084c:	2300      	movs	r3, #0
 800084e:	2201      	movs	r2, #1
 8000850:	2100      	movs	r1, #0
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f001 fb08 	bl	8001e68 <OD_getPtr>
 8000858:	4602      	mov	r2, r0
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	68db      	ldr	r3, [r3, #12]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d10c      	bne.n	8000880 <CO_EM_init+0x98>
        if (errInfo != NULL) {
 8000866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000868:	2b00      	cmp	r3, #0
 800086a:	d006      	beq.n	800087a <CO_EM_init+0x92>
            *errInfo = OD_getIndex(OD_1001_errReg);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff feac 	bl	80005ca <OD_getIndex>
 8000872:	4603      	mov	r3, r0
 8000874:	461a      	mov	r2, r3
 8000876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000878:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800087a:	f06f 030b 	mvn.w	r3, #11
 800087e:	e085      	b.n	800098c <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	2200      	movs	r2, #0
 8000886:	701a      	strb	r2, [r3, #0]

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    em->fifo = fifo;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	683a      	ldr	r2, [r7, #0]
 800088c:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000894:	771a      	strb	r2, [r3, #28]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    ODR_t odRet;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 8000896:	f107 0210 	add.w	r2, r7, #16
 800089a:	2301      	movs	r3, #1
 800089c:	2100      	movs	r1, #0
 800089e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80008a0:	f7ff feb8 	bl	8000614 <OD_get_u32>
 80008a4:	4603      	mov	r3, r0
 80008a6:	75bb      	strb	r3, [r7, #22]
    if ((odRet != ODR_OK) || ((COB_IDEmergency32 & 0x7FFFF800U) != 0U)) {
 80008a8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d104      	bne.n	80008ba <CO_EM_init+0xd2>
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	4b38      	ldr	r3, [pc, #224]	@ (8000994 <CO_EM_init+0x1ac>)
 80008b4:	4013      	ands	r3, r2
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d010      	beq.n	80008dc <CO_EM_init+0xf4>
        if (errInfo != NULL) {
 80008ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d006      	beq.n	80008ce <CO_EM_init+0xe6>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 80008c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80008c2:	f7ff fe82 	bl	80005ca <OD_getIndex>
 80008c6:	4603      	mov	r3, r0
 80008c8:	461a      	mov	r2, r3
 80008ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008cc:	601a      	str	r2, [r3, #0]
        }
        /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK) {
 80008ce:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d002      	beq.n	80008dc <CO_EM_init+0xf4>
            return CO_ERROR_OD_PARAMETERS;
 80008d6:	f06f 030b 	mvn.w	r3, #11
 80008da:	e057      	b.n	800098c <CO_EM_init+0x1a4>
     * memory. In that case it is necessary to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) {
        producerCanId += nodeId;
    }
#else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + (uint16_t)nodeId;
 80008dc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	3380      	adds	r3, #128	@ 0x80
 80008e4:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000U) == 0U;
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	43db      	mvns	r3, r3
 80008ea:	0fdb      	lsrs	r3, r3, #31
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	461a      	mov	r2, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	625a      	str	r2, [r3, #36]	@ 0x24

    em->OD_1014_extension.object = em;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	631a      	str	r2, [r3, #48]	@ 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	4a26      	ldr	r2, [pc, #152]	@ (8000998 <CO_EM_init+0x1b0>)
 80008fe:	635a      	str	r2, [r3, #52]	@ 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4a26      	ldr	r2, [pc, #152]	@ (800099c <CO_EM_init+0x1b4>)
 8000904:	639a      	str	r2, [r3, #56]	@ 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	3330      	adds	r3, #48	@ 0x30
 800090a:	4619      	mov	r1, r3
 800090c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800090e:	f7ff fe6d 	bl	80005ec <OD_extension_init>
 8000912:	4603      	mov	r3, r0
 8000914:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8000916:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d00c      	beq.n	8000938 <CO_EM_init+0x150>
        if (errInfo != NULL) {
 800091e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000920:	2b00      	cmp	r3, #0
 8000922:	d006      	beq.n	8000932 <CO_EM_init+0x14a>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 8000924:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000926:	f7ff fe50 	bl	80005ca <OD_getIndex>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000930:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8000932:	f06f 030b 	mvn.w	r3, #11
 8000936:	e029      	b.n	800098c <CO_EM_init+0x1a4>
    }
#endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800093e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    em->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, producerCanId, false, 8U, false);
 8000942:	8aba      	ldrh	r2, [r7, #20]
 8000944:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8000946:	2300      	movs	r3, #0
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	2308      	movs	r3, #8
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	2300      	movs	r3, #0
 8000950:	68b8      	ldr	r0, [r7, #8]
 8000952:	f006 fd79 	bl	8007448 <CO_CANtxBufferInit>
 8000956:	4602      	mov	r2, r0
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (em->CANtxBuff == NULL) {
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000960:	2b00      	cmp	r3, #0
 8000962:	d102      	bne.n	800096a <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000964:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000968:	e010      	b.n	800098c <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT */
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	641a      	str	r2, [r3, #64]	@ 0x40
    em->OD_1003_extension.read = OD_read_1003;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4a0b      	ldr	r2, [pc, #44]	@ (80009a0 <CO_EM_init+0x1b8>)
 8000974:	645a      	str	r2, [r3, #68]	@ 0x44
    em->OD_1003_extension.write = OD_write_1003;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	4a0a      	ldr	r2, [pc, #40]	@ (80009a4 <CO_EM_init+0x1bc>)
 800097a:	649a      	str	r2, [r3, #72]	@ 0x48
    (void)OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	3340      	adds	r3, #64	@ 0x40
 8000980:	4619      	mov	r1, r3
 8000982:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000984:	f7ff fe32 	bl	80005ec <OD_extension_init>
    em->pFunctSignalRx = NULL;
    /* configure SDO server CAN reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CO_CAN_ID_EMERGENCY, 0x780, false, (void*)em, CO_EM_receive);
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 8000988:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	7ffff800 	.word	0x7ffff800
 8000998:	0800063f 	.word	0x0800063f
 800099c:	0800195f 	.word	0x0800195f
 80009a0:	080006af 	.word	0x080006af
 80009a4:	08000789 	.word	0x08000789

080009a8 <CO_EM_process>:
    }
}
#endif

void
CO_EM_process(CO_EM_t* em, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af02      	add	r7, sp, #8
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
 80009b4:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PROD_INHIBIT) == 0
    (void)timeDifference_us; /* may be unused */
#endif

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	8a5b      	ldrh	r3, [r3, #18]
 80009bc:	82bb      	strh	r3, [r7, #20]
    if (CANerrSt != em->CANerrorStatusOld) {
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	8a1b      	ldrh	r3, [r3, #16]
 80009c2:	8aba      	ldrh	r2, [r7, #20]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	f000 80a3 	beq.w	8000b10 <CO_EM_process+0x168>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	8a1a      	ldrh	r2, [r3, #16]
 80009ce:	8abb      	ldrh	r3, [r7, #20]
 80009d0:	4053      	eors	r3, r2
 80009d2:	827b      	strh	r3, [r7, #18]
        em->CANerrorStatusOld = CANerrSt;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	8aba      	ldrh	r2, [r7, #20]
 80009d8:	821a      	strh	r2, [r3, #16]

        if ((CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U) {
 80009da:	8a7a      	ldrh	r2, [r7, #18]
 80009dc:	f240 1301 	movw	r3, #257	@ 0x101
 80009e0:	4013      	ands	r3, r2
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d010      	beq.n	8000a08 <CO_EM_process+0x60>
            CO_error(em, (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U, CO_EM_CAN_BUS_WARNING,
 80009e6:	8aba      	ldrh	r2, [r7, #20]
 80009e8:	f240 1301 	movw	r3, #257	@ 0x101
 80009ec:	4013      	ands	r3, r2
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	bf14      	ite	ne
 80009f2:	2301      	movne	r3, #1
 80009f4:	2300      	moveq	r3, #0
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	4619      	mov	r1, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	2300      	movs	r3, #0
 8000a00:	2201      	movs	r2, #1
 8000a02:	68f8      	ldr	r0, [r7, #12]
 8000a04:	f000 f91b 	bl	8000c3e <CO_error>
                     CO_EMC_NO_ERROR, 0);
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PASSIVE) != 0U) {
 8000a08:	8a7b      	ldrh	r3, [r7, #18]
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d010      	beq.n	8000a34 <CO_EM_process+0x8c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0U, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 8000a12:	8abb      	ldrh	r3, [r7, #20]
 8000a14:	f003 0302 	and.w	r3, r3, #2
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	bf14      	ite	ne
 8000a1c:	2301      	movne	r3, #1
 8000a1e:	2300      	moveq	r3, #0
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	4619      	mov	r1, r3
 8000a24:	2300      	movs	r3, #0
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	f248 1320 	movw	r3, #33056	@ 0x8120
 8000a2c:	2207      	movs	r2, #7
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f000 f905 	bl	8000c3e <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_BUS_OFF) != 0U) {
 8000a34:	8a7b      	ldrh	r3, [r7, #18]
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d010      	beq.n	8000a60 <CO_EM_process+0xb8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0U, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);
 8000a3e:	8abb      	ldrh	r3, [r7, #20]
 8000a40:	f003 0304 	and.w	r3, r3, #4
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	bf14      	ite	ne
 8000a48:	2301      	movne	r3, #1
 8000a4a:	2300      	moveq	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	4619      	mov	r1, r3
 8000a50:	2300      	movs	r3, #0
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	f248 1340 	movw	r3, #33088	@ 0x8140
 8000a58:	2212      	movs	r2, #18
 8000a5a:	68f8      	ldr	r0, [r7, #12]
 8000a5c:	f000 f8ef 	bl	8000c3e <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_OVERFLOW) != 0U) {
 8000a60:	8a7b      	ldrh	r3, [r7, #18]
 8000a62:	f003 0308 	and.w	r3, r3, #8
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d010      	beq.n	8000a8c <CO_EM_process+0xe4>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0U, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 8000a6a:	8abb      	ldrh	r3, [r7, #20]
 8000a6c:	f003 0308 	and.w	r3, r3, #8
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	bf14      	ite	ne
 8000a74:	2301      	movne	r3, #1
 8000a76:	2300      	moveq	r3, #0
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	f248 1310 	movw	r3, #33040	@ 0x8110
 8000a84:	2214      	movs	r2, #20
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	f000 f8d9 	bl	8000c3e <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PDO_LATE) != 0U) {
 8000a8c:	8a7b      	ldrh	r3, [r7, #18]
 8000a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d010      	beq.n	8000ab8 <CO_EM_process+0x110>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0U, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);
 8000a96:	8abb      	ldrh	r3, [r7, #20]
 8000a98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	bf14      	ite	ne
 8000aa0:	2301      	movne	r3, #1
 8000aa2:	2300      	moveq	r3, #0
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000ab0:	2215      	movs	r2, #21
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	f000 f8c3 	bl	8000c3e <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_PASSIVE) != 0U) {
 8000ab8:	8a7b      	ldrh	r3, [r7, #18]
 8000aba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d010      	beq.n	8000ae4 <CO_EM_process+0x13c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0U, CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 8000ac2:	8abb      	ldrh	r3, [r7, #20]
 8000ac4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	bf14      	ite	ne
 8000acc:	2301      	movne	r3, #1
 8000ace:	2300      	moveq	r3, #0
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	f248 1320 	movw	r3, #33056	@ 0x8120
 8000adc:	2206      	movs	r2, #6
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f000 f8ad 	bl	8000c3e <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_OVERFLOW) != 0U) {
 8000ae4:	8a7b      	ldrh	r3, [r7, #18]
 8000ae6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d010      	beq.n	8000b10 <CO_EM_process+0x168>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0U, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 8000aee:	8abb      	ldrh	r3, [r7, #20]
 8000af0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	bf14      	ite	ne
 8000af8:	2301      	movne	r3, #1
 8000afa:	2300      	moveq	r3, #0
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	4619      	mov	r1, r3
 8000b00:	2300      	movs	r3, #0
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	f248 1310 	movw	r3, #33040	@ 0x8110
 8000b08:	2213      	movs	r2, #19
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	f000 f897 	bl	8000c3e <CO_error>
        }
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 8000b10:	2300      	movs	r3, #0
 8000b12:	75fb      	strb	r3, [r7, #23]
    if (CO_CONFIG_ERR_CONDITION_GENERIC) {
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	795b      	ldrb	r3, [r3, #5]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d003      	beq.n	8000b24 <CO_EM_process+0x17c>
        errorRegister |= (uint8_t)CO_ERR_REG_GENERIC_ERR;
 8000b1c:	7dfb      	ldrb	r3, [r7, #23]
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE) {
        errorRegister |= (uint8_t)CO_ERR_REG_TEMPERATURE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION) {
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	789b      	ldrb	r3, [r3, #2]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d103      	bne.n	8000b34 <CO_EM_process+0x18c>
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	78db      	ldrb	r3, [r3, #3]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <CO_EM_process+0x194>
        errorRegister |= (uint8_t)CO_ERR_REG_COMMUNICATION;
 8000b34:	7dfb      	ldrb	r3, [r7, #23]
 8000b36:	f043 0310 	orr.w	r3, r3, #16
 8000b3a:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE) {
        errorRegister |= (uint8_t)CO_ERR_REG_DEV_PROFILE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER) {
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	7a1b      	ldrb	r3, [r3, #8]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d103      	bne.n	8000b4c <CO_EM_process+0x1a4>
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	7a5b      	ldrb	r3, [r3, #9]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d003      	beq.n	8000b54 <CO_EM_process+0x1ac>
        errorRegister |= (uint8_t)CO_ERR_REG_MANUFACTURER;
 8000b4c:	7dfb      	ldrb	r3, [r7, #23]
 8000b4e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b52:	75fb      	strb	r3, [r7, #23]
    }
    *em->errorRegister = errorRegister;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	7dfa      	ldrb	r2, [r7, #23]
 8000b5a:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d067      	beq.n	8000c32 <CO_EM_process+0x28a>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    if (em->fifoSize >= 2U) {
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	7f1b      	ldrb	r3, [r3, #28]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d965      	bls.n	8000c36 <CO_EM_process+0x28e>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	7f9b      	ldrb	r3, [r3, #30]
 8000b6e:	747b      	strb	r3, [r7, #17]

        if (!em->CANtxBuff->bufferFull && (fifoPpPtr != em->fifoWrPtr)
            && (em->inhibitEmTimer >= em->inhibitEmTime_us)) {
            em->inhibitEmTimer = 0;
#else
        if ((!em->CANtxBuff->bufferFull) && (fifoPpPtr != em->fifoWrPtr)) {
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b74:	691b      	ldr	r3, [r3, #16]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d15d      	bne.n	8000c36 <CO_EM_process+0x28e>
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	7f5b      	ldrb	r3, [r3, #29]
 8000b7e:	7c7a      	ldrb	r2, [r7, #17]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d058      	beq.n	8000c36 <CO_EM_process+0x28e>
#endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t)errorRegister << 16;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	699a      	ldr	r2, [r3, #24]
 8000b88:	7c7b      	ldrb	r3, [r7, #17]
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	4413      	add	r3, r2
 8000b8e:	6819      	ldr	r1, [r3, #0]
 8000b90:	7dfb      	ldrb	r3, [r7, #23]
 8000b92:	041a      	lsls	r2, r3, #16
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	6998      	ldr	r0, [r3, #24]
 8000b98:	7c7b      	ldrb	r3, [r7, #17]
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	4403      	add	r3, r0
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            (void)memcpy((void*)em->CANtxBuff->data, (void*)&em->fifo[fifoPpPtr].msg, sizeof(em->CANtxBuff->data));
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ba6:	1d58      	adds	r0, r3, #5
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	699a      	ldr	r2, [r3, #24]
 8000bac:	7c7b      	ldrb	r3, [r7, #17]
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	4413      	add	r3, r2
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f00a fb82 	bl	800b2be <memcpy>
            (void)CO_CANsend(em->CANdevTx, em->CANtxBuff);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	695a      	ldr	r2, [r3, #20]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	f006 fcb9 	bl	800753c <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
#endif

            /* increment pointer */
            fifoPpPtr++;
 8000bca:	7c7b      	ldrb	r3, [r7, #17]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	747b      	strb	r3, [r7, #17]
            em->fifoPpPtr = (fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0U;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	7f1b      	ldrb	r3, [r3, #28]
 8000bd4:	7c7a      	ldrb	r2, [r7, #17]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d201      	bcs.n	8000bde <CO_EM_process+0x236>
 8000bda:	7c7a      	ldrb	r2, [r7, #17]
 8000bdc:	e000      	b.n	8000be0 <CO_EM_process+0x238>
 8000bde:	2200      	movs	r2, #0
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all messages from fifo buffer are processed */
            if (em->fifoOverflow == 1U) {
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	7fdb      	ldrb	r3, [r3, #31]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d10c      	bne.n	8000c06 <CO_EM_process+0x25e>
                em->fifoOverflow = 2;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2202      	movs	r2, #2
 8000bf0:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0);
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bfa:	2220      	movs	r2, #32
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	68f8      	ldr	r0, [r7, #12]
 8000c00:	f000 f81d 	bl	8000c3e <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 8000c04:	e017      	b.n	8000c36 <CO_EM_process+0x28e>
            } else if ((em->fifoOverflow == 2U) && (em->fifoPpPtr == em->fifoWrPtr)) {
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	7fdb      	ldrb	r3, [r3, #31]
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d113      	bne.n	8000c36 <CO_EM_process+0x28e>
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	7f9a      	ldrb	r2, [r3, #30]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	7f5b      	ldrb	r3, [r3, #29]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d10d      	bne.n	8000c36 <CO_EM_process+0x28e>
                em->fifoOverflow = 0;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 8000c20:	2300      	movs	r3, #0
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2300      	movs	r3, #0
 8000c26:	2220      	movs	r2, #32
 8000c28:	2100      	movs	r1, #0
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f000 f807 	bl	8000c3e <CO_error>
    return;
 8000c30:	e001      	b.n	8000c36 <CO_EM_process+0x28e>
        return;
 8000c32:	bf00      	nop
 8000c34:	e000      	b.n	8000c38 <CO_EM_process+0x290>
    return;
 8000c36:	bf00      	nop
}
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <CO_error>:

void
CO_error(CO_EM_t* em, bool_t setError, const uint8_t errorBit, uint16_t errorCode, uint32_t infoCode) {
 8000c3e:	b480      	push	{r7}
 8000c40:	b08d      	sub	sp, #52	@ 0x34
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	4611      	mov	r1, r2
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	71fb      	strb	r3, [r7, #7]
 8000c50:	4613      	mov	r3, r2
 8000c52:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) {
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f000 80a6 	beq.w	8000da8 <CO_error+0x16a>
        return;
    }

    uint8_t index = errorBit >> 3;
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	08db      	lsrs	r3, r3, #3
 8000c60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t bitmask = 1U << (errorBit & 0x7U);
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)) {
 8000c74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c78:	2b09      	cmp	r3, #9
 8000c7a:	d90a      	bls.n	8000c92 <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 8000c7c:	2305      	movs	r3, #5
 8000c7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        bitmask = 1U << (CO_EM_WRONG_ERROR_REPORT & 0x7U);
 8000c82:	2301      	movs	r3, #1
 8000c84:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 8000c88:	f44f 43c2 	mov.w	r3, #24832	@ 0x6100
 8000c8c:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    uint8_t* errorStatusBits = &em->errorStatusBits[index];
 8000c92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	4413      	add	r3, r2
 8000c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 8000c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c9e:	781a      	ldrb	r2, [r3, #0]
 8000ca0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d004      	beq.n	8000cba <CO_error+0x7c>
        if (errorStatusBitMasked != 0U) {
 8000cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <CO_error+0x88>
            return;
 8000cb8:	e079      	b.n	8000dae <CO_error+0x170>
        }
    } else {
        if (errorStatusBitMasked == 0U) {
 8000cba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d074      	beq.n	8000dac <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	80bb      	strh	r3, [r7, #4]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    /* prepare emergency message. Error register will be added in post-process */
    uint32_t errMsg = ((uint32_t)errorBit << 24) | CO_SWAP_16(errorCode);
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	061a      	lsls	r2, r3, #24
 8000cca:	88bb      	ldrh	r3, [r7, #4]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	623b      	str	r3, [r7, #32]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 8000cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000cd2:	61fb      	str	r3, [r7, #28]
#endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000cd8:	f3ef 8210 	mrs	r2, PRIMASK
 8000cdc:	617a      	str	r2, [r7, #20]
  return(result);
 8000cde:	697a      	ldr	r2, [r7, #20]
 8000ce0:	631a      	str	r2, [r3, #48]	@ 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce2:	b672      	cpsid	i
}
 8000ce4:	bf00      	nop
    if (setError) {
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d008      	beq.n	8000cfe <CO_error+0xc0>
        *errorStatusBits |= bitmask;
 8000cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cee:	781a      	ldrb	r2, [r3, #0]
 8000cf0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cfa:	701a      	strb	r2, [r3, #0]
 8000cfc:	e00b      	b.n	8000d16 <CO_error+0xd8>
    } else {
        *errorStatusBits &= ~bitmask;
 8000cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	b25a      	sxtb	r2, r3
 8000d04:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	b25b      	sxtb	r3, r3
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	b25b      	sxtb	r3, r3
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d14:	701a      	strb	r2, [r3, #0]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    if (em->fifoSize >= 2U) {
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	7f1b      	ldrb	r3, [r3, #28]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d93c      	bls.n	8000d98 <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	7f5b      	ldrb	r3, [r3, #29]
 8000d22:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1U;
 8000d24:	7efb      	ldrb	r3, [r7, #27]
 8000d26:	3301      	adds	r3, #1
 8000d28:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	7f1b      	ldrb	r3, [r3, #28]
 8000d30:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d302      	bcc.n	8000d3e <CO_error+0x100>
            fifoWrPtrNext = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	7f9b      	ldrb	r3, [r3, #30]
 8000d42:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d103      	bne.n	8000d52 <CO_error+0x114>
            em->fifoOverflow = 1;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	77da      	strb	r2, [r3, #31]
 8000d50:	e022      	b.n	8000d98 <CO_error+0x15a>
        } else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	699a      	ldr	r2, [r3, #24]
 8000d56:	7efb      	ldrb	r3, [r7, #27]
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	4413      	add	r3, r2
 8000d5c:	6a3a      	ldr	r2, [r7, #32]
 8000d5e:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	699a      	ldr	r2, [r3, #24]
 8000d64:	7efb      	ldrb	r3, [r7, #27]
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	4413      	add	r3, r2
 8000d6a:	69fa      	ldr	r2, [r7, #28]
 8000d6c:	605a      	str	r2, [r3, #4]
#endif
            em->fifoWrPtr = fifoWrPtrNext;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000d74:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1U)) {
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	7f1b      	ldrb	r3, [r3, #28]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d207      	bcs.n	8000d98 <CO_error+0x15a>
                em->fifoCount++;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	695b      	ldr	r3, [r3, #20]
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	f383 8810 	msr	PRIMASK, r3
}
 8000da6:	e002      	b.n	8000dae <CO_error+0x170>
        return;
 8000da8:	bf00      	nop
 8000daa:	e000      	b.n	8000dae <CO_error+0x170>
            return;
 8000dac:	bf00      	nop
    if ((em->pFunctSignalPre != NULL) && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
#endif
#endif
}
 8000dae:	3734      	adds	r7, #52	@ 0x34
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	60fb      	str	r3, [r7, #12]
    return value;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d002      	beq.n	8000de8 <OD_getIndex+0x14>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	e000      	b.n	8000dea <OD_getIndex+0x16>
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8000e06:	2305      	movs	r3, #5
 8000e08:	e003      	b.n	8000e12 <OD_extension_init+0x1c>
    entry->extension = extension;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	683a      	ldr	r2, [r7, #0]
 8000e0e:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af02      	add	r7, sp, #8
 8000e24:	60f8      	str	r0, [r7, #12]
 8000e26:	607a      	str	r2, [r7, #4]
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000e2e:	7af9      	ldrb	r1, [r7, #11]
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	2304      	movs	r3, #4
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	68f8      	ldr	r0, [r7, #12]
 8000e3a:	f000 ff9b 	bl	8001d74 <OD_get_value>
 8000e3e:	4603      	mov	r3, r0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_HBcons_receive(void* object, void* msg) {
 8000e48:	b480      	push	{r7}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t* HBconsNode = object;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	791b      	ldrb	r3, [r3, #4]
 8000e5a:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	3305      	adds	r3, #5
 8000e60:	60fb      	str	r3, [r7, #12]

    if (DLC == 1U) {
 8000e62:	7cfb      	ldrb	r3, [r7, #19]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d107      	bne.n	8000e78 <CO_HBcons_receive+0x30>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b25a      	sxtb	r2, r3
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	2201      	movs	r2, #1
 8000e76:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 8000e78:	bf00      	nop
 8000e7a:	371c      	adds	r7, #28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <OD_write_1016>:
 * Custom function for writing OD object "Consumer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1016(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t* HBcons = stream->object;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	61fb      	str	r3, [r7, #28]

    if ((stream == NULL) || (buf == NULL) || (stream->subIndex < 1U)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d012      	beq.n	8000ec4 <OD_write_1016+0x40>
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d00f      	beq.n	8000ec4 <OD_write_1016+0x40>
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	7d1b      	ldrb	r3, [r3, #20]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d00b      	beq.n	8000ec4 <OD_write_1016+0x40>
        || (stream->subIndex > HBcons->numberOfMonitoredNodes) || (count != sizeof(uint32_t))
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	7d1a      	ldrb	r2, [r3, #20]
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	7a1b      	ldrb	r3, [r3, #8]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d805      	bhi.n	8000ec4 <OD_write_1016+0x40>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d102      	bne.n	8000ec4 <OD_write_1016+0x40>
        || (countWritten == NULL)) {
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d101      	bne.n	8000ec8 <OD_write_1016+0x44>
        return ODR_DEV_INCOMPAT;
 8000ec4:	2309      	movs	r3, #9
 8000ec6:	e020      	b.n	8000f0a <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 8000ec8:	68b8      	ldr	r0, [r7, #8]
 8000eca:	f7ff ff75 	bl	8000db8 <CO_getUint32>
 8000ece:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	0c1b      	lsrs	r3, r3, #16
 8000ed4:	75fb      	strb	r3, [r7, #23]
    uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1U, nodeId, consumer_time);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	7d1b      	ldrb	r3, [r3, #20]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	b2d9      	uxtb	r1, r3
 8000ee2:	8abb      	ldrh	r3, [r7, #20]
 8000ee4:	7dfa      	ldrb	r2, [r7, #23]
 8000ee6:	69f8      	ldr	r0, [r7, #28]
 8000ee8:	f000 f8be 	bl	8001068 <CO_HBconsumer_initEntry>
 8000eec:	4603      	mov	r3, r0
 8000eee:	74fb      	strb	r3, [r7, #19]
    if (ret != CO_ERROR_NO) {
 8000ef0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 8000ef8:	2308      	movs	r3, #8
 8000efa:	e006      	b.n	8000f0a <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	f000 fd2b 	bl	800195e <OD_writeOriginal>
 8000f08:	4603      	mov	r3, r0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3720      	adds	r7, #32
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <CO_HBconsumer_init>:
#endif

CO_ReturnError_t
CO_HBconsumer_init(CO_HBconsumer_t* HBcons, CO_EM_t* em, CO_HBconsNode_t* monitoredNodes, uint8_t monitoredNodesCount,
                   OD_entry_t* OD_1016_HBcons, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdxStart, uint32_t* errInfo) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
 8000f20:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if ((HBcons == NULL) || (em == NULL) || (monitoredNodes == NULL) || (OD_1016_HBcons == NULL)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d00b      	beq.n	8000f40 <CO_HBconsumer_init+0x2c>
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d008      	beq.n	8000f40 <CO_HBconsumer_init+0x2c>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d005      	beq.n	8000f40 <CO_HBconsumer_init+0x2c>
 8000f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <CO_HBconsumer_init+0x2c>
        || (CANdevRx == NULL)) {
 8000f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <CO_HBconsumer_init+0x32>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f44:	e087      	b.n	8001056 <CO_HBconsumer_init+0x142>
    }

    /* Configure object variables */
    (void)memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 8000f46:	2230      	movs	r2, #48	@ 0x30
 8000f48:	2100      	movs	r1, #0
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f00a f92c 	bl	800b1a8 <memset>
    HBcons->em = em;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f60:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000f66:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
                                         ? (OD_1016_HBcons->subEntriesCount - 1U)
                                         : monitoredNodesCount;
 8000f68:	78fa      	ldrb	r2, [r7, #3]
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 8000f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f6c:	789b      	ldrb	r3, [r3, #2]
 8000f6e:	3b01      	subs	r3, #1
                                         : monitoredNodesCount;
 8000f70:	4293      	cmp	r3, r2
 8000f72:	bf28      	it	cs
 8000f74:	4613      	movcs	r3, r2
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	721a      	strb	r2, [r3, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	77fb      	strb	r3, [r7, #31]
 8000f80:	e041      	b.n	8001006 <CO_HBconsumer_init+0xf2>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1U, &val, true);
 8000f82:	7ffb      	ldrb	r3, [r7, #31]
 8000f84:	3301      	adds	r3, #1
 8000f86:	b2d9      	uxtb	r1, r3
 8000f88:	f107 0214 	add.w	r2, r7, #20
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000f90:	f7ff ff45 	bl	8000e1e <OD_get_u32>
 8000f94:	4603      	mov	r3, r0
 8000f96:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 8000f98:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d00c      	beq.n	8000fba <CO_HBconsumer_init+0xa6>
            if (errInfo != NULL) {
 8000fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d006      	beq.n	8000fb4 <CO_HBconsumer_init+0xa0>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 8000fa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000fa8:	f7ff ff14 	bl	8000dd4 <OD_getIndex>
 8000fac:	4603      	mov	r3, r0
 8000fae:	461a      	mov	r2, r3
 8000fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fb2:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8000fb4:	f06f 030b 	mvn.w	r3, #11
 8000fb8:	e04d      	b.n	8001056 <CO_HBconsumer_init+0x142>
        }

        uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	0c1b      	lsrs	r3, r3, #16
 8000fbe:	777b      	strb	r3, [r7, #29]
        uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, consumer_time);
 8000fc4:	8b7b      	ldrh	r3, [r7, #26]
 8000fc6:	7f7a      	ldrb	r2, [r7, #29]
 8000fc8:	7ff9      	ldrb	r1, [r7, #31]
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f000 f84c 	bl	8001068 <CO_HBconsumer_initEntry>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 8000fd4:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d011      	beq.n	8001000 <CO_HBconsumer_init+0xec>
            if (errInfo != NULL) {
 8000fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d006      	beq.n	8000ff0 <CO_HBconsumer_init+0xdc>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 8000fe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000fe4:	f7ff fef6 	bl	8000dd4 <OD_getIndex>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fee:	601a      	str	r2, [r3, #0]
            }
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS) {
 8000ff0:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000ff4:	f113 0f0c 	cmn.w	r3, #12
 8000ff8:	d002      	beq.n	8001000 <CO_HBconsumer_init+0xec>
                return ret;
 8000ffa:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000ffe:	e02a      	b.n	8001056 <CO_HBconsumer_init+0x142>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001000:	7ffb      	ldrb	r3, [r7, #31]
 8001002:	3301      	adds	r3, #1
 8001004:	77fb      	strb	r3, [r7, #31]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	7a1b      	ldrb	r3, [r3, #8]
 800100a:	7ffa      	ldrb	r2, [r7, #31]
 800100c:	429a      	cmp	r2, r3
 800100e:	d3b8      	bcc.n	8000f82 <CO_HBconsumer_init+0x6e>
        }
    }

    /* configure extension for OD */
#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    HBcons->OD_1016_extension.object = HBcons;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4a11      	ldr	r2, [pc, #68]	@ (8001060 <CO_HBconsumer_init+0x14c>)
 800101a:	625a      	str	r2, [r3, #36]	@ 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4a11      	ldr	r2, [pc, #68]	@ (8001064 <CO_HBconsumer_init+0x150>)
 8001020:	629a      	str	r2, [r3, #40]	@ 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3320      	adds	r3, #32
 8001026:	4619      	mov	r1, r3
 8001028:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800102a:	f7ff fee4 	bl	8000df6 <OD_extension_init>
 800102e:	4603      	mov	r3, r0
 8001030:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 8001032:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00c      	beq.n	8001054 <CO_HBconsumer_init+0x140>
        if (errInfo != NULL) {
 800103a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800103c:	2b00      	cmp	r3, #0
 800103e:	d006      	beq.n	800104e <CO_HBconsumer_init+0x13a>
            *errInfo = OD_getIndex(OD_1016_HBcons);
 8001040:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001042:	f7ff fec7 	bl	8000dd4 <OD_getIndex>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800104c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800104e:	f06f 030b 	mvn.w	r3, #11
 8001052:	e000      	b.n	8001056 <CO_HBconsumer_init+0x142>
    }
#endif

    return CO_ERROR_NO;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3720      	adds	r7, #32
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	080018af 	.word	0x080018af
 8001064:	08000e85 	.word	0x08000e85

08001068 <CO_HBconsumer_initEntry>:

static CO_ReturnError_t
CO_HBconsumer_initEntry(CO_HBconsumer_t* HBcons, uint8_t idx, uint8_t nodeId, uint16_t consumerTime_ms) {
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b08d      	sub	sp, #52	@ 0x34
 800106c:	af04      	add	r7, sp, #16
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	4608      	mov	r0, r1
 8001072:	4611      	mov	r1, r2
 8001074:	461a      	mov	r2, r3
 8001076:	4603      	mov	r3, r0
 8001078:	70fb      	strb	r3, [r7, #3]
 800107a:	460b      	mov	r3, r1
 800107c:	70bb      	strb	r3, [r7, #2]
 800107e:	4613      	mov	r3, r2
 8001080:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001082:	2300      	movs	r3, #0
 8001084:	77fb      	strb	r3, [r7, #31]

    /* verify arguments */
    if ((HBcons == NULL) || (idx >= HBcons->numberOfMonitoredNodes)) {
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d004      	beq.n	8001096 <CO_HBconsumer_initEntry+0x2e>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7a1b      	ldrb	r3, [r3, #8]
 8001090:	78fa      	ldrb	r2, [r7, #3]
 8001092:	429a      	cmp	r2, r3
 8001094:	d302      	bcc.n	800109c <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800109a:	e075      	b.n	8001188 <CO_HBconsumer_initEntry+0x120>
    }

    /* verify for duplicate entries */
    if ((consumerTime_ms != 0U) && (nodeId != 0U)) {
 800109c:	883b      	ldrh	r3, [r7, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d024      	beq.n	80010ec <CO_HBconsumer_initEntry+0x84>
 80010a2:	78bb      	ldrb	r3, [r7, #2]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d021      	beq.n	80010ec <CO_HBconsumer_initEntry+0x84>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80010a8:	2300      	movs	r3, #0
 80010aa:	77bb      	strb	r3, [r7, #30]
 80010ac:	e019      	b.n	80010e2 <CO_HBconsumer_initEntry+0x7a>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	7fbb      	ldrb	r3, [r7, #30]
 80010b4:	011b      	lsls	r3, r3, #4
 80010b6:	4413      	add	r3, r2
 80010b8:	f107 0408 	add.w	r4, r7, #8
 80010bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if ((idx != i) && (node.time_us != 0U) && (node.nodeId == nodeId)) {
 80010c2:	78fa      	ldrb	r2, [r7, #3]
 80010c4:	7fbb      	ldrb	r3, [r7, #30]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d008      	beq.n	80010dc <CO_HBconsumer_initEntry+0x74>
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d005      	beq.n	80010dc <CO_HBconsumer_initEntry+0x74>
 80010d0:	7a3b      	ldrb	r3, [r7, #8]
 80010d2:	78ba      	ldrb	r2, [r7, #2]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d101      	bne.n	80010dc <CO_HBconsumer_initEntry+0x74>
                ret = CO_ERROR_OD_PARAMETERS;
 80010d8:	23f4      	movs	r3, #244	@ 0xf4
 80010da:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80010dc:	7fbb      	ldrb	r3, [r7, #30]
 80010de:	3301      	adds	r3, #1
 80010e0:	77bb      	strb	r3, [r7, #30]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7a1b      	ldrb	r3, [r3, #8]
 80010e6:	7fba      	ldrb	r2, [r7, #30]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d3e0      	bcc.n	80010ae <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 80010ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d147      	bne.n	8001184 <CO_HBconsumer_initEntry+0x11c>
        uint16_t COB_ID;

        CO_HBconsNode_t* monitoredNode = &HBcons->monitoredNodes[idx];
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	011b      	lsls	r3, r3, #4
 80010fc:	4413      	add	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	78ba      	ldrb	r2, [r7, #2]
 8001104:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (uint32_t)consumerTime_ms * 1000U;
 8001106:	883b      	ldrh	r3, [r7, #0]
 8001108:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800110c:	fb03 f202 	mul.w	r2, r3, r2
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	22ff      	movs	r2, #255	@ 0xff
 8001118:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if ((monitoredNode->nodeId != 0U) && (monitoredNode->time_us != 0U)) {
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00c      	beq.n	8001142 <CO_HBconsumer_initEntry+0xda>
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d008      	beq.n	8001142 <CO_HBconsumer_initEntry+0xda>
            COB_ID = monitoredNode->nodeId + (uint16_t)CO_CAN_ID_HEARTBEAT;
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8001138:	83bb      	strh	r3, [r7, #28]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	2201      	movs	r2, #1
 800113e:	709a      	strb	r2, [r3, #2]
 8001140:	e007      	b.n	8001152 <CO_HBconsumer_initEntry+0xea>
        } else {
            COB_ID = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	83bb      	strh	r3, [r7, #28]
            monitoredNode->time_us = 0;
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	2200      	movs	r2, #0
 8001150:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6998      	ldr	r0, [r3, #24]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	8b9a      	ldrh	r2, [r3, #28]
 800115a:	78fb      	ldrb	r3, [r7, #3]
 800115c:	b29b      	uxth	r3, r3
 800115e:	4413      	add	r3, r2
 8001160:	b299      	uxth	r1, r3
                                 (void*)&HBcons->monitoredNodes[idx], CO_HBcons_receive);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	4413      	add	r3, r2
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 800116c:	8bba      	ldrh	r2, [r7, #28]
 800116e:	4c08      	ldr	r4, [pc, #32]	@ (8001190 <CO_HBconsumer_initEntry+0x128>)
 8001170:	9402      	str	r4, [sp, #8]
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	2300      	movs	r3, #0
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800117c:	f006 f906 	bl	800738c <CO_CANrxBufferInit>
 8001180:	4603      	mov	r3, r0
 8001182:	77fb      	strb	r3, [r7, #31]
    }
    return ret;
 8001184:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3724      	adds	r7, #36	@ 0x24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd90      	pop	{r4, r7, pc}
 8001190:	08000e49 	.word	0x08000e49

08001194 <CO_HBconsumer_process>:
}
#endif /* (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI */

void
CO_HBconsumer_process(CO_HBconsumer_t* HBcons, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                      uint32_t* timerNext_us) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b08e      	sub	sp, #56	@ 0x38
 8001198:	af02      	add	r7, sp, #8
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
 80011a0:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 80011a2:	2301      	movs	r3, #1
 80011a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 80011a6:	2301      	movs	r3, #1
 80011a8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d077      	beq.n	80012a0 <CO_HBconsumer_process+0x10c>
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d073      	beq.n	80012a0 <CO_HBconsumer_process+0x10c>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80011b8:	2300      	movs	r3, #0
 80011ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80011be:	e068      	b.n	8001292 <CO_HBconsumer_process+0xfe>
            uint32_t timeDifference_us_copy = timeDifference_us;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011cc:	011b      	lsls	r3, r3, #4
 80011ce:	4413      	add	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	789b      	ldrb	r3, [r3, #2]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d055      	beq.n	8001286 <CO_HBconsumer_process+0xf2>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d022      	beq.n	8001228 <CO_HBconsumer_process+0x94>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d112      	bne.n	8001212 <CO_HBconsumer_process+0x7e>
                    if (monitoredNode->pFunctSignalRemoteReset != NULL) {
                        monitoredNode->pFunctSignalRemoteReset(monitoredNode->nodeId, i,
                                                               monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	789b      	ldrb	r3, [r3, #2]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d10a      	bne.n	800120a <CO_HBconsumer_process+0x76>
                        CO_errorReport(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, CO_EMC_HEARTBEAT, i);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	f248 1330 	movw	r3, #33072	@ 0x8130
 8001202:	221c      	movs	r2, #28
 8001204:	2101      	movs	r1, #1
 8001206:	f7ff fd1a 	bl	8000c3e <CO_error>
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	2201      	movs	r2, #1
 800120e:	709a      	strb	r2, [r3, #2]
 8001210:	e007      	b.n	8001222 <CO_HBconsumer_process+0x8e>
                        && monitoredNode->pFunctSignalHbStarted != NULL) {
                        monitoredNode->pFunctSignalHbStarted(monitoredNode->nodeId, i,
                                                             monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	2202      	movs	r2, #2
 8001216:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	2200      	movs	r2, #0
 800121c:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	789b      	ldrb	r3, [r3, #2]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d11c      	bne.n	800126a <CO_HBconsumer_process+0xd6>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	6a3b      	ldr	r3, [r7, #32]
 8001236:	441a      	add	r2, r3
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	429a      	cmp	r2, r3
 8001246:	d310      	bcc.n	800126a <CO_HBconsumer_process+0xd6>
                    if (monitoredNode->pFunctSignalTimeout != NULL) {
                        monitoredNode->pFunctSignalTimeout(monitoredNode->nodeId, i,
                                                           monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, CO_EMC_HEARTBEAT, i);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6818      	ldr	r0, [r3, #0]
 800124c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	f248 1330 	movw	r3, #33072	@ 0x8130
 8001256:	221b      	movs	r2, #27
 8001258:	2101      	movs	r1, #1
 800125a:	f7ff fcf0 	bl	8000c3e <CO_error>
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	22ff      	movs	r2, #255	@ 0xff
 8001262:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2203      	movs	r2, #3
 8001268:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if (monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	789b      	ldrb	r3, [r3, #2]
 800126e:	2b02      	cmp	r3, #2
 8001270:	d001      	beq.n	8001276 <CO_HBconsumer_process+0xe2>
                allMonitoredActiveCurrent = false;
 8001272:	2300      	movs	r3, #0
 8001274:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800127c:	2b05      	cmp	r3, #5
 800127e:	d003      	beq.n	8001288 <CO_HBconsumer_process+0xf4>
                allMonitoredOperationalCurrent = false;
 8001280:	2300      	movs	r3, #0
 8001282:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001284:	e000      	b.n	8001288 <CO_HBconsumer_process+0xf4>
                continue;
 8001286:	bf00      	nop
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001288:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800128c:	3301      	adds	r3, #1
 800128e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	7a1b      	ldrb	r3, [r3, #8]
 8001296:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800129a:	429a      	cmp	r2, r3
 800129c:	d390      	bcc.n	80011c0 <CO_HBconsumer_process+0x2c>
 800129e:	e028      	b.n	80012f2 <CO_HBconsumer_process+0x15e>
                }
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    } else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d103      	bne.n	80012ae <CO_HBconsumer_process+0x11a>
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d021      	beq.n	80012f2 <CO_HBconsumer_process+0x15e>
        /* (pre)operational state changed, clear variables */
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80012ae:	2300      	movs	r3, #0
 80012b0:	77fb      	strb	r3, [r7, #31]
 80012b2:	e015      	b.n	80012e0 <CO_HBconsumer_process+0x14c>
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	7ffb      	ldrb	r3, [r7, #31]
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	4413      	add	r3, r2
 80012be:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	22ff      	movs	r2, #255	@ 0xff
 80012c4:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	789b      	ldrb	r3, [r3, #2]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <CO_HBconsumer_process+0x146>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	2201      	movs	r2, #1
 80012d8:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80012da:	7ffb      	ldrb	r3, [r7, #31]
 80012dc:	3301      	adds	r3, #1
 80012de:	77fb      	strb	r3, [r7, #31]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	7a1b      	ldrb	r3, [r3, #8]
 80012e4:	7ffa      	ldrb	r2, [r7, #31]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d3e4      	bcc.n	80012b4 <CO_HBconsumer_process+0x120>
            }
        }
        allMonitoredActiveCurrent = false;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        allMonitoredOperationalCurrent = false;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    } else { /* MISRA C 2004 14.10 */
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d114      	bne.n	8001324 <CO_HBconsumer_process+0x190>
 80012fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d011      	beq.n	8001324 <CO_HBconsumer_process+0x190>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	2300      	movs	r3, #0
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2300      	movs	r3, #0
 800130a:	221b      	movs	r2, #27
 800130c:	2100      	movs	r1, #0
 800130e:	f7ff fc96 	bl	8000c3e <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	2300      	movs	r3, #0
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2300      	movs	r3, #0
 800131c:	221c      	movs	r2, #28
 800131e:	2100      	movs	r1, #0
 8001320:	f7ff fc8d 	bl	8000c3e <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001328:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800132e:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	615a      	str	r2, [r3, #20]
}
 8001336:	bf00      	nop
 8001338:	3730      	adds	r7, #48	@ 0x30
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <CO_getUint16>:
CO_getUint16(const void* buf) {
 800133e:	b480      	push	{r7}
 8001340:	b085      	sub	sp, #20
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	b29b      	uxth	r3, r3
 800134c:	81fb      	strh	r3, [r7, #14]
    return value;
 800134e:	89fb      	ldrh	r3, [r7, #14]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d002      	beq.n	8001370 <OD_getIndex+0x14>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	e000      	b.n	8001372 <OD_getIndex+0x16>
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 800138e:	2305      	movs	r3, #5
 8001390:	e003      	b.n	800139a <OD_extension_init+0x1c>
    entry->extension = extension;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <OD_get_u16>:
OD_get_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t* val, bool_t odOrig) {
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af02      	add	r7, sp, #8
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	460b      	mov	r3, r1
 80013b4:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80013b6:	7af9      	ldrb	r1, [r7, #11]
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2302      	movs	r3, #2
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f000 fcd7 	bl	8001d74 <OD_get_value>
 80013c6:	4603      	mov	r3, r0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <CO_isError>:
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	08db      	lsrs	r3, r3, #3
 80013e0:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	2201      	movs	r2, #1
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
            || (em->errorStatusBits[index] & bitmask) != 0)
               ? true
               : false;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00a      	beq.n	800140c <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	2b09      	cmp	r3, #9
 80013fa:	d807      	bhi.n	800140c <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0)
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	5cd2      	ldrb	r2, [r2, r3]
 8001402:	7bbb      	ldrb	r3, [r7, #14]
 8001404:	4013      	ands	r3, r2
 8001406:	b2db      	uxtb	r3, r3
               : false;
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <CO_isError+0x40>
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <CO_isError+0x42>
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <CO_getErrorRegister>:
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t
CO_getErrorRegister(CO_EM_t* em) {
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d007      	beq.n	800143c <CO_getErrorRegister+0x1e>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <CO_getErrorRegister+0x1e>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	e000      	b.n	800143e <CO_getErrorRegister+0x20>
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_NMT_receive(void* object, void* msg) {
 800144a:	b480      	push	{r7}
 800144c:	b087      	sub	sp, #28
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	791b      	ldrb	r3, [r3, #4]
 8001458:	75fb      	strb	r3, [r7, #23]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	3305      	adds	r3, #5
 800145e:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	3301      	adds	r3, #1
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t* NMT = (CO_NMT_t*)object;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	60bb      	str	r3, [r7, #8]

    if ((DLC == 2U) && ((nodeId == 0U) || (nodeId == NMT->nodeId))) {
 8001472:	7dfb      	ldrb	r3, [r7, #23]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d10a      	bne.n	800148e <CO_NMT_receive+0x44>
 8001478:	7bbb      	ldrb	r3, [r7, #14]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d004      	beq.n	8001488 <CO_NMT_receive+0x3e>
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	78db      	ldrb	r3, [r3, #3]
 8001482:	7bba      	ldrb	r2, [r7, #14]
 8001484:	429a      	cmp	r2, r3
 8001486:	d102      	bne.n	800148e <CO_NMT_receive+0x44>
        NMT->internalCommand = command;
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 800148e:	bf00      	nop
 8001490:	371c      	adds	r7, #28
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <OD_write_1017>:
 * Custom function for writing OD object "Producer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1017(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint16_t))
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00c      	beq.n	80014c8 <OD_write_1017+0x2e>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	7d1b      	ldrb	r3, [r3, #20]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d108      	bne.n	80014c8 <OD_write_1017+0x2e>
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <OD_write_1017+0x2e>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d102      	bne.n	80014c8 <OD_write_1017+0x2e>
        || (countWritten == NULL)) {
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <OD_write_1017+0x32>
        return ODR_DEV_INCOMPAT;
 80014c8:	2309      	movs	r3, #9
 80014ca:	e017      	b.n	80014fc <OD_write_1017+0x62>
    }

    CO_NMT_t* NMT = (CO_NMT_t*)stream->object;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000U;
 80014d2:	68b8      	ldr	r0, [r7, #8]
 80014d4:	f7ff ff33 	bl	800133e <CO_getUint16>
 80014d8:	4603      	mov	r3, r0
 80014da:	461a      	mov	r2, r3
 80014dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e0:	fb03 f202 	mul.w	r2, r3, r2
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	68b9      	ldr	r1, [r7, #8]
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f000 fa32 	bl	800195e <OD_writeOriginal>
 80014fa:	4603      	mov	r3, r0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <CO_NMT_init>:
CO_NMT_init(CO_NMT_t* NMT, OD_entry_t* OD_1017_ProducerHbTime, CO_EM_t* em, uint8_t nodeId, uint16_t NMTcontrol,
            uint16_t firstHBTime_ms, CO_CANmodule_t* NMT_CANdevRx, uint16_t NMT_rxIdx, uint16_t CANidRxNMT,
#if (((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0) || defined CO_DOXYGEN
            CO_CANmodule_t* NMT_CANdevTx, uint16_t NMT_txIdx, uint16_t CANidTxNMT,
#endif
            CO_CANmodule_t* HB_CANdevTx, uint16_t HB_txIdx, uint16_t CANidTxHB, uint32_t* errInfo) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	@ 0x28
 8001508:	af04      	add	r7, sp, #16
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001512:	2300      	movs	r3, #0
 8001514:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((NMT == NULL) || (OD_1017_ProducerHbTime == NULL) || (em == NULL) || (NMT_CANdevRx == NULL)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00b      	beq.n	8001534 <CO_NMT_init+0x30>
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d008      	beq.n	8001534 <CO_NMT_init+0x30>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d005      	beq.n	8001534 <CO_NMT_init+0x30>
 8001528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <CO_NMT_init+0x30>
        || (HB_CANdevTx == NULL)
 800152e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <CO_NMT_init+0x36>
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
        || (NMT_CANdevTx == NULL)
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001534:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001538:	e097      	b.n	800166a <CO_NMT_init+0x166>
    }

    /* clear the object */
    (void)memset(NMT, 0, sizeof(CO_NMT_t));
 800153a:	222c      	movs	r2, #44	@ 0x2c
 800153c:	2100      	movs	r1, #0
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f009 fe32 	bl	800b1a8 <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2200      	movs	r2, #0
 800154e:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	78fa      	ldrb	r2, [r7, #3]
 8001554:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8c3a      	ldrh	r2, [r7, #32]
 800155a:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (uint32_t)firstHBTime_ms * 1000U;
 8001562:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001564:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001568:	fb03 f202 	mul.w	r2, r3, r2
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 8001570:	f107 0214 	add.w	r2, r7, #20
 8001574:	2301      	movs	r3, #1
 8001576:	2100      	movs	r1, #0
 8001578:	68b8      	ldr	r0, [r7, #8]
 800157a:	f7ff ff14 	bl	80013a6 <OD_get_u16>
 800157e:	4603      	mov	r3, r0
 8001580:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001582:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00c      	beq.n	80015a4 <CO_NMT_init+0xa0>
        if (errInfo != NULL) {
 800158a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <CO_NMT_init+0x9a>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8001590:	68b8      	ldr	r0, [r7, #8]
 8001592:	f7ff fee3 	bl	800135c <OD_getIndex>
 8001596:	4603      	mov	r3, r0
 8001598:	461a      	mov	r2, r3
 800159a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800159c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800159e:	f06f 030b 	mvn.w	r3, #11
 80015a2:	e062      	b.n	800166a <CO_NMT_init+0x166>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000U;
 80015a4:	8abb      	ldrh	r3, [r7, #20]
 80015a6:	461a      	mov	r2, r3
 80015a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ac:	fb03 f202 	mul.w	r2, r3, r2
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001674 <CO_NMT_init+0x170>)
 80015be:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001678 <CO_NMT_init+0x174>)
 80015c4:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	3310      	adds	r3, #16
 80015ca:	4619      	mov	r1, r3
 80015cc:	68b8      	ldr	r0, [r7, #8]
 80015ce:	f7ff fed6 	bl	800137e <OD_extension_init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 80015d6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00c      	beq.n	80015f8 <CO_NMT_init+0xf4>
        if (errInfo != NULL) {
 80015de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d006      	beq.n	80015f2 <CO_NMT_init+0xee>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 80015e4:	68b8      	ldr	r0, [r7, #8]
 80015e6:	f7ff feb9 	bl	800135c <OD_getIndex>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015f0:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80015f2:	f06f 030b 	mvn.w	r3, #11
 80015f6:	e038      	b.n	800166a <CO_NMT_init+0x166>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	429a      	cmp	r2, r3
 8001602:	d903      	bls.n	800160c <CO_NMT_init+0x108>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(NMT_CANdevRx, NMT_rxIdx, CANidRxNMT, 0x7FF, false, (void*)NMT, CO_NMT_receive);
 800160c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800160e:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8001610:	4b1a      	ldr	r3, [pc, #104]	@ (800167c <CO_NMT_init+0x178>)
 8001612:	9302      	str	r3, [sp, #8]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	2300      	movs	r3, #0
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001620:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001622:	f005 feb3 	bl	800738c <CO_CANrxBufferInit>
 8001626:	4603      	mov	r3, r0
 8001628:	75fb      	strb	r3, [r7, #23]
    if (ret != CO_ERROR_NO) {
 800162a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <CO_NMT_init+0x134>
        return ret;
 8001632:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001636:	e018      	b.n	800166a <CO_NMT_init+0x166>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800163c:	625a      	str	r2, [r3, #36]	@ 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(HB_CANdevTx, HB_txIdx, CANidTxHB, false, 1, false);
 800163e:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001640:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8001642:	2300      	movs	r3, #0
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	2301      	movs	r3, #1
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2300      	movs	r3, #0
 800164c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800164e:	f005 fefb 	bl	8007448 <CO_CANtxBufferInit>
 8001652:	4602      	mov	r2, r0
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	629a      	str	r2, [r3, #40]	@ 0x28
    if (NMT->HB_TXbuff == NULL) {
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165c:	2b00      	cmp	r3, #0
 800165e:	d102      	bne.n	8001666 <CO_NMT_init+0x162>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001660:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001664:	e001      	b.n	800166a <CO_NMT_init+0x166>
    }

    return ret;
 8001666:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	080018af 	.word	0x080018af
 8001678:	0800149b 	.word	0x0800149b
 800167c:	0800144b 	.word	0x0800144b

08001680 <CO_NMT_process>:
    }
}
#endif

CO_NMT_reset_cmd_t
CO_NMT_process(CO_NMT_t* NMT, CO_NMT_internalState_t* NMTstate, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b08e      	sub	sp, #56	@ 0x38
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
 800168c:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 8001696:	2300      	movs	r3, #0
 8001698:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 800169c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	bf0c      	ite	eq
 80016a4:	2301      	moveq	r3, #1
 80016a6:	2300      	movne	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	633b      	str	r3, [r7, #48]	@ 0x30

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us) ? (NMT->HBproducerTimer - timeDifference_us) : 0U;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d204      	bcs.n	80016c0 <CO_NMT_process+0x40>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	e000      	b.n	80016c2 <CO_NMT_process+0x42>
 80016c0:	2300      	movs	r3, #0
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	60d3      	str	r3, [r2, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed */
    if (NNTinit
 80016c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10e      	bne.n	80016ea <CO_NMT_process+0x6a>
        || ((NMT->HBproducerTime_us != 0U)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d02b      	beq.n	800172c <CO_NMT_process+0xac>
            && ((NMT->HBproducerTimer == 0U) || (NMTstateCpy != NMT->operatingStatePrev)))) {
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d006      	beq.n	80016ea <CO_NMT_process+0x6a>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80016e2:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d020      	beq.n	800172c <CO_NMT_process+0xac>
        NMT->HB_TXbuff->data[0] = (uint8_t)NMTstateCpy;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ee:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80016f2:	715a      	strb	r2, [r3, #5]
        (void)CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016fc:	4619      	mov	r1, r3
 80016fe:	4610      	mov	r0, r2
 8001700:	f005 ff1c 	bl	800753c <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 8001704:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10b      	bne.n	8001724 <CO_NMT_process+0xa4>
            /* NMT slave self starting */
            NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_STARTUP_TO_OPERATIONAL) != 0U)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	889b      	ldrh	r3, [r3, #4]
 8001710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
                              ? CO_NMT_OPERATIONAL
                              : CO_NMT_PRE_OPERATIONAL;
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <CO_NMT_process+0x9c>
 8001718:	2305      	movs	r3, #5
 800171a:	e000      	b.n	800171e <CO_NMT_process+0x9e>
 800171c:	237f      	movs	r3, #127	@ 0x7f
            NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_STARTUP_TO_OPERATIONAL) != 0U)
 800171e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001722:	e003      	b.n	800172c <CO_NMT_process+0xac>
        } else {
            /* Start timer from the beginning. If OS is slow, time sliding may occur. However,
             * heartbeat is not for synchronization, it is for health report. In case of
             * initializing, timer is set in the CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001732:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	789b      	ldrb	r3, [r3, #2]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d02a      	beq.n	8001792 <CO_NMT_process+0x112>
        switch (NMT->internalCommand) {
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	789b      	ldrb	r3, [r3, #2]
 8001740:	2b82      	cmp	r3, #130	@ 0x82
 8001742:	d01e      	beq.n	8001782 <CO_NMT_process+0x102>
 8001744:	2b82      	cmp	r3, #130	@ 0x82
 8001746:	dc20      	bgt.n	800178a <CO_NMT_process+0x10a>
 8001748:	2b81      	cmp	r3, #129	@ 0x81
 800174a:	d016      	beq.n	800177a <CO_NMT_process+0xfa>
 800174c:	2b81      	cmp	r3, #129	@ 0x81
 800174e:	dc1c      	bgt.n	800178a <CO_NMT_process+0x10a>
 8001750:	2b80      	cmp	r3, #128	@ 0x80
 8001752:	d00e      	beq.n	8001772 <CO_NMT_process+0xf2>
 8001754:	2b80      	cmp	r3, #128	@ 0x80
 8001756:	dc18      	bgt.n	800178a <CO_NMT_process+0x10a>
 8001758:	2b01      	cmp	r3, #1
 800175a:	d002      	beq.n	8001762 <CO_NMT_process+0xe2>
 800175c:	2b02      	cmp	r3, #2
 800175e:	d004      	beq.n	800176a <CO_NMT_process+0xea>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
            case CO_NMT_NO_COMMAND:
            default:
                /* done */
                break;
 8001760:	e013      	b.n	800178a <CO_NMT_process+0x10a>
            case CO_NMT_ENTER_OPERATIONAL: NMTstateCpy = CO_NMT_OPERATIONAL; break;
 8001762:	2305      	movs	r3, #5
 8001764:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001768:	e010      	b.n	800178c <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_STOPPED: NMTstateCpy = CO_NMT_STOPPED; break;
 800176a:	2304      	movs	r3, #4
 800176c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001770:	e00c      	b.n	800178c <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_PRE_OPERATIONAL: NMTstateCpy = CO_NMT_PRE_OPERATIONAL; break;
 8001772:	237f      	movs	r3, #127	@ 0x7f
 8001774:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001778:	e008      	b.n	800178c <CO_NMT_process+0x10c>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
 800177a:	2302      	movs	r3, #2
 800177c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001780:	e004      	b.n	800178c <CO_NMT_process+0x10c>
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
 8001782:	2301      	movs	r3, #1
 8001784:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001788:	e000      	b.n	800178c <CO_NMT_process+0x10c>
                break;
 800178a:	bf00      	nop
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t ErrOnBusOffHB = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_BUSOFF_HB) != 0U);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	889b      	ldrh	r3, [r3, #4]
 8001796:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800179a:	2b00      	cmp	r3, #0
 800179c:	bf14      	ite	ne
 800179e:	2301      	movne	r3, #1
 80017a0:	2300      	moveq	r3, #0
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool_t ErrBusOff = CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	2112      	movs	r1, #18
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fe0f 	bl	80013d0 <CO_isError>
 80017b2:	62b8      	str	r0, [r7, #40]	@ 0x28
    bool_t ErrHbCons = CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	211b      	movs	r1, #27
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fe08 	bl	80013d0 <CO_isError>
 80017c0:	6278      	str	r0, [r7, #36]	@ 0x24
    bool_t ErrHbConsRemote = CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	211c      	movs	r1, #28
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fe01 	bl	80013d0 <CO_isError>
 80017ce:	6238      	str	r0, [r7, #32]
    bool_t busOff_HB = ErrOnBusOffHB && (ErrBusOff || ErrHbCons || ErrHbConsRemote);
 80017d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00a      	beq.n	80017ec <CO_NMT_process+0x16c>
 80017d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d105      	bne.n	80017e8 <CO_NMT_process+0x168>
 80017dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <CO_NMT_process+0x168>
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <CO_NMT_process+0x16c>
 80017e8:	2301      	movs	r3, #1
 80017ea:	e000      	b.n	80017ee <CO_NMT_process+0x16e>
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]

    bool_t ErrNMTErrReg = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_ERR_REG) != 0U);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	889b      	ldrh	r3, [r3, #4]
 80017f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	61bb      	str	r3, [r7, #24]
    bool_t ErrNMTcontrol = ((CO_getErrorRegister(NMT->em) & (uint8_t)NMT->NMTcontrol) != 0U);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fe08 	bl	800141e <CO_getErrorRegister>
 800180e:	4603      	mov	r3, r0
 8001810:	461a      	mov	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	889b      	ldrh	r3, [r3, #4]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	4013      	ands	r3, r2
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	bf14      	ite	ne
 8001820:	2301      	movne	r3, #1
 8001822:	2300      	moveq	r3, #0
 8001824:	b2db      	uxtb	r3, r3
 8001826:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = ErrNMTErrReg && ErrNMTcontrol;
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d004      	beq.n	8001838 <CO_NMT_process+0x1b8>
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <CO_NMT_process+0x1b8>
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <CO_NMT_process+0x1ba>
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]

    if ((NMTstateCpy == CO_NMT_OPERATIONAL) && (busOff_HB || errRegMasked)) {
 800183c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001840:	2b05      	cmp	r3, #5
 8001842:	d111      	bne.n	8001868 <CO_NMT_process+0x1e8>
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d102      	bne.n	8001850 <CO_NMT_process+0x1d0>
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00b      	beq.n	8001868 <CO_NMT_process+0x1e8>
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	889b      	ldrh	r3, [r3, #4]
 8001854:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
                                                                                            : CO_NMT_PRE_OPERATIONAL;
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <CO_NMT_process+0x1e0>
 800185c:	2304      	movs	r3, #4
 800185e:	e000      	b.n	8001862 <CO_NMT_process+0x1e2>
 8001860:	237f      	movs	r3, #127	@ 0x7f
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 8001862:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001866:	e011      	b.n	800188c <CO_NMT_process+0x20c>
    } else if ((((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0U)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	889b      	ldrh	r3, [r3, #4]
 800186c:	b21b      	sxth	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	da0c      	bge.n	800188c <CO_NMT_process+0x20c>
               && (NMTstateCpy == CO_NMT_PRE_OPERATIONAL) && (!busOff_HB && !errRegMasked)) {
 8001872:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001876:	2b7f      	cmp	r3, #127	@ 0x7f
 8001878:	d108      	bne.n	800188c <CO_NMT_process+0x20c>
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d105      	bne.n	800188c <CO_NMT_process+0x20c>
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d102      	bne.n	800188c <CO_NMT_process+0x20c>
        NMTstateCpy = CO_NMT_OPERATIONAL;
 8001886:	2305      	movs	r3, #5
 8001888:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        } else { /* MISRA C 2004 14.10 */
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001892:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) {
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <CO_NMT_process+0x222>
        *NMTstate = NMTstateCpy;
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80018a0:	701a      	strb	r2, [r3, #0]
    }

    return resetCommand;
 80018a2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3738      	adds	r7, #56	@ 0x38
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <OD_readOriginal>:
#include <string.h>
#define OD_DEFINITION
#include "301/CO_ODinterface.h"

ODR_t
OD_readOriginal(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b088      	sub	sp, #32
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL)) {
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d005      	beq.n	80018ce <OD_readOriginal+0x20>
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d002      	beq.n	80018ce <OD_readOriginal+0x20>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 80018ce:	2309      	movs	r3, #9
 80018d0:	e041      	b.n	8001956 <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	61fb      	str	r3, [r7, #28]
    const uint8_t* dataOrig = stream->dataOrig;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 80018e4:	230e      	movs	r3, #14
 80018e6:	e036      	b.n	8001956 <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d103      	bne.n	80018fc <OD_readOriginal+0x4e>
 80018f4:	69fa      	ldr	r2, [r7, #28]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d922      	bls.n	8001942 <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	429a      	cmp	r2, r3
 8001904:	d801      	bhi.n	800190a <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 8001906:	2309      	movs	r3, #9
 8001908:	e025      	b.n	8001956 <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4413      	add	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	429a      	cmp	r2, r3
 8001924:	d90a      	bls.n	800193c <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	68da      	ldr	r2, [r3, #12]
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	441a      	add	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8001936:	23ff      	movs	r3, #255	@ 0xff
 8001938:	75fb      	strb	r3, [r7, #23]
 800193a:	e002      	b.n	8001942 <OD_readOriginal+0x94>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
        }
    }

    (void)memcpy((void*)buf, (const void*)dataOrig, dataLenToCopy);
 8001942:	69fa      	ldr	r2, [r7, #28]
 8001944:	69b9      	ldr	r1, [r7, #24]
 8001946:	68b8      	ldr	r0, [r7, #8]
 8001948:	f009 fcb9 	bl	800b2be <memcpy>

    *countRead = dataLenToCopy;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001952:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3720      	adds	r7, #32
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <OD_writeOriginal>:

ODR_t
OD_writeOriginal(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800195e:	b580      	push	{r7, lr}
 8001960:	b088      	sub	sp, #32
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d005      	beq.n	800197e <OD_writeOriginal+0x20>
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <OD_writeOriginal+0x20>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 800197e:	2309      	movs	r3, #9
 8001980:	e056      	b.n	8001a30 <OD_writeOriginal+0xd2>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	61fb      	str	r3, [r7, #28]
    OD_size_t dataLenRemain = dataLenToCopy;      /* remaining length of dataOrig buffer */
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	61bb      	str	r3, [r7, #24]
    uint8_t* dataOrig = stream->dataOrig;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	617b      	str	r3, [r7, #20]

    if (dataOrig == NULL) {
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <OD_writeOriginal+0x3e>
        return ODR_SUB_NOT_EXIST;
 8001998:	230e      	movs	r3, #14
 800199a:	e049      	b.n	8001a30 <OD_writeOriginal+0xd2>
    }

    ODR_t returnCode = ODR_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	74fb      	strb	r3, [r7, #19]

    /* If previous write was partial or OD variable length is larger than current buffer size,
     * then data was (will be) written in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d103      	bne.n	80019b0 <OD_writeOriginal+0x52>
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d924      	bls.n	80019fa <OD_writeOriginal+0x9c>
        if (stream->dataOffset >= dataLenToCopy) {
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d801      	bhi.n	80019be <OD_writeOriginal+0x60>
            return ODR_DEV_INCOMPAT;
 80019ba:	2309      	movs	r3, #9
 80019bc:	e038      	b.n	8001a30 <OD_writeOriginal+0xd2>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	69fa      	ldr	r2, [r7, #28]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	61fb      	str	r3, [r7, #28]
        dataLenRemain = dataLenToCopy;
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	61bb      	str	r3, [r7, #24]
        dataOrig += stream->dataOffset;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	4413      	add	r3, r2
 80019d4:	617b      	str	r3, [r7, #20]

        if (dataLenToCopy > count) {
 80019d6:	69fa      	ldr	r2, [r7, #28]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d90a      	bls.n	80019f4 <OD_writeOriginal+0x96>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	441a      	add	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 80019ee:	23ff      	movs	r3, #255	@ 0xff
 80019f0:	74fb      	strb	r3, [r7, #19]
 80019f2:	e002      	b.n	80019fa <OD_writeOriginal+0x9c>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 80019fa:	69fa      	ldr	r2, [r7, #28]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d201      	bcs.n	8001a06 <OD_writeOriginal+0xa8>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 8001a02:	230c      	movs	r3, #12
 8001a04:	e014      	b.n	8001a30 <OD_writeOriginal+0xd2>
    }

    /* additional check for Misra c compliance */
    if ((dataLenToCopy <= dataLenRemain) && (dataLenToCopy <= count)) {
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d80f      	bhi.n	8001a2e <OD_writeOriginal+0xd0>
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d80b      	bhi.n	8001a2e <OD_writeOriginal+0xd0>
        (void)memcpy((void*)dataOrig, (const void*)buf, dataLenToCopy);
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	6978      	ldr	r0, [r7, #20]
 8001a1c:	f009 fc4f 	bl	800b2be <memcpy>
 8001a20:	bf00      	nop
    } else {
        return ODR_DEV_INCOMPAT;
    }

    *countWritten = dataLenToCopy;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	69fa      	ldr	r2, [r7, #28]
 8001a26:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001a28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a2c:	e000      	b.n	8001a30 <OD_writeOriginal+0xd2>
        return ODR_DEV_INCOMPAT;
 8001a2e:	2309      	movs	r3, #9
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3720      	adds	r7, #32
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_readDisabled(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countRead;
    return ODR_UNSUPP_ACCESS;
 8001a46:	2302      	movs	r3, #2
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_writeDisabled(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
 8001a60:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countWritten;
    return ODR_UNSUPP_ACCESS;
 8001a62:	2302      	movs	r3, #2
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <OD_find>:

OD_entry_t*
OD_find(OD_t* od, uint16_t index) {
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	807b      	strh	r3, [r7, #2]
    if ((od == NULL) || (od->size == 0U)) {
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <OD_find+0x1a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <OD_find+0x1e>
        return NULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e046      	b.n	8001b1c <OD_find+0xac>
    }

    uint16_t min = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1U;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. If Object
     * Dictionary has up to N entries, then the max number of loop passes is log2(N) */
    while (min < max) {
 8001a9a:	e026      	b.n	8001aea <OD_find+0x7a>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 8001a9c:	8afa      	ldrh	r2, [r7, #22]
 8001a9e:	8abb      	ldrh	r3, [r7, #20]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	105b      	asrs	r3, r3, #1
 8001aa4:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6859      	ldr	r1, [r3, #4]
 8001aaa:	89fa      	ldrh	r2, [r7, #14]
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) {
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	887a      	ldrh	r2, [r7, #2]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d101      	bne.n	8001ac6 <OD_find+0x56>
            return entry;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	e02a      	b.n	8001b1c <OD_find+0xac>
        }

        if (index < entry->index) {
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	887a      	ldrh	r2, [r7, #2]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d209      	bcs.n	8001ae4 <OD_find+0x74>
            max = (cur > 0U) ? (cur - 1U) : cur;
 8001ad0:	89fb      	ldrh	r3, [r7, #14]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <OD_find+0x6e>
 8001ad6:	89fb      	ldrh	r3, [r7, #14]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	e000      	b.n	8001ae0 <OD_find+0x70>
 8001ade:	89fb      	ldrh	r3, [r7, #14]
 8001ae0:	82bb      	strh	r3, [r7, #20]
 8001ae2:	e002      	b.n	8001aea <OD_find+0x7a>
        } else {
            min = cur + 1U;
 8001ae4:	89fb      	ldrh	r3, [r7, #14]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	82fb      	strh	r3, [r7, #22]
    while (min < max) {
 8001aea:	8afa      	ldrh	r2, [r7, #22]
 8001aec:	8abb      	ldrh	r3, [r7, #20]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d3d4      	bcc.n	8001a9c <OD_find+0x2c>
        }
    }

    if (min == max) {
 8001af2:	8afa      	ldrh	r2, [r7, #22]
 8001af4:	8abb      	ldrh	r3, [r7, #20]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d10f      	bne.n	8001b1a <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6859      	ldr	r1, [r3, #4]
 8001afe:	8afa      	ldrh	r2, [r7, #22]
 8001b00:	4613      	mov	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	887a      	ldrh	r2, [r7, #2]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d101      	bne.n	8001b1a <OD_find+0xaa>
            return entry;
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	e000      	b.n	8001b1c <OD_find+0xac>
        }
    }

    return NULL; /* entry does not exist in OD */
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	371c      	adds	r7, #28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <OD_getSub>:

ODR_t
OD_getSub(const OD_entry_t* entry, uint8_t subIndex, OD_IO_t* io, bool_t odOrig) {
 8001b28:	b480      	push	{r7}
 8001b2a:	b08d      	sub	sp, #52	@ 0x34
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	460b      	mov	r3, r1
 8001b36:	72fb      	strb	r3, [r7, #11]
    if ((entry == NULL) || (entry->odObject == NULL)) {
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <OD_getSub+0x1e>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <OD_getSub+0x22>
        return ODR_IDX_NOT_EXIST;
 8001b46:	2305      	movs	r3, #5
 8001b48:	e0e7      	b.n	8001d1a <OD_getSub+0x1f2>
    }
    if (io == NULL) {
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <OD_getSub+0x2c>
        return ODR_DEV_INCOMPAT;
 8001b50:	2309      	movs	r3, #9
 8001b52:	e0e2      	b.n	8001d1a <OD_getSub+0x1f2>
    }

    ODR_t ret = ODR_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    OD_stream_t* stream = &io->stream;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	623b      	str	r3, [r7, #32]

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & (uint8_t)ODT_TYPE_MASK) {
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	78db      	ldrb	r3, [r3, #3]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d055      	beq.n	8001c16 <OD_getSub+0xee>
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	f300 8093 	bgt.w	8001c96 <OD_getSub+0x16e>
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d002      	beq.n	8001b7a <OD_getSub+0x52>
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d017      	beq.n	8001ba8 <OD_getSub+0x80>
 8001b78:	e08d      	b.n	8001c96 <OD_getSub+0x16e>
        case ODT_VAR: {
            if (subIndex > 0U) {
 8001b7a:	7afb      	ldrb	r3, [r7, #11]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <OD_getSub+0x60>
                ret = ODR_SUB_NOT_EXIST;
 8001b80:	230e      	movs	r3, #14
 8001b82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                break;
 8001b86:	e08a      	b.n	8001c9e <OD_getSub+0x176>
            }
            CO_PROGMEM OD_obj_var_t* odo = entry->odObject;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	613b      	str	r3, [r7, #16]

            stream->attribute = odo->attribute;
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	791a      	ldrb	r2, [r3, #4]
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig;
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	601a      	str	r2, [r3, #0]
            stream->dataLength = odo->dataLength;
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	609a      	str	r2, [r3, #8]
            break;
 8001ba6:	e07a      	b.n	8001c9e <OD_getSub+0x176>
        }
        case ODT_ARR: {
            if (subIndex >= entry->subEntriesCount) {
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	789b      	ldrb	r3, [r3, #2]
 8001bac:	7afa      	ldrb	r2, [r7, #11]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d303      	bcc.n	8001bba <OD_getSub+0x92>
                ret = ODR_SUB_NOT_EXIST;
 8001bb2:	230e      	movs	r3, #14
 8001bb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                break;
 8001bb8:	e071      	b.n	8001c9e <OD_getSub+0x176>
            }
            CO_PROGMEM OD_obj_array_t* odo = entry->odObject;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	61bb      	str	r3, [r7, #24]

            if (subIndex == 0U) {
 8001bc0:	7afb      	ldrb	r3, [r7, #11]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10b      	bne.n	8001bde <OD_getSub+0xb6>
                stream->attribute = odo->attribute0;
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	7a1a      	ldrb	r2, [r3, #8]
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	741a      	strb	r2, [r3, #16]
                stream->dataOrig = odo->dataOrig0;
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	601a      	str	r2, [r3, #0]
                stream->dataLength = 1;
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	609a      	str	r2, [r3, #8]
                stream->attribute = odo->attribute;
                uint8_t* ptr = odo->dataOrig;
                stream->dataOrig = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
                stream->dataLength = odo->dataElementLength;
            }
            break;
 8001bdc:	e05f      	b.n	8001c9e <OD_getSub+0x176>
                stream->attribute = odo->attribute;
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	7a5a      	ldrb	r2, [r3, #9]
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	741a      	strb	r2, [r3, #16]
                uint8_t* ptr = odo->dataOrig;
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	617b      	str	r3, [r7, #20]
                stream->dataOrig = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d009      	beq.n	8001c06 <OD_getSub+0xde>
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	7afa      	ldrb	r2, [r7, #11]
 8001bf8:	3a01      	subs	r2, #1
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	fb02 f303 	mul.w	r3, r2, r3
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	4413      	add	r3, r2
 8001c04:	e000      	b.n	8001c08 <OD_getSub+0xe0>
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	6a3a      	ldr	r2, [r7, #32]
 8001c0a:	6013      	str	r3, [r2, #0]
                stream->dataLength = odo->dataElementLength;
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	6a3b      	ldr	r3, [r7, #32]
 8001c12:	609a      	str	r2, [r3, #8]
            break;
 8001c14:	e043      	b.n	8001c9e <OD_getSub+0x176>
        }
        case ODT_REC: {
            CO_PROGMEM OD_obj_record_t* odoArr = entry->odObject;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	61fb      	str	r3, [r7, #28]
            CO_PROGMEM OD_obj_record_t* odo = NULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
            for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001c20:	2300      	movs	r3, #0
 8001c22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001c26:	e01c      	b.n	8001c62 <OD_getSub+0x13a>
                if (odoArr[i].subIndex == subIndex) {
 8001c28:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	461a      	mov	r2, r3
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	4413      	add	r3, r2
 8001c3a:	791b      	ldrb	r3, [r3, #4]
 8001c3c:	7afa      	ldrb	r2, [r7, #11]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d10a      	bne.n	8001c58 <OD_getSub+0x130>
                    odo = &odoArr[i];
 8001c42:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001c46:	4613      	mov	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	461a      	mov	r2, r3
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	4413      	add	r3, r2
 8001c54:	62bb      	str	r3, [r7, #40]	@ 0x28
                    break;
 8001c56:	e00a      	b.n	8001c6e <OD_getSub+0x146>
            for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001c58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	789b      	ldrb	r3, [r3, #2]
 8001c66:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d3dc      	bcc.n	8001c28 <OD_getSub+0x100>
                }
            }
            if (odo == NULL) {
 8001c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d103      	bne.n	8001c7c <OD_getSub+0x154>
                ret = ODR_SUB_NOT_EXIST;
 8001c74:	230e      	movs	r3, #14
 8001c76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                break;
 8001c7a:	e010      	b.n	8001c9e <OD_getSub+0x176>
            }

            stream->attribute = odo->attribute;
 8001c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c7e:	795a      	ldrb	r2, [r3, #5]
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig;
 8001c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	601a      	str	r2, [r3, #0]
            stream->dataLength = odo->dataLength;
 8001c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	609a      	str	r2, [r3, #8]
            break;
 8001c94:	e003      	b.n	8001c9e <OD_getSub+0x176>
        }
        default: {
            ret = ODR_DEV_INCOMPAT;
 8001c96:	2309      	movs	r3, #9
 8001c98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 8001c9c:	bf00      	nop
        }
    }

    if (ret == ODR_OK) {
 8001c9e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d137      	bne.n	8001d16 <OD_getSub+0x1ee>
        /* Access data from the original OD location */
        if ((entry->extension == NULL) || odOrig) {
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <OD_getSub+0x18c>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d009      	beq.n	8001cc8 <OD_getSub+0x1a0>
            io->read = OD_readOriginal;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001d28 <OD_getSub+0x200>)
 8001cb8:	619a      	str	r2, [r3, #24]
            io->write = OD_writeOriginal;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d2c <OD_getSub+0x204>)
 8001cbe:	61da      	str	r2, [r3, #28]
            stream->object = NULL;
 8001cc0:	6a3b      	ldr	r3, [r7, #32]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	e01c      	b.n	8001d02 <OD_getSub+0x1da>
        }
        /* Access data from extension specified by application */
        else {
            io->read = (entry->extension->read != NULL) ? entry->extension->read : OD_readDisabled;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <OD_getSub+0x1b2>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	e000      	b.n	8001cdc <OD_getSub+0x1b4>
 8001cda:	4b15      	ldr	r3, [pc, #84]	@ (8001d30 <OD_getSub+0x208>)
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6193      	str	r3, [r2, #24]
            io->write = (entry->extension->write != NULL) ? entry->extension->write : OD_writeDisabled;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <OD_getSub+0x1ca>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	e000      	b.n	8001cf4 <OD_getSub+0x1cc>
 8001cf2:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <OD_getSub+0x20c>)
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	61d3      	str	r3, [r2, #28]
            stream->object = entry->extension->object;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	605a      	str	r2, [r3, #4]
        }

        /* Reset stream data offset */
        stream->dataOffset = 0;
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	2200      	movs	r2, #0
 8001d06:	60da      	str	r2, [r3, #12]

        /* Add informative data */
        stream->index = entry->index;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	881a      	ldrh	r2, [r3, #0]
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	825a      	strh	r2, [r3, #18]
        stream->subIndex = subIndex;
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	7afa      	ldrb	r2, [r7, #11]
 8001d14:	751a      	strb	r2, [r3, #20]
    }

    return ret;
 8001d16:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3734      	adds	r7, #52	@ 0x34
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	080018af 	.word	0x080018af
 8001d2c:	0800195f 	.word	0x0800195f
 8001d30:	08001a39 	.word	0x08001a39
 8001d34:	08001a55 	.word	0x08001a55

08001d38 <OD_getSDOabCode>:

uint32_t
OD_getSDOabCode(ODR_t returnCode) {
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
        0x08000022UL, /* Data cannot be tran. because of present device state */
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return ((returnCode < ODR_OK) || (returnCode >= ODR_COUNT)) ? abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	db03      	blt.n	8001d52 <OD_getSDOabCode+0x1a>
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	2b19      	cmp	r3, #25
 8001d50:	dd02      	ble.n	8001d58 <OD_getSDOabCode+0x20>
 8001d52:	4b07      	ldr	r3, [pc, #28]	@ (8001d70 <OD_getSDOabCode+0x38>)
 8001d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d56:	e004      	b.n	8001d62 <OD_getSDOabCode+0x2a>
 8001d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5c:	4a04      	ldr	r2, [pc, #16]	@ (8001d70 <OD_getSDOabCode+0x38>)
 8001d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	0800bbf8 	.word	0x0800bbf8

08001d74 <OD_get_value>:

ODR_t
OD_get_value(const OD_entry_t* entry, uint8_t subIndex, void* val, OD_size_t len, bool_t odOrig) {
 8001d74:	b590      	push	{r4, r7, lr}
 8001d76:	b091      	sub	sp, #68	@ 0x44
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	460b      	mov	r3, r1
 8001d82:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) {
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <OD_get_value+0x1a>
        return ODR_DEV_INCOMPAT;
 8001d8a:	2309      	movs	r3, #9
 8001d8c:	e02b      	b.n	8001de6 <OD_get_value+0x72>
    }

    OD_IO_t io = {NULL};
 8001d8e:	f107 0318 	add.w	r3, r7, #24
 8001d92:	2220      	movs	r2, #32
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f009 fa06 	bl	800b1a8 <memset>
    OD_stream_t* stream = &io.stream;
 8001d9c:	f107 0318 	add.w	r3, r7, #24
 8001da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    OD_size_t countRd = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001da6:	f107 0218 	add.w	r2, r7, #24
 8001daa:	7af9      	ldrb	r1, [r7, #11]
 8001dac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f7ff feba 	bl	8001b28 <OD_getSub>
 8001db4:	4603      	mov	r3, r0
 8001db6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    if (ret != ODR_OK) {
 8001dba:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <OD_get_value+0x54>
        return ret;
 8001dc2:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8001dc6:	e00e      	b.n	8001de6 <OD_get_value+0x72>
    }
    if (stream->dataLength != len) {
 8001dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d001      	beq.n	8001dd6 <OD_get_value+0x62>
        return ODR_TYPE_MISMATCH;
 8001dd2:	230b      	movs	r3, #11
 8001dd4:	e007      	b.n	8001de6 <OD_get_value+0x72>
    }

    return io.read(stream, val, len, &countRd);
 8001dd6:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001de2:	47a0      	blx	r4
 8001de4:	4603      	mov	r3, r0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3744      	adds	r7, #68	@ 0x44
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd90      	pop	{r4, r7, pc}

08001dee <OD_set_value>:

ODR_t
OD_set_value(const OD_entry_t* entry, uint8_t subIndex, void* val, OD_size_t len, bool_t odOrig) {
 8001dee:	b590      	push	{r4, r7, lr}
 8001df0:	b091      	sub	sp, #68	@ 0x44
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) {
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <OD_set_value+0x1a>
        return ODR_DEV_INCOMPAT;
 8001e04:	2309      	movs	r3, #9
 8001e06:	e02b      	b.n	8001e60 <OD_set_value+0x72>
    }

    OD_IO_t io = {NULL};
 8001e08:	f107 0318 	add.w	r3, r7, #24
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4618      	mov	r0, r3
 8001e12:	f009 f9c9 	bl	800b1a8 <memset>
    OD_stream_t* stream = &io.stream;
 8001e16:	f107 0318 	add.w	r3, r7, #24
 8001e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    OD_size_t countWritten = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001e20:	f107 0218 	add.w	r2, r7, #24
 8001e24:	7af9      	ldrb	r1, [r7, #11]
 8001e26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f7ff fe7d 	bl	8001b28 <OD_getSub>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    if (ret != ODR_OK) {
 8001e34:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d002      	beq.n	8001e42 <OD_set_value+0x54>
        return ret;
 8001e3c:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8001e40:	e00e      	b.n	8001e60 <OD_set_value+0x72>
    }
    if (stream->dataLength != len) {
 8001e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <OD_set_value+0x62>
        return ODR_TYPE_MISMATCH;
 8001e4c:	230b      	movs	r3, #11
 8001e4e:	e007      	b.n	8001e60 <OD_set_value+0x72>
    }

    return io.write(stream, val, len, &countWritten);
 8001e50:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001e5c:	47a0      	blx	r4
 8001e5e:	4603      	mov	r3, r0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3744      	adds	r7, #68	@ 0x44
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd90      	pop	{r4, r7, pc}

08001e68 <OD_getPtr>:

void*
OD_getPtr(const OD_entry_t* entry, uint8_t subIndex, OD_size_t len, ODR_t* err) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08e      	sub	sp, #56	@ 0x38
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	603b      	str	r3, [r7, #0]
 8001e74:	460b      	mov	r3, r1
 8001e76:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t* stream = &io.stream;
 8001e78:	f107 0310 	add.w	r3, r7, #16
 8001e7c:	633b      	str	r3, [r7, #48]	@ 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8001e7e:	f107 0210 	add.w	r2, r7, #16
 8001e82:	7af9      	ldrb	r1, [r7, #11]
 8001e84:	2301      	movs	r3, #1
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f7ff fe4e 	bl	8001b28 <OD_getSub>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (errCopy == ODR_OK) {
 8001e92:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d116      	bne.n	8001ec8 <OD_getPtr+0x60>
        if ((stream->dataOrig == NULL) || (stream->dataLength == 0U)) {
 8001e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <OD_getPtr+0x42>
 8001ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d103      	bne.n	8001eb2 <OD_getPtr+0x4a>
            errCopy = ODR_DEV_INCOMPAT;
 8001eaa:	2309      	movs	r3, #9
 8001eac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001eb0:	e00a      	b.n	8001ec8 <OD_getPtr+0x60>
        } else if ((len != 0U) && (len != stream->dataLength)) {
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d007      	beq.n	8001ec8 <OD_getPtr+0x60>
 8001eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d002      	beq.n	8001ec8 <OD_getPtr+0x60>
            errCopy = ODR_TYPE_MISMATCH;
 8001ec2:	230b      	movs	r3, #11
 8001ec4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        } else { /* MISRA C 2004 14.10 */
        }
    }

    if (err != NULL) {
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <OD_getPtr+0x6e>
        *err = errCopy;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001ed4:	701a      	strb	r2, [r3, #0]
    }

    return (errCopy == ODR_OK) ? stream->dataOrig : NULL;
 8001ed6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d102      	bne.n	8001ee4 <OD_getPtr+0x7c>
 8001ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	e000      	b.n	8001ee6 <OD_getPtr+0x7e>
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3738      	adds	r7, #56	@ 0x38
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <CO_getUint8>:
CO_getUint8(const void* buf) {
 8001eee:	b480      	push	{r7}
 8001ef0:	b085      	sub	sp, #20
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	73fb      	strb	r3, [r7, #15]
    return value;
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <CO_getUint16>:
CO_getUint16(const void* buf) {
 8001f0a:	b480      	push	{r7}
 8001f0c:	b085      	sub	sp, #20
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	81fb      	strh	r3, [r7, #14]
    return value;
 8001f1a:	89fb      	ldrh	r3, [r7, #14]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60fb      	str	r3, [r7, #12]
    return value;
 8001f36:	68fb      	ldr	r3, [r7, #12]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <CO_setUint32>:
CO_setUint32(void* buf, uint32_t value) {
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8001f54:	2304      	movs	r3, #4
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <OD_getIndex+0x14>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	e000      	b.n	8001f78 <OD_getIndex+0x16>
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8001f94:	2305      	movs	r3, #5
 8001f96:	e003      	b.n	8001fa0 <OD_extension_init+0x1c>
    entry->extension = extension;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af02      	add	r7, sp, #8
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001fbc:	7af9      	ldrb	r1, [r7, #11]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f7ff fed4 	bl	8001d74 <OD_get_value>
 8001fcc:	4603      	mov	r3, r0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <OD_get_u16>:
OD_get_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t* val, bool_t odOrig) {
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af02      	add	r7, sp, #8
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	603b      	str	r3, [r7, #0]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001fe6:	7af9      	ldrb	r1, [r7, #11]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	2302      	movs	r3, #2
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f7ff febf 	bl	8001d74 <OD_get_value>
 8001ff6:	4603      	mov	r3, r0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af02      	add	r7, sp, #8
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	460b      	mov	r3, r1
 800200e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002010:	7af9      	ldrb	r1, [r7, #11]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2304      	movs	r3, #4
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f7ff feaa 	bl	8001d74 <OD_get_value>
 8002020:	4603      	mov	r3, r0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <OD_write_dummy>:
 * Custom function for write dummy OD object. Will be used only from RPDO.
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_dummy(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800202a:	b480      	push	{r7}
 800202c:	b085      	sub	sp, #20
 800202e:	af00      	add	r7, sp, #0
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    if (countWritten != NULL) {
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d002      	beq.n	8002044 <OD_write_dummy+0x1a>
        *countWritten = count;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	601a      	str	r2, [r3, #0]
    }
    return ODR_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <OD_read_dummy>:
 * Custom function for read dummy OD object. Will be used only from TPDO.
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_dummy(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8002052:	b580      	push	{r7, lr}
 8002054:	b084      	sub	sp, #16
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	603b      	str	r3, [r7, #0]
    if ((buf == NULL) || (stream == NULL) || (countRead == NULL)) {
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d005      	beq.n	8002072 <OD_read_dummy+0x20>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d002      	beq.n	8002072 <OD_read_dummy+0x20>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8002072:	2309      	movs	r3, #9
 8002074:	e010      	b.n	8002098 <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	d902      	bls.n	8002086 <OD_read_dummy+0x34>
        count = stream->dataLength;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	607b      	str	r3, [r7, #4]
    }

    (void)memset(buf, 0, count);
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	2100      	movs	r1, #0
 800208a:	68b8      	ldr	r0, [r7, #8]
 800208c:	f009 f88c 	bl	800b1a8 <memset>

    *countRead = count;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <PDOconfigMap>:
 * @param OD Object Dictionary.
 *
 * @return ODR_OK on success, otherwise error reason.
 */
static ODR_t
PDOconfigMap(CO_PDO_common_t* PDO, uint32_t map, uint8_t mapIndex, bool_t isRPDO, OD_t* OD) {
 80020a0:	b5b0      	push	{r4, r5, r7, lr}
 80020a2:	b092      	sub	sp, #72	@ 0x48
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	4613      	mov	r3, r2
 80020ae:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t)(map >> 16);
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	0c1b      	lsrs	r3, r3, #16
 80020b4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint8_t subIndex = (uint8_t)(map >> 8);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t mappedLengthBits = (uint8_t)map;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t mappedLength = mappedLengthBits >> 3;
 80020c6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80020ca:	08db      	lsrs	r3, r3, #3
 80020cc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    OD_IO_t* OD_IO = &PDO->OD_IO[mapIndex];
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	015b      	lsls	r3, r3, #5
 80020d4:	3310      	adds	r3, #16
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4413      	add	r3, r2
 80020da:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 80020dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d901      	bls.n	80020e8 <PDOconfigMap+0x48>
        return ODR_MAP_LEN; /* PDO length exceeded */
 80020e4:	2307      	movs	r3, #7
 80020e6:	e090      	b.n	800220a <PDOconfigMap+0x16a>
    }

    /* is there a reference to the dummy entry */
    if ((index < 0x20U) && (subIndex == 0U)) {
 80020e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80020ec:	2b1f      	cmp	r3, #31
 80020ee:	d81a      	bhi.n	8002126 <PDOconfigMap+0x86>
 80020f0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d116      	bne.n	8002126 <PDOconfigMap+0x86>
        OD_stream_t* stream = &OD_IO->stream;
 80020f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020fa:	63bb      	str	r3, [r7, #56]	@ 0x38
        (void)memset(stream, 0, sizeof(OD_stream_t));
 80020fc:	2218      	movs	r2, #24
 80020fe:	2100      	movs	r1, #0
 8002100:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002102:	f009 f851 	bl	800b1a8 <memset>
        stream->dataLength = mappedLength;
 8002106:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800210a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800210c:	609a      	str	r2, [r3, #8]
        stream->dataOffset = mappedLength;
 800210e:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8002112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002114:	60da      	str	r2, [r3, #12]
        OD_IO->read = OD_read_dummy;
 8002116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002118:	4a3e      	ldr	r2, [pc, #248]	@ (8002214 <PDOconfigMap+0x174>)
 800211a:	619a      	str	r2, [r3, #24]
        OD_IO->write = OD_write_dummy;
 800211c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800211e:	4a3e      	ldr	r2, [pc, #248]	@ (8002218 <PDOconfigMap+0x178>)
 8002120:	61da      	str	r2, [r3, #28]
        return ODR_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	e071      	b.n	800220a <PDOconfigMap+0x16a>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t* entry = OD_find(OD, index);
 8002126:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800212a:	4619      	mov	r1, r3
 800212c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800212e:	f7ff fc9f 	bl	8001a70 <OD_find>
 8002132:	6378      	str	r0, [r7, #52]	@ 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 8002134:	f107 0210 	add.w	r2, r7, #16
 8002138:	f897 1045 	ldrb.w	r1, [r7, #69]	@ 0x45
 800213c:	2300      	movs	r3, #0
 800213e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002140:	f7ff fcf2 	bl	8001b28 <OD_getSub>
 8002144:	4603      	mov	r3, r0
 8002146:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (odRet != ODR_OK) {
 800214a:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800214e:	2b00      	cmp	r3, #0
 8002150:	d002      	beq.n	8002158 <PDOconfigMap+0xb8>
        return odRet;
 8002152:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002156:	e058      	b.n	800220a <PDOconfigMap+0x16a>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? (OD_attr_t)(ODA_RPDO) : (OD_attr_t)(ODA_TPDO);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <PDOconfigMap+0xc2>
 800215e:	2308      	movs	r3, #8
 8002160:	e000      	b.n	8002164 <PDOconfigMap+0xc4>
 8002162:	2304      	movs	r3, #4
 8002164:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    if (((OD_IOcopy.stream.attribute & testAttribute) == 0U) || ((mappedLengthBits & 0x07U) != 0U)
 8002168:	f897 2020 	ldrb.w	r2, [r7, #32]
 800216c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002170:	4013      	ands	r3, r2
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <PDOconfigMap+0xee>
 8002178:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	2b00      	cmp	r3, #0
 8002182:	d104      	bne.n	800218e <PDOconfigMap+0xee>
        || (OD_IOcopy.stream.dataLength < mappedLength)) {
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800218a:	429a      	cmp	r2, r3
 800218c:	d201      	bcs.n	8002192 <PDOconfigMap+0xf2>
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 800218e:	2306      	movs	r3, #6
 8002190:	e03b      	b.n	800220a <PDOconfigMap+0x16a>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 8002192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002194:	461d      	mov	r5, r3
 8002196:	f107 0410 	add.w	r4, r7, #16
 800219a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800219c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800219e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    OD_IO->stream.dataOffset = mappedLength;
 80021a6:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80021aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021ac:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d129      	bne.n	8002208 <PDOconfigMap+0x168>
        if ((subIndex < (OD_FLAGS_PDO_SIZE * 8U)) && (entry->extension != NULL)) {
 80021b4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80021b8:	2b1f      	cmp	r3, #31
 80021ba:	d81f      	bhi.n	80021fc <PDOconfigMap+0x15c>
 80021bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d01b      	beq.n	80021fc <PDOconfigMap+0x15c>
            PDO->flagPDObyte[mapIndex] = &entry->extension->flagsPDO[subIndex >> 3];
 80021c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021c6:	6899      	ldr	r1, [r3, #8]
 80021c8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80021cc:	08db      	lsrs	r3, r3, #3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	79fa      	ldrb	r2, [r7, #7]
 80021d2:	3308      	adds	r3, #8
 80021d4:	440b      	add	r3, r1
 80021d6:	1d19      	adds	r1, r3, #4
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	3244      	adds	r2, #68	@ 0x44
 80021dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1U << (subIndex & 0x07U);
 80021e0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	2201      	movs	r2, #1
 80021ea:	409a      	lsls	r2, r3
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	b2d1      	uxtb	r1, r2
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4413      	add	r3, r2
 80021f4:	460a      	mov	r2, r1
 80021f6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 80021fa:	e005      	b.n	8002208 <PDOconfigMap+0x168>
        } else {
            PDO->flagPDObyte[mapIndex] = NULL;
 80021fc:	79fa      	ldrb	r2, [r7, #7]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	3244      	adds	r2, #68	@ 0x44
 8002202:	2100      	movs	r1, #0
 8002204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3748      	adds	r7, #72	@ 0x48
 800220e:	46bd      	mov	sp, r7
 8002210:	bdb0      	pop	{r4, r5, r7, pc}
 8002212:	bf00      	nop
 8002214:	08002053 	.word	0x08002053
 8002218:	0800202b 	.word	0x0800202b

0800221c <PDO_initMapping>:
 *
 * @return #CO_ReturnError_t CO_ERROR_NO on success.
 */
static CO_ReturnError_t
PDO_initMapping(CO_PDO_common_t* PDO, OD_t* OD, OD_entry_t* OD_PDOMapPar, bool_t isRPDO, uint32_t* errInfo,
                uint32_t* erroneousMap) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b08c      	sub	sp, #48	@ 0x30
 8002220:	af02      	add	r7, sp, #8
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t mappedObjectsCount = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 8002232:	f107 021b 	add.w	r2, r7, #27
 8002236:	2301      	movs	r3, #1
 8002238:	2100      	movs	r1, #0
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff feb6 	bl	8001fac <OD_get_u8>
 8002240:	4603      	mov	r3, r0
 8002242:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 8002246:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00c      	beq.n	8002268 <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 800224e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002250:	2b00      	cmp	r3, #0
 8002252:	d006      	beq.n	8002262 <PDO_initMapping+0x46>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff fe84 	bl	8001f62 <OD_getIndex>
 800225a:	4603      	mov	r3, r0
 800225c:	021a      	lsls	r2, r3, #8
 800225e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002260:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002262:	f06f 030b 	mvn.w	r3, #11
 8002266:	e07f      	b.n	8002368 <PDO_initMapping+0x14c>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8002268:	2300      	movs	r3, #0
 800226a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800226e:	e05b      	b.n	8002328 <PDO_initMapping+0x10c>
        OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8002270:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002274:	015b      	lsls	r3, r3, #5
 8002276:	3310      	adds	r3, #16
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	4413      	add	r3, r2
 800227c:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1U, &map, true);
 8002282:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002286:	3301      	adds	r3, #1
 8002288:	b2d9      	uxtb	r1, r3
 800228a:	f107 0214 	add.w	r2, r7, #20
 800228e:	2301      	movs	r3, #1
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff feb5 	bl	8002000 <OD_get_u32>
 8002296:	4603      	mov	r3, r0
 8002298:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 800229c:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80022a0:	2b0e      	cmp	r3, #14
 80022a2:	d03b      	beq.n	800231c <PDO_initMapping+0x100>
            continue;
        }
        if (odRet != ODR_OK) {
 80022a4:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00f      	beq.n	80022cc <PDO_initMapping+0xb0>
            if (errInfo != NULL) {
 80022ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d009      	beq.n	80022c6 <PDO_initMapping+0xaa>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8) | i;
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff fe55 	bl	8001f62 <OD_getIndex>
 80022b8:	4603      	mov	r3, r0
 80022ba:	021a      	lsls	r2, r3, #8
 80022bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022c0:	431a      	orrs	r2, r3
 80022c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c4:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 80022c6:	f06f 030b 	mvn.w	r3, #11
 80022ca:	e04d      	b.n	8002368 <PDO_initMapping+0x14c>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 80022cc:	6979      	ldr	r1, [r7, #20]
 80022ce:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f7ff fee1 	bl	80020a0 <PDOconfigMap>
 80022de:	4603      	mov	r3, r0
 80022e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (odRet != ODR_OK) {
 80022e4:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00c      	beq.n	8002306 <PDO_initMapping+0xea>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	22ff      	movs	r2, #255	@ 0xff
 80022f6:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0U) {
 80022f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d102      	bne.n	8002306 <PDO_initMapping+0xea>
                *erroneousMap = map;
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002304:	601a      	str	r2, [r3, #0]
            }
        }

        if (i < mappedObjectsCount) {
 8002306:	7efb      	ldrb	r3, [r7, #27]
 8002308:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800230c:	429a      	cmp	r2, r3
 800230e:	d206      	bcs.n	800231e <PDO_initMapping+0x102>
            pdoDataLength += OD_IO->stream.dataOffset;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002316:	4413      	add	r3, r2
 8002318:	627b      	str	r3, [r7, #36]	@ 0x24
 800231a:	e000      	b.n	800231e <PDO_initMapping+0x102>
            continue;
 800231c:	bf00      	nop
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 800231e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002322:	3301      	adds	r3, #1
 8002324:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002328:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800232c:	2b07      	cmp	r3, #7
 800232e:	d99f      	bls.n	8002270 <PDO_initMapping+0x54>
        }
    }
    if ((pdoDataLength > CO_PDO_MAX_SIZE) || ((pdoDataLength == 0U) && (mappedObjectsCount > 0U))) {
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	2b08      	cmp	r3, #8
 8002334:	d805      	bhi.n	8002342 <PDO_initMapping+0x126>
 8002336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002338:	2b00      	cmp	r3, #0
 800233a:	d109      	bne.n	8002350 <PDO_initMapping+0x134>
 800233c:	7efb      	ldrb	r3, [r7, #27]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d006      	beq.n	8002350 <PDO_initMapping+0x134>
        if (*erroneousMap == 0U) {
 8002342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d102      	bne.n	8002350 <PDO_initMapping+0x134>
            *erroneousMap = 1;
 800234a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800234c:	2201      	movs	r2, #1
 800234e:	601a      	str	r2, [r3, #0]
        }
    }

    if (*erroneousMap == 0U) {
 8002350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d106      	bne.n	8002366 <PDO_initMapping+0x14a>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8002358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235a:	b2da      	uxtb	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8002360:	7efa      	ldrb	r2, [r7, #27]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3728      	adds	r7, #40	@ 0x28
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <OD_write_PDO_mapping>:
 * Custom function for writing OD object "PDO mapping parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_PDO_mapping(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002370:	b580      	push	{r7, lr}
 8002372:	b08e      	sub	sp, #56	@ 0x38
 8002374:	af02      	add	r7, sp, #8
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES)) {
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d009      	beq.n	8002398 <OD_write_PDO_mapping+0x28>
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d006      	beq.n	8002398 <OD_write_PDO_mapping+0x28>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <OD_write_PDO_mapping+0x28>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	7d1b      	ldrb	r3, [r3, #20]
 8002394:	2b08      	cmp	r3, #8
 8002396:	d901      	bls.n	800239c <OD_write_PDO_mapping+0x2c>
        return ODR_DEV_INCOMPAT;
 8002398:	2309      	movs	r3, #9
 800239a:	e07e      	b.n	800249a <OD_write_PDO_mapping+0x12a>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t* PDO = stream->object;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* PDO must be disabled before mapping configuration */
    if ((PDO->valid) || ((PDO->mappedObjectsCount != 0U) && (stream->subIndex > 0U))) {
 80023a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d107      	bne.n	80023ba <OD_write_PDO_mapping+0x4a>
 80023aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ac:	7b5b      	ldrb	r3, [r3, #13]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <OD_write_PDO_mapping+0x4e>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	7d1b      	ldrb	r3, [r3, #20]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 80023ba:	2302      	movs	r3, #2
 80023bc:	e06d      	b.n	800249a <OD_write_PDO_mapping+0x12a>
    }

    if (stream->subIndex == 0U) {
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	7d1b      	ldrb	r3, [r3, #20]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d145      	bne.n	8002452 <OD_write_PDO_mapping+0xe2>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 80023c6:	68b8      	ldr	r0, [r7, #8]
 80023c8:	f7ff fd91 	bl	8001eee <CO_getUint8>
 80023cc:	4603      	mov	r3, r0
 80023ce:	77bb      	strb	r3, [r7, #30]
        size_t pdoDataLength = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 80023d4:	7fbb      	ldrb	r3, [r7, #30]
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d901      	bls.n	80023de <OD_write_PDO_mapping+0x6e>
            return ODR_MAP_LEN;
 80023da:	2307      	movs	r3, #7
 80023dc:	e05d      	b.n	800249a <OD_write_PDO_mapping+0x12a>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 80023de:	2300      	movs	r3, #0
 80023e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023e4:	e01b      	b.n	800241e <OD_write_PDO_mapping+0xae>
            OD_IO_t* OD_IO = &PDO->OD_IO[i];
 80023e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80023ea:	015b      	lsls	r3, r3, #5
 80023ec:	3310      	adds	r3, #16
 80023ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023f0:	4413      	add	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
            size_t dataLength = (size_t)OD_IO->stream.dataLength;
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	617b      	str	r3, [r7, #20]
            size_t mappedLength = (size_t)OD_IO->stream.dataOffset;
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	613b      	str	r3, [r7, #16]

            if (mappedLength > dataLength) {
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	429a      	cmp	r2, r3
 8002406:	d901      	bls.n	800240c <OD_write_PDO_mapping+0x9c>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 8002408:	2306      	movs	r3, #6
 800240a:	e046      	b.n	800249a <OD_write_PDO_mapping+0x12a>
            }
            pdoDataLength += mappedLength;
 800240c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4413      	add	r3, r2
 8002412:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8002414:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002418:	3301      	adds	r3, #1
 800241a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800241e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8002422:	7fbb      	ldrb	r3, [r7, #30]
 8002424:	429a      	cmp	r2, r3
 8002426:	d3de      	bcc.n	80023e6 <OD_write_PDO_mapping+0x76>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 8002428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800242a:	2b08      	cmp	r3, #8
 800242c:	d901      	bls.n	8002432 <OD_write_PDO_mapping+0xc2>
            return ODR_MAP_LEN;
 800242e:	2307      	movs	r3, #7
 8002430:	e033      	b.n	800249a <OD_write_PDO_mapping+0x12a>
        }
        if ((pdoDataLength == 0U) && (mappedObjectsCount > 0U)) {
 8002432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002434:	2b00      	cmp	r3, #0
 8002436:	d104      	bne.n	8002442 <OD_write_PDO_mapping+0xd2>
 8002438:	7fbb      	ldrb	r3, [r7, #30]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <OD_write_PDO_mapping+0xd2>
            return ODR_INVALID_VALUE;
 800243e:	230f      	movs	r3, #15
 8002440:	e02b      	b.n	800249a <OD_write_PDO_mapping+0x12a>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8002442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002444:	b2da      	uxtb	r2, r3
 8002446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002448:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	7fba      	ldrb	r2, [r7, #30]
 800244e:	735a      	strb	r2, [r3, #13]
 8002450:	e01c      	b.n	800248c <OD_write_PDO_mapping+0x11c>
    } else {
        uint32_t val = CO_getUint32(buf);
 8002452:	68b8      	ldr	r0, [r7, #8]
 8002454:	f7ff fd68 	bl	8001f28 <CO_getUint32>
 8002458:	6238      	str	r0, [r7, #32]
        ODR_t odRet = PDOconfigMap(PDO, val, stream->subIndex - 1U, PDO->isRPDO, PDO->OD);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	7d1b      	ldrb	r3, [r3, #20]
 800245e:	3b01      	subs	r3, #1
 8002460:	b2da      	uxtb	r2, r3
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	f8d3 1138 	ldr.w	r1, [r3, #312]	@ 0x138
 8002468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246a:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	460b      	mov	r3, r1
 8002472:	6a39      	ldr	r1, [r7, #32]
 8002474:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002476:	f7ff fe13 	bl	80020a0 <PDOconfigMap>
 800247a:	4603      	mov	r3, r0
 800247c:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 800247e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <OD_write_PDO_mapping+0x11c>
            return odRet;
 8002486:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800248a:	e006      	b.n	800249a <OD_write_PDO_mapping+0x12a>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f7ff fa63 	bl	800195e <OD_writeOriginal>
 8002498:	4603      	mov	r3, r0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3730      	adds	r7, #48	@ 0x30
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <OD_read_PDO_commParam>:
 * Custom function for reading OD object "PDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_PDO_commParam(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b088      	sub	sp, #32
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f7ff f9f9 	bl	80018ae <OD_readOriginal>
 80024bc:	4603      	mov	r3, r0
 80024be:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if ((returnCode == ODR_OK) && (stream->subIndex == 1U) && (*countRead == 4U)) {
 80024c0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d134      	bne.n	8002532 <OD_read_PDO_commParam+0x90>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	7d1b      	ldrb	r3, [r3, #20]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d130      	bne.n	8002532 <OD_read_PDO_commParam+0x90>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d12c      	bne.n	8002532 <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t* PDO = stream->object;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 80024de:	68b8      	ldr	r0, [r7, #8]
 80024e0:	f7ff fd22 	bl	8001f28 <CO_getUint32>
 80024e4:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ee:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if ((CAN_ID != 0U) && (CAN_ID == (PDO->preDefinedCanId & 0xFF80U))) {
 80024f0:	8a7b      	ldrh	r3, [r7, #18]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d011      	beq.n	800251a <OD_read_PDO_commParam+0x78>
 80024f6:	8a7a      	ldrh	r2, [r7, #18]
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 80024fe:	4619      	mov	r1, r3
 8002500:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8002504:	400b      	ands	r3, r1
 8002506:	429a      	cmp	r2, r3
 8002508:	d107      	bne.n	800251a <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000U) | PDO->preDefinedCanId;
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	0c1b      	lsrs	r3, r3, #16
 800250e:	041b      	lsls	r3, r3, #16
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	f8b2 2142 	ldrh.w	r2, [r2, #322]	@ 0x142
 8002516:	4313      	orrs	r3, r2
 8002518:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) {
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d103      	bne.n	800252a <OD_read_PDO_commParam+0x88>
            COB_ID |= 0x80000000U;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002528:	61fb      	str	r3, [r7, #28]
        }

        (void)CO_setUint32(buf, COB_ID);
 800252a:	69f9      	ldr	r1, [r7, #28]
 800252c:	68b8      	ldr	r0, [r7, #8]
 800252e:	f7ff fd09 	bl	8001f44 <CO_setUint32>
    }

    return returnCode;
 8002532:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3720      	adds	r7, #32
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <CO_PDO_receive>:
 * will be received. For more information and description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by the new message.
 */
static void
CO_PDO_receive(void* object, void* msg) {
 800253e:	b580      	push	{r7, lr}
 8002540:	b088      	sub	sp, #32
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	6039      	str	r1, [r7, #0]
    CO_RPDO_t* RPDO = object;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	61bb      	str	r3, [r7, #24]
    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	791b      	ldrb	r3, [r3, #4]
 8002554:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	3305      	adds	r3, #5
 800255a:	60fb      	str	r3, [r7, #12]
    uint8_t err = RPDO->receiveError;
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8002562:	77fb      	strb	r3, [r7, #31]

    if (PDO->valid) {
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d03e      	beq.n	80025ea <CO_PDO_receive+0xac>
        if (DLC >= PDO->dataLength) {
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	7b1b      	ldrb	r3, [r3, #12]
 8002570:	7cfa      	ldrb	r2, [r7, #19]
 8002572:	429a      	cmp	r2, r3
 8002574:	d334      	bcc.n	80025e0 <CO_PDO_receive+0xa2>
            /* indicate errors in PDO length */
            if (DLC == PDO->dataLength) {
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	7b1b      	ldrb	r3, [r3, #12]
 800257a:	7cfa      	ldrb	r2, [r7, #19]
 800257c:	429a      	cmp	r2, r3
 800257e:	d105      	bne.n	800258c <CO_PDO_receive+0x4e>
                if (err == CO_RPDO_RX_ACK_ERROR) {
 8002580:	7ffb      	ldrb	r3, [r7, #31]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d107      	bne.n	8002596 <CO_PDO_receive+0x58>
                    err = CO_RPDO_RX_OK;
 8002586:	230b      	movs	r3, #11
 8002588:	77fb      	strb	r3, [r7, #31]
 800258a:	e004      	b.n	8002596 <CO_PDO_receive+0x58>
                }
            } else {
                if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 800258c:	7ffb      	ldrb	r3, [r7, #31]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <CO_PDO_receive+0x58>
                    err = CO_RPDO_RX_LONG;
 8002592:	230d      	movs	r3, #13
 8002594:	77fb      	strb	r3, [r7, #31]
                }
            }

            /* Determine, to which of the two rx buffers copy the message. */
            uint8_t bufNo = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	77bb      	strb	r3, [r7, #30]
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
            if (RPDO->synchronous && (RPDO->SYNC != NULL) && RPDO->SYNC->CANrxToggle) {
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00c      	beq.n	80025be <CO_PDO_receive+0x80>
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d007      	beq.n	80025be <CO_PDO_receive+0x80>
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <CO_PDO_receive+0x80>
                bufNo = 1;
 80025ba:	2301      	movs	r3, #1
 80025bc:	77bb      	strb	r3, [r7, #30]
            }
#endif

            /* copy data into appropriate buffer and set 'new message' flag */
            (void)memcpy(RPDO->CANrxData[bufNo], data, CO_PDO_MAX_SIZE);
 80025be:	7fbb      	ldrb	r3, [r7, #30]
 80025c0:	332e      	adds	r3, #46	@ 0x2e
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4413      	add	r3, r2
 80025c8:	2208      	movs	r2, #8
 80025ca:	68f9      	ldr	r1, [r7, #12]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f008 fe76 	bl	800b2be <memcpy>
            CO_FLAG_SET(RPDO->CANrxNew[bufNo]);
 80025d2:	7fba      	ldrb	r2, [r7, #30]
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	325a      	adds	r2, #90	@ 0x5a
 80025d8:	2101      	movs	r1, #1
 80025da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80025de:	e004      	b.n	80025ea <CO_PDO_receive+0xac>
            /* Optional signal to RTOS, which can resume task, which handles the RPDO. */
            if (RPDO->pFunctSignalPre != NULL) {
                RPDO->pFunctSignalPre(RPDO->functSignalObjectPre);
            }
#endif
        } else if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 80025e0:	7ffb      	ldrb	r3, [r7, #31]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <CO_PDO_receive+0xac>
            err = CO_RPDO_RX_SHORT;
 80025e6:	230c      	movs	r3, #12
 80025e8:	77fb      	strb	r3, [r7, #31]
        } else { /* MISRA C 2004 14.10 */
        }
    }

    RPDO->receiveError = err;
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	7ffa      	ldrb	r2, [r7, #31]
 80025ee:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
}
 80025f2:	bf00      	nop
 80025f4:	3720      	adds	r7, #32
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <OD_write_14xx>:
 * Custom function for writing OD object "RPDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_14xx(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b092      	sub	sp, #72	@ 0x48
 8002600:	af04      	add	r7, sp, #16
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (count > 4U)) {
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <OD_write_14xx+0x26>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <OD_write_14xx+0x26>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <OD_write_14xx+0x26>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b04      	cmp	r3, #4
 8002620:	d901      	bls.n	8002626 <OD_write_14xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8002622:	2309      	movs	r3, #9
 8002624:	e102      	b.n	800282c <OD_write_14xx+0x230>
    }

    CO_RPDO_t* RPDO = stream->object;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	633b      	str	r3, [r7, #48]	@ 0x30
    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 800262c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t bufCopy[4];
    (void)memcpy((void*)bufCopy, (const void*)buf, count);
 8002630:	f107 0310 	add.w	r3, r7, #16
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	68b9      	ldr	r1, [r7, #8]
 8002638:	4618      	mov	r0, r3
 800263a:	f008 fe40 	bl	800b2be <memcpy>

    switch (stream->subIndex) {
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	7d1b      	ldrb	r3, [r3, #20]
 8002642:	2b05      	cmp	r3, #5
 8002644:	f000 80d5 	beq.w	80027f2 <OD_write_14xx+0x1f6>
 8002648:	2b05      	cmp	r3, #5
 800264a:	f300 80e4 	bgt.w	8002816 <OD_write_14xx+0x21a>
 800264e:	2b01      	cmp	r3, #1
 8002650:	d003      	beq.n	800265a <OD_write_14xx+0x5e>
 8002652:	2b02      	cmp	r3, #2
 8002654:	f000 80a6 	beq.w	80027a4 <OD_write_14xx+0x1a8>
            break;
        }
#endif
        default:
            /* MISRA C 2004 15.3 */
            break;
 8002658:	e0dd      	b.n	8002816 <OD_write_14xx+0x21a>
            uint32_t COB_ID = CO_getUint32(buf);
 800265a:	68b8      	ldr	r0, [r7, #8]
 800265c:	f7ff fc64 	bl	8001f28 <CO_getUint32>
 8002660:	61f8      	str	r0, [r7, #28]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	b29b      	uxth	r3, r3
 8002666:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800266a:	86fb      	strh	r3, [r7, #54]	@ 0x36
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	43db      	mvns	r3, r3
 8002670:	0fdb      	lsrs	r3, r3, #31
 8002672:	b2db      	uxtb	r3, r3
 8002674:	61bb      	str	r3, [r7, #24]
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && PDO->valid && (CAN_ID != PDO->configuredCanId))
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	4b6e      	ldr	r3, [pc, #440]	@ (8002834 <OD_write_14xx+0x238>)
 800267a:	4013      	ands	r3, r2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d13d      	bne.n	80026fc <OD_write_14xx+0x100>
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d009      	beq.n	800269a <OD_write_14xx+0x9e>
 8002686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d005      	beq.n	800269a <OD_write_14xx+0x9e>
 800268e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002690:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8002694:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002696:	429a      	cmp	r2, r3
 8002698:	d130      	bne.n	80026fc <OD_write_14xx+0x100>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID)) || (valid && (PDO->mappedObjectsCount == 0U))) {
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d026      	beq.n	80026ee <OD_write_14xx+0xf2>
 80026a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80026a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80026a4:	d92a      	bls.n	80026fc <OD_write_14xx+0x100>
 80026a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80026a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026ac:	d903      	bls.n	80026b6 <OD_write_14xx+0xba>
 80026ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80026b0:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 80026b4:	d922      	bls.n	80026fc <OD_write_14xx+0x100>
 80026b6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80026b8:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 80026bc:	d903      	bls.n	80026c6 <OD_write_14xx+0xca>
 80026be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80026c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80026c4:	d31a      	bcc.n	80026fc <OD_write_14xx+0x100>
 80026c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80026c8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80026cc:	d903      	bls.n	80026d6 <OD_write_14xx+0xda>
 80026ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80026d0:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 80026d4:	d312      	bcc.n	80026fc <OD_write_14xx+0x100>
 80026d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80026d8:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 80026dc:	d303      	bcc.n	80026e6 <OD_write_14xx+0xea>
 80026de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80026e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80026e4:	d30a      	bcc.n	80026fc <OD_write_14xx+0x100>
 80026e6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80026e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80026ec:	d806      	bhi.n	80026fc <OD_write_14xx+0x100>
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <OD_write_14xx+0x104>
 80026f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026f6:	7b5b      	ldrb	r3, [r3, #13]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <OD_write_14xx+0x104>
                return ODR_INVALID_VALUE;
 80026fc:	230f      	movs	r3, #15
 80026fe:	e095      	b.n	800282c <OD_write_14xx+0x230>
            if ((valid != PDO->valid) || (CAN_ID != PDO->configuredCanId)) {
 8002700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	429a      	cmp	r2, r3
 8002708:	d106      	bne.n	8002718 <OD_write_14xx+0x11c>
 800270a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800270c:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8002710:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002712:	429a      	cmp	r2, r3
 8002714:	f000 8081 	beq.w	800281a <OD_write_14xx+0x21e>
                if (CAN_ID == PDO->preDefinedCanId) {
 8002718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271a:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 800271e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002720:	429a      	cmp	r2, r3
 8002722:	d108      	bne.n	8002736 <OD_write_14xx+0x13a>
                    (void)CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80U);
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 800272a:	f107 0310 	add.w	r3, r7, #16
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fc07 	bl	8001f44 <CO_setUint32>
                if (!valid) {
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <OD_write_14xx+0x144>
                    CAN_ID = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	86fb      	strh	r3, [r7, #54]	@ 0x36
                CO_ReturnError_t ret = CO_CANrxBufferInit(PDO->CANdev, PDO->CANdevIdx, CAN_ID, 0x7FF, false,
 8002740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002742:	6858      	ldr	r0, [r3, #4]
 8002744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002746:	f8b3 1140 	ldrh.w	r1, [r3, #320]	@ 0x140
 800274a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800274c:	4b3a      	ldr	r3, [pc, #232]	@ (8002838 <OD_write_14xx+0x23c>)
 800274e:	9302      	str	r3, [sp, #8]
 8002750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	2300      	movs	r3, #0
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800275c:	f004 fe16 	bl	800738c <CO_CANrxBufferInit>
 8002760:	4603      	mov	r3, r0
 8002762:	75fb      	strb	r3, [r7, #23]
                if (valid && (ret == CO_ERROR_NO)) {
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00b      	beq.n	8002782 <OD_write_14xx+0x186>
 800276a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d107      	bne.n	8002782 <OD_write_14xx+0x186>
                    PDO->valid = true;
 8002772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002774:	2201      	movs	r2, #1
 8002776:	609a      	str	r2, [r3, #8]
                    PDO->configuredCanId = CAN_ID;
 8002778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800277a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800277c:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
            break;
 8002780:	e04b      	b.n	800281a <OD_write_14xx+0x21e>
                    PDO->valid = false;
 8002782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
                    CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8002788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800278a:	2200      	movs	r2, #0
 800278c:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
                    CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002792:	2200      	movs	r2, #0
 8002794:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
                    if (ret != CO_ERROR_NO) {
 8002798:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d03c      	beq.n	800281a <OD_write_14xx+0x21e>
                        return ODR_DEV_INCOMPAT;
 80027a0:	2309      	movs	r3, #9
 80027a2:	e043      	b.n	800282c <OD_write_14xx+0x230>
        case 2: { /* transmission type */ uint8_t transmissionType = CO_getUint8(buf);
 80027a4:	68b8      	ldr	r0, [r7, #8]
 80027a6:	f7ff fba2 	bl	8001eee <CO_getUint8>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if ((transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 80027b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027b4:	2bf0      	cmp	r3, #240	@ 0xf0
 80027b6:	d905      	bls.n	80027c4 <OD_write_14xx+0x1c8>
                && (transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 80027b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027bc:	2bfd      	cmp	r3, #253	@ 0xfd
 80027be:	d801      	bhi.n	80027c4 <OD_write_14xx+0x1c8>
                return ODR_INVALID_VALUE;
 80027c0:	230f      	movs	r3, #15
 80027c2:	e033      	b.n	800282c <OD_write_14xx+0x230>
            bool_t synchronous = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 80027c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027c8:	2bf0      	cmp	r3, #240	@ 0xf0
 80027ca:	bf94      	ite	ls
 80027cc:	2301      	movls	r3, #1
 80027ce:	2300      	movhi	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	623b      	str	r3, [r7, #32]
            if (RPDO->synchronous != synchronous) {
 80027d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d6:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 80027da:	6a3a      	ldr	r2, [r7, #32]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d003      	beq.n	80027e8 <OD_write_14xx+0x1ec>
                CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 80027e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e2:	2200      	movs	r2, #0
 80027e4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
            RPDO->synchronous = synchronous;
 80027e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ea:	6a3a      	ldr	r2, [r7, #32]
 80027ec:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            break;
 80027f0:	e014      	b.n	800281c <OD_write_14xx+0x220>
            uint32_t eventTime = CO_getUint16(buf);
 80027f2:	68b8      	ldr	r0, [r7, #8]
 80027f4:	f7ff fb89 	bl	8001f0a <CO_getUint16>
 80027f8:	4603      	mov	r3, r0
 80027fa:	62bb      	str	r3, [r7, #40]	@ 0x28
            RPDO->timeoutTime_us = eventTime * 1000U;
 80027fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002802:	fb03 f202 	mul.w	r2, r3, r2
 8002806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002808:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
            RPDO->timeoutTimer = 0;
 800280c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800280e:	2200      	movs	r2, #0
 8002810:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
            break;
 8002814:	e002      	b.n	800281c <OD_write_14xx+0x220>
            break;
 8002816:	bf00      	nop
 8002818:	e000      	b.n	800281c <OD_write_14xx+0x220>
            break;
 800281a:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 800281c:	f107 0110 	add.w	r1, r7, #16
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f7ff f89a 	bl	800195e <OD_writeOriginal>
 800282a:	4603      	mov	r3, r0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3738      	adds	r7, #56	@ 0x38
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	3ffff800 	.word	0x3ffff800
 8002838:	0800253f 	.word	0x0800253f

0800283c <CO_RPDO_init>:
CO_RPDO_init(CO_RPDO_t* RPDO, OD_t* OD, CO_EM_t* em,
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
             CO_SYNC_t* SYNC,
#endif
             uint16_t preDefinedCanId, OD_entry_t* OD_14xx_RPDOCommPar, OD_entry_t* OD_16xx_RPDOMapPar,
             CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint32_t* errInfo) {
 800283c:	b580      	push	{r7, lr}
 800283e:	b090      	sub	sp, #64	@ 0x40
 8002840:	af04      	add	r7, sp, #16
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
    CO_ReturnError_t ret;
    ODR_t odRet;

    /* verify arguments */
    if ((RPDO == NULL) || (OD == NULL) || (em == NULL) || (OD_14xx_RPDOCommPar == NULL) || (OD_16xx_RPDOMapPar == NULL)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00e      	beq.n	8002872 <CO_RPDO_init+0x36>
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00b      	beq.n	8002872 <CO_RPDO_init+0x36>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <CO_RPDO_init+0x36>
 8002860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <CO_RPDO_init+0x36>
 8002866:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <CO_RPDO_init+0x36>
        || (CANdevRx == NULL)) {
 800286c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800286e:	2b00      	cmp	r3, #0
 8002870:	d102      	bne.n	8002878 <CO_RPDO_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002872:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002876:	e115      	b.n	8002aa4 <CO_RPDO_init+0x268>
    }

    /* clear object */
    (void)memset(RPDO, 0, sizeof(CO_RPDO_t));
 8002878:	f44f 72ca 	mov.w	r2, #404	@ 0x194
 800287c:	2100      	movs	r1, #0
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f008 fc92 	bl	800b1a8 <memset>

    /* Configure object variables */
    PDO->em = em;
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevRx;
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800288e:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	61fb      	str	r3, [r7, #28]
    ret = PDO_initMapping(PDO, OD, OD_16xx_RPDOMapPar, true, errInfo, &erroneousMap);
 8002894:	f107 031c 	add.w	r3, r7, #28
 8002898:	9301      	str	r3, [sp, #4]
 800289a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	2301      	movs	r3, #1
 80028a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80028a6:	f7ff fcb9 	bl	800221c <PDO_initMapping>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (ret != CO_ERROR_NO) {
 80028b0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <CO_RPDO_init+0x82>
        return ret;
 80028b8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80028bc:	e0f2      	b.n	8002aa4 <CO_RPDO_init+0x268>
    }

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	61bb      	str	r3, [r7, #24]
    odRet = OD_get_u32(OD_14xx_RPDOCommPar, 1, &COB_ID, true);
 80028c2:	f107 0218 	add.w	r2, r7, #24
 80028c6:	2301      	movs	r3, #1
 80028c8:	2101      	movs	r1, #1
 80028ca:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80028cc:	f7ff fb98 	bl	8002000 <OD_get_u32>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 80028d6:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00e      	beq.n	80028fc <CO_RPDO_init+0xc0>
        if (errInfo != NULL) {
 80028de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <CO_RPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 1U;
 80028e4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80028e6:	f7ff fb3c 	bl	8001f62 <OD_getIndex>
 80028ea:	4603      	mov	r3, r0
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	f043 0201 	orr.w	r2, r3, #1
 80028f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028f4:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80028f6:	f06f 030b 	mvn.w	r3, #11
 80028fa:	e0d3      	b.n	8002aa4 <CO_RPDO_init+0x268>
    }

    bool_t valid = (COB_ID & 0x80000000U) == 0U;
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	43db      	mvns	r3, r3
 8002900:	0fdb      	lsrs	r3, r3, #31
 8002902:	b2db      	uxtb	r3, r3
 8002904:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	b29b      	uxth	r3, r3
 800290a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800290e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    if (valid && ((PDO->mappedObjectsCount == 0U) || (CAN_ID == 0U))) {
 8002910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00d      	beq.n	8002932 <CO_RPDO_init+0xf6>
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	7b5b      	ldrb	r3, [r3, #13]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <CO_RPDO_init+0xe8>
 800291e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002920:	2b00      	cmp	r3, #0
 8002922:	d106      	bne.n	8002932 <CO_RPDO_init+0xf6>
        valid = false;
 8002924:	2300      	movs	r3, #0
 8002926:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (erroneousMap == 0U) {
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <CO_RPDO_init+0xf6>
            erroneousMap = 1;
 800292e:	2301      	movs	r3, #1
 8002930:	61fb      	str	r3, [r7, #28]
        }
    }

    if (erroneousMap != 0U) {
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00e      	beq.n	8002956 <CO_RPDO_init+0x11a>
        CO_errorReport(PDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
 8002938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d001      	beq.n	8002946 <CO_RPDO_init+0x10a>
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	e000      	b.n	8002948 <CO_RPDO_init+0x10c>
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 800294e:	221a      	movs	r2, #26
 8002950:	2101      	movs	r1, #1
 8002952:	f7fe f974 	bl	8000c3e <CO_error>
                       (erroneousMap != 1U) ? erroneousMap : COB_ID);
    }
    if (!valid) {
 8002956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <CO_RPDO_init+0x124>
        CAN_ID = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if ((CAN_ID != 0U) && (CAN_ID == (preDefinedCanId & 0xFF80U))) {
 8002960:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002962:	2b00      	cmp	r3, #0
 8002964:	d008      	beq.n	8002978 <CO_RPDO_init+0x13c>
 8002966:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002968:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 800296a:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800296e:	400b      	ands	r3, r1
 8002970:	429a      	cmp	r2, r3
 8002972:	d101      	bne.n	8002978 <CO_RPDO_init+0x13c>
        CAN_ID = preDefinedCanId;
 8002974:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002976:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CAN_ID, 0x7FF, false, (void*)RPDO, CO_PDO_receive);
 8002978:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800297a:	f8b7 1048 	ldrh.w	r1, [r7, #72]	@ 0x48
 800297e:	4b4b      	ldr	r3, [pc, #300]	@ (8002aac <CO_RPDO_init+0x270>)
 8002980:	9302      	str	r3, [sp, #8]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	2300      	movs	r3, #0
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800298e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002990:	f004 fcfc 	bl	800738c <CO_CANrxBufferInit>
 8002994:	4603      	mov	r3, r0
 8002996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (ret != CO_ERROR_NO) {
 800299a:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <CO_RPDO_init+0x16c>
        return ret;
 80029a2:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80029a6:	e07d      	b.n	8002aa4 <CO_RPDO_init+0x268>
    }

    PDO->valid = valid;
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029ac:	609a      	str	r2, [r3, #8]

    /* Configure communication parameter - transmission type */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
    uint8_t transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 80029ae:	23fe      	movs	r3, #254	@ 0xfe
 80029b0:	75fb      	strb	r3, [r7, #23]
    odRet = OD_get_u8(OD_14xx_RPDOCommPar, 2, &transmissionType, true);
 80029b2:	f107 0217 	add.w	r2, r7, #23
 80029b6:	2301      	movs	r3, #1
 80029b8:	2102      	movs	r1, #2
 80029ba:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80029bc:	f7ff faf6 	bl	8001fac <OD_get_u8>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 80029c6:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00e      	beq.n	80029ec <CO_RPDO_init+0x1b0>
        if (errInfo != NULL) {
 80029ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <CO_RPDO_init+0x1aa>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 2U;
 80029d4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80029d6:	f7ff fac4 	bl	8001f62 <OD_getIndex>
 80029da:	4603      	mov	r3, r0
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	f043 0202 	orr.w	r2, r3, #2
 80029e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029e4:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80029e6:	f06f 030b 	mvn.w	r3, #11
 80029ea:	e05b      	b.n	8002aa4 <CO_RPDO_init+0x268>
    }

    RPDO->SYNC = SYNC;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
    RPDO->synchronous = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 80029f4:	7dfb      	ldrb	r3, [r7, #23]
 80029f6:	2bf0      	cmp	r3, #240	@ 0xf0
 80029f8:	bf94      	ite	ls
 80029fa:	2301      	movls	r3, #1
 80029fc:	2300      	movhi	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
#endif

    /* Configure communication parameter - event-timer (optional) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
    uint16_t eventTime = 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	82bb      	strh	r3, [r7, #20]
    (void)OD_get_u16(OD_14xx_RPDOCommPar, 5, &eventTime, true);
 8002a0c:	f107 0214 	add.w	r2, r7, #20
 8002a10:	2301      	movs	r3, #1
 8002a12:	2105      	movs	r1, #5
 8002a14:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002a16:	f7ff fade 	bl	8001fd6 <OD_get_u16>
    RPDO->timeoutTime_us = (uint32_t)eventTime * 1000U;
 8002a1a:	8abb      	ldrh	r3, [r7, #20]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a22:	fb03 f202 	mul.w	r2, r3, r2
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
#endif

    /* Configure OD extensions */
#if ((CO_CONFIG_PDO)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    PDO->isRPDO = true;
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    PDO->OD = OD;
 8002a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    PDO->CANdevIdx = CANdevRxIdx;
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002a42:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    PDO->preDefinedCanId = preDefinedCanId;
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002a4a:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142
    PDO->configuredCanId = CAN_ID;
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002a52:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
    PDO->OD_communicationParam_ext.object = RPDO;
 8002a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	4a13      	ldr	r2, [pc, #76]	@ (8002ab0 <CO_RPDO_init+0x274>)
 8002a62:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
    PDO->OD_communicationParam_ext.write = OD_write_14xx;
 8002a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a68:	4a12      	ldr	r2, [pc, #72]	@ (8002ab4 <CO_RPDO_init+0x278>)
 8002a6a:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
    PDO->OD_mappingParam_extension.object = RPDO;
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8002a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a78:	4a0f      	ldr	r2, [pc, #60]	@ (8002ab8 <CO_RPDO_init+0x27c>)
 8002a7a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	4a0e      	ldr	r2, [pc, #56]	@ (8002abc <CO_RPDO_init+0x280>)
 8002a82:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    (void)OD_extension_init(OD_14xx_RPDOCommPar, &PDO->OD_communicationParam_ext);
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002a90:	f7ff fa78 	bl	8001f84 <OD_extension_init>
    (void)OD_extension_init(OD_16xx_RPDOMapPar, &PDO->OD_mappingParam_extension);
 8002a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a96:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002a9e:	f7ff fa71 	bl	8001f84 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3730      	adds	r7, #48	@ 0x30
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	0800253f 	.word	0x0800253f
 8002ab0:	080024a3 	.word	0x080024a3
 8002ab4:	080025fd 	.word	0x080025fd
 8002ab8:	080018af 	.word	0x080018af
 8002abc:	08002371 	.word	0x08002371

08002ac0 <CO_RPDO_process>:
void
CO_RPDO_process(CO_RPDO_t* RPDO,
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
                uint32_t timeDifference_us, uint32_t* timerNext_us,
#endif
                bool_t NMTisOperational, bool_t syncWas) {
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b097      	sub	sp, #92	@ 0x5c
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	603b      	str	r3, [r7, #0]
    (void)syncWas;
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
    (void)timerNext_us;
#endif

    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (PDO->valid && NMTisOperational
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 8124 	beq.w	8002d24 <CO_RPDO_process+0x264>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 8120 	beq.w	8002d24 <CO_RPDO_process+0x264>
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        && (syncWas || !RPDO->synchronous)
 8002ae4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d105      	bne.n	8002af6 <CO_RPDO_process+0x36>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f040 8117 	bne.w	8002d24 <CO_RPDO_process+0x264>
#endif
    ) {
        /* Verify errors in length of received RPDO CAN message */
        if (RPDO->receiveError > CO_RPDO_RX_ACK) {
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8002afc:	2b0a      	cmp	r3, #10
 8002afe:	d927      	bls.n	8002b50 <CO_RPDO_process+0x90>
            bool_t setError = RPDO->receiveError != CO_RPDO_RX_OK;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8002b06:	2b0b      	cmp	r3, #11
 8002b08:	bf14      	ite	ne
 8002b0a:	2301      	movne	r3, #1
 8002b0c:	2300      	moveq	r3, #0
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint16_t code = (RPDO->receiveError == CO_RPDO_RX_SHORT) ? CO_EMC_PDO_LENGTH : CO_EMC_PDO_LENGTH_EXC;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8002b18:	2b0c      	cmp	r3, #12
 8002b1a:	d102      	bne.n	8002b22 <CO_RPDO_process+0x62>
 8002b1c:	f248 2310 	movw	r3, #33296	@ 0x8210
 8002b20:	e001      	b.n	8002b26 <CO_RPDO_process+0x66>
 8002b22:	f248 2320 	movw	r3, #33312	@ 0x8220
 8002b26:	857b      	strh	r3, [r7, #42]	@ 0x2a
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH, code, PDO->dataLength);
 8002b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2e:	7b1b      	ldrb	r3, [r3, #12]
 8002b30:	461a      	mov	r2, r3
 8002b32:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002b34:	9200      	str	r2, [sp, #0]
 8002b36:	2204      	movs	r2, #4
 8002b38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b3a:	f7fe f880 	bl	8000c3e <CO_error>
            RPDO->receiveError = setError ? CO_RPDO_RX_ACK_ERROR : CO_RPDO_RX_ACK_NO_ERROR;
 8002b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <CO_RPDO_process+0x88>
 8002b44:	2201      	movs	r2, #1
 8002b46:	e000      	b.n	8002b4a <CO_RPDO_process+0x8a>
 8002b48:	2200      	movs	r2, #0
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
        }

        /* Determine, which of the two rx buffers contains relevant message. */
        uint8_t bufNo = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        if (RPDO->synchronous && (RPDO->SYNC != NULL) && !RPDO->SYNC->CANrxToggle) {
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00d      	beq.n	8002b7c <CO_RPDO_process+0xbc>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d008      	beq.n	8002b7c <CO_RPDO_process+0xbc>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d102      	bne.n	8002b7c <CO_RPDO_process+0xbc>
            bufNo = 1;
 8002b76:	2301      	movs	r3, #1
 8002b78:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        }
#endif

        /* copy RPDO into OD variables according to mappings */
        bool_t rpdoReceived = false;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8002b80:	e07d      	b.n	8002c7e <CO_RPDO_process+0x1be>
            rpdoReceived = true;
 8002b82:	2301      	movs	r3, #1
 8002b84:	64bb      	str	r3, [r7, #72]	@ 0x48
            uint8_t* dataRPDO = RPDO->CANrxData[bufNo];
 8002b86:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002b8a:	332e      	adds	r3, #46	@ 0x2e
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4413      	add	r3, r2
 8002b92:	647b      	str	r3, [r7, #68]	@ 0x44
            OD_size_t verifyLength = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	643b      	str	r3, [r7, #64]	@ 0x40

            /* Clear the flag. If between the copy operation CANrxNew is set
             * by receive thread, then copy the latest data again. */
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 8002b98:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	325a      	adds	r2, #90	@ 0x5a
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_OD_IO_ACCESS) != 0
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002bac:	e04a      	b.n	8002c44 <CO_RPDO_process+0x184>
                OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8002bae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002bb2:	015b      	lsls	r3, r3, #5
 8002bb4:	3310      	adds	r3, #16
 8002bb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bb8:	4413      	add	r3, r2
 8002bba:	627b      	str	r3, [r7, #36]	@ 0x24

                /* get mappedLength from temporary storage */
                OD_size_t* dataOffset = &OD_IO->stream.dataOffset;
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbe:	330c      	adds	r3, #12
 8002bc0:	623b      	str	r3, [r7, #32]
                uint8_t mappedLength = (uint8_t)(*dataOffset);
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	77fb      	strb	r3, [r7, #31]

                /* additional safety check. */
                verifyLength += (OD_size_t)mappedLength;
 8002bc8:	7ffb      	ldrb	r3, [r7, #31]
 8002bca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bcc:	4413      	add	r3, r2
 8002bce:	643b      	str	r3, [r7, #64]	@ 0x40
                if (verifyLength > CO_PDO_MAX_SIZE) {
 8002bd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d83d      	bhi.n	8002c52 <CO_RPDO_process+0x192>
                    break;
                }

                /* length of OD variable may be larger than mappedLength */
                OD_size_t ODdataLength = OD_IO->stream.dataLength;
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	63bb      	str	r3, [r7, #56]	@ 0x38
                if (ODdataLength > CO_PDO_MAX_SIZE) {
 8002bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d901      	bls.n	8002be6 <CO_RPDO_process+0x126>
                    ODdataLength = CO_PDO_MAX_SIZE;
 8002be2:	2308      	movs	r3, #8
 8002be4:	63bb      	str	r3, [r7, #56]	@ 0x38
                }
                /* Prepare data for writing into OD variable. If mappedLength
                 * is smaller than ODdataLength, then use auxiliary buffer */
                uint8_t buf[CO_PDO_MAX_SIZE];
                uint8_t* dataOD;
                if (ODdataLength > mappedLength) {
 8002be6:	7ffb      	ldrb	r3, [r7, #31]
 8002be8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d911      	bls.n	8002c12 <CO_RPDO_process+0x152>
                    (void)memset(buf, 0, sizeof(buf));
 8002bee:	f107 0314 	add.w	r3, r7, #20
 8002bf2:	2208      	movs	r2, #8
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f008 fad6 	bl	800b1a8 <memset>
                    (void)memcpy(buf, dataRPDO, mappedLength);
 8002bfc:	7ffa      	ldrb	r2, [r7, #31]
 8002bfe:	f107 0314 	add.w	r3, r7, #20
 8002c02:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002c04:	4618      	mov	r0, r3
 8002c06:	f008 fb5a 	bl	800b2be <memcpy>
                    dataOD = buf;
 8002c0a:	f107 0314 	add.w	r3, r7, #20
 8002c0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c10:	e001      	b.n	8002c16 <CO_RPDO_process+0x156>
                } else {
                    dataOD = dataRPDO;
 8002c12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c14:	637b      	str	r3, [r7, #52]	@ 0x34
                }
#endif

                /* Set stream.dataOffset to zero, perform OD_IO.write()
                 * and store mappedLength back to stream.dataOffset */
                *dataOffset = 0;
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
                OD_size_t countWritten;
                OD_IO->write(&OD_IO->stream, dataOD, ODdataLength, &countWritten);
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1e:	69dc      	ldr	r4, [r3, #28]
 8002c20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002c22:	f107 0310 	add.w	r3, r7, #16
 8002c26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c28:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002c2a:	47a0      	blx	r4
                *dataOffset = mappedLength;
 8002c2c:	7ffa      	ldrb	r2, [r7, #31]
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	601a      	str	r2, [r3, #0]

                dataRPDO += mappedLength;
 8002c32:	7ffb      	ldrb	r3, [r7, #31]
 8002c34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c36:	4413      	add	r3, r2
 8002c38:	647b      	str	r3, [r7, #68]	@ 0x44
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002c3a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002c3e:	3301      	adds	r3, #1
 8002c40:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c46:	7b5b      	ldrb	r3, [r3, #13]
 8002c48:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d3ae      	bcc.n	8002bae <CO_RPDO_process+0xee>
 8002c50:	e000      	b.n	8002c54 <CO_RPDO_process+0x194>
                    break;
 8002c52:	bf00      	nop
            for (uint8_t i = 0; i < PDO->dataLength; i++) {
                *PDO->mapPointer[i] = dataRPDO[i];
            }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

            if ((verifyLength > CO_PDO_MAX_SIZE) || (verifyLength != (OD_size_t)PDO->dataLength)) {
 8002c54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d805      	bhi.n	8002c66 <CO_RPDO_process+0x1a6>
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c5c:	7b1b      	ldrb	r3, [r3, #12]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00b      	beq.n	8002c7e <CO_RPDO_process+0x1be>
                /* bug in software, should not happen */
                CO_errorReport(PDO->em, CO_EM_GENERIC_SOFTWARE_ERROR, CO_EMC_SOFTWARE_INTERNAL,
 8002c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c68:	6818      	ldr	r0, [r3, #0]
 8002c6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	f44f 43c2 	mov.w	r3, #24832	@ 0x6100
 8002c76:	222c      	movs	r2, #44	@ 0x2c
 8002c78:	2101      	movs	r1, #1
 8002c7a:	f7fd ffe0 	bl	8000c3e <CO_error>
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8002c7e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	325a      	adds	r2, #90	@ 0x5a
 8002c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f47f af79 	bne.w	8002b82 <CO_RPDO_process+0xc2>
        } /* while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) */

        /* verify RPDO timeout */
        (void)rpdoReceived;
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
        if (RPDO->timeoutTime_us > 0U) {
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d058      	beq.n	8002d4c <CO_RPDO_process+0x28c>
            if (rpdoReceived) {
 8002c9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d017      	beq.n	8002cd0 <CO_RPDO_process+0x210>
                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d90a      	bls.n	8002cc6 <CO_RPDO_process+0x206>
                    CO_errorReset(PDO->em, CO_EM_RPDO_TIME_OUT, RPDO->timeoutTimer);
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb2:	6818      	ldr	r0, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	2217      	movs	r2, #23
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	f7fd ffbc 	bl	8000c3e <CO_error>
                }
                /* enable monitoring */
                RPDO->timeoutTimer = 1;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
    ) {
 8002cce:	e03d      	b.n	8002d4c <CO_RPDO_process+0x28c>
            } else if ((RPDO->timeoutTimer > 0U) && (RPDO->timeoutTimer < RPDO->timeoutTime_us)) {
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d038      	beq.n	8002d4c <CO_RPDO_process+0x28c>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d230      	bcs.n	8002d4c <CO_RPDO_process+0x28c>
                RPDO->timeoutTimer += timeDifference_us;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	441a      	add	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190

                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d920      	bls.n	8002d4c <CO_RPDO_process+0x28c>
                    CO_errorReport(PDO->em, CO_EM_RPDO_TIME_OUT, CO_EMC_RPDO_TIMEOUT, RPDO->timeoutTimer);
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	f248 2350 	movw	r3, #33360	@ 0x8250
 8002d1a:	2217      	movs	r2, #23
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	f7fd ff8e 	bl	8000c3e <CO_error>
    ) {
 8002d22:	e013      	b.n	8002d4c <CO_RPDO_process+0x28c>
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE */
    }  /* if (PDO->valid && NMTisOperational) */
    else {
        /* not valid and operational, clear CAN receive flags and timeoutTimer */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        if (!PDO->valid || !NMTisOperational) {
 8002d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <CO_RPDO_process+0x272>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10d      	bne.n	8002d4e <CO_RPDO_process+0x28e>
            CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
            RPDO->timeoutTimer = 0;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
        RPDO->timeoutTimer = 0;
#endif
#endif
    }
}
 8002d4a:	e000      	b.n	8002d4e <CO_RPDO_process+0x28e>
    ) {
 8002d4c:	bf00      	nop
}
 8002d4e:	bf00      	nop
 8002d50:	3754      	adds	r7, #84	@ 0x54
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd90      	pop	{r4, r7, pc}
	...

08002d58 <OD_write_18xx>:
 * Custom function for writing OD object "TPDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_18xx(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b093      	sub	sp, #76	@ 0x4c
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (count > 4U)) {
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <OD_write_18xx+0x26>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <OD_write_18xx+0x26>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <OD_write_18xx+0x26>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d901      	bls.n	8002d82 <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8002d7e:	2309      	movs	r3, #9
 8002d80:	e136      	b.n	8002ff0 <OD_write_18xx+0x298>
    }

    CO_TPDO_t* TPDO = stream->object;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	63bb      	str	r3, [r7, #56]	@ 0x38
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 8002d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d8a:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t bufCopy[4];
    (void)memcpy((void*)bufCopy, (const void*)buf, count);
 8002d8c:	f107 0314 	add.w	r3, r7, #20
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	68b9      	ldr	r1, [r7, #8]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f008 fa92 	bl	800b2be <memcpy>

    switch (stream->subIndex) {
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	7d1b      	ldrb	r3, [r3, #20]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	f200 811a 	bhi.w	8002fda <OD_write_18xx+0x282>
 8002da6:	a201      	add	r2, pc, #4	@ (adr r2, 8002dac <OD_write_18xx+0x54>)
 8002da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dac:	08002dc5 	.word	0x08002dc5
 8002db0:	08002efb 	.word	0x08002efb
 8002db4:	08002f5d 	.word	0x08002f5d
 8002db8:	08002fdb 	.word	0x08002fdb
 8002dbc:	08002f8b 	.word	0x08002f8b
 8002dc0:	08002faf 	.word	0x08002faf
        case 1: { /* COB-ID used by PDO */
            uint32_t COB_ID = CO_getUint32(buf);
 8002dc4:	68b8      	ldr	r0, [r7, #8]
 8002dc6:	f7ff f8af 	bl	8001f28 <CO_getUint32>
 8002dca:	6238      	str	r0, [r7, #32]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dd4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	0fdb      	lsrs	r3, r3, #31
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	61fb      	str	r3, [r7, #28]

            /* bits 11...29 must be zero, PDO must be disabled on change, CAN_ID == 0 is
             * not allowed, mapping must be configured before enabling the PDO */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && (PDO->valid && (CAN_ID != PDO->configuredCanId)))
 8002de0:	6a3a      	ldr	r2, [r7, #32]
 8002de2:	4b85      	ldr	r3, [pc, #532]	@ (8002ff8 <OD_write_18xx+0x2a0>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d13d      	bne.n	8002e66 <OD_write_18xx+0x10e>
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d009      	beq.n	8002e04 <OD_write_18xx+0xac>
 8002df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <OD_write_18xx+0xac>
 8002df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dfa:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8002dfe:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d130      	bne.n	8002e66 <OD_write_18xx+0x10e>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID)) || (valid && (PDO->mappedObjectsCount == 0U))) {
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d026      	beq.n	8002e58 <OD_write_18xx+0x100>
 8002e0a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002e0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e0e:	d92a      	bls.n	8002e66 <OD_write_18xx+0x10e>
 8002e10:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e16:	d903      	bls.n	8002e20 <OD_write_18xx+0xc8>
 8002e18:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002e1a:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8002e1e:	d922      	bls.n	8002e66 <OD_write_18xx+0x10e>
 8002e20:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002e22:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8002e26:	d903      	bls.n	8002e30 <OD_write_18xx+0xd8>
 8002e28:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002e2a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002e2e:	d31a      	bcc.n	8002e66 <OD_write_18xx+0x10e>
 8002e30:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002e32:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002e36:	d903      	bls.n	8002e40 <OD_write_18xx+0xe8>
 8002e38:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002e3a:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8002e3e:	d312      	bcc.n	8002e66 <OD_write_18xx+0x10e>
 8002e40:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002e42:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8002e46:	d303      	bcc.n	8002e50 <OD_write_18xx+0xf8>
 8002e48:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002e4a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e4e:	d30a      	bcc.n	8002e66 <OD_write_18xx+0x10e>
 8002e50:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002e52:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e56:	d806      	bhi.n	8002e66 <OD_write_18xx+0x10e>
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <OD_write_18xx+0x112>
 8002e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e60:	7b5b      	ldrb	r3, [r3, #13]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <OD_write_18xx+0x112>
                return ODR_INVALID_VALUE;
 8002e66:	230f      	movs	r3, #15
 8002e68:	e0c2      	b.n	8002ff0 <OD_write_18xx+0x298>
            }

            /* parameter changed? */
            if ((valid != PDO->valid) || (CAN_ID != PDO->configuredCanId)) {
 8002e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d106      	bne.n	8002e82 <OD_write_18xx+0x12a>
 8002e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e76:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8002e7a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	f000 80ae 	beq.w	8002fde <OD_write_18xx+0x286>
                /* if default CAN-ID is written, store to OD without Node-ID */
                if (CAN_ID == PDO->preDefinedCanId) {
 8002e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e84:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8002e88:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d108      	bne.n	8002ea0 <OD_write_18xx+0x148>
                    (void)CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80U);
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff f852 	bl	8001f44 <CO_setUint32>
                }
                if (!valid) {
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <OD_write_18xx+0x152>
                    CAN_ID = 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                }

                CO_CANtx_t* CANtxBuff = CO_CANtxBufferInit(
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eac:	6858      	ldr	r0, [r3, #4]
 8002eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eb0:	f8b3 1140 	ldrh.w	r1, [r3, #320]	@ 0x140
 8002eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eb6:	7b1b      	ldrb	r3, [r3, #12]
                    PDO->CANdev, PDO->CANdevIdx, CAN_ID, false, PDO->dataLength,
                    TPDO->transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240);
 8002eb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002eba:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
                CO_CANtx_t* CANtxBuff = CO_CANtxBufferInit(
 8002ebe:	2af0      	cmp	r2, #240	@ 0xf0
 8002ec0:	bf94      	ite	ls
 8002ec2:	2201      	movls	r2, #1
 8002ec4:	2200      	movhi	r2, #0
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	4614      	mov	r4, r2
 8002eca:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002ecc:	9401      	str	r4, [sp, #4]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f004 fab9 	bl	8007448 <CO_CANtxBufferInit>
 8002ed6:	61b8      	str	r0, [r7, #24]

                if (CANtxBuff == NULL) {
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <OD_write_18xx+0x18a>
                    return ODR_DEV_INCOMPAT;
 8002ede:	2309      	movs	r3, #9
 8002ee0:	e086      	b.n	8002ff0 <OD_write_18xx+0x298>
                }

                TPDO->CANtxBuff = CANtxBuff;
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
                PDO->valid = valid;
 8002eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eec:	69fa      	ldr	r2, [r7, #28]
 8002eee:	609a      	str	r2, [r3, #8]
                PDO->configuredCanId = CAN_ID;
 8002ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ef2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002ef4:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
            }
            break;
 8002ef8:	e071      	b.n	8002fde <OD_write_18xx+0x286>
        }

        case 2: { /* transmission type */ uint8_t transmissionType = CO_getUint8(buf);
 8002efa:	68b8      	ldr	r0, [r7, #8]
 8002efc:	f7fe fff7 	bl	8001eee <CO_getUint8>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
            if ((transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 8002f06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f0a:	2bf0      	cmp	r3, #240	@ 0xf0
 8002f0c:	d905      	bls.n	8002f1a <OD_write_18xx+0x1c2>
                && (transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 8002f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f12:	2bfd      	cmp	r3, #253	@ 0xfd
 8002f14:	d801      	bhi.n	8002f1a <OD_write_18xx+0x1c2>
                return ODR_INVALID_VALUE;
 8002f16:	230f      	movs	r3, #15
 8002f18:	e06a      	b.n	8002ff0 <OD_write_18xx+0x298>
            }
            TPDO->CANtxBuff->syncFlag = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 8002f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f1e:	2bf0      	cmp	r3, #240	@ 0xf0
 8002f20:	bf94      	ite	ls
 8002f22:	2301      	movls	r3, #1
 8002f24:	2300      	movhi	r3, #0
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2a:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8002f2e:	615a      	str	r2, [r3, #20]
            TPDO->syncCounter = 255;
 8002f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f32:	22ff      	movs	r2, #255	@ 0xff
 8002f34:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
#else
            if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
                return ODR_INVALID_VALUE;
            }
#endif
            TPDO->transmissionType = transmissionType;
 8002f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f3a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002f3e:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
            TPDO->sendRequest = true;
 8002f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f44:	2201      	movs	r2, #1
 8002f46:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            TPDO->inhibitTimer = 0;
 8002f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
            TPDO->eventTimer = 0;
 8002f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f54:	2200      	movs	r2, #0
 8002f56:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
#endif
            break;
 8002f5a:	e041      	b.n	8002fe0 <OD_write_18xx+0x288>
        }

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
        case 3: { /* inhibit time */
            if (PDO->valid) {
 8002f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <OD_write_18xx+0x210>
                return ODR_INVALID_VALUE;
 8002f64:	230f      	movs	r3, #15
 8002f66:	e043      	b.n	8002ff0 <OD_write_18xx+0x298>
            }
            uint32_t inhibitTime = CO_getUint16(buf);
 8002f68:	68b8      	ldr	r0, [r7, #8]
 8002f6a:	f7fe ffce 	bl	8001f0a <CO_getUint16>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	62bb      	str	r3, [r7, #40]	@ 0x28
            TPDO->inhibitTime_us = inhibitTime * 100U;
 8002f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f74:	2264      	movs	r2, #100	@ 0x64
 8002f76:	fb03 f202 	mul.w	r2, r3, r2
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f7c:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
            TPDO->inhibitTimer = 0;
 8002f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f82:	2200      	movs	r2, #0
 8002f84:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
            break;
 8002f88:	e02a      	b.n	8002fe0 <OD_write_18xx+0x288>
        }

        case 5: { /* event-timer */
            uint32_t eventTime = CO_getUint16(buf);
 8002f8a:	68b8      	ldr	r0, [r7, #8]
 8002f8c:	f7fe ffbd 	bl	8001f0a <CO_getUint16>
 8002f90:	4603      	mov	r3, r0
 8002f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
            TPDO->eventTime_us = eventTime * 1000U;
 8002f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f9a:	fb03 f202 	mul.w	r2, r3, r2
 8002f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fa0:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
            TPDO->eventTimer = 0;
 8002fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            break;
 8002fac:	e018      	b.n	8002fe0 <OD_write_18xx+0x288>
        }
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        case 6: { /* SYNC start value */
            uint8_t syncStartValue = CO_getUint8(buf);
 8002fae:	68b8      	ldr	r0, [r7, #8]
 8002fb0:	f7fe ff9d 	bl	8001eee <CO_getUint8>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            if (PDO->valid || (syncStartValue > 240U)) {
 8002fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d103      	bne.n	8002fca <OD_write_18xx+0x272>
 8002fc2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002fc6:	2bf0      	cmp	r3, #240	@ 0xf0
 8002fc8:	d901      	bls.n	8002fce <OD_write_18xx+0x276>
                return ODR_INVALID_VALUE;
 8002fca:	230f      	movs	r3, #15
 8002fcc:	e010      	b.n	8002ff0 <OD_write_18xx+0x298>
            }
            TPDO->syncStartValue = syncStartValue;
 8002fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd0:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8002fd4:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
            break;
 8002fd8:	e002      	b.n	8002fe0 <OD_write_18xx+0x288>
        }
#endif
        default:
            /* MISRA C 2004 15.3 */
            break;
 8002fda:	bf00      	nop
 8002fdc:	e000      	b.n	8002fe0 <OD_write_18xx+0x288>
            break;
 8002fde:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8002fe0:	f107 0114 	add.w	r1, r7, #20
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f7fe fcb8 	bl	800195e <OD_writeOriginal>
 8002fee:	4603      	mov	r3, r0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3744      	adds	r7, #68	@ 0x44
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd90      	pop	{r4, r7, pc}
 8002ff8:	3ffff800 	.word	0x3ffff800

08002ffc <CO_TPDO_init>:
CO_TPDO_init(CO_TPDO_t* TPDO, OD_t* OD, CO_EM_t* em,
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
             CO_SYNC_t* SYNC,
#endif
             uint16_t preDefinedCanId, OD_entry_t* OD_18xx_TPDOCommPar, OD_entry_t* OD_1Axx_TPDOMapPar,
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx, uint32_t* errInfo) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08e      	sub	sp, #56	@ 0x38
 8003000:	af02      	add	r7, sp, #8
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
 8003008:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	627b      	str	r3, [r7, #36]	@ 0x24
    ODR_t odRet;

    /* verify arguments */
    if ((TPDO == NULL) || (OD == NULL) || (em == NULL) || (OD_18xx_TPDOCommPar == NULL) || (OD_1Axx_TPDOMapPar == NULL)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00e      	beq.n	8003032 <CO_TPDO_init+0x36>
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <CO_TPDO_init+0x36>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <CO_TPDO_init+0x36>
 8003020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <CO_TPDO_init+0x36>
 8003026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <CO_TPDO_init+0x36>
        || (CANdevTx == NULL)) {
 800302c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800302e:	2b00      	cmp	r3, #0
 8003030:	d102      	bne.n	8003038 <CO_TPDO_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003032:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003036:	e144      	b.n	80032c2 <CO_TPDO_init+0x2c6>
    }

    /* clear object */
    (void)memset(TPDO, 0, sizeof(CO_TPDO_t));
 8003038:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 800303c:	2100      	movs	r1, #0
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f008 f8b2 	bl	800b1a8 <memset>

    /* Configure object variables */
    PDO->em = em;
 8003044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800304e:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO, OD, OD_1Axx_TPDOMapPar, false, errInfo, &erroneousMap);
 8003054:	f107 031c 	add.w	r3, r7, #28
 8003058:	9301      	str	r3, [sp, #4]
 800305a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	2300      	movs	r3, #0
 8003060:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003062:	68b9      	ldr	r1, [r7, #8]
 8003064:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003066:	f7ff f8d9 	bl	800221c <PDO_initMapping>
 800306a:	4603      	mov	r3, r0
 800306c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (ret != CO_ERROR_NO) {
 8003070:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <CO_TPDO_init+0x82>
        return ret;
 8003078:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800307c:	e121      	b.n	80032c2 <CO_TPDO_init+0x2c6>
    }

    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 800307e:	23fe      	movs	r3, #254	@ 0xfe
 8003080:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 8003082:	f107 021b 	add.w	r2, r7, #27
 8003086:	2301      	movs	r3, #1
 8003088:	2102      	movs	r1, #2
 800308a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800308c:	f7fe ff8e 	bl	8001fac <OD_get_u8>
 8003090:	4603      	mov	r3, r0
 8003092:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 8003096:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00e      	beq.n	80030bc <CO_TPDO_init+0xc0>
        if (errInfo != NULL) {
 800309e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <CO_TPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2U;
 80030a4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80030a6:	f7fe ff5c 	bl	8001f62 <OD_getIndex>
 80030aa:	4603      	mov	r3, r0
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	f043 0202 	orr.w	r2, r3, #2
 80030b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030b4:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80030b6:	f06f 030b 	mvn.w	r3, #11
 80030ba:	e102      	b.n	80032c2 <CO_TPDO_init+0x2c6>
    }
    if ((transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)
 80030bc:	7efb      	ldrb	r3, [r7, #27]
 80030be:	2bfd      	cmp	r3, #253	@ 0xfd
 80030c0:	d804      	bhi.n	80030cc <CO_TPDO_init+0xd0>
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        && (transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 80030c2:	7efb      	ldrb	r3, [r7, #27]
 80030c4:	2bf0      	cmp	r3, #240	@ 0xf0
 80030c6:	d901      	bls.n	80030cc <CO_TPDO_init+0xd0>
#endif
    ) {
        transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 80030c8:	23fe      	movs	r3, #254	@ 0xfe
 80030ca:	76fb      	strb	r3, [r7, #27]
    }
    TPDO->transmissionType = transmissionType;
 80030cc:	7efa      	ldrb	r2, [r7, #27]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
    TPDO->sendRequest = true;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 80030e0:	f107 0214 	add.w	r2, r7, #20
 80030e4:	2301      	movs	r3, #1
 80030e6:	2101      	movs	r1, #1
 80030e8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80030ea:	f7fe ff89 	bl	8002000 <OD_get_u32>
 80030ee:	4603      	mov	r3, r0
 80030f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 80030f4:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00e      	beq.n	800311a <CO_TPDO_init+0x11e>
        if (errInfo != NULL) {
 80030fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d008      	beq.n	8003114 <CO_TPDO_init+0x118>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1U;
 8003102:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003104:	f7fe ff2d 	bl	8001f62 <OD_getIndex>
 8003108:	4603      	mov	r3, r0
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	f043 0201 	orr.w	r2, r3, #1
 8003110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003112:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8003114:	f06f 030b 	mvn.w	r3, #11
 8003118:	e0d3      	b.n	80032c2 <CO_TPDO_init+0x2c6>
    }

    bool_t valid = (COB_ID & 0x80000000U) == 0U;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	43db      	mvns	r3, r3
 800311e:	0fdb      	lsrs	r3, r3, #31
 8003120:	b2db      	uxtb	r3, r3
 8003122:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	b29b      	uxth	r3, r3
 8003128:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800312c:	857b      	strh	r3, [r7, #42]	@ 0x2a
    if (valid && ((PDO->mappedObjectsCount == 0U) || (CAN_ID == 0U))) {
 800312e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00d      	beq.n	8003150 <CO_TPDO_init+0x154>
 8003134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003136:	7b5b      	ldrb	r3, [r3, #13]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <CO_TPDO_init+0x146>
 800313c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <CO_TPDO_init+0x154>
        valid = false;
 8003142:	2300      	movs	r3, #0
 8003144:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (erroneousMap == 0U) {
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <CO_TPDO_init+0x154>
            erroneousMap = 1;
 800314c:	2301      	movs	r3, #1
 800314e:	61fb      	str	r3, [r7, #28]
        }
    }

    if (erroneousMap != 0U) {
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00e      	beq.n	8003174 <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
 8003156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d001      	beq.n	8003164 <CO_TPDO_init+0x168>
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	e000      	b.n	8003166 <CO_TPDO_init+0x16a>
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 800316c:	221a      	movs	r2, #26
 800316e:	2101      	movs	r1, #1
 8003170:	f7fd fd65 	bl	8000c3e <CO_error>
                       (erroneousMap != 1U) ? erroneousMap : COB_ID);
    }
    if (!valid) {
 8003174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <CO_TPDO_init+0x182>
        CAN_ID = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if ((CAN_ID != 0U) && (CAN_ID == (preDefinedCanId & 0xFF80U))) {
 800317e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <CO_TPDO_init+0x19a>
 8003184:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8003186:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8003188:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800318c:	400b      	ands	r3, r1
 800318e:	429a      	cmp	r2, r3
 8003190:	d101      	bne.n	8003196 <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 8003192:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003194:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CAN_ID, false, PDO->dataLength,
 8003196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003198:	7b1b      	ldrb	r3, [r3, #12]
                                         TPDO->transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240);
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
    TPDO->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CAN_ID, false, PDO->dataLength,
 80031a0:	2af0      	cmp	r2, #240	@ 0xf0
 80031a2:	bf94      	ite	ls
 80031a4:	2201      	movls	r2, #1
 80031a6:	2200      	movhi	r2, #0
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	4610      	mov	r0, r2
 80031ac:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80031ae:	f8b7 1048 	ldrh.w	r1, [r7, #72]	@ 0x48
 80031b2:	9001      	str	r0, [sp, #4]
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	2300      	movs	r3, #0
 80031b8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80031ba:	f004 f945 	bl	8007448 <CO_CANtxBufferInit>
 80031be:	4602      	mov	r2, r0
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168

    if (TPDO->CANtxBuff == NULL) {
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d102      	bne.n	80031d6 <CO_TPDO_init+0x1da>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80031d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80031d4:	e075      	b.n	80032c2 <CO_TPDO_init+0x2c6>
    }

    PDO->valid = valid;
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031da:	609a      	str	r2, [r3, #8]

    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
    uint16_t inhibitTime = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	823b      	strh	r3, [r7, #16]
    (void)OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 80031e4:	f107 0212 	add.w	r2, r7, #18
 80031e8:	2301      	movs	r3, #1
 80031ea:	2103      	movs	r1, #3
 80031ec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80031ee:	f7fe fef2 	bl	8001fd6 <OD_get_u16>
    (void)OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 80031f2:	f107 0210 	add.w	r2, r7, #16
 80031f6:	2301      	movs	r3, #1
 80031f8:	2105      	movs	r1, #5
 80031fa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80031fc:	f7fe feeb 	bl	8001fd6 <OD_get_u16>
    TPDO->inhibitTime_us = (uint32_t)inhibitTime * 100U;
 8003200:	8a7b      	ldrh	r3, [r7, #18]
 8003202:	461a      	mov	r2, r3
 8003204:	2364      	movs	r3, #100	@ 0x64
 8003206:	fb03 f202 	mul.w	r2, r3, r2
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
    TPDO->eventTime_us = (uint32_t)eventTime * 1000U;
 8003210:	8a3b      	ldrh	r3, [r7, #16]
 8003212:	461a      	mov	r2, r3
 8003214:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003218:	fb03 f202 	mul.w	r2, r3, r2
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
#endif

    /* Configure communication parameter - SYNC start value (optional) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
    TPDO->syncStartValue = 0;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
    (void)OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f503 72bc 	add.w	r2, r3, #376	@ 0x178
 8003230:	2301      	movs	r3, #1
 8003232:	2106      	movs	r1, #6
 8003234:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003236:	f7fe feb9 	bl	8001fac <OD_get_u8>
    TPDO->SYNC = SYNC;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
    TPDO->syncCounter = 255;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	22ff      	movs	r2, #255	@ 0xff
 8003246:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
#endif

    /* Configure OD extensions */
#if ((CO_CONFIG_PDO)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    PDO->isRPDO = false;
 800324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324c:	2200      	movs	r2, #0
 800324e:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    PDO->OD = OD;
 8003252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    PDO->CANdevIdx = CANdevTxIdx;
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003260:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    PDO->preDefinedCanId = preDefinedCanId;
 8003264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003266:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8003268:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142
    PDO->configuredCanId = CAN_ID;
 800326c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8003270:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
    PDO->OD_communicationParam_ext.object = TPDO;
 8003274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 800327c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327e:	4a13      	ldr	r2, [pc, #76]	@ (80032cc <CO_TPDO_init+0x2d0>)
 8003280:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 8003284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003286:	4a12      	ldr	r2, [pc, #72]	@ (80032d0 <CO_TPDO_init+0x2d4>)
 8003288:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
    PDO->OD_mappingParam_extension.object = TPDO;
 800328c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8003294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003296:	4a0f      	ldr	r2, [pc, #60]	@ (80032d4 <CO_TPDO_init+0x2d8>)
 8003298:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 800329c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329e:	4a0e      	ldr	r2, [pc, #56]	@ (80032d8 <CO_TPDO_init+0x2dc>)
 80032a0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    (void)OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 80032a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a6:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80032aa:	4619      	mov	r1, r3
 80032ac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80032ae:	f7fe fe69 	bl	8001f84 <OD_extension_init>
    (void)OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 80032b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80032b8:	4619      	mov	r1, r3
 80032ba:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80032bc:	f7fe fe62 	bl	8001f84 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3730      	adds	r7, #48	@ 0x30
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	080024a3 	.word	0x080024a3
 80032d0:	08002d59 	.word	0x08002d59
 80032d4:	080018af 	.word	0x080018af
 80032d8:	08002371 	.word	0x08002371

080032dc <CO_TPDOsend>:
 * @param TPDO TPDO object.
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t
CO_TPDOsend(CO_TPDO_t* TPDO) {
 80032dc:	b590      	push	{r4, r7, lr}
 80032de:	b093      	sub	sp, #76	@ 0x4c
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	6078      	str	r0, [r7, #4]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t* dataTPDO = &TPDO->CANtxBuff->data[0];
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 80032ee:	3305      	adds	r3, #5
 80032f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    OD_size_t verifyLength = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	63bb      	str	r3, [r7, #56]	@ 0x38

#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
                          || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO));
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d004      	beq.n	800330a <CO_TPDOsend+0x2e>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8003306:	2bfd      	cmp	r3, #253	@ 0xfd
 8003308:	d901      	bls.n	800330e <CO_TPDOsend+0x32>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <CO_TPDOsend+0x34>
 800330e:	2300      	movs	r3, #0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8003310:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_OD_IO_ACCESS) != 0
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003312:	2300      	movs	r3, #0
 8003314:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003318:	e066      	b.n	80033e8 <CO_TPDOsend+0x10c>
        OD_IO_t* OD_IO = &PDO->OD_IO[i];
 800331a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800331e:	015b      	lsls	r3, r3, #5
 8003320:	3310      	adds	r3, #16
 8003322:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003324:	4413      	add	r3, r2
 8003326:	623b      	str	r3, [r7, #32]
        OD_stream_t* stream = &OD_IO->stream;
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	61fb      	str	r3, [r7, #28]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t)stream->dataOffset;
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	76fb      	strb	r3, [r7, #27]

        /* additional safety check */
        verifyLength += (OD_size_t)mappedLength;
 8003332:	7efb      	ldrb	r3, [r7, #27]
 8003334:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003336:	4413      	add	r3, r2
 8003338:	63bb      	str	r3, [r7, #56]	@ 0x38
        if (verifyLength > CO_PDO_MAX_SIZE) {
 800333a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800333c:	2b08      	cmp	r3, #8
 800333e:	d85a      	bhi.n	80033f6 <CO_TPDOsend+0x11a>
            break;
        }

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	633b      	str	r3, [r7, #48]	@ 0x30
        if (ODdataLength > CO_PDO_MAX_SIZE) {
 8003346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003348:	2b08      	cmp	r3, #8
 800334a:	d901      	bls.n	8003350 <CO_TPDOsend+0x74>
            ODdataLength = CO_PDO_MAX_SIZE;
 800334c:	2308      	movs	r3, #8
 800334e:	633b      	str	r3, [r7, #48]	@ 0x30
        }
        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t* dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 8003350:	7efb      	ldrb	r3, [r7, #27]
 8003352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003354:	429a      	cmp	r2, r3
 8003356:	d90a      	bls.n	800336e <CO_TPDOsend+0x92>
            (void)memset(buf, 0, sizeof(buf));
 8003358:	f107 030c 	add.w	r3, r7, #12
 800335c:	2208      	movs	r2, #8
 800335e:	2100      	movs	r1, #0
 8003360:	4618      	mov	r0, r3
 8003362:	f007 ff21 	bl	800b1a8 <memset>
            dataTPDOCopy = buf;
 8003366:	f107 030c 	add.w	r3, r7, #12
 800336a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800336c:	e001      	b.n	8003372 <CO_TPDOsend+0x96>
        } else {
            dataTPDOCopy = dataTPDO;
 800336e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003370:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read() and store mappedLength back to stream.dataOffset */
        stream->dataOffset = 0;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	2200      	movs	r2, #0
 8003376:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	699c      	ldr	r4, [r3, #24]
 800337c:	f107 0308 	add.w	r3, r7, #8
 8003380:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003382:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003384:	69f8      	ldr	r0, [r7, #28]
 8003386:	47a0      	blx	r4
        stream->dataOffset = mappedLength;
 8003388:	7efa      	ldrb	r2, [r7, #27]
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	60da      	str	r2, [r3, #12]
            }
        }
#endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 800338e:	7efb      	ldrb	r3, [r7, #27]
 8003390:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003392:	429a      	cmp	r2, r3
 8003394:	d906      	bls.n	80033a4 <CO_TPDOsend+0xc8>
            (void)memcpy(dataTPDO, buf, mappedLength);
 8003396:	7efa      	ldrb	r2, [r7, #27]
 8003398:	f107 030c 	add.w	r3, r7, #12
 800339c:	4619      	mov	r1, r3
 800339e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80033a0:	f007 ff8d 	bl	800b2be <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
#if OD_FLAGS_PDO_SIZE > 0
        uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 80033a4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80033a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033aa:	3244      	adds	r2, #68	@ 0x44
 80033ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b0:	617b      	str	r3, [r7, #20]
        if ((flagPDObyte != NULL) && eventDriven) {
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00e      	beq.n	80033d6 <CO_TPDOsend+0xfa>
 80033b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <CO_TPDOsend+0xfa>
            *flagPDObyte |= PDO->flagPDObitmask[i];
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	781a      	ldrb	r2, [r3, #0]
 80033c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80033c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033c8:	440b      	add	r3, r1
 80033ca:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80033ce:	4313      	orrs	r3, r2
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	701a      	strb	r2, [r3, #0]
        }
#endif

        dataTPDO += mappedLength;
 80033d6:	7efb      	ldrb	r3, [r7, #27]
 80033d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033da:	4413      	add	r3, r2
 80033dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80033de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80033e2:	3301      	adds	r3, #1
 80033e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80033e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ea:	7b5b      	ldrb	r3, [r3, #13]
 80033ec:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d392      	bcc.n	800331a <CO_TPDOsend+0x3e>
 80033f4:	e000      	b.n	80033f8 <CO_TPDOsend+0x11c>
            break;
 80033f6:	bf00      	nop
        }
#endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    if ((verifyLength > CO_PDO_MAX_SIZE) || (verifyLength != (OD_size_t)PDO->dataLength)) {
 80033f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d805      	bhi.n	800340a <CO_TPDOsend+0x12e>
 80033fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003400:	7b1b      	ldrb	r3, [r3, #12]
 8003402:	461a      	mov	r2, r3
 8003404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003406:	4293      	cmp	r3, r2
 8003408:	d00e      	beq.n	8003428 <CO_TPDOsend+0x14c>
        /* bug in software, should not happen */
        CO_errorReport(PDO->em, CO_EM_GENERIC_SOFTWARE_ERROR, CO_EMC_SOFTWARE_INTERNAL, (0x200000U | verifyLength));
 800340a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003410:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	f44f 43c2 	mov.w	r3, #24832	@ 0x6100
 800341a:	222c      	movs	r2, #44	@ 0x2c
 800341c:	2101      	movs	r1, #1
 800341e:	f7fd fc0e 	bl	8000c3e <CO_error>
        return CO_ERROR_DATA_CORRUPT;
 8003422:	f06f 030c 	mvn.w	r3, #12
 8003426:	e019      	b.n	800345c <CO_TPDOsend+0x180>
    }

    TPDO->sendRequest = false;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
    TPDO->eventTimer = TPDO->eventTime_us;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 8003448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8003452:	4619      	mov	r1, r3
 8003454:	4610      	mov	r0, r2
 8003456:	f004 f871 	bl	800753c <CO_CANsend>
 800345a:	4603      	mov	r3, r0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3744      	adds	r7, #68	@ 0x44
 8003460:	46bd      	mov	sp, r7
 8003462:	bd90      	pop	{r4, r7, pc}

08003464 <CO_TPDO_process>:
void
CO_TPDO_process(CO_TPDO_t* TPDO,
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0) || defined CO_DOXYGEN
                uint32_t timeDifference_us, uint32_t* timerNext_us,
#endif
                bool_t NMTisOperational, bool_t syncWas) {
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	61bb      	str	r3, [r7, #24]
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)) != 0
    (void)timerNext_us;
#endif
    (void)syncWas;

    if (PDO->valid && NMTisOperational) {
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 80dc 	beq.w	8003638 <CO_TPDO_process+0x1d4>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80d8 	beq.w	8003638 <CO_TPDO_process+0x1d4>

        /* check for event timer or application event */
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0) || (OD_FLAGS_PDO_SIZE > 0)
        if ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d004      	beq.n	800349c <CO_TPDO_process+0x38>
            || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8003498:	2bfd      	cmp	r3, #253	@ 0xfd
 800349a:	d946      	bls.n	800352a <CO_TPDO_process+0xc6>
            /* event timer */
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            if (TPDO->eventTime_us != 0U) {
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d018      	beq.n	80034d8 <CO_TPDO_process+0x74>
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d205      	bcs.n	80034be <CO_TPDO_process+0x5a>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	e000      	b.n	80034c0 <CO_TPDO_process+0x5c>
 80034be:	2300      	movs	r3, #0
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
                if (TPDO->eventTimer == 0U) {
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d103      	bne.n	80034d8 <CO_TPDO_process+0x74>
                    TPDO->sendRequest = true;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
#endif
            }
#endif
            /* check for any OD_requestTPDO() */
#if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest) {
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d123      	bne.n	800352a <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80034e2:	2300      	movs	r3, #0
 80034e4:	77fb      	strb	r3, [r7, #31]
 80034e6:	e01b      	b.n	8003520 <CO_TPDO_process+0xbc>
                    uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 80034e8:	7ffa      	ldrb	r2, [r7, #31]
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	3244      	adds	r2, #68	@ 0x44
 80034ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034f2:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL) {
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00f      	beq.n	800351a <CO_TPDO_process+0xb6>
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0U) {
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	781a      	ldrb	r2, [r3, #0]
 80034fe:	7ffb      	ldrb	r3, [r7, #31]
 8003500:	69b9      	ldr	r1, [r7, #24]
 8003502:	440b      	add	r3, r1
 8003504:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8003508:	4013      	ands	r3, r2
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d104      	bne.n	800351a <CO_TPDO_process+0xb6>
                            TPDO->sendRequest = true;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2201      	movs	r2, #1
 8003514:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
                            break;
 8003518:	e007      	b.n	800352a <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 800351a:	7ffb      	ldrb	r3, [r7, #31]
 800351c:	3301      	adds	r3, #1
 800351e:	77fb      	strb	r3, [r7, #31]
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	7b5b      	ldrb	r3, [r3, #13]
 8003524:	7ffa      	ldrb	r2, [r7, #31]
 8003526:	429a      	cmp	r2, r3
 8003528:	d3de      	bcc.n	80034e8 <CO_TPDO_process+0x84>
#endif
        }
#endif /* ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0) */

        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8003530:	2bfd      	cmp	r3, #253	@ 0xfd
 8003532:	d91d      	bls.n	8003570 <CO_TPDO_process+0x10c>
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
                                                                          : 0U;
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	429a      	cmp	r2, r3
 800353e:	d205      	bcs.n	800354c <CO_TPDO_process+0xe8>
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f8d3 2184 	ldr.w	r2, [r3, #388]	@ 0x184
                                                                          : 0U;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	e000      	b.n	800354e <CO_TPDO_process+0xea>
 800354c:	2300      	movs	r3, #0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	f8c2 3184 	str.w	r3, [r2, #388]	@ 0x184

            /* send TPDO */
            if (TPDO->sendRequest && (TPDO->inhibitTimer == 0U)) {
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 800355a:	2b00      	cmp	r3, #0
 800355c:	d07d      	beq.n	800365a <CO_TPDO_process+0x1f6>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8003564:	2b00      	cmp	r3, #0
 8003566:	d178      	bne.n	800365a <CO_TPDO_process+0x1f6>
                (void)CO_TPDOsend(TPDO);
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f7ff feb7 	bl	80032dc <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800356e:	e074      	b.n	800365a <CO_TPDO_process+0x1f6>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        else if ((TPDO->SYNC != NULL) && syncWas) {
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8003576:	2b00      	cmp	r3, #0
 8003578:	d06f      	beq.n	800365a <CO_TPDO_process+0x1f6>
 800357a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357c:	2b00      	cmp	r3, #0
 800357e:	d06c      	beq.n	800365a <CO_TPDO_process+0x1f6>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8003586:	2b00      	cmp	r3, #0
 8003588:	d108      	bne.n	800359c <CO_TPDO_process+0x138>
                if (TPDO->sendRequest) {
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8003590:	2b00      	cmp	r3, #0
 8003592:	d062      	beq.n	800365a <CO_TPDO_process+0x1f6>
                    (void)CO_TPDOsend(TPDO);
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f7ff fea1 	bl	80032dc <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800359a:	e05e      	b.n	800365a <CO_TPDO_process+0x1f6>
                }
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255U) {
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 80035a2:	2bff      	cmp	r3, #255	@ 0xff
 80035a4:	d119      	bne.n	80035da <CO_TPDO_process+0x176>
                    if ((TPDO->SYNC->counterOverflowValue != 0U) && (TPDO->syncStartValue != 0U)) {
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80035ac:	7c5b      	ldrb	r3, [r3, #17]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d009      	beq.n	80035c6 <CO_TPDO_process+0x162>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d004      	beq.n	80035c6 <CO_TPDO_process+0x162>
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	22fe      	movs	r2, #254	@ 0xfe
 80035c0:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
 80035c4:	e009      	b.n	80035da <CO_TPDO_process+0x176>
                    } else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = (TPDO->transmissionType / 2U) + 1U;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 80035cc:	085b      	lsrs	r3, r3, #1
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	3301      	adds	r3, #1
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC with matched syncStartValue. */
                if (TPDO->syncCounter == 254U) {
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 80035e0:	2bfe      	cmp	r3, #254	@ 0xfe
 80035e2:	d112      	bne.n	800360a <CO_TPDO_process+0x1a6>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80035ea:	7c9a      	ldrb	r2, [r3, #18]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d131      	bne.n	800365a <CO_TPDO_process+0x1f6>
                        TPDO->syncCounter = TPDO->transmissionType;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f893 216c 	ldrb.w	r2, [r3, #364]	@ 0x16c
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
                        (void)CO_TPDOsend(TPDO);
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f7ff fe6a 	bl	80032dc <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003608:	e027      	b.n	800365a <CO_TPDO_process+0x1f6>
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0U) {
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 8003610:	3b01      	subs	r3, #1
 8003612:	b2da      	uxtb	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 8003620:	2b00      	cmp	r3, #0
 8003622:	d11a      	bne.n	800365a <CO_TPDO_process+0x1f6>
                    TPDO->syncCounter = TPDO->transmissionType;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f893 216c 	ldrb.w	r2, [r3, #364]	@ 0x16c
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
                    (void)CO_TPDOsend(TPDO);
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f7ff fe53 	bl	80032dc <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003636:	e010      	b.n	800365a <CO_TPDO_process+0x1f6>
        }
#endif

    } else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
        TPDO->inhibitTimer = 0;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
        TPDO->eventTimer = 0;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
#endif
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        TPDO->syncCounter = 255;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	22ff      	movs	r2, #255	@ 0xff
 8003654:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
#endif
    }
}
 8003658:	e000      	b.n	800365c <CO_TPDO_process+0x1f8>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800365a:	bf00      	nop
}
 800365c:	bf00      	nop
 800365e:	3720      	adds	r7, #32
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <CO_getUint8>:
CO_getUint8(const void* buf) {
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	73fb      	strb	r3, [r7, #15]
    return value;
 8003672:	7bfb      	ldrb	r3, [r7, #15]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60fb      	str	r3, [r7, #12]
    return value;
 800368e:	68fb      	ldr	r3, [r7, #12]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <OD_getIndex+0x14>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	e000      	b.n	80036b2 <OD_getIndex+0x16>
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 80036ce:	2305      	movs	r3, #5
 80036d0:	e003      	b.n	80036da <OD_extension_init+0x1c>
    entry->extension = extension;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b086      	sub	sp, #24
 80036ea:	af02      	add	r7, sp, #8
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	603b      	str	r3, [r7, #0]
 80036f2:	460b      	mov	r3, r1
 80036f4:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80036f6:	7af9      	ldrb	r1, [r7, #11]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	2301      	movs	r3, #1
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f7fe fb37 	bl	8001d74 <OD_get_value>
 8003706:	4603      	mov	r3, r0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	460b      	mov	r3, r1
 800371e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003720:	7af9      	ldrb	r1, [r7, #11]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	2304      	movs	r3, #4
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f7fe fb22 	bl	8001d74 <OD_get_value>
 8003730:	4603      	mov	r3, r0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <OD_set_u32>:
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t
OD_set_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t val, bool_t odOrig) {
 800373a:	b580      	push	{r7, lr}
 800373c:	b086      	sub	sp, #24
 800373e:	af02      	add	r7, sp, #8
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	460b      	mov	r3, r1
 8003748:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 800374a:	1d3a      	adds	r2, r7, #4
 800374c:	7af9      	ldrb	r1, [r7, #11]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	2304      	movs	r3, #4
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f7fe fb4a 	bl	8001dee <OD_set_value>
 800375a:	4603      	mov	r3, r0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SDO_receive(void* object, void* msg) {
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t* SDO = (CO_SDOserver_t*)object;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	791b      	ldrb	r3, [r3, #4]
 8003776:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	3305      	adds	r3, #5
 800377c:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8U) {
 800377e:	7cfb      	ldrb	r3, [r7, #19]
 8003780:	2b08      	cmp	r3, #8
 8003782:	d115      	bne.n	80037b0 <CO_SDO_receive+0x4c>
        if (data[0] == 0x80U) {
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b80      	cmp	r3, #128	@ 0x80
 800378a:	d103      	bne.n	8003794 <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2200      	movs	r2, #0
 8003790:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 8003792:	e00d      	b.n	80037b0 <CO_SDO_receive+0x4c>
        } else if (CO_FLAG_READ(SDO->CANrxNew)) {
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003798:	2b00      	cmp	r3, #0
 800379a:	d109      	bne.n	80037b0 <CO_SDO_receive+0x4c>
            (void)memcpy(SDO->CANrxData, data, DLC);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	3340      	adds	r3, #64	@ 0x40
 80037a0:	7cfa      	ldrb	r2, [r7, #19]
 80037a2:	68f9      	ldr	r1, [r7, #12]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f007 fd8a 	bl	800b2be <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2201      	movs	r2, #1
 80037ae:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80037b0:	bf00      	nop
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <CO_SDOserver_init_canRxTx>:

/* helper for configuring CANrx and CANtx */
static CO_ReturnError_t
CO_SDOserver_init_canRxTx(CO_SDOserver_t* SDO, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANdevTxIdx,
                          uint32_t COB_IDClientToServer, uint32_t COB_IDServerToClient) {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08a      	sub	sp, #40	@ 0x28
 80037bc:	af04      	add	r7, sp, #16
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	4611      	mov	r1, r2
 80037c4:	461a      	mov	r2, r3
 80037c6:	460b      	mov	r3, r1
 80037c8:	80fb      	strh	r3, [r7, #6]
 80037ca:	4613      	mov	r3, r2
 80037cc:	80bb      	strh	r3, [r7, #4]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    /* proceed only, if parameters change */
    if ((COB_IDClientToServer == SDO->COB_IDClientToServer) && (COB_IDServerToClient == SDO->COB_IDServerToClient)) {
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d2:	6a3a      	ldr	r2, [r7, #32]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d106      	bne.n	80037e6 <CO_SDOserver_init_canRxTx+0x2e>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037de:	429a      	cmp	r2, r3
 80037e0:	d101      	bne.n	80037e6 <CO_SDOserver_init_canRxTx+0x2e>
        return CO_ERROR_NO;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e04e      	b.n	8003884 <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6a3a      	ldr	r2, [r7, #32]
 80037ea:	651a      	str	r2, [r3, #80]	@ 0x50
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037f0:	655a      	str	r2, [r3, #84]	@ 0x54
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000UL) == 0U) ? (uint16_t)COB_IDClientToServer : 0U;
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	db02      	blt.n	80037fe <CO_SDOserver_init_canRxTx+0x46>
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	e000      	b.n	8003800 <CO_SDOserver_init_canRxTx+0x48>
 80037fe:	2300      	movs	r3, #0
 8003800:	82fb      	strh	r3, [r7, #22]
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000UL) == 0U) ? (uint16_t)COB_IDServerToClient : 0U;
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	2b00      	cmp	r3, #0
 8003806:	db02      	blt.n	800380e <CO_SDOserver_init_canRxTx+0x56>
 8003808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380a:	b29b      	uxth	r3, r3
 800380c:	e000      	b.n	8003810 <CO_SDOserver_init_canRxTx+0x58>
 800380e:	2300      	movs	r3, #0
 8003810:	82bb      	strh	r3, [r7, #20]
    if ((idC2S != 0U) && (idS2C != 0U)) {
 8003812:	8afb      	ldrh	r3, [r7, #22]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d006      	beq.n	8003826 <CO_SDOserver_init_canRxTx+0x6e>
 8003818:	8abb      	ldrh	r3, [r7, #20]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	611a      	str	r2, [r3, #16]
 8003824:	e006      	b.n	8003834 <CO_SDOserver_init_canRxTx+0x7c>
    } else {
        idC2S = 0;
 8003826:	2300      	movs	r3, #0
 8003828:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 800382a:	2300      	movs	r3, #0
 800382c:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, idC2S, 0x7FF, false, (void*)SDO, CO_SDO_receive);
 8003834:	8afa      	ldrh	r2, [r7, #22]
 8003836:	88f9      	ldrh	r1, [r7, #6]
 8003838:	4b14      	ldr	r3, [pc, #80]	@ (800388c <CO_SDOserver_init_canRxTx+0xd4>)
 800383a:	9302      	str	r3, [sp, #8]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	9301      	str	r3, [sp, #4]
 8003840:	2300      	movs	r3, #0
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003848:	68b8      	ldr	r0, [r7, #8]
 800384a:	f003 fd9f 	bl	800738c <CO_CANrxBufferInit>
 800384e:	4603      	mov	r3, r0
 8003850:	74fb      	strb	r3, [r7, #19]

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(SDO->CANdevTx, CANdevTxIdx, idS2C, false, 8, false);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	8aba      	ldrh	r2, [r7, #20]
 8003858:	88b9      	ldrh	r1, [r7, #4]
 800385a:	2300      	movs	r3, #0
 800385c:	9301      	str	r3, [sp, #4]
 800385e:	2308      	movs	r3, #8
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	2300      	movs	r3, #0
 8003864:	f003 fdf0 	bl	8007448 <CO_CANtxBufferInit>
 8003868:	4602      	mov	r2, r0
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	605a      	str	r2, [r3, #4]

    if (SDO->CANtxBuff == NULL) {
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d104      	bne.n	8003880 <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8003876:	23ff      	movs	r3, #255	@ 0xff
 8003878:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	611a      	str	r2, [r3, #16]
    }

    return ret;
 8003880:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	08003765 	.word	0x08003765

08003890 <OD_write_1201_additional>:
 * Custom function for writing OD object _SDO server parameter_, additional channels
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1201_additional(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8003890:	b590      	push	{r4, r7, lr}
 8003892:	b08f      	sub	sp, #60	@ 0x3c
 8003894:	af02      	add	r7, sp, #8
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <OD_write_1201_additional+0x20>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d002      	beq.n	80038b0 <OD_write_1201_additional+0x20>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 80038b0:	2309      	movs	r3, #9
 80038b2:	e0f9      	b.n	8003aa8 <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t* SDO = (CO_SDOserver_t*)stream->object;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    switch (stream->subIndex) {
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	7d1b      	ldrb	r3, [r3, #20]
 80038be:	2b03      	cmp	r3, #3
 80038c0:	f200 80e8 	bhi.w	8003a94 <OD_write_1201_additional+0x204>
 80038c4:	a201      	add	r2, pc, #4	@ (adr r2, 80038cc <OD_write_1201_additional+0x3c>)
 80038c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ca:	bf00      	nop
 80038cc:	080038dd 	.word	0x080038dd
 80038d0:	080038e1 	.word	0x080038e1
 80038d4:	080039a5 	.word	0x080039a5
 80038d8:	08003a6b 	.word	0x08003a6b
        case 0: /* Highest sub-index supported */ return ODR_READONLY; break;
 80038dc:	2304      	movs	r3, #4
 80038de:	e0e3      	b.n	8003aa8 <OD_write_1201_additional+0x218>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 80038e0:	68b8      	ldr	r0, [r7, #8]
 80038e2:	f7ff fecd 	bl	8003680 <CO_getUint32>
 80038e6:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038f0:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FFU);
 80038f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038fc:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	43db      	mvns	r3, r3
 8003902:	0fdb      	lsrs	r3, r3, #31
 8003904:	b2db      	uxtb	r3, r3
 8003906:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || ((valid && SDO->valid) && (CAN_ID != CAN_ID_cur))
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4b69      	ldr	r3, [pc, #420]	@ (8003ab0 <OD_write_1201_additional+0x220>)
 800390c:	4013      	ands	r3, r2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d134      	bne.n	800397c <OD_write_1201_additional+0xec>
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d007      	beq.n	8003928 <OD_write_1201_additional+0x98>
 8003918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <OD_write_1201_additional+0x98>
 8003920:	8afa      	ldrh	r2, [r7, #22]
 8003922:	8abb      	ldrh	r3, [r7, #20]
 8003924:	429a      	cmp	r2, r3
 8003926:	d129      	bne.n	800397c <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d028      	beq.n	8003980 <OD_write_1201_additional+0xf0>
 800392e:	8afb      	ldrh	r3, [r7, #22]
 8003930:	2b7f      	cmp	r3, #127	@ 0x7f
 8003932:	d923      	bls.n	800397c <OD_write_1201_additional+0xec>
 8003934:	8afb      	ldrh	r3, [r7, #22]
 8003936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800393a:	d903      	bls.n	8003944 <OD_write_1201_additional+0xb4>
 800393c:	8afb      	ldrh	r3, [r7, #22]
 800393e:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8003942:	d91b      	bls.n	800397c <OD_write_1201_additional+0xec>
 8003944:	8afb      	ldrh	r3, [r7, #22]
 8003946:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 800394a:	d903      	bls.n	8003954 <OD_write_1201_additional+0xc4>
 800394c:	8afb      	ldrh	r3, [r7, #22]
 800394e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003952:	d313      	bcc.n	800397c <OD_write_1201_additional+0xec>
 8003954:	8afb      	ldrh	r3, [r7, #22]
 8003956:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800395a:	d903      	bls.n	8003964 <OD_write_1201_additional+0xd4>
 800395c:	8afb      	ldrh	r3, [r7, #22]
 800395e:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8003962:	d30b      	bcc.n	800397c <OD_write_1201_additional+0xec>
 8003964:	8afb      	ldrh	r3, [r7, #22]
 8003966:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 800396a:	d303      	bcc.n	8003974 <OD_write_1201_additional+0xe4>
 800396c:	8afb      	ldrh	r3, [r7, #22]
 800396e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003972:	d303      	bcc.n	800397c <OD_write_1201_additional+0xec>
 8003974:	8afb      	ldrh	r3, [r7, #22]
 8003976:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800397a:	d901      	bls.n	8003980 <OD_write_1201_additional+0xf0>
                return ODR_INVALID_VALUE;
 800397c:	230f      	movs	r3, #15
 800397e:	e093      	b.n	8003aa8 <OD_write_1201_additional+0x218>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx, COB_ID,
 8003980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003982:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003986:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 800398a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800398c:	f8b3 004e 	ldrh.w	r0, [r3, #78]	@ 0x4e
 8003990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003994:	9301      	str	r3, [sp, #4]
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	4603      	mov	r3, r0
 800399c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800399e:	f7ff ff0b 	bl	80037b8 <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDServerToClient);
            break;
 80039a2:	e07a      	b.n	8003a9a <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 80039a4:	68b8      	ldr	r0, [r7, #8]
 80039a6:	f7ff fe6b 	bl	8003680 <CO_getUint32>
 80039aa:	6278      	str	r0, [r7, #36]	@ 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 80039ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039b4:	847b      	strh	r3, [r7, #34]	@ 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FFU);
 80039b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039c0:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	43db      	mvns	r3, r3
 80039c6:	0fdb      	lsrs	r3, r3, #31
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && (SDO->valid && (CAN_ID != CAN_ID_cur)))
 80039cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ce:	4b38      	ldr	r3, [pc, #224]	@ (8003ab0 <OD_write_1201_additional+0x220>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d134      	bne.n	8003a40 <OD_write_1201_additional+0x1b0>
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d007      	beq.n	80039ec <OD_write_1201_additional+0x15c>
 80039dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <OD_write_1201_additional+0x15c>
 80039e4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80039e6:	8c3b      	ldrh	r3, [r7, #32]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d129      	bne.n	8003a40 <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d028      	beq.n	8003a44 <OD_write_1201_additional+0x1b4>
 80039f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80039f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80039f6:	d923      	bls.n	8003a40 <OD_write_1201_additional+0x1b0>
 80039f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80039fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039fe:	d903      	bls.n	8003a08 <OD_write_1201_additional+0x178>
 8003a00:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003a02:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8003a06:	d91b      	bls.n	8003a40 <OD_write_1201_additional+0x1b0>
 8003a08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003a0a:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8003a0e:	d903      	bls.n	8003a18 <OD_write_1201_additional+0x188>
 8003a10:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003a12:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003a16:	d313      	bcc.n	8003a40 <OD_write_1201_additional+0x1b0>
 8003a18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003a1a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003a1e:	d903      	bls.n	8003a28 <OD_write_1201_additional+0x198>
 8003a20:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003a22:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8003a26:	d30b      	bcc.n	8003a40 <OD_write_1201_additional+0x1b0>
 8003a28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003a2a:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8003a2e:	d303      	bcc.n	8003a38 <OD_write_1201_additional+0x1a8>
 8003a30:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003a32:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a36:	d303      	bcc.n	8003a40 <OD_write_1201_additional+0x1b0>
 8003a38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003a3a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a3e:	d901      	bls.n	8003a44 <OD_write_1201_additional+0x1b4>
                return ODR_INVALID_VALUE;
 8003a40:	230f      	movs	r3, #15
 8003a42:	e031      	b.n	8003aa8 <OD_write_1201_additional+0x218>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx,
 8003a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a46:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a4a:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8003a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a50:	f8b3 404e 	ldrh.w	r4, [r3, #78]	@ 0x4e
 8003a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a5a:	9201      	str	r2, [sp, #4]
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	4623      	mov	r3, r4
 8003a60:	4602      	mov	r2, r0
 8003a62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a64:	f7ff fea8 	bl	80037b8 <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDClientToServer, COB_ID);
            break;
 8003a68:	e017      	b.n	8003a9a <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1U) {
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d001      	beq.n	8003a74 <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 8003a70:	230b      	movs	r3, #11
 8003a72:	e019      	b.n	8003aa8 <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 8003a74:	68b8      	ldr	r0, [r7, #8]
 8003a76:	f7ff fdf5 	bl	8003664 <CO_getUint8>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            if ((nodeId < 1U) || (nodeId > 127U)) {
 8003a80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <OD_write_1201_additional+0x200>
 8003a88:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	da03      	bge.n	8003a98 <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 8003a90:	230f      	movs	r3, #15
 8003a92:	e009      	b.n	8003aa8 <OD_write_1201_additional+0x218>
            }
            break;
        }

        default: return ODR_SUB_NOT_EXIST; break;
 8003a94:	230e      	movs	r3, #14
 8003a96:	e007      	b.n	8003aa8 <OD_write_1201_additional+0x218>
            break;
 8003a98:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	68b9      	ldr	r1, [r7, #8]
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f7fd ff5c 	bl	800195e <OD_writeOriginal>
 8003aa6:	4603      	mov	r3, r0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3734      	adds	r7, #52	@ 0x34
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd90      	pop	{r4, r7, pc}
 8003ab0:	3ffff800 	.word	0x3ffff800

08003ab4 <CO_SDOserver_init>:
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC */

CO_ReturnError_t
CO_SDOserver_init(CO_SDOserver_t* SDO, OD_t* OD, OD_entry_t* OD_1200_SDOsrvPar, uint8_t nodeId,
                  uint16_t SDOtimeoutTime_ms, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, CO_CANmodule_t* CANdevTx,
                  uint16_t CANdevTxIdx, uint32_t* errInfo) {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08c      	sub	sp, #48	@ 0x30
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if ((SDO == NULL) || (OD == NULL) || (CANdevRx == NULL) || (CANdevTx == NULL)) {
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <CO_SDOserver_init+0x26>
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <CO_SDOserver_init+0x26>
 8003ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <CO_SDOserver_init+0x26>
 8003ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d102      	bne.n	8003ae0 <CO_SDOserver_init+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003ada:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ade:	e0f5      	b.n	8003ccc <CO_SDOserver_init+0x218>
    }

    /* Configure object variables */
    SDO->OD = OD;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	78fa      	ldrb	r2, [r7, #3]
 8003aea:	731a      	strb	r2, [r3, #12]
#if (((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED)) != 0
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000U;
 8003aec:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003aee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003af2:	fb03 f202 	mul.w	r2, r3, r2
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	679a      	str	r2, [r3, #120]	@ 0x78
#endif
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) != 0
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d117      	bne.n	8003b36 <CO_SDOserver_init+0x82>
        /* configure default SDO channel */
        if ((nodeId < 1U) || (nodeId > 127U)) {
 8003b06:	78fb      	ldrb	r3, [r7, #3]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <CO_SDOserver_init+0x60>
 8003b0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	da02      	bge.n	8003b1a <CO_SDOserver_init+0x66>
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8003b14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b18:	e0d8      	b.n	8003ccc <CO_SDOserver_init+0x218>
        }

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8003b1a:	78fb      	ldrb	r3, [r7, #3]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8003b22:	84fb      	strh	r3, [r7, #38]	@ 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 8003b2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
        SDO->valid = true;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	611a      	str	r2, [r3, #16]
 8003b34:	e0a4      	b.n	8003c80 <CO_SDOserver_init+0x1cc>
    } else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff fdb0 	bl	800369c <OD_getIndex>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	847b      	strh	r3, [r7, #34]	@ 0x22

        if (OD_SDOsrvParIdx == (uint16_t)OD_H1200_SDO_SERVER_1_PARAM) {
 8003b40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003b42:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 8003b46:	d123      	bne.n	8003b90 <CO_SDOserver_init+0xdc>
            /* configure default SDO channel and SDO server parameters for it */
            if ((nodeId < 1U) || (nodeId > 127U)) {
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <CO_SDOserver_init+0xa2>
 8003b4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	da02      	bge.n	8003b5c <CO_SDOserver_init+0xa8>
                return CO_ERROR_ILLEGAL_ARGUMENT;
 8003b56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b5a:	e0b7      	b.n	8003ccc <CO_SDOserver_init+0x218>
            }

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8003b5c:	78fb      	ldrb	r3, [r7, #3]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8003b64:	84fb      	strh	r3, [r7, #38]	@ 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8003b66:	78fb      	ldrb	r3, [r7, #3]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 8003b6e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            SDO->valid = true;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	611a      	str	r2, [r3, #16]

            (void)OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 8003b76:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003b78:	2301      	movs	r3, #1
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff fddc 	bl	800373a <OD_set_u32>
            (void)OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 8003b82:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003b84:	2301      	movs	r3, #1
 8003b86:	2102      	movs	r1, #2
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff fdd6 	bl	800373a <OD_set_u32>
 8003b8e:	e077      	b.n	8003c80 <CO_SDOserver_init+0x1cc>
        } else if ((OD_SDOsrvParIdx > (uint16_t)OD_H1200_SDO_SERVER_1_PARAM)
 8003b90:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003b92:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 8003b96:	d96f      	bls.n	8003c78 <CO_SDOserver_init+0x1c4>
                   && (OD_SDOsrvParIdx <= ((uint16_t)OD_H1200_SDO_SERVER_1_PARAM + 0x7FU))) {
 8003b98:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003b9a:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 8003b9e:	d26b      	bcs.n	8003c78 <CO_SDOserver_init+0x1c4>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 8003ba0:	f107 021d 	add.w	r2, r7, #29
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff fd9c 	bl	80036e6 <OD_get_u8>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1, &COB_IDClientToServer32, true);
 8003bb4:	f107 0218 	add.w	r2, r7, #24
 8003bb8:	2301      	movs	r3, #1
 8003bba:	2101      	movs	r1, #1
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff fda7 	bl	8003710 <OD_get_u32>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	f887 3020 	strb.w	r3, [r7, #32]
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2, &COB_IDServerToClient32, true);
 8003bc8:	f107 0214 	add.w	r2, r7, #20
 8003bcc:	2301      	movs	r3, #1
 8003bce:	2102      	movs	r1, #2
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff fd9d 	bl	8003710 <OD_get_u32>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	77fb      	strb	r3, [r7, #31]

            if ((odRet0 != ODR_OK) || ((maxSubIndex != 2U) && (maxSubIndex != 3U)) || (odRet1 != ODR_OK)
 8003bda:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10d      	bne.n	8003bfe <CO_SDOserver_init+0x14a>
 8003be2:	7f7b      	ldrb	r3, [r7, #29]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d002      	beq.n	8003bee <CO_SDOserver_init+0x13a>
 8003be8:	7f7b      	ldrb	r3, [r7, #29]
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d107      	bne.n	8003bfe <CO_SDOserver_init+0x14a>
 8003bee:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d103      	bne.n	8003bfe <CO_SDOserver_init+0x14a>
                || (odRet2 != ODR_OK)) {
 8003bf6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d008      	beq.n	8003c10 <CO_SDOserver_init+0x15c>
                if (errInfo != NULL) {
 8003bfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <CO_SDOserver_init+0x156>
                    *errInfo = OD_SDOsrvParIdx;
 8003c04:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003c06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c08:	601a      	str	r2, [r3, #0]
                }
                return CO_ERROR_OD_PARAMETERS;
 8003c0a:	f06f 030b 	mvn.w	r3, #11
 8003c0e:	e05d      	b.n	8003ccc <CO_SDOserver_init+0x218>
            }

            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	db05      	blt.n	8003c22 <CO_SDOserver_init+0x16e>
                                       ? (uint16_t)(COB_IDClientToServer32 & 0x7FFU)
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 8003c1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	e000      	b.n	8003c24 <CO_SDOserver_init+0x170>
 8003c22:	2300      	movs	r3, #0
 8003c24:	84fb      	strh	r3, [r7, #38]	@ 0x26
                                       : 0U;
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	db05      	blt.n	8003c38 <CO_SDOserver_init+0x184>
                                       ? (uint16_t)(COB_IDServerToClient32 & 0x7FFU)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 8003c30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	e000      	b.n	8003c3a <CO_SDOserver_init+0x186>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	84bb      	strh	r3, [r7, #36]	@ 0x24
                                       : 0U;

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
            SDO->OD_1200_extension.object = SDO;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	659a      	str	r2, [r3, #88]	@ 0x58
            SDO->OD_1200_extension.read = OD_readOriginal;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4a23      	ldr	r2, [pc, #140]	@ (8003cd4 <CO_SDOserver_init+0x220>)
 8003c46:	65da      	str	r2, [r3, #92]	@ 0x5c
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4a23      	ldr	r2, [pc, #140]	@ (8003cd8 <CO_SDOserver_init+0x224>)
 8003c4c:	661a      	str	r2, [r3, #96]	@ 0x60
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar, &SDO->OD_1200_extension);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	3358      	adds	r3, #88	@ 0x58
 8003c52:	4619      	mov	r1, r3
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff fd32 	bl	80036be <OD_extension_init>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	77bb      	strb	r3, [r7, #30]
            if (odRetE != ODR_OK) {
 8003c5e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00b      	beq.n	8003c7e <CO_SDOserver_init+0x1ca>
                if (errInfo != NULL) {
 8003c66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <CO_SDOserver_init+0x1be>
                    *errInfo = OD_SDOsrvParIdx;
 8003c6c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003c6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c70:	601a      	str	r2, [r3, #0]
                }
                return CO_ERROR_OD_PARAMETERS;
 8003c72:	f06f 030b 	mvn.w	r3, #11
 8003c76:	e029      	b.n	8003ccc <CO_SDOserver_init+0x218>
            }
#endif
        } else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8003c78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c7c:	e026      	b.n	8003ccc <CO_SDOserver_init+0x218>
                   && (OD_SDOsrvParIdx <= ((uint16_t)OD_H1200_SDO_SERVER_1_PARAM + 0x7FU))) {
 8003c7e:	bf00      	nop
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* store the parameters and configure CANrx and CANtx */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SDO->CANdevRx = CANdevRx;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c8a:	649a      	str	r2, [r3, #72]	@ 0x48
    SDO->CANdevRxIdx = CANdevRxIdx;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8003c90:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    SDO->CANdevTxIdx = CANdevTxIdx;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8003c9a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	651a      	str	r2, [r3, #80]	@ 0x50
    SDO->COB_IDServerToClient = 0;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	655a      	str	r2, [r3, #84]	@ 0x54
#endif
    SDO->CANdevTx = CANdevTx;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cae:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO, CANdevRx, CANdevRxIdx, CANdevTxIdx, CanId_ClientToServer,
 8003cb0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003cb2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003cb4:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 8003cb8:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8003cba:	9201      	str	r2, [sp, #4]
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	460a      	mov	r2, r1
 8003cc2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f7ff fd77 	bl	80037b8 <CO_SDOserver_init_canRxTx>
 8003cca:	4603      	mov	r3, r0
                                     CanId_ServerToClient);
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3728      	adds	r7, #40	@ 0x28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	080018af 	.word	0x080018af
 8003cd8:	08003891 	.word	0x08003891

08003cdc <validateAndWriteToOD>:
 * @param crcOperation 0=none, 1=calculate, 2=calculate and compare
 * @parma crcClient crc checksum to campare with
 *
 * Returns true on success, otherwise write also abortCode and sets state to CO_SDO_ST_ABORT */
static bool_t
validateAndWriteToOD(CO_SDOserver_t* SDO, CO_SDO_abortCode_t* abortCode, uint8_t crcOperation, uint16_t crcClient) {
 8003cdc:	b590      	push	{r4, r7, lr}
 8003cde:	b08b      	sub	sp, #44	@ 0x2c
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	461a      	mov	r2, r3
 8003cea:	460b      	mov	r3, r1
 8003cec:	71fb      	strb	r3, [r7, #7]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003cf8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (SDO->finished) {
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 8082 	beq.w	8003e08 <validateAndWriteToOD+0x12c>
        /* Verify if size of data downloaded matches size indicated. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran != SDO->sizeInd)) {
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d015      	beq.n	8003d38 <validateAndWriteToOD+0x5c>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d00f      	beq.n	8003d38 <validateAndWriteToOD+0x5c>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d901      	bls.n	8003d28 <validateAndWriteToOD+0x4c>
 8003d24:	4a73      	ldr	r2, [pc, #460]	@ (8003ef4 <validateAndWriteToOD+0x218>)
 8003d26:	e000      	b.n	8003d2a <validateAndWriteToOD+0x4e>
 8003d28:	4a73      	ldr	r2, [pc, #460]	@ (8003ef8 <validateAndWriteToOD+0x21c>)
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2201      	movs	r2, #1
 8003d32:	751a      	strb	r2, [r3, #20]
            return false;
 8003d34:	2300      	movs	r3, #0
 8003d36:	e0d8      	b.n	8003eea <validateAndWriteToOD+0x20e>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	623b      	str	r3, [r7, #32]

        /* If dataType is string, then size of data downloaded may be shorter than size of the
         * OD data buffer. If so, add two zero bytes to terminate (unicode) string. Shorten
         * also OD data size, (temporary, send information about EOF into OD_IO.write) */
        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d44:	b25b      	sxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	da42      	bge.n	8003dd0 <validateAndWriteToOD+0xf4>
            && ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd))
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d004      	beq.n	8003d5a <validateAndWriteToOD+0x7e>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d54:	6a3a      	ldr	r2, [r7, #32]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d93a      	bls.n	8003dd0 <validateAndWriteToOD+0xf4>
            && ((SDO->bufOffsetWr + 2U) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE)) {
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003d60:	3302      	adds	r3, #2
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	d834      	bhi.n	8003dd0 <validateAndWriteToOD+0xf4>
            SDO->buf[SDO->bufOffsetWr] = 0;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4413      	add	r3, r2
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            SDO->bufOffsetWr++;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            SDO->sizeTran++;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	66da      	str	r2, [r3, #108]	@ 0x6c
            if ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd)) {
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d004      	beq.n	8003d9e <validateAndWriteToOD+0xc2>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d98:	6a3a      	ldr	r2, [r7, #32]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d913      	bls.n	8003dc6 <validateAndWriteToOD+0xea>
                SDO->buf[SDO->bufOffsetWr] = 0;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4413      	add	r3, r2
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                SDO->bufOffsetWr++;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                SDO->sizeTran++;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	66da      	str	r2, [r3, #108]	@ 0x6c
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	621a      	str	r2, [r3, #32]
 8003dce:	e02d      	b.n	8003e2c <validateAndWriteToOD+0x150>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check. */
        else if (sizeInOd == 0U) {
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d104      	bne.n	8003de0 <validateAndWriteToOD+0x104>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	621a      	str	r2, [r3, #32]
 8003dde:	e025      	b.n	8003e2c <validateAndWriteToOD+0x150>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003de4:	6a3a      	ldr	r2, [r7, #32]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d020      	beq.n	8003e2c <validateAndWriteToOD+0x150>
            *abortCode = (SDO->sizeTran > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dee:	6a3a      	ldr	r2, [r7, #32]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d201      	bcs.n	8003df8 <validateAndWriteToOD+0x11c>
 8003df4:	4a3f      	ldr	r2, [pc, #252]	@ (8003ef4 <validateAndWriteToOD+0x218>)
 8003df6:	e000      	b.n	8003dfa <validateAndWriteToOD+0x11e>
 8003df8:	4a3f      	ldr	r2, [pc, #252]	@ (8003ef8 <validateAndWriteToOD+0x21c>)
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	751a      	strb	r2, [r3, #20]
            return false;
 8003e04:	2300      	movs	r3, #0
 8003e06:	e070      	b.n	8003eea <validateAndWriteToOD+0x20e>
        } else { /* MISRA C 2004 14.10 */
        }
    } else {
        /* Verify if size of data downloaded is not too large. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran > SDO->sizeInd)) {
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00d      	beq.n	8003e2c <validateAndWriteToOD+0x150>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d907      	bls.n	8003e2c <validateAndWriteToOD+0x150>
            *abortCode = CO_SDO_AB_DATA_LONG;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4a35      	ldr	r2, [pc, #212]	@ (8003ef4 <validateAndWriteToOD+0x218>)
 8003e20:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	751a      	strb	r2, [r3, #20]
            return false;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	e05e      	b.n	8003eea <validateAndWriteToOD+0x20e>
    (void)crcOperation;
    (void)crcClient;
    (void)bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	613b      	str	r3, [r7, #16]

    CO_LOCK_OD(SDO->CANdevTx);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003e34:	f3ef 8210 	mrs	r2, PRIMASK
 8003e38:	617a      	str	r2, [r7, #20]
  return(result);
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8003e3e:	b672      	cpsid	i
}
 8003e40:	bf00      	nop
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf, SDO->bufOffsetWr, &countWritten);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f103 0018 	add.w	r0, r3, #24
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003e58:	f107 0310 	add.w	r3, r7, #16
 8003e5c:	47a0      	blx	r4
 8003e5e:	4603      	mov	r3, r0
 8003e60:	77fb      	strb	r3, [r7, #31]
    CO_UNLOCK_OD(SDO->CANdevTx);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	f383 8810 	msr	PRIMASK, r3
}
 8003e70:	bf00      	nop

    SDO->bufOffsetWr = 0;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* verify write error value */
    if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 8003e7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d011      	beq.n	8003ea6 <validateAndWriteToOD+0x1ca>
 8003e82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003e86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e8a:	d00c      	beq.n	8003ea6 <validateAndWriteToOD+0x1ca>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003e8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fd ff51 	bl	8001d38 <OD_getSDOabCode>
 8003e96:	4602      	mov	r2, r0
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	751a      	strb	r2, [r3, #20]
        return false;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	e021      	b.n	8003eea <validateAndWriteToOD+0x20e>
    } else if (SDO->finished && (odRet == ODR_PARTIAL)) {
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00c      	beq.n	8003ec8 <validateAndWriteToOD+0x1ec>
 8003eae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003eb6:	d107      	bne.n	8003ec8 <validateAndWriteToOD+0x1ec>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4a0f      	ldr	r2, [pc, #60]	@ (8003ef8 <validateAndWriteToOD+0x21c>)
 8003ebc:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	751a      	strb	r2, [r3, #20]
        return false;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	e010      	b.n	8003eea <validateAndWriteToOD+0x20e>
    } else if (!SDO->finished && (odRet == ODR_OK)) {
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10b      	bne.n	8003ee8 <validateAndWriteToOD+0x20c>
 8003ed0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d107      	bne.n	8003ee8 <validateAndWriteToOD+0x20c>
        /* OD variable was written completely, but SDO download still has data */
        *abortCode = CO_SDO_AB_DATA_LONG;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4a06      	ldr	r2, [pc, #24]	@ (8003ef4 <validateAndWriteToOD+0x218>)
 8003edc:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	751a      	strb	r2, [r3, #20]
        return false;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e000      	b.n	8003eea <validateAndWriteToOD+0x20e>
    } else { /* MISRA C 2004 14.10 */
    }

    return true;
 8003ee8:	2301      	movs	r3, #1
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	372c      	adds	r7, #44	@ 0x2c
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd90      	pop	{r4, r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	06070012 	.word	0x06070012
 8003ef8:	06070013 	.word	0x06070013

08003efc <readFromOd>:
 * @parma countMinimum if data size in buffer is less than countMinimum, then buffer is refilled from OD variable
 * @param calculateCrc if true, crc is calculated
 *
 * Returns true on success, otherwise write also abortCode and sets state to CO_SDO_ST_ABORT */
static bool_t
readFromOd(CO_SDOserver_t* SDO, CO_SDO_abortCode_t* abortCode, OD_size_t countMinimum, bool_t calculateCrc) {
 8003efc:	b590      	push	{r4, r7, lr}
 8003efe:	b08d      	sub	sp, #52	@ 0x34
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) == 0
    (void)calculateCrc; /* may be unused */
#endif
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	627b      	str	r3, [r7, #36]	@ 0x24

    if (!SDO->finished && (countRemain < countMinimum)) {
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f040 80ab 	bne.w	800407a <readFromOd+0x17e>
 8003f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	f080 80a6 	bcs.w	800407a <readFromOd+0x17e>
        /* first move remaining data to the start of the buffer */
        (void)memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003f40:	4413      	add	r3, r2
 8003f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f44:	4619      	mov	r1, r3
 8003f46:	f007 f915 	bl	800b174 <memmove>
        SDO->bufOffsetRd = 0;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        SDO->bufOffsetWr = countRemain;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f56:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5c:	f1c3 0320 	rsb	r3, r3, #32
 8003f60:	623b      	str	r3, [r7, #32]

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	613b      	str	r3, [r7, #16]

        CO_LOCK_OD(SDO->CANdevTx);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003f6a:	f3ef 8210 	mrs	r2, PRIMASK
 8003f6e:	617a      	str	r2, [r7, #20]
  return(result);
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8003f74:	b672      	cpsid	i
}
 8003f76:	bf00      	nop
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, &SDO->buf[countRemain], countRdRequest, &countRd);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f103 0018 	add.w	r0, r3, #24
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	3380      	adds	r3, #128	@ 0x80
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	18d1      	adds	r1, r2, r3
 8003f8a:	f107 0310 	add.w	r3, r7, #16
 8003f8e:	6a3a      	ldr	r2, [r7, #32]
 8003f90:	47a0      	blx	r4
 8003f92:	4603      	mov	r3, r0
 8003f94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        CO_UNLOCK_OD(SDO->CANdevTx);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	f383 8810 	msr	PRIMASK, r3
}
 8003fa6:	bf00      	nop

        if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 8003fa8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d011      	beq.n	8003fd4 <readFromOd+0xd8>
 8003fb0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fb8:	d00c      	beq.n	8003fd4 <readFromOd+0xd8>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003fba:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fd feba 	bl	8001d38 <OD_getSDOabCode>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	751a      	strb	r2, [r3, #20]
            return false;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e053      	b.n	800407c <readFromOd+0x180>
        }

        /* if data is string, send only data up to null termination */
        OD_size_t lastRd = countRd + countRemain;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd8:	4413      	add	r3, r2
 8003fda:	61fb      	str	r3, [r7, #28]
        if ((countRd > 0U) && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)) {
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d027      	beq.n	8004032 <readFromOd+0x136>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fe8:	b25b      	sxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	da21      	bge.n	8004032 <readFromOd+0x136>
            SDO->buf[lastRd] = 0; /* (SDO->buf is one byte larger) */
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3380      	adds	r3, #128	@ 0x80
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char*)&SDO->buf[countRemain]);
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffc:	3380      	adds	r3, #128	@ 0x80
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	4413      	add	r3, r2
 8004002:	4618      	mov	r0, r3
 8004004:	f7fc f8e4 	bl	80001d0 <strlen>
 8004008:	62b8      	str	r0, [r7, #40]	@ 0x28
            if (countStr == 0U) {
 800400a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <readFromOd+0x118>
                countStr = 1;
 8004010:	2301      	movs	r3, #1
 8004012:	62bb      	str	r3, [r7, #40]	@ 0x28
            } /* zero length is not allowed */
            if (countStr < countRd) {
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004018:	429a      	cmp	r2, r3
 800401a:	d20a      	bcs.n	8004032 <readFromOd+0x136>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 800401c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401e:	613b      	str	r3, [r7, #16]
                odRet = ODR_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	441a      	add	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004036:	441a      	add	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        if ((SDO->bufOffsetWr == 0U) || (odRet == ODR_PARTIAL)) {
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d004      	beq.n	8004052 <readFromOd+0x156>
 8004048:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800404c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004050:	d110      	bne.n	8004074 <readFromOd+0x178>
            SDO->finished = false;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	675a      	str	r2, [r3, #116]	@ 0x74
            if (SDO->bufOffsetWr < countMinimum) {
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	429a      	cmp	r2, r3
 8004062:	d90a      	bls.n	800407a <readFromOd+0x17e>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4a07      	ldr	r2, [pc, #28]	@ (8004084 <readFromOd+0x188>)
 8004068:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2201      	movs	r2, #1
 800406e:	751a      	strb	r2, [r3, #20]
                return false;
 8004070:	2300      	movs	r3, #0
 8004072:	e003      	b.n	800407c <readFromOd+0x180>
            }
        } else {
            SDO->finished = true;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2201      	movs	r2, #1
 8004078:	675a      	str	r2, [r3, #116]	@ 0x74
        if (calculateCrc && SDO->block_crcEnabled) {
            SDO->block_crc = crc16_ccitt(&SDO->buf[countRemain], countRd, SDO->block_crc);
        }
#endif
    }
    return true;
 800407a:	2301      	movs	r3, #1
}
 800407c:	4618      	mov	r0, r3
 800407e:	3734      	adds	r7, #52	@ 0x34
 8004080:	46bd      	mov	sp, r7
 8004082:	bd90      	pop	{r4, r7, pc}
 8004084:	06040047 	.word	0x06040047

08004088 <CO_SDOserver_process>:
#endif

CO_SDO_return_t
CO_SDOserver_process(CO_SDOserver_t* SDO, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                     uint32_t* timerNext_us) {
 8004088:	b590      	push	{r4, r7, lr}
 800408a:	b09b      	sub	sp, #108	@ 0x6c
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d103      	bne.n	80040a4 <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 800409c:	f06f 0301 	mvn.w	r3, #1
 80040a0:	f000 bd00 	b.w	8004aa4 <CO_SDOserver_process+0xa1c>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 80040a4:	2301      	movs	r3, #1
 80040a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 80040aa:	2300      	movs	r3, #0
 80040ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	bf14      	ite	ne
 80040b6:	2301      	movne	r3, #1
 80040b8:	2300      	moveq	r3, #0
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	657b      	str	r3, [r7, #84]	@ 0x54

    if ((SDO->state == CO_SDO_ST_IDLE) && SDO->valid && !isNew) {
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	7d1b      	ldrb	r3, [r3, #20]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10a      	bne.n	80040de <CO_SDOserver_process+0x56>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d006      	beq.n	80040de <CO_SDOserver_process+0x56>
 80040d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d103      	bne.n	80040de <CO_SDOserver_process+0x56>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 80040d6:	2300      	movs	r3, #0
 80040d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80040dc:	e2d7      	b.n	800468e <CO_SDOserver_process+0x606>
    } else if (!NMTisPreOrOperational || !SDO->valid) {
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <CO_SDOserver_process+0x64>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d109      	bne.n	8004100 <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	63da      	str	r2, [r3, #60]	@ 0x3c
        ret = CO_SDO_RT_ok_communicationEnd;
 80040f8:	2300      	movs	r3, #0
 80040fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80040fe:	e2c6      	b.n	800468e <CO_SDOserver_process+0x606>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 8004100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004102:	2b00      	cmp	r3, #0
 8004104:	f000 82c3 	beq.w	800468e <CO_SDOserver_process+0x606>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	7d1b      	ldrb	r3, [r3, #20]
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	f040 80cc 	bne.w	80042ac <CO_SDOserver_process+0x224>
            bool_t upload = false;
 8004114:	2300      	movs	r3, #0
 8004116:	663b      	str	r3, [r7, #96]	@ 0x60

            if ((SDO->CANrxData[0] & 0xF0U) == 0x20U) {
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800411e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004122:	2b20      	cmp	r3, #32
 8004124:	d103      	bne.n	800412e <CO_SDOserver_process+0xa6>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2211      	movs	r2, #17
 800412a:	751a      	strb	r2, [r3, #20]
 800412c:	e00f      	b.n	800414e <CO_SDOserver_process+0xc6>
            } else if (SDO->CANrxData[0] == 0x40U) {
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004134:	2b40      	cmp	r3, #64	@ 0x40
 8004136:	d105      	bne.n	8004144 <CO_SDOserver_process+0xbc>
                upload = true;
 8004138:	2301      	movs	r3, #1
 800413a:	663b      	str	r3, [r7, #96]	@ 0x60
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2221      	movs	r2, #33	@ 0x21
 8004140:	751a      	strb	r2, [r3, #20]
 8004142:	e004      	b.n	800414e <CO_SDOserver_process+0xc6>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 8004144:	4ba7      	ldr	r3, [pc, #668]	@ (80043e4 <CO_SDOserver_process+0x35c>)
 8004146:	62fb      	str	r3, [r7, #44]	@ 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2201      	movs	r2, #1
 800414c:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 800414e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004150:	2b00      	cmp	r3, #0
 8004152:	d162      	bne.n	800421a <CO_SDOserver_process+0x192>
                ODR_t odRet;
                SDO->index = (uint16_t)((((uint16_t)SDO->CANrxData[2]) << 8) | SDO->CANrxData[1]);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800415a:	021b      	lsls	r3, r3, #8
 800415c:	b21a      	sxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004164:	b21b      	sxth	r3, r3
 8004166:	4313      	orrs	r3, r2
 8004168:	b21b      	sxth	r3, r3
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	871a      	strh	r2, [r3, #56]	@ 0x38
                SDO->subIndex = SDO->CANrxData[3];
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f893 2043 	ldrb.w	r2, [r3, #67]	@ 0x43
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex, &SDO->OD_IO, false);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004184:	4619      	mov	r1, r3
 8004186:	4610      	mov	r0, r2
 8004188:	f7fd fc72 	bl	8001a70 <OD_find>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f893 103a 	ldrb.w	r1, [r3, #58]	@ 0x3a
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f103 0218 	add.w	r2, r3, #24
 8004198:	2300      	movs	r3, #0
 800419a:	f7fd fcc5 	bl	8001b28 <OD_getSub>
 800419e:	4603      	mov	r3, r0
 80041a0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
                if (odRet != ODR_OK) {
 80041a4:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <CO_SDOserver_process+0x13a>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80041ac:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fd fdc1 	bl	8001d38 <OD_getSDOabCode>
 80041b6:	4603      	mov	r3, r0
 80041b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2201      	movs	r2, #1
 80041be:	751a      	strb	r2, [r3, #20]
 80041c0:	e02b      	b.n	800421a <CO_SDOserver_process+0x192>
                } else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_RW) == 0U) {
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d105      	bne.n	80041dc <CO_SDOserver_process+0x154>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 80041d0:	4b85      	ldr	r3, [pc, #532]	@ (80043e8 <CO_SDOserver_process+0x360>)
 80041d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	751a      	strb	r2, [r3, #20]
 80041da:	e01e      	b.n	800421a <CO_SDOserver_process+0x192>
                    } else if (upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_R) == 0U)) {
 80041dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00c      	beq.n	80041fc <CO_SDOserver_process+0x174>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d105      	bne.n	80041fc <CO_SDOserver_process+0x174>
                        abortCode = CO_SDO_AB_WRITEONLY;
 80041f0:	4b7e      	ldr	r3, [pc, #504]	@ (80043ec <CO_SDOserver_process+0x364>)
 80041f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2201      	movs	r2, #1
 80041f8:	751a      	strb	r2, [r3, #20]
 80041fa:	e00e      	b.n	800421a <CO_SDOserver_process+0x192>
                    } else if (!upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_W) == 0U)) {
 80041fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10b      	bne.n	800421a <CO_SDOserver_process+0x192>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d104      	bne.n	800421a <CO_SDOserver_process+0x192>
                        abortCode = CO_SDO_AB_READONLY;
 8004210:	4b77      	ldr	r3, [pc, #476]	@ (80043f0 <CO_SDOserver_process+0x368>)
 8004212:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2201      	movs	r2, #1
 8004218:	751a      	strb	r2, [r3, #20]
                }
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            /* load data from object dictionary, if upload and no error */
            if (upload && (abortCode == CO_SDO_AB_NONE)) {
 800421a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800421c:	2b00      	cmp	r3, #0
 800421e:	d045      	beq.n	80042ac <CO_SDOserver_process+0x224>
 8004220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004222:	2b00      	cmp	r3, #0
 8004224:	d142      	bne.n	80042ac <CO_SDOserver_process+0x224>
                SDO->bufOffsetRd = 0;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                SDO->bufOffsetWr = 0;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                SDO->sizeTran = 0;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	66da      	str	r2, [r3, #108]	@ 0x6c
                SDO->finished = false;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	675a      	str	r2, [r3, #116]	@ 0x74

                if (readFromOd(SDO, &abortCode, 7, false)) {
 8004242:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8004246:	2300      	movs	r3, #0
 8004248:	2207      	movs	r2, #7
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f7ff fe56 	bl	8003efc <readFromOd>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d02a      	beq.n	80042ac <CO_SDOserver_process+0x224>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800425a:	2b00      	cmp	r3, #0
 800425c:	d01a      	beq.n	8004294 <CO_SDOserver_process+0x20c>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1a      	ldr	r2, [r3, #32]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	669a      	str	r2, [r3, #104]	@ 0x68

                        if (SDO->sizeInd == 0U) {
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800426a:	2b00      	cmp	r3, #0
 800426c:	d105      	bne.n	800427a <CO_SDOserver_process+0x1f2>
                            SDO->sizeInd = SDO->bufOffsetWr;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	669a      	str	r2, [r3, #104]	@ 0x68
 8004278:	e018      	b.n	80042ac <CO_SDOserver_process+0x224>
                        } else if (SDO->sizeInd != SDO->bufOffsetWr) {
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004284:	429a      	cmp	r2, r3
 8004286:	d011      	beq.n	80042ac <CO_SDOserver_process+0x224>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8004288:	4b5a      	ldr	r3, [pc, #360]	@ (80043f4 <CO_SDOserver_process+0x36c>)
 800428a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2201      	movs	r2, #1
 8004290:	751a      	strb	r2, [r3, #20]
 8004292:	e00b      	b.n	80042ac <CO_SDOserver_process+0x224>
                        } else { /* MISRA C 2004 14.10 */
                        }
                    } else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800429a:	b25b      	sxtb	r3, r3
                                           ? SDO->OD_IO.stream.dataLength
                                           : 0U;
 800429c:	2b00      	cmp	r3, #0
 800429e:	db02      	blt.n	80042a6 <CO_SDOserver_process+0x21e>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	e000      	b.n	80042a8 <CO_SDOserver_process+0x220>
 80042a6:	2300      	movs	r3, #0
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	6693      	str	r3, [r2, #104]	@ 0x68
                }
            }
#endif    /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        bool isOKstate = (SDO->state != CO_SDO_ST_IDLE);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	7d1b      	ldrb	r3, [r3, #20]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	bf14      	ite	ne
 80042b6:	2301      	movne	r3, #1
 80042b8:	2300      	moveq	r3, #0
 80042ba:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
        isOKstate = (SDO->state != CO_SDO_ST_ABORT) && isOKstate;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	7d1b      	ldrb	r3, [r3, #20]
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d005      	beq.n	80042d4 <CO_SDOserver_process+0x24c>
 80042c8:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <CO_SDOserver_process+0x24c>
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <CO_SDOserver_process+0x24e>
 80042d4:	2300      	movs	r3, #0
 80042d6:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 80042da:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
        if (isOKstate) {
 80042e6:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 81c7 	beq.w	800467e <CO_SDOserver_process+0x5f6>
            switch (SDO->state) {
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	7d1b      	ldrb	r3, [r3, #20]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	3b11      	subs	r3, #17
 80042f8:	2b12      	cmp	r3, #18
 80042fa:	f200 81b1 	bhi.w	8004660 <CO_SDOserver_process+0x5d8>
 80042fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004304 <CO_SDOserver_process+0x27c>)
 8004300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004304:	08004351 	.word	0x08004351
 8004308:	08004661 	.word	0x08004661
 800430c:	08004519 	.word	0x08004519
 8004310:	08004661 	.word	0x08004661
 8004314:	08004661 	.word	0x08004661
 8004318:	08004661 	.word	0x08004661
 800431c:	08004661 	.word	0x08004661
 8004320:	08004661 	.word	0x08004661
 8004324:	08004661 	.word	0x08004661
 8004328:	08004661 	.word	0x08004661
 800432c:	08004661 	.word	0x08004661
 8004330:	08004661 	.word	0x08004661
 8004334:	08004661 	.word	0x08004661
 8004338:	08004661 	.word	0x08004661
 800433c:	08004661 	.word	0x08004661
 8004340:	08004661 	.word	0x08004661
 8004344:	0800460f 	.word	0x0800460f
 8004348:	08004661 	.word	0x08004661
 800434c:	08004617 	.word	0x08004617
                case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
                    if ((SDO->CANrxData[0] & 0x02U) != 0U) {
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 80a2 	beq.w	80044a4 <CO_SDOserver_process+0x41c>
                        /* Expedited transfer, max 4 bytes of data */

                        /* Size of OD variable (>0 if indicated) */
                        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	647b      	str	r3, [r7, #68]	@ 0x44

                        /* Get SDO data size (indicated by SDO client or get from OD) */
                        OD_size_t dataSizeToWrite = 4;
 8004366:	2304      	movs	r3, #4
 8004368:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <CO_SDOserver_process+0x306>
                            dataSizeToWrite -= ((OD_size_t)(SDO->CANrxData[0]) >> 2) & 0x03U;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800437e:	089b      	lsrs	r3, r3, #2
 8004380:	b2db      	uxtb	r3, r3
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800438c:	e007      	b.n	800439e <CO_SDOserver_process+0x316>
                        } else if ((sizeInOd > 0U) && (sizeInOd < 4U)) {
 800438e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004390:	2b00      	cmp	r3, #0
 8004392:	d004      	beq.n	800439e <CO_SDOserver_process+0x316>
 8004394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004396:	2b03      	cmp	r3, #3
 8004398:	d801      	bhi.n	800439e <CO_SDOserver_process+0x316>
                            dataSizeToWrite = sizeInOd;
 800439a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800439c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* copy data to the temp buffer, swap data if necessary */
                        uint8_t buf[6] = {0};
 800439e:	2300      	movs	r3, #0
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80043a2:	2300      	movs	r3, #0
 80043a4:	853b      	strh	r3, [r7, #40]	@ 0x28
                        (void)memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 80043ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043b0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80043b2:	4618      	mov	r0, r3
 80043b4:	f006 ff83 	bl	800b2be <memcpy>
#endif

                        /* If dataType is string, then size of data downloaded may be shorter as size of
                         * the OD data buffer. If so, add two zero bytes to terminate (unicode) string.
                         * Shorten also OD data size, (temporary, send information about EOF into OD_IO.write) */
                        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043be:	b25b      	sxtb	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	da21      	bge.n	8004408 <CO_SDOserver_process+0x380>
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 80043c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <CO_SDOserver_process+0x34a>
 80043ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80043cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d21a      	bcs.n	8004408 <CO_SDOserver_process+0x380>
                            OD_size_t delta = sizeInOd - dataSizeToWrite;
 80043d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	643b      	str	r3, [r7, #64]	@ 0x40
                            dataSizeToWrite += (delta == 1U) ? 1U : 2U;
 80043da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d10b      	bne.n	80043f8 <CO_SDOserver_process+0x370>
 80043e0:	2301      	movs	r3, #1
 80043e2:	e00a      	b.n	80043fa <CO_SDOserver_process+0x372>
 80043e4:	05040001 	.word	0x05040001
 80043e8:	06010000 	.word	0x06010000
 80043ec:	06010001 	.word	0x06010001
 80043f0:	06010002 	.word	0x06010002
 80043f4:	06040047 	.word	0x06040047
 80043f8:	2302      	movs	r3, #2
 80043fa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80043fc:	4413      	add	r3, r2
 80043fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004404:	621a      	str	r2, [r3, #32]
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 8004406:	e016      	b.n	8004436 <CO_SDOserver_process+0x3ae>
                        } else if (sizeInOd == 0U) {
 8004408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800440a:	2b00      	cmp	r3, #0
 800440c:	d103      	bne.n	8004416 <CO_SDOserver_process+0x38e>
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004412:	621a      	str	r2, [r3, #32]
 8004414:	e00f      	b.n	8004436 <CO_SDOserver_process+0x3ae>
                        }
                        /* Verify if size of data downloaded matches data size in OD. */
                        else if (dataSizeToWrite != sizeInOd) {
 8004416:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800441a:	429a      	cmp	r2, r3
 800441c:	d00b      	beq.n	8004436 <CO_SDOserver_process+0x3ae>
                            abortCode = (dataSizeToWrite > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 800441e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004422:	429a      	cmp	r2, r3
 8004424:	d901      	bls.n	800442a <CO_SDOserver_process+0x3a2>
 8004426:	4b91      	ldr	r3, [pc, #580]	@ (800466c <CO_SDOserver_process+0x5e4>)
 8004428:	e000      	b.n	800442c <CO_SDOserver_process+0x3a4>
 800442a:	4b91      	ldr	r3, [pc, #580]	@ (8004670 <CO_SDOserver_process+0x5e8>)
 800442c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2201      	movs	r2, #1
 8004432:	751a      	strb	r2, [r3, #20]
                            break;
 8004434:	e123      	b.n	800467e <CO_SDOserver_process+0x5f6>
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* Copy data */
                        OD_size_t countWritten = 0;
 8004436:	2300      	movs	r3, #0
 8004438:	623b      	str	r3, [r7, #32]

                        CO_LOCK_OD(SDO->CANdevTx);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800443e:	f3ef 8210 	mrs	r2, PRIMASK
 8004442:	633a      	str	r2, [r7, #48]	@ 0x30
  return(result);
 8004444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004446:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8004448:	b672      	cpsid	i
}
 800444a:	bf00      	nop
                        ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf, dataSizeToWrite, &countWritten);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f103 0018 	add.w	r0, r3, #24
 8004456:	f107 0320 	add.w	r3, r7, #32
 800445a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800445e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004460:	47a0      	blx	r4
 8004462:	4603      	mov	r3, r0
 8004464:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                        CO_UNLOCK_OD(SDO->CANdevTx);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800446e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004472:	f383 8810 	msr	PRIMASK, r3
}
 8004476:	bf00      	nop

                        if (odRet != ODR_OK) {
 8004478:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <CO_SDOserver_process+0x40e>
                            abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004480:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8004484:	4618      	mov	r0, r3
 8004486:	f7fd fc57 	bl	8001d38 <OD_getSDOabCode>
 800448a:	4603      	mov	r3, r0
 800448c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2201      	movs	r2, #1
 8004492:	751a      	strb	r2, [r3, #20]
                            break;
 8004494:	e0f3      	b.n	800467e <CO_SDOserver_process+0x5f6>
                        } else {
                            SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2212      	movs	r2, #18
 800449a:	751a      	strb	r2, [r3, #20]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                            SDO->finished = true;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2201      	movs	r2, #1
 80044a0:	675a      	str	r2, [r3, #116]	@ 0x74
#else
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                        SDO->state = CO_SDO_ST_ABORT;
#endif
                    }
                    break;
 80044a2:	e0ec      	b.n	800467e <CO_SDOserver_process+0x5f6>
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d028      	beq.n	8004504 <CO_SDOserver_process+0x47c>
                            OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	64bb      	str	r3, [r7, #72]	@ 0x48
                            (void)memcpy((void*)(&size), (const void*)(&SDO->CANrxData[4]), sizeof(size));
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	3344      	adds	r3, #68	@ 0x44
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	61fb      	str	r3, [r7, #28]
                            SDO->sizeInd = CO_SWAP_32(size);
 80044c0:	69fa      	ldr	r2, [r7, #28]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	669a      	str	r2, [r3, #104]	@ 0x68
                            if (sizeInOd > 0U) {
 80044c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01e      	beq.n	800450a <CO_SDOserver_process+0x482>
                                if (SDO->sizeInd > sizeInOd) {
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d205      	bcs.n	80044e2 <CO_SDOserver_process+0x45a>
                                    abortCode = CO_SDO_AB_DATA_LONG;
 80044d6:	4b65      	ldr	r3, [pc, #404]	@ (800466c <CO_SDOserver_process+0x5e4>)
 80044d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2201      	movs	r2, #1
 80044de:	751a      	strb	r2, [r3, #20]
                                    break;
 80044e0:	e0cd      	b.n	800467e <CO_SDOserver_process+0x5f6>
                                else if ((SDO->sizeInd < sizeInOd)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d90e      	bls.n	800450a <CO_SDOserver_process+0x482>
                                         && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)) {
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044f2:	b25b      	sxtb	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	db08      	blt.n	800450a <CO_SDOserver_process+0x482>
                                    abortCode = CO_SDO_AB_DATA_SHORT;
 80044f8:	4b5d      	ldr	r3, [pc, #372]	@ (8004670 <CO_SDOserver_process+0x5e8>)
 80044fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2201      	movs	r2, #1
 8004500:	751a      	strb	r2, [r3, #20]
                                    break;
 8004502:	e0bc      	b.n	800467e <CO_SDOserver_process+0x5f6>
                            SDO->sizeInd = 0;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	669a      	str	r2, [r3, #104]	@ 0x68
                        SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2212      	movs	r2, #18
 800450e:	751a      	strb	r2, [r3, #20]
                        SDO->finished = false;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	675a      	str	r2, [r3, #116]	@ 0x74
                    break;
 8004516:	e0b2      	b.n	800467e <CO_SDOserver_process+0x5f6>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xE0U) == 0x00U) {
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800451e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d16d      	bne.n	8004602 <CO_SDOserver_process+0x57a>
                        SDO->finished = (SDO->CANrxData[0] & 0x01U) != 0U;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	bf14      	ite	ne
 8004534:	2301      	movne	r3, #1
 8004536:	2300      	moveq	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	461a      	mov	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	675a      	str	r2, [r3, #116]	@ 0x74

                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004546:	f003 0310 	and.w	r3, r3, #16
 800454a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                        if (toggle != SDO->toggle) {
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8004554:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8004558:	429a      	cmp	r2, r3
 800455a:	d005      	beq.n	8004568 <CO_SDOserver_process+0x4e0>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 800455c:	4b45      	ldr	r3, [pc, #276]	@ (8004674 <CO_SDOserver_process+0x5ec>)
 800455e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2201      	movs	r2, #1
 8004564:	751a      	strb	r2, [r3, #20]
                            break;
 8004566:	e08a      	b.n	800467e <CO_SDOserver_process+0x5f6>
                        }

                        /* get data size and write data to the buffer */
                        OD_size_t count = (OD_size_t)(7U - (((OD_size_t)(SDO->CANrxData[0]) >> 1) & 0x07U));
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800456e:	085b      	lsrs	r3, r3, #1
 8004570:	b2db      	uxtb	r3, r3
 8004572:	43db      	mvns	r3, r3
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        (void)memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004586:	18d0      	adds	r0, r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3341      	adds	r3, #65	@ 0x41
 800458c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800458e:	4619      	mov	r1, r3
 8004590:	f006 fe95 	bl	800b2be <memcpy>
                        SDO->bufOffsetWr += count;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800459a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800459c:	441a      	add	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        SDO->sizeTran += count;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80045a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045aa:	441a      	add	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	66da      	str	r2, [r3, #108]	@ 0x6c

                        /* if data size exceeds variable size, abort */
                        if ((SDO->OD_IO.stream.dataLength > 0U) && (SDO->sizeTran > SDO->OD_IO.stream.dataLength)) {
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00b      	beq.n	80045d0 <CO_SDOserver_process+0x548>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d905      	bls.n	80045d0 <CO_SDOserver_process+0x548>
                            abortCode = CO_SDO_AB_DATA_LONG;
 80045c4:	4b29      	ldr	r3, [pc, #164]	@ (800466c <CO_SDOserver_process+0x5e4>)
 80045c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2201      	movs	r2, #1
 80045cc:	751a      	strb	r2, [r3, #20]
                            break;
 80045ce:	e056      	b.n	800467e <CO_SDOserver_process+0x5f6>
                        }

                        /* if necessary, empty the buffer */
                        if (SDO->finished || ((CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr) < (7U + 2U))) {
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d106      	bne.n	80045e6 <CO_SDOserver_process+0x55e>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80045de:	f1c3 0320 	rsb	r3, r3, #32
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d809      	bhi.n	80045fa <CO_SDOserver_process+0x572>
                            if (!validateAndWriteToOD(SDO, &abortCode, 0, 0)) {
 80045e6:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80045ea:	2300      	movs	r3, #0
 80045ec:	2200      	movs	r2, #0
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f7ff fb74 	bl	8003cdc <validateAndWriteToOD>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d040      	beq.n	800467c <CO_SDOserver_process+0x5f4>
                                break;
                            }
                        }

                        SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2214      	movs	r2, #20
 80045fe:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8004600:	e03d      	b.n	800467e <CO_SDOserver_process+0x5f6>
                        abortCode = CO_SDO_AB_CMD;
 8004602:	4b1d      	ldr	r3, [pc, #116]	@ (8004678 <CO_SDOserver_process+0x5f0>)
 8004604:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2201      	movs	r2, #1
 800460a:	751a      	strb	r2, [r3, #20]
                    break;
 800460c:	e037      	b.n	800467e <CO_SDOserver_process+0x5f6>
                }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

                case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
                    SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2222      	movs	r2, #34	@ 0x22
 8004612:	751a      	strb	r2, [r3, #20]
                    break;
 8004614:	e033      	b.n	800467e <CO_SDOserver_process+0x5f6>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xEFU) == 0x60U) {
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800461c:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8004620:	2b60      	cmp	r3, #96	@ 0x60
 8004622:	d117      	bne.n	8004654 <CO_SDOserver_process+0x5cc>
                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800462a:	f003 0310 	and.w	r3, r3, #16
 800462e:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                        if (toggle != SDO->toggle) {
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8004638:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 800463c:	429a      	cmp	r2, r3
 800463e:	d005      	beq.n	800464c <CO_SDOserver_process+0x5c4>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 8004640:	4b0c      	ldr	r3, [pc, #48]	@ (8004674 <CO_SDOserver_process+0x5ec>)
 8004642:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2201      	movs	r2, #1
 8004648:	751a      	strb	r2, [r3, #20]
                            break;
 800464a:	e018      	b.n	800467e <CO_SDOserver_process+0x5f6>
                        }
                        SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2224      	movs	r2, #36	@ 0x24
 8004650:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8004652:	e014      	b.n	800467e <CO_SDOserver_process+0x5f6>
                        abortCode = CO_SDO_AB_CMD;
 8004654:	4b08      	ldr	r3, [pc, #32]	@ (8004678 <CO_SDOserver_process+0x5f0>)
 8004656:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2201      	movs	r2, #1
 800465c:	751a      	strb	r2, [r3, #20]
                    break;
 800465e:	e00e      	b.n	800467e <CO_SDOserver_process+0x5f6>
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ:
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */
                default: {
                    /* unknown message received */
                    abortCode = CO_SDO_AB_CMD;
 8004660:	4b05      	ldr	r3, [pc, #20]	@ (8004678 <CO_SDOserver_process+0x5f0>)
 8004662:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	751a      	strb	r2, [r3, #20]
                    break;
 800466a:	e008      	b.n	800467e <CO_SDOserver_process+0x5f6>
 800466c:	06070012 	.word	0x06070012
 8004670:	06070013 	.word	0x06070013
 8004674:	05030000 	.word	0x05030000
 8004678:	05040001 	.word	0x05040001
                                break;
 800467c:	bf00      	nop
                }
            } /* switch (SDO->state) */
        }     /* if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT) */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
        SDO->timeoutTimer = 0;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	67da      	str	r2, [r3, #124]	@ 0x7c
#endif
        timeDifference_us = 0;
 8004684:	2300      	movs	r3, #0
 8004686:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	63da      	str	r2, [r3, #60]	@ 0x3c
    else { /* MISRA C 2004 14.10 */
    }

    /* Timeout timers and transmit bufferFull flag ****************************/
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
    if (ret == CO_SDO_RT_waitingResponse) {
 800468e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004692:	2b01      	cmp	r3, #1
 8004694:	d11e      	bne.n	80046d4 <CO_SDOserver_process+0x64c>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800469e:	429a      	cmp	r2, r3
 80046a0:	d205      	bcs.n	80046ae <CO_SDOserver_process+0x626>
            SDO->timeoutTimer += timeDifference_us;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	441a      	add	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d304      	bcc.n	80046c4 <CO_SDOserver_process+0x63c>
            abortCode = CO_SDO_AB_TIMEOUT;
 80046ba:	4b9c      	ldr	r3, [pc, #624]	@ (800492c <CO_SDOserver_process+0x8a4>)
 80046bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            SDO->state = CO_SDO_ST_ABORT;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <CO_SDOserver_process+0x64c>
            ret = CO_SDO_RT_transmittBufferFull;
 80046ce:	2304      	movs	r3, #4
 80046d0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 80046d4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80046d8:	2b01      	cmp	r3, #1
 80046da:	f040 81ab 	bne.w	8004a34 <CO_SDOserver_process+0x9ac>
        /* clear response buffer */
        (void)memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	3305      	adds	r3, #5
 80046e4:	2208      	movs	r2, #8
 80046e6:	2100      	movs	r1, #0
 80046e8:	4618      	mov	r0, r3
 80046ea:	f006 fd5d 	bl	800b1a8 <memset>

        switch (SDO->state) {
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	7d1b      	ldrb	r3, [r3, #20]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	3b12      	subs	r3, #18
 80046f6:	2b12      	cmp	r3, #18
 80046f8:	f200 8199 	bhi.w	8004a2e <CO_SDOserver_process+0x9a6>
 80046fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004704 <CO_SDOserver_process+0x67c>)
 80046fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004702:	bf00      	nop
 8004704:	08004751 	.word	0x08004751
 8004708:	08004a2f 	.word	0x08004a2f
 800470c:	080047d3 	.word	0x080047d3
 8004710:	08004a2f 	.word	0x08004a2f
 8004714:	08004a2f 	.word	0x08004a2f
 8004718:	08004a2f 	.word	0x08004a2f
 800471c:	08004a2f 	.word	0x08004a2f
 8004720:	08004a2f 	.word	0x08004a2f
 8004724:	08004a2f 	.word	0x08004a2f
 8004728:	08004a2f 	.word	0x08004a2f
 800472c:	08004a2f 	.word	0x08004a2f
 8004730:	08004a2f 	.word	0x08004a2f
 8004734:	08004a2f 	.word	0x08004a2f
 8004738:	08004a2f 	.word	0x08004a2f
 800473c:	08004a2f 	.word	0x08004a2f
 8004740:	08004a2f 	.word	0x08004a2f
 8004744:	0800482f 	.word	0x0800482f
 8004748:	08004a2f 	.word	0x08004a2f
 800474c:	080048fd 	.word	0x080048fd
            case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
                SDO->CANtxBuff->data[0] = 0x60;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2260      	movs	r2, #96	@ 0x60
 8004756:	715a      	strb	r2, [r3, #5]
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004768:	0a1b      	lsrs	r3, r3, #8
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 800477e:	721a      	strb	r2, [r3, #8]

                /* reset timeout timer and send message */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                SDO->timeoutTimer = 0;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	67da      	str	r2, [r3, #124]	@ 0x7c
#endif
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	4619      	mov	r1, r3
 8004790:	4610      	mov	r0, r2
 8004792:	f002 fed3 	bl	800753c <CO_CANsend>
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                if (SDO->finished) {
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800479a:	2b00      	cmp	r3, #0
 800479c:	d006      	beq.n	80047ac <CO_SDOserver_process+0x724>
                    SDO->state = CO_SDO_ST_IDLE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 80047a4:	2300      	movs	r3, #0
 80047a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                }
#else
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
#endif
                break;
 80047aa:	e143      	b.n	8004a34 <CO_SDOserver_process+0x9ac>
                    SDO->toggle = 0x00;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    SDO->sizeTran = 0;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	66da      	str	r2, [r3, #108]	@ 0x6c
                    SDO->bufOffsetWr = 0;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                    SDO->bufOffsetRd = 0;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2213      	movs	r2, #19
 80047ce:	751a      	strb	r2, [r3, #20]
                break;
 80047d0:	e130      	b.n	8004a34 <CO_SDOserver_process+0x9ac>
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
                SDO->CANtxBuff->data[0] = 0x20U | SDO->toggle;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f893 2070 	ldrb.w	r2, [r3, #112]	@ 0x70
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f042 0220 	orr.w	r2, r2, #32
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <CO_SDOserver_process+0x76a>
 80047ee:	2210      	movs	r2, #16
 80047f0:	e000      	b.n	80047f4 <CO_SDOserver_process+0x76c>
 80047f2:	2200      	movs	r2, #0
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                /* reset timeout timer and send message */
                SDO->timeoutTimer = 0;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	67da      	str	r2, [r3, #124]	@ 0x7c
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	4619      	mov	r1, r3
 800480a:	4610      	mov	r0, r2
 800480c:	f002 fe96 	bl	800753c <CO_CANsend>
                if (SDO->finished) {
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004814:	2b00      	cmp	r3, #0
 8004816:	d006      	beq.n	8004826 <CO_SDOserver_process+0x79e>
                    SDO->state = CO_SDO_ST_IDLE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 800481e:	2300      	movs	r3, #0
 8004820:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                } else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
                }
                break;
 8004824:	e106      	b.n	8004a34 <CO_SDOserver_process+0x9ac>
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2213      	movs	r2, #19
 800482a:	751a      	strb	r2, [r3, #20]
                break;
 800482c:	e102      	b.n	8004a34 <CO_SDOserver_process+0x9ac>
#endif

            case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                /* data were already loaded from OD variable */
                if ((SDO->sizeInd > 0U) && (SDO->sizeInd <= 4U)) {
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004832:	2b00      	cmp	r3, #0
 8004834:	d024      	beq.n	8004880 <CO_SDOserver_process+0x7f8>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800483a:	2b04      	cmp	r3, #4
 800483c:	d820      	bhi.n	8004880 <CO_SDOserver_process+0x7f8>
                    /* expedited transfer */
                    SDO->CANtxBuff->data[0] = (uint8_t)(0x43U | ((4U - SDO->sizeInd) << 2U));
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004842:	b2db      	uxtb	r3, r3
 8004844:	f1c3 0304 	rsb	r3, r3, #4
 8004848:	b2db      	uxtb	r3, r3
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	b2da      	uxtb	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f042 0243 	orr.w	r2, r2, #67	@ 0x43
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	715a      	strb	r2, [r3, #5]
                    (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&SDO->buf[0]), SDO->sizeInd);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f103 0009 	add.w	r0, r3, #9
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800486c:	461a      	mov	r2, r3
 800486e:	f006 fd26 	bl	800b2be <memcpy>
                    SDO->state = CO_SDO_ST_IDLE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8004878:	2300      	movs	r3, #0
 800487a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800487e:	e020      	b.n	80048c2 <CO_SDOserver_process+0x83a>
                } else {
                    /* data will be transferred with segmented transfer */
                    if (SDO->sizeInd > 0U) {
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00e      	beq.n	80048a6 <CO_SDOserver_process+0x81e>
                        /* indicate data size, if known */
                        uint32_t sizeInd = SDO->sizeInd;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800488c:	63bb      	str	r3, [r7, #56]	@ 0x38
                        uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 800488e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004890:	61bb      	str	r3, [r7, #24]
                        SDO->CANtxBuff->data[0] = 0x41;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2241      	movs	r2, #65	@ 0x41
 8004898:	715a      	strb	r2, [r3, #5]
                        (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&sizeIndSw), sizeof(sizeIndSw));
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	3309      	adds	r3, #9
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	e003      	b.n	80048ae <CO_SDOserver_process+0x826>
                    } else {
                        SDO->CANtxBuff->data[0] = 0x40;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2240      	movs	r2, #64	@ 0x40
 80048ac:	715a      	strb	r2, [r3, #5]
                    }
                    SDO->toggle = 0x00;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    SDO->timeoutTimer = 0;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	67da      	str	r2, [r3, #124]	@ 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2223      	movs	r2, #35	@ 0x23
 80048c0:	751a      	strb	r2, [r3, #20]
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

                /* send message */
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80048d2:	0a1b      	lsrs	r3, r3, #8
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 80048e8:	721a      	strb	r2, [r3, #8]
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	4619      	mov	r1, r3
 80048f4:	4610      	mov	r0, r2
 80048f6:	f002 fe21 	bl	800753c <CO_CANsend>
                break;
 80048fa:	e09b      	b.n	8004a34 <CO_SDOserver_process+0x9ac>
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
                /* refill the data buffer if necessary */
                if (!readFromOd(SDO, &abortCode, 7, false)) {
 80048fc:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8004900:	2300      	movs	r3, #0
 8004902:	2207      	movs	r2, #7
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f7ff faf9 	bl	8003efc <readFromOd>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8090 	beq.w	8004a32 <CO_SDOserver_process+0x9aa>
                    break;
                }

                /* SDO command specifier with toggle bit */
                SDO->CANtxBuff->data[0] = SDO->toggle;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	f892 2070 	ldrb.w	r2, [r2, #112]	@ 0x70
 800491c:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8004924:	2b00      	cmp	r3, #0
 8004926:	d103      	bne.n	8004930 <CO_SDOserver_process+0x8a8>
 8004928:	2210      	movs	r2, #16
 800492a:	e002      	b.n	8004932 <CO_SDOserver_process+0x8aa>
 800492c:	05040000 	.word	0x05040000
 8004930:	2200      	movs	r2, #0
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	65bb      	str	r3, [r7, #88]	@ 0x58
                /* verify, if this is the last segment */
                if ((count < 7U) || (SDO->finished && (count == 7U))) {
 8004948:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800494a:	2b06      	cmp	r3, #6
 800494c:	d906      	bls.n	800495c <CO_SDOserver_process+0x8d4>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004952:	2b00      	cmp	r3, #0
 8004954:	d01b      	beq.n	800498e <CO_SDOserver_process+0x906>
 8004956:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004958:	2b07      	cmp	r3, #7
 800495a:	d118      	bne.n	800498e <CO_SDOserver_process+0x906>
                    /* indicate last segment and nnn */
                    SDO->CANtxBuff->data[0] |= (uint8_t)(((7U - count) << 1U) | 0x01U);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	795a      	ldrb	r2, [r3, #5]
 8004962:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f1c3 0307 	rsb	r3, r3, #7
 800496a:	b2db      	uxtb	r3, r3
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	b2db      	uxtb	r3, r3
 8004970:	4313      	orrs	r3, r2
 8004972:	b2da      	uxtb	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f042 0201 	orr.w	r2, r2, #1
 800497c:	b2d2      	uxtb	r2, r2
 800497e:	715a      	strb	r2, [r3, #5]
                    SDO->state = CO_SDO_ST_IDLE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8004986:	2300      	movs	r3, #0
 8004988:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800498c:	e007      	b.n	800499e <CO_SDOserver_process+0x916>
                } else {
                    SDO->timeoutTimer = 0;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	67da      	str	r2, [r3, #124]	@ 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2223      	movs	r2, #35	@ 0x23
 8004998:	751a      	strb	r2, [r3, #20]
                    count = 7;
 800499a:	2307      	movs	r3, #7
 800499c:	65bb      	str	r3, [r7, #88]	@ 0x58
                }

                /* copy data segment to CAN message */
                (void)memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd, count);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	1d98      	adds	r0, r3, #6
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80049b0:	4413      	add	r3, r2
 80049b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049b4:	4619      	mov	r1, r3
 80049b6:	f006 fc82 	bl	800b2be <memcpy>
                SDO->bufOffsetRd += count;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 80049c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049c2:	441a      	add	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                SDO->sizeTran += count;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80049ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049d0:	441a      	add	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* verify if sizeTran is too large or too short if last segment */
                if (SDO->sizeInd > 0U) {
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d01e      	beq.n	8004a1c <CO_SDOserver_process+0x994>
                    if (SDO->sizeTran > SDO->sizeInd) {
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d905      	bls.n	80049f6 <CO_SDOserver_process+0x96e>
                        abortCode = CO_SDO_AB_DATA_LONG;
 80049ea:	4b30      	ldr	r3, [pc, #192]	@ (8004aac <CO_SDOserver_process+0xa24>)
 80049ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2201      	movs	r2, #1
 80049f2:	751a      	strb	r2, [r3, #20]
                        break;
 80049f4:	e01e      	b.n	8004a34 <CO_SDOserver_process+0x9ac>
                    } else if ((ret == CO_SDO_RT_ok_communicationEnd) && (SDO->sizeTran < SDO->sizeInd)) {
 80049f6:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10e      	bne.n	8004a1c <CO_SDOserver_process+0x994>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d208      	bcs.n	8004a1c <CO_SDOserver_process+0x994>
                        abortCode = CO_SDO_AB_DATA_SHORT;
 8004a0a:	4b29      	ldr	r3, [pc, #164]	@ (8004ab0 <CO_SDOserver_process+0xa28>)
 8004a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        ret = CO_SDO_RT_waitingResponse;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                        SDO->state = CO_SDO_ST_ABORT;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	751a      	strb	r2, [r3, #20]
                        break;
 8004a1a:	e00b      	b.n	8004a34 <CO_SDOserver_process+0x9ac>
                    } else { /* MISRA C 2004 14.10 */
                    }
                }

                /* send message */
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	4619      	mov	r1, r3
 8004a26:	4610      	mov	r0, r2
 8004a28:	f002 fd88 	bl	800753c <CO_CANsend>
                break;
 8004a2c:	e002      	b.n	8004a34 <CO_SDOserver_process+0x9ac>
            case CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ2:
            case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
            case CO_SDO_ST_UPLOAD_BLK_END_CRSP:
            default: {
                /* none */
                break;
 8004a2e:	bf00      	nop
 8004a30:	e000      	b.n	8004a34 <CO_SDOserver_process+0x9ac>
                    break;
 8004a32:	bf00      	nop
            }
        } /* switch (SDO->state) */
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 8004a34:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d131      	bne.n	8004aa0 <CO_SDOserver_process+0xa18>
        if (SDO->state == CO_SDO_ST_ABORT) {
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	7d1b      	ldrb	r3, [r3, #20]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d12c      	bne.n	8004aa0 <CO_SDOserver_process+0xa18>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8004a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a48:	617b      	str	r3, [r7, #20]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2280      	movs	r2, #128	@ 0x80
 8004a50:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004a62:	0a1b      	lsrs	r3, r3, #8
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 8004a78:	721a      	strb	r2, [r3, #8]

            (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&code), sizeof(code));
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	3309      	adds	r3, #9
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	601a      	str	r2, [r3, #0]
            (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	f002 fd54 	bl	800753c <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 8004a9a:	23f6      	movs	r3, #246	@ 0xf6
 8004a9c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 8004aa0:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	376c      	adds	r7, #108	@ 0x6c
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd90      	pop	{r4, r7, pc}
 8004aac:	06070012 	.word	0x06070012
 8004ab0:	06070013 	.word	0x06070013

08004ab4 <CO_getUint8>:
CO_getUint8(const void* buf) {
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	73fb      	strb	r3, [r7, #15]
    return value;
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	60fb      	str	r3, [r7, #12]
    return value;
 8004ade:	68fb      	ldr	r3, [r7, #12]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <OD_getIndex+0x14>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	e000      	b.n	8004b02 <OD_getIndex+0x16>
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8004b1e:	2305      	movs	r3, #5
 8004b20:	e003      	b.n	8004b2a <OD_extension_init+0x1c>
    entry->extension = extension;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b086      	sub	sp, #24
 8004b3a:	af02      	add	r7, sp, #8
 8004b3c:	60f8      	str	r0, [r7, #12]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	603b      	str	r3, [r7, #0]
 8004b42:	460b      	mov	r3, r1
 8004b44:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004b46:	7af9      	ldrb	r1, [r7, #11]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f7fd f90f 	bl	8001d74 <OD_get_value>
 8004b56:	4603      	mov	r3, r0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	607a      	str	r2, [r7, #4]
 8004b6a:	603b      	str	r3, [r7, #0]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004b70:	7af9      	ldrb	r1, [r7, #11]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	2304      	movs	r3, #4
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f7fd f8fa 	bl	8001d74 <OD_get_value>
 8004b80:	4603      	mov	r3, r0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <CO_SYNCsend>:
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t
CO_SYNCsend(CO_SYNC_t* SYNC) {
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) {
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	7c9b      	ldrb	r3, [r3, #18]
 8004b96:	3301      	adds	r3, #1
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	749a      	strb	r2, [r3, #18]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	7c9a      	ldrb	r2, [r3, #18]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	7c5b      	ldrb	r3, [r3, #17]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d902      	bls.n	8004bb0 <CO_SYNCsend+0x26>
        SYNC->counter = 1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	749a      	strb	r2, [r3, #18]
    }
    SYNC->timer = 0;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	bf0c      	ite	eq
 8004bbe:	2301      	moveq	r3, #1
 8004bc0:	2300      	movne	r3, #0
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	7c92      	ldrb	r2, [r2, #18]
 8004bd2:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4610      	mov	r0, r2
 8004be0:	f002 fcac 	bl	800753c <CO_CANsend>
 8004be4:	4603      	mov	r3, r0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SYNC_receive(void* object, void* msg) {
 8004bee:	b480      	push	{r7}
 8004bf0:	b087      	sub	sp, #28
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	6039      	str	r1, [r7, #0]
    CO_SYNC_t* SYNC = object;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	791b      	ldrb	r3, [r3, #4]
 8004c00:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 8004c02:	2300      	movs	r3, #0
 8004c04:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0U) {
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	7c5b      	ldrb	r3, [r3, #17]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10c      	bne.n	8004c28 <CO_SYNC_receive+0x3a>
        if (DLC == 0U) {
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <CO_SYNC_receive+0x2c>
            syncReceived = true;
 8004c14:	2301      	movs	r3, #1
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	e019      	b.n	8004c4e <CO_SYNC_receive+0x60>
        } else {
            SYNC->receiveError = DLC | 0x40U;
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
 8004c1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	721a      	strb	r2, [r3, #8]
 8004c26:	e012      	b.n	8004c4e <CO_SYNC_receive+0x60>
        }
    } else {
        if (DLC == 1U) {
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d109      	bne.n	8004c42 <CO_SYNC_receive+0x54>
            const uint8_t* data = CO_CANrxMsg_readData(msg);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	3305      	adds	r3, #5
 8004c32:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	781a      	ldrb	r2, [r3, #0]
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	e005      	b.n	8004c4e <CO_SYNC_receive+0x60>
        } else {
            SYNC->receiveError = DLC | 0x80U;
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
 8004c44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00c      	beq.n	8004c6e <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	461a      	mov	r2, r3
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 8004c6e:	bf00      	nop
 8004c70:	371c      	adds	r7, #28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
	...

08004c7c <OD_write_1005>:
 * Custom function for writing OD object "COB-ID sync message"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1005(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8004c7c:	b590      	push	{r4, r7, lr}
 8004c7e:	b08f      	sub	sp, #60	@ 0x3c
 8004c80:	af04      	add	r7, sp, #16
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00c      	beq.n	8004caa <OD_write_1005+0x2e>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	7d1b      	ldrb	r3, [r3, #20]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d108      	bne.n	8004caa <OD_write_1005+0x2e>
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d005      	beq.n	8004caa <OD_write_1005+0x2e>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d102      	bne.n	8004caa <OD_write_1005+0x2e>
        || (countWritten == NULL)) {
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <OD_write_1005+0x32>
        return ODR_DEV_INCOMPAT;
 8004caa:	2309      	movs	r3, #9
 8004cac:	e0a2      	b.n	8004df4 <OD_write_1005+0x178>
    }

    CO_SYNC_t* SYNC = stream->object;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 8004cb4:	68b8      	ldr	r0, [r7, #8]
 8004cb6:	f7ff ff0b 	bl	8004ad0 <CO_getUint32>
 8004cba:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cc4:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    bool_t isProducer = (cobIdSync & 0x40000000U) != 0U;
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	bf14      	ite	ne
 8004cd0:	2301      	movne	r3, #1
 8004cd2:	2300      	moveq	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	61bb      	str	r3, [r7, #24]
    if (((cobIdSync & 0xBFFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 8004cd8:	6a3a      	ldr	r2, [r7, #32]
 8004cda:	4b48      	ldr	r3, [pc, #288]	@ (8004dfc <OD_write_1005+0x180>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d133      	bne.n	8004d4a <OD_write_1005+0xce>
 8004ce2:	8bfb      	ldrh	r3, [r7, #30]
 8004ce4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ce6:	d930      	bls.n	8004d4a <OD_write_1005+0xce>
 8004ce8:	8bfb      	ldrh	r3, [r7, #30]
 8004cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cee:	d903      	bls.n	8004cf8 <OD_write_1005+0x7c>
 8004cf0:	8bfb      	ldrh	r3, [r7, #30]
 8004cf2:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8004cf6:	d928      	bls.n	8004d4a <OD_write_1005+0xce>
 8004cf8:	8bfb      	ldrh	r3, [r7, #30]
 8004cfa:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8004cfe:	d903      	bls.n	8004d08 <OD_write_1005+0x8c>
 8004d00:	8bfb      	ldrh	r3, [r7, #30]
 8004d02:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004d06:	d320      	bcc.n	8004d4a <OD_write_1005+0xce>
 8004d08:	8bfb      	ldrh	r3, [r7, #30]
 8004d0a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004d0e:	d903      	bls.n	8004d18 <OD_write_1005+0x9c>
 8004d10:	8bfb      	ldrh	r3, [r7, #30]
 8004d12:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8004d16:	d318      	bcc.n	8004d4a <OD_write_1005+0xce>
 8004d18:	8bfb      	ldrh	r3, [r7, #30]
 8004d1a:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8004d1e:	d303      	bcc.n	8004d28 <OD_write_1005+0xac>
 8004d20:	8bfb      	ldrh	r3, [r7, #30]
 8004d22:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d26:	d310      	bcc.n	8004d4a <OD_write_1005+0xce>
 8004d28:	8bfb      	ldrh	r3, [r7, #30]
 8004d2a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d2e:	d80c      	bhi.n	8004d4a <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && (CAN_ID != SYNC->CAN_ID))) {
 8004d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <OD_write_1005+0xd2>
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d007      	beq.n	8004d4e <OD_write_1005+0xd2>
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8004d44:	8bfa      	ldrh	r2, [r7, #30]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d001      	beq.n	8004d4e <OD_write_1005+0xd2>
        return ODR_INVALID_VALUE;
 8004d4a:	230f      	movs	r3, #15
 8004d4c:	e052      	b.n	8004df4 <OD_write_1005+0x178>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d50:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8004d54:	8bfa      	ldrh	r2, [r7, #30]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d039      	beq.n	8004dce <OD_write_1005+0x152>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(SYNC->CANdevRx, SYNC->CANdevRxIdx, CAN_ID, 0x7FF, false,
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d60:	8e99      	ldrh	r1, [r3, #52]	@ 0x34
 8004d62:	8bfa      	ldrh	r2, [r7, #30]
 8004d64:	4b26      	ldr	r3, [pc, #152]	@ (8004e00 <OD_write_1005+0x184>)
 8004d66:	9302      	str	r3, [sp, #8]
 8004d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8004d74:	f002 fb0a 	bl	800738c <CO_CANrxBufferInit>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	75fb      	strb	r3, [r7, #23]
                                                     (void*)SYNC, CO_SYNC_receive);

        if (CANret != CO_ERROR_NO) {
 8004d7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 8004d84:	2309      	movs	r3, #9
 8004d86:	e035      	b.n	8004df4 <OD_write_1005+0x178>
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 8004d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8e:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
                                             (SYNC->counterOverflowValue != 0U) ? 1U : 0U, false);
 8004d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d94:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <OD_write_1005+0x122>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <OD_write_1005+0x124>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	8bfa      	ldrh	r2, [r7, #30]
 8004da2:	2400      	movs	r4, #0
 8004da4:	9401      	str	r4, [sp, #4]
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	2300      	movs	r3, #0
 8004daa:	f002 fb4d 	bl	8007448 <CO_CANtxBufferInit>
 8004dae:	4602      	mov	r2, r0
 8004db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db2:	62da      	str	r2, [r3, #44]	@ 0x2c

        if (SYNC->CANtxBuff == NULL) {
 8004db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d104      	bne.n	8004dc6 <OD_write_1005+0x14a>
            SYNC->isProducer = false;
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	625a      	str	r2, [r3, #36]	@ 0x24
            return ODR_DEV_INCOMPAT;
 8004dc2:	2309      	movs	r3, #9
 8004dc4:	e016      	b.n	8004df4 <OD_write_1005+0x178>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc8:	8bfa      	ldrh	r2, [r7, #30]
 8004dca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = isProducer;
 8004dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (isProducer) {
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <OD_write_1005+0x16a>
        SYNC->counter = 0;
 8004dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ddc:	2200      	movs	r2, #0
 8004dde:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8004de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de2:	2200      	movs	r2, #0
 8004de4:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	68b9      	ldr	r1, [r7, #8]
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f7fc fdb6 	bl	800195e <OD_writeOriginal>
 8004df2:	4603      	mov	r3, r0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	372c      	adds	r7, #44	@ 0x2c
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd90      	pop	{r4, r7, pc}
 8004dfc:	bffff800 	.word	0xbffff800
 8004e00:	08004bef 	.word	0x08004bef

08004e04 <OD_write_1019>:
 * Custom function for writing OD object "Synchronous counter overflow value"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1019(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8004e04:	b590      	push	{r4, r7, lr}
 8004e06:	b089      	sub	sp, #36	@ 0x24
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
 8004e10:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint8_t))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00c      	beq.n	8004e32 <OD_write_1019+0x2e>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	7d1b      	ldrb	r3, [r3, #20]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d108      	bne.n	8004e32 <OD_write_1019+0x2e>
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d005      	beq.n	8004e32 <OD_write_1019+0x2e>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d102      	bne.n	8004e32 <OD_write_1019+0x2e>
        || (countWritten == NULL)) {
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <OD_write_1019+0x32>
        return ODR_DEV_INCOMPAT;
 8004e32:	2309      	movs	r3, #9
 8004e34:	e040      	b.n	8004eb8 <OD_write_1019+0xb4>
    }

    CO_SYNC_t* SYNC = stream->object;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 8004e3c:	68b8      	ldr	r0, [r7, #8]
 8004e3e:	f7ff fe39 	bl	8004ab4 <CO_getUint8>
 8004e42:	4603      	mov	r3, r0
 8004e44:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if ((syncCounterOvf == 1U) || (syncCounterOvf > 240U)) {
 8004e46:	7cfb      	ldrb	r3, [r7, #19]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d002      	beq.n	8004e52 <OD_write_1019+0x4e>
 8004e4c:	7cfb      	ldrb	r3, [r7, #19]
 8004e4e:	2bf0      	cmp	r3, #240	@ 0xf0
 8004e50:	d901      	bls.n	8004e56 <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 8004e52:	230f      	movs	r3, #15
 8004e54:	e030      	b.n	8004eb8 <OD_write_1019+0xb4>
    }
    if (*SYNC->OD_1006_period != 0U) {
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 8004e60:	2317      	movs	r3, #23
 8004e62:	e029      	b.n	8004eb8 <OD_write_1019+0xb4>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, SYNC->CAN_ID, false,
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8004e74:	7cfb      	ldrb	r3, [r7, #19]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <OD_write_1019+0x7a>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <OD_write_1019+0x7c>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	2400      	movs	r4, #0
 8004e82:	9401      	str	r4, [sp, #4]
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	2300      	movs	r3, #0
 8004e88:	f002 fade 	bl	8007448 <CO_CANtxBufferInit>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	62da      	str	r2, [r3, #44]	@ 0x2c
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);

    if (SYNC->CANtxBuff == NULL) {
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d104      	bne.n	8004ea4 <OD_write_1019+0xa0>
        SYNC->isProducer = false;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	625a      	str	r2, [r3, #36]	@ 0x24
        return ODR_DEV_INCOMPAT;
 8004ea0:	2309      	movs	r3, #9
 8004ea2:	e009      	b.n	8004eb8 <OD_write_1019+0xb4>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	7cfa      	ldrb	r2, [r7, #19]
 8004ea8:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	68b9      	ldr	r1, [r7, #8]
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f7fc fd54 	bl	800195e <OD_writeOriginal>
 8004eb6:	4603      	mov	r3, r0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd90      	pop	{r4, r7, pc}

08004ec0 <CO_SYNC_init>:
             OD_entry_t* OD_1007_syncWindowLen, OD_entry_t* OD_1019_syncCounterOvf, CO_CANmodule_t* CANdevRx,
             uint16_t CANdevRxIdx,
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08c      	sub	sp, #48	@ 0x30
 8004ec4:	af04      	add	r7, sp, #16
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if ((SYNC == NULL) || (em == NULL) || (OD_1005_cobIdSync == NULL)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00e      	beq.n	8004ef2 <CO_SYNC_init+0x32>
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00b      	beq.n	8004ef2 <CO_SYNC_init+0x32>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d008      	beq.n	8004ef2 <CO_SYNC_init+0x32>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        || (OD_1006_commCyclePeriod == NULL) || (CANdevTx == NULL)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d005      	beq.n	8004ef2 <CO_SYNC_init+0x32>
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d002      	beq.n	8004ef2 <CO_SYNC_init+0x32>
#endif
        || (CANdevRx == NULL)) {
 8004eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d102      	bne.n	8004ef8 <CO_SYNC_init+0x38>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004ef2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ef6:	e0fd      	b.n	80050f4 <CO_SYNC_init+0x234>
    }

    /* clear object */
    (void)memset(SYNC, 0, sizeof(CO_SYNC_t));
 8004ef8:	225c      	movs	r2, #92	@ 0x5c
 8004efa:	2100      	movs	r1, #0
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f006 f953 	bl	800b1a8 <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 8004f02:	2380      	movs	r3, #128	@ 0x80
 8004f04:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 8004f06:	f107 0218 	add.w	r2, r7, #24
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7ff fe26 	bl	8004b60 <OD_get_u32>
 8004f14:	4603      	mov	r3, r0
 8004f16:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8004f18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00c      	beq.n	8004f3a <CO_SYNC_init+0x7a>
        if (errInfo != NULL) {
 8004f20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d006      	beq.n	8004f34 <CO_SYNC_init+0x74>
            *errInfo = OD_getIndex(OD_1005_cobIdSync);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff fde0 	bl	8004aec <OD_getIndex>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	461a      	mov	r2, r3
 8004f30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f32:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8004f34:	f06f 030b 	mvn.w	r3, #11
 8004f38:	e0dc      	b.n	80050f4 <CO_SYNC_init+0x234>
    }
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->OD_1005_extension.object = SYNC;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	639a      	str	r2, [r3, #56]	@ 0x38
    SYNC->OD_1005_extension.read = OD_readOriginal;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4a6e      	ldr	r2, [pc, #440]	@ (80050fc <CO_SYNC_init+0x23c>)
 8004f44:	63da      	str	r2, [r3, #60]	@ 0x3c
    SYNC->OD_1005_extension.write = OD_write_1005;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4a6d      	ldr	r2, [pc, #436]	@ (8005100 <CO_SYNC_init+0x240>)
 8004f4a:	641a      	str	r2, [r3, #64]	@ 0x40
    (void)OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3338      	adds	r3, #56	@ 0x38
 8004f50:	4619      	mov	r1, r3
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7ff fddb 	bl	8004b0e <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0, sizeof(uint32_t), NULL);
 8004f58:	2300      	movs	r3, #0
 8004f5a:	2204      	movs	r2, #4
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	6838      	ldr	r0, [r7, #0]
 8004f60:	f7fc ff82 	bl	8001e68 <OD_getPtr>
 8004f64:	4602      	mov	r2, r0
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	61da      	str	r2, [r3, #28]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    if (SYNC->OD_1006_period == NULL) {
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10c      	bne.n	8004f8c <CO_SYNC_init+0xcc>
        if (errInfo != NULL) {
 8004f72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d006      	beq.n	8004f86 <CO_SYNC_init+0xc6>
            *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 8004f78:	6838      	ldr	r0, [r7, #0]
 8004f7a:	f7ff fdb7 	bl	8004aec <OD_getIndex>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	461a      	mov	r2, r3
 8004f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f84:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8004f86:	f06f 030b 	mvn.w	r3, #11
 8004f8a:	e0b3      	b.n	80050f4 <CO_SYNC_init+0x234>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0, sizeof(uint32_t), NULL);
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	2204      	movs	r2, #4
 8004f90:	2100      	movs	r1, #0
 8004f92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f94:	f7fc ff68 	bl	8001e68 <OD_getPtr>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	621a      	str	r2, [r3, #32]
    if ((OD_1007_syncWindowLen != NULL) && (SYNC->OD_1007_window == NULL)) {
 8004f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d010      	beq.n	8004fc6 <CO_SYNC_init+0x106>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10c      	bne.n	8004fc6 <CO_SYNC_init+0x106>
        if (errInfo != NULL) {
 8004fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d006      	beq.n	8004fc0 <CO_SYNC_init+0x100>
            *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 8004fb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fb4:	f7ff fd9a 	bl	8004aec <OD_getIndex>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	461a      	mov	r2, r3
 8004fbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fbe:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8004fc0:	f06f 030b 	mvn.w	r3, #11
 8004fc4:	e096      	b.n	80050f4 <CO_SYNC_init+0x234>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and configure extension */
    uint8_t syncCounterOvf = 0;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 8004fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d033      	beq.n	8005038 <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 8004fd0:	f107 0217 	add.w	r2, r7, #23
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004fda:	f7ff fdac 	bl	8004b36 <OD_get_u8>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 8004fe2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00c      	beq.n	8005004 <CO_SYNC_init+0x144>
            if (errInfo != NULL) {
 8004fea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d006      	beq.n	8004ffe <CO_SYNC_init+0x13e>
                *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 8004ff0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ff2:	f7ff fd7b 	bl	8004aec <OD_getIndex>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ffc:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8004ffe:	f06f 030b 	mvn.w	r3, #11
 8005002:	e077      	b.n	80050f4 <CO_SYNC_init+0x234>
        }
        if (syncCounterOvf == 1U) {
 8005004:	7dfb      	ldrb	r3, [r7, #23]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d102      	bne.n	8005010 <CO_SYNC_init+0x150>
            syncCounterOvf = 2;
 800500a:	2302      	movs	r3, #2
 800500c:	75fb      	strb	r3, [r7, #23]
 800500e:	e004      	b.n	800501a <CO_SYNC_init+0x15a>
        } else if (syncCounterOvf > 240U) {
 8005010:	7dfb      	ldrb	r3, [r7, #23]
 8005012:	2bf0      	cmp	r3, #240	@ 0xf0
 8005014:	d901      	bls.n	800501a <CO_SYNC_init+0x15a>
            syncCounterOvf = 240;
 8005016:	23f0      	movs	r3, #240	@ 0xf0
 8005018:	75fb      	strb	r3, [r7, #23]
        } else { /* MISRA C 2004 14.10 */
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->OD_1019_extension.object = SYNC;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	64da      	str	r2, [r3, #76]	@ 0x4c
        SYNC->OD_1019_extension.read = OD_readOriginal;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4a36      	ldr	r2, [pc, #216]	@ (80050fc <CO_SYNC_init+0x23c>)
 8005024:	651a      	str	r2, [r3, #80]	@ 0x50
        SYNC->OD_1019_extension.write = OD_write_1019;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4a36      	ldr	r2, [pc, #216]	@ (8005104 <CO_SYNC_init+0x244>)
 800502a:	655a      	str	r2, [r3, #84]	@ 0x54
        (void)OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	334c      	adds	r3, #76	@ 0x4c
 8005030:	4619      	mov	r1, r3
 8005032:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005034:	f7ff fd6b 	bl	8004b0e <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 8005038:	7dfa      	ldrb	r2, [r7, #23]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = (cobIdSync & 0x40000000U) != 0U;
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	bf14      	ite	ne
 800504e:	2301      	movne	r3, #1
 8005050:	2300      	moveq	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	461a      	mov	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	625a      	str	r2, [r3, #36]	@ 0x24
    SYNC->CANdevTx = CANdevTx;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800505e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	b29b      	uxth	r3, r3
 8005064:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005068:	b29a      	uxth	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    SYNC->CANdevRx = CANdevRx;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005074:	631a      	str	r2, [r3, #48]	@ 0x30
    SYNC->CANdevRxIdx = CANdevRxIdx;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800507a:	869a      	strh	r2, [r3, #52]	@ 0x34
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANdevTxIdx = CANdevTxIdx;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8005080:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
#endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, (uint16_t)(cobIdSync & 0x7FFU), 0x7FF, false,
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	b29b      	uxth	r3, r3
 8005088:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800508c:	b29a      	uxth	r2, r3
 800508e:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 8005090:	4b1d      	ldr	r3, [pc, #116]	@ (8005108 <CO_SYNC_init+0x248>)
 8005092:	9302      	str	r3, [sp, #8]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	9301      	str	r3, [sp, #4]
 8005098:	2300      	movs	r3, #0
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80050a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050a2:	f002 f973 	bl	800738c <CO_CANrxBufferInit>
 80050a6:	4603      	mov	r3, r0
 80050a8:	77bb      	strb	r3, [r7, #30]
                                              (void*)SYNC, CO_SYNC_receive);
    if (ret != CO_ERROR_NO) {
 80050aa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <CO_SYNC_init+0x1f8>
        return ret;
 80050b2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80050b6:	e01d      	b.n	80050f4 <CO_SYNC_init+0x234>
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050c0:	b29a      	uxth	r2, r3
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);
 80050c2:	7dfb      	ldrb	r3, [r7, #23]
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <CO_SYNC_init+0x20c>
 80050c8:	2301      	movs	r3, #1
 80050ca:	e000      	b.n	80050ce <CO_SYNC_init+0x20e>
 80050cc:	2300      	movs	r3, #0
 80050ce:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 80050d0:	2000      	movs	r0, #0
 80050d2:	9001      	str	r0, [sp, #4]
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	2300      	movs	r3, #0
 80050d8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80050da:	f002 f9b5 	bl	8007448 <CO_CANtxBufferInit>
 80050de:	4602      	mov	r2, r0
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (SYNC->CANtxBuff == NULL) {
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d102      	bne.n	80050f2 <CO_SYNC_init+0x232>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80050ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050f0:	e000      	b.n	80050f4 <CO_SYNC_init+0x234>
    }
#endif

    return CO_ERROR_NO;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3720      	adds	r7, #32
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	080018af 	.word	0x080018af
 8005100:	08004c7d 	.word	0x08004c7d
 8005104:	08004e05 	.word	0x08004e05
 8005108:	08004bef 	.word	0x08004bef

0800510c <CO_SYNC_process>:
    }
}
#endif

CO_SYNC_status_t
CO_SYNC_process(CO_SYNC_t* SYNC, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	@ 0x28
 8005110:	af02      	add	r7, sp, #8
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 800511a:	2300      	movs	r3, #0
 800511c:	77fb      	strb	r3, [r7, #31]

    if (NMTisPreOrOperational) {
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 8088 	beq.w	8005236 <CO_SYNC_process+0x12a>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	4413      	add	r3, r2
 800512e:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) {
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	429a      	cmp	r2, r3
 8005138:	d902      	bls.n	8005140 <CO_SYNC_process+0x34>
            SYNC->timer = timerNew;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	619a      	str	r2, [r3, #24]
        }

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d007      	beq.n	8005158 <CO_SYNC_process+0x4c>
            SYNC->timer = 0;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 800514e:	2301      	movs	r3, #1
 8005150:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = (SYNC->OD_1006_period != NULL) ? *SYNC->OD_1006_period : 0U;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <CO_SYNC_process+0x5c>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	e000      	b.n	800516a <CO_SYNC_process+0x5e>
 8005168:	2300      	movs	r3, #0
 800516a:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0U) {
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d031      	beq.n	80051d6 <CO_SYNC_process+0xca>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
            if (SYNC->isProducer) {
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <CO_SYNC_process+0x84>
                if (SYNC->timer >= OD_1006_period) {
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	429a      	cmp	r2, r3
 8005182:	d828      	bhi.n	80051d6 <CO_SYNC_process+0xca>
                    syncStatus = CO_SYNC_RX_TX;
 8005184:	2301      	movs	r3, #1
 8005186:	77fb      	strb	r3, [r7, #31]
                    (void)CO_SYNCsend(SYNC);
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f7ff fcfe 	bl	8004b8a <CO_SYNCsend>
 800518e:	e022      	b.n	80051d6 <CO_SYNC_process+0xca>
#endif
            } else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

                /* Verify timeout of SYNC */
                if (SYNC->timeoutError == 1U) {
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	7c1b      	ldrb	r3, [r3, #16]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d11e      	bne.n	80051d6 <CO_SYNC_process+0xca>
                    /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                    uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	085b      	lsrs	r3, r3, #1
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4413      	add	r3, r2
 80051a0:	61bb      	str	r3, [r7, #24]
                    if (periodTimeout < OD_1006_period) {
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d202      	bcs.n	80051b0 <CO_SYNC_process+0xa4>
                        periodTimeout = 0xFFFFFFFFU;
 80051aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80051ae:	61bb      	str	r3, [r7, #24]
                    }

                    if (SYNC->timer > periodTimeout) {
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d20d      	bcs.n	80051d6 <CO_SYNC_process+0xca>
                        CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6818      	ldr	r0, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80051c8:	2218      	movs	r2, #24
 80051ca:	2101      	movs	r1, #1
 80051cc:	f7fb fd37 	bl	8000c3e <CO_error>
                        SYNC->timeoutError = 2;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2202      	movs	r2, #2
 80051d4:	741a      	strb	r2, [r3, #16]
                } else { /* MISRA C 2004 14.10 */
                }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if ((SYNC->OD_1007_window != NULL) && (*SYNC->OD_1007_window > 0U) && (SYNC->timer > *SYNC->OD_1007_window)) {
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d015      	beq.n	800520a <CO_SYNC_process+0xfe>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d010      	beq.n	800520a <CO_SYNC_process+0xfe>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	699a      	ldr	r2, [r3, #24]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d909      	bls.n	800520a <CO_SYNC_process+0xfe>
            if (!SYNC->syncIsOutsideWindow) {
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <CO_SYNC_process+0xf6>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 80051fe:	2302      	movs	r3, #2
 8005200:	77fb      	strb	r3, [r7, #31]
            }
            SYNC->syncIsOutsideWindow = true;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2201      	movs	r2, #1
 8005206:	615a      	str	r2, [r3, #20]
 8005208:	e002      	b.n	8005210 <CO_SYNC_process+0x104>
        } else {
            SYNC->syncIsOutsideWindow = false;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0U) {
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	7a1b      	ldrb	r3, [r3, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d01a      	beq.n	800524e <CO_SYNC_process+0x142>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6818      	ldr	r0, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	7a1b      	ldrb	r3, [r3, #8]
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	f248 2340 	movw	r3, #33344	@ 0x8240
 8005226:	2219      	movs	r2, #25
 8005228:	2101      	movs	r1, #1
 800522a:	f7fb fd08 	bl	8000c3e <CO_error>
            SYNC->receiveError = 0;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	721a      	strb	r2, [r3, #8]
 8005234:	e00b      	b.n	800524e <CO_SYNC_process+0x142>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 800524e:	7ffb      	ldrb	r3, [r7, #31]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d10f      	bne.n	8005274 <CO_SYNC_process+0x168>
        if (SYNC->timeoutError == 2U) {
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	7c1b      	ldrb	r3, [r3, #16]
 8005258:	2b02      	cmp	r3, #2
 800525a:	d108      	bne.n	800526e <CO_SYNC_process+0x162>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6818      	ldr	r0, [r3, #0]
 8005260:	2300      	movs	r3, #0
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	2300      	movs	r3, #0
 8005266:	2218      	movs	r2, #24
 8005268:	2100      	movs	r1, #0
 800526a:	f7fb fce8 	bl	8000c3e <CO_error>
        }
        SYNC->timeoutError = 1;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 8005274:	7ffb      	ldrb	r3, [r7, #31]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3720      	adds	r7, #32
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <CO_getUint16>:
CO_getUint16(const void* buf) {
 800527e:	b480      	push	{r7}
 8005280:	b085      	sub	sp, #20
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	b29b      	uxth	r3, r3
 800528c:	81fb      	strh	r3, [r7, #14]
    return value;
 800528e:	89fb      	ldrh	r3, [r7, #14]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <CO_getUint32>:
CO_getUint32(const void* buf) {
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60fb      	str	r3, [r7, #12]
    return value;
 80052aa:	68fb      	ldr	r3, [r7, #12]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <OD_getIndex+0x14>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	e000      	b.n	80052ce <OD_getIndex+0x16>
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 80052ea:	2305      	movs	r3, #5
 80052ec:	e003      	b.n	80052f6 <OD_extension_init+0x1c>
    entry->extension = extension;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8005302:	b580      	push	{r7, lr}
 8005304:	b086      	sub	sp, #24
 8005306:	af02      	add	r7, sp, #8
 8005308:	60f8      	str	r0, [r7, #12]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
 800530e:	460b      	mov	r3, r1
 8005310:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8005312:	7af9      	ldrb	r1, [r7, #11]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	2304      	movs	r3, #4
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f7fc fd29 	bl	8001d74 <OD_get_value>
 8005322:	4603      	mov	r3, r0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_TIME_receive(void* object, void* msg) {
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
    CO_TIME_t* TIME = object;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	791b      	ldrb	r3, [r3, #4]
 800533e:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	3305      	adds	r3, #5
 8005344:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 8005346:	7cfb      	ldrb	r3, [r7, #19]
 8005348:	2b06      	cmp	r3, #6
 800534a:	d108      	bne.n	800535e <CO_TIME_receive+0x32>
        (void)memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2206      	movs	r2, #6
 8005350:	68f9      	ldr	r1, [r7, #12]
 8005352:	4618      	mov	r0, r3
 8005354:	f005 ffb3 	bl	800b2be <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	2201      	movs	r2, #1
 800535c:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 800535e:	bf00      	nop
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <OD_write_1012>:
 * Custom function for writing OD object "COB-ID time stamp"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1012(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8005368:	b580      	push	{r7, lr}
 800536a:	b088      	sub	sp, #32
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00c      	beq.n	8005396 <OD_write_1012+0x2e>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	7d1b      	ldrb	r3, [r3, #20]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d108      	bne.n	8005396 <OD_write_1012+0x2e>
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <OD_write_1012+0x2e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b04      	cmp	r3, #4
 800538e:	d102      	bne.n	8005396 <OD_write_1012+0x2e>
        || (countWritten == NULL)) {
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <OD_write_1012+0x32>
        return ODR_DEV_INCOMPAT;
 8005396:	2309      	movs	r3, #9
 8005398:	e051      	b.n	800543e <OD_write_1012+0xd6>
    }

    CO_TIME_t* TIME = stream->object;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 80053a0:	68b8      	ldr	r0, [r7, #8]
 80053a2:	f7ff ff7b 	bl	800529c <CO_getUint32>
 80053a6:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053b0:	82fb      	strh	r3, [r7, #22]
    if (((cobIdTimeStamp & 0x3FFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	4b24      	ldr	r3, [pc, #144]	@ (8005448 <OD_write_1012+0xe0>)
 80053b6:	4013      	ands	r3, r2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d126      	bne.n	800540a <OD_write_1012+0xa2>
 80053bc:	8afb      	ldrh	r3, [r7, #22]
 80053be:	2b7f      	cmp	r3, #127	@ 0x7f
 80053c0:	d923      	bls.n	800540a <OD_write_1012+0xa2>
 80053c2:	8afb      	ldrh	r3, [r7, #22]
 80053c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053c8:	d903      	bls.n	80053d2 <OD_write_1012+0x6a>
 80053ca:	8afb      	ldrh	r3, [r7, #22]
 80053cc:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 80053d0:	d91b      	bls.n	800540a <OD_write_1012+0xa2>
 80053d2:	8afb      	ldrh	r3, [r7, #22]
 80053d4:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 80053d8:	d903      	bls.n	80053e2 <OD_write_1012+0x7a>
 80053da:	8afb      	ldrh	r3, [r7, #22]
 80053dc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80053e0:	d313      	bcc.n	800540a <OD_write_1012+0xa2>
 80053e2:	8afb      	ldrh	r3, [r7, #22]
 80053e4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80053e8:	d903      	bls.n	80053f2 <OD_write_1012+0x8a>
 80053ea:	8afb      	ldrh	r3, [r7, #22]
 80053ec:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 80053f0:	d30b      	bcc.n	800540a <OD_write_1012+0xa2>
 80053f2:	8afb      	ldrh	r3, [r7, #22]
 80053f4:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 80053f8:	d303      	bcc.n	8005402 <OD_write_1012+0x9a>
 80053fa:	8afb      	ldrh	r3, [r7, #22]
 80053fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005400:	d303      	bcc.n	800540a <OD_write_1012+0xa2>
 8005402:	8afb      	ldrh	r3, [r7, #22]
 8005404:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005408:	d901      	bls.n	800540e <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 800540a:	230f      	movs	r3, #15
 800540c:	e017      	b.n	800543e <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	0fdb      	lsrs	r3, r3, #31
 8005412:	b2db      	uxtb	r3, r3
 8005414:	461a      	mov	r2, r3
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	bf14      	ite	ne
 8005424:	2301      	movne	r3, #1
 8005426:	2300      	moveq	r3, #0
 8005428:	b2db      	uxtb	r3, r3
 800542a:	461a      	mov	r2, r3
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	68b9      	ldr	r1, [r7, #8]
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f7fc fa91 	bl	800195e <OD_writeOriginal>
 800543c:	4603      	mov	r3, r0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3720      	adds	r7, #32
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	3ffff800 	.word	0x3ffff800

0800544c <CO_TIME_init>:
CO_ReturnError_t
CO_TIME_init(CO_TIME_t* TIME, OD_entry_t* OD_1012_cobIdTimeStamp, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 800544c:	b580      	push	{r7, lr}
 800544e:	b08c      	sub	sp, #48	@ 0x30
 8005450:	af04      	add	r7, sp, #16
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
 8005458:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if ((TIME == NULL) || (OD_1012_cobIdTimeStamp == NULL) || (CANdevRx == NULL)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <CO_TIME_init+0x20>
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <CO_TIME_init+0x20>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d102      	bne.n	8005472 <CO_TIME_init+0x26>
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800546c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005470:	e061      	b.n	8005536 <CO_TIME_init+0xea>
    }

    (void)memset(TIME, 0, sizeof(CO_TIME_t));
 8005472:	222c      	movs	r2, #44	@ 0x2c
 8005474:	2100      	movs	r1, #0
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f005 fe96 	bl	800b1a8 <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 800547c:	f107 0214 	add.w	r2, r7, #20
 8005480:	2301      	movs	r3, #1
 8005482:	2100      	movs	r1, #0
 8005484:	68b8      	ldr	r0, [r7, #8]
 8005486:	f7ff ff3c 	bl	8005302 <OD_get_u32>
 800548a:	4603      	mov	r3, r0
 800548c:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 800548e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00c      	beq.n	80054b0 <CO_TIME_init+0x64>
        if (errInfo != NULL) {
 8005496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005498:	2b00      	cmp	r3, #0
 800549a:	d006      	beq.n	80054aa <CO_TIME_init+0x5e>
            *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 800549c:	68b8      	ldr	r0, [r7, #8]
 800549e:	f7ff ff0b 	bl	80052b8 <OD_getIndex>
 80054a2:	4603      	mov	r3, r0
 80054a4:	461a      	mov	r2, r3
 80054a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a8:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80054aa:	f06f 030b 	mvn.w	r3, #11
 80054ae:	e042      	b.n	8005536 <CO_TIME_init+0xea>
    }
#if ((CO_CONFIG_TIME)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    TIME->OD_1012_extension.object = TIME;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4a21      	ldr	r2, [pc, #132]	@ (8005540 <CO_TIME_init+0xf4>)
 80054ba:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4a21      	ldr	r2, [pc, #132]	@ (8005544 <CO_TIME_init+0xf8>)
 80054c0:	625a      	str	r2, [r3, #36]	@ 0x24
    (void)OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	331c      	adds	r3, #28
 80054c6:	4619      	mov	r1, r3
 80054c8:	68b8      	ldr	r0, [r7, #8]
 80054ca:	f7ff ff06 	bl	80052da <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054d6:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	0fdb      	lsrs	r3, r3, #31
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	461a      	mov	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	bf14      	ite	ne
 80054ee:	2301      	movne	r3, #1
 80054f0:	2300      	moveq	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	461a      	mov	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
    if (TIME->isConsumer) {
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d015      	beq.n	8005534 <CO_TIME_init+0xe8>
        CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, cobId, 0x7FF, false, (void*)TIME,
 8005508:	8bba      	ldrh	r2, [r7, #28]
 800550a:	8879      	ldrh	r1, [r7, #2]
 800550c:	4b0e      	ldr	r3, [pc, #56]	@ (8005548 <CO_TIME_init+0xfc>)
 800550e:	9302      	str	r3, [sp, #8]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	9301      	str	r3, [sp, #4]
 8005514:	2300      	movs	r3, #0
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f001 ff35 	bl	800738c <CO_CANrxBufferInit>
 8005522:	4603      	mov	r3, r0
 8005524:	76fb      	strb	r3, [r7, #27]
                                                  CO_TIME_receive);
        if (ret != CO_ERROR_NO) {
 8005526:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <CO_TIME_init+0xe8>
            return ret;
 800552e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005532:	e000      	b.n	8005536 <CO_TIME_init+0xea>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3720      	adds	r7, #32
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	080018af 	.word	0x080018af
 8005544:	08005369 	.word	0x08005369
 8005548:	0800532d 	.word	0x0800532d

0800554c <CO_TIME_process>:
    }
}
#endif

bool_t
CO_TIME_process(CO_TIME_t* TIME, bool_t NMTisPreOrOperational, uint32_t timeDifference_us) {
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	@ 0x28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 8005558:	2300      	movs	r3, #0
 800555a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d024      	beq.n	80055ac <CO_TIME_process+0x60>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d020      	beq.n	80055ac <CO_TIME_process+0x60>
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d01f      	beq.n	80055b2 <CO_TIME_process+0x66>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff fe91 	bl	800529c <CO_getUint32>
 800557a:	6238      	str	r0, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3304      	adds	r3, #4
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff fe7c 	bl	800527e <CO_getUint16>
 8005586:	4603      	mov	r3, r0
 8005588:	83fb      	strh	r3, [r7, #30]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFFU;
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8bfa      	ldrh	r2, [r7, #30]
 8005598:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 80055a0:	2301      	movs	r3, #1
 80055a2:	627b      	str	r3, [r7, #36]	@ 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	619a      	str	r2, [r3, #24]
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 80055aa:	e002      	b.n	80055b2 <CO_TIME_process+0x66>
        }
    } else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 80055b2:	2300      	movs	r3, #0
 80055b4:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && (timeDifference_us > 0U)) {
 80055b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d132      	bne.n	8005622 <CO_TIME_process+0xd6>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d02f      	beq.n	8005622 <CO_TIME_process+0xd6>
        uint32_t us = timeDifference_us + TIME->residual_us;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	89db      	ldrh	r3, [r3, #14]
 80055c6:	461a      	mov	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4413      	add	r3, r2
 80055cc:	617b      	str	r3, [r7, #20]
        ms = us / 1000U;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	4a16      	ldr	r2, [pc, #88]	@ (800562c <CO_TIME_process+0xe0>)
 80055d2:	fba2 2303 	umull	r2, r3, r2, r3
 80055d6:	099b      	lsrs	r3, r3, #6
 80055d8:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = (uint16_t)(us % 1000U);
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4b13      	ldr	r3, [pc, #76]	@ (800562c <CO_TIME_process+0xe0>)
 80055de:	fba3 1302 	umull	r1, r3, r3, r2
 80055e2:	099b      	lsrs	r3, r3, #6
 80055e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80055e8:	fb01 f303 	mul.w	r3, r1, r3
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	441a      	add	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000U * 60U * 60U * 24U)) {
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	4a0a      	ldr	r2, [pc, #40]	@ (8005630 <CO_TIME_process+0xe4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d90b      	bls.n	8005622 <CO_TIME_process+0xd6>
            TIME->ms -= ((uint32_t)1000U * 60U * 60U * 24U);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	689a      	ldr	r2, [r3, #8]
 800560e:	4b09      	ldr	r3, [pc, #36]	@ (8005634 <CO_TIME_process+0xe8>)
 8005610:	4413      	add	r3, r2
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	6093      	str	r3, [r2, #8]
            TIME->days += 1U;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	899b      	ldrh	r3, [r3, #12]
 800561a:	3301      	adds	r3, #1
 800561c:	b29a      	uxth	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	819a      	strh	r2, [r3, #12]
    } else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 8005622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005624:	4618      	mov	r0, r3
 8005626:	3728      	adds	r7, #40	@ 0x28
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	10624dd3 	.word	0x10624dd3
 8005630:	05265bff 	.word	0x05265bff
 8005634:	fad9a400 	.word	0xfad9a400

08005638 <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0

CO_ReturnError_t
CO_LEDs_init(CO_LEDs_t* LEDs) {
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8005640:	2300      	movs	r3, #0
 8005642:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d102      	bne.n	8005650 <CO_LEDs_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800564a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800564e:	e006      	b.n	800565e <CO_LEDs_init+0x26>
    }

    /* clear the object */
    (void)memset(LEDs, 0, sizeof(CO_LEDs_t));
 8005650:	220c      	movs	r2, #12
 8005652:	2100      	movs	r1, #0
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f005 fda7 	bl	800b1a8 <memset>

    return ret;
 800565a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <CO_LEDs_process>:

void
CO_LEDs_process(CO_LEDs_t* LEDs, uint32_t timeDifference_us, CO_NMT_internalState_t NMTstate, bool_t LSSconfig,
                bool_t ErrCANbusOff, bool_t ErrCANbusWarn, bool_t ErrRpdo, bool_t ErrSync, bool_t ErrHbCons,
                bool_t ErrOther, bool_t firmwareDownload, uint32_t* timerNext_us) {
 8005668:	b480      	push	{r7}
 800566a:	b089      	sub	sp, #36	@ 0x24
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	4613      	mov	r3, r2
 8005676:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 8005678:	2300      	movs	r3, #0
 800567a:	77fb      	strb	r3, [r7, #31]
    uint8_t gr = 0;
 800567c:	2300      	movs	r3, #0
 800567e:	77bb      	strb	r3, [r7, #30]
    bool_t tick = false;
 8005680:	2300      	movs	r3, #0
 8005682:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	441a      	add	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000U) {
 8005690:	e112      	b.n	80058b8 <CO_LEDs_process+0x250>
        bool_t rdFlickerNext = (LEDs->LEDred & (uint8_t)CO_LED_flicker) == 0U;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	7a5b      	ldrb	r3, [r3, #9]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	bf0c      	ite	eq
 800569e:	2301      	moveq	r3, #1
 80056a0:	2300      	movne	r3, #0
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	613b      	str	r3, [r7, #16]

        tick = true;
 80056a6:	2301      	movs	r3, #1
 80056a8:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000U;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f5a3 4343 	sub.w	r3, r3, #49920	@ 0xc300
 80056b2:	3b50      	subs	r3, #80	@ 0x50
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3U) {
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	791b      	ldrb	r3, [r3, #4]
 80056bc:	3301      	adds	r3, #1
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	711a      	strb	r2, [r3, #4]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	791b      	ldrb	r3, [r3, #4]
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	f240 80dd 	bls.w	8005888 <CO_LEDs_process+0x220>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	711a      	strb	r2, [r3, #4]
            rd = 0;
 80056d4:	2300      	movs	r3, #0
 80056d6:	77fb      	strb	r3, [r7, #31]
            gr = 0;
 80056d8:	2300      	movs	r3, #0
 80056da:	77bb      	strb	r3, [r7, #30]

            if ((LEDs->LEDred & CO_LED_blink) == 0U) {
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	7a5b      	ldrb	r3, [r3, #9]
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d104      	bne.n	80056f2 <CO_LEDs_process+0x8a>
                rd |= CO_LED_blink;
 80056e8:	7ffb      	ldrb	r3, [r7, #31]
 80056ea:	f043 0302 	orr.w	r3, r3, #2
 80056ee:	77fb      	strb	r3, [r7, #31]
 80056f0:	e003      	b.n	80056fa <CO_LEDs_process+0x92>
            } else {
                gr |= CO_LED_blink;
 80056f2:	7fbb      	ldrb	r3, [r7, #30]
 80056f4:	f043 0302 	orr.w	r3, r3, #2
 80056f8:	77bb      	strb	r3, [r7, #30]
            }

            switch (++LEDs->LEDtmrflash_1) {
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	795b      	ldrb	r3, [r3, #5]
 80056fe:	3301      	adds	r3, #1
 8005700:	b2da      	uxtb	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	715a      	strb	r2, [r3, #5]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	795b      	ldrb	r3, [r3, #5]
 800570a:	2b06      	cmp	r3, #6
 800570c:	d010      	beq.n	8005730 <CO_LEDs_process+0xc8>
 800570e:	2b06      	cmp	r3, #6
 8005710:	dc12      	bgt.n	8005738 <CO_LEDs_process+0xd0>
 8005712:	2b01      	cmp	r3, #1
 8005714:	d002      	beq.n	800571c <CO_LEDs_process+0xb4>
 8005716:	2b02      	cmp	r3, #2
 8005718:	d005      	beq.n	8005726 <CO_LEDs_process+0xbe>
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: /* none */ break;
 800571a:	e00d      	b.n	8005738 <CO_LEDs_process+0xd0>
                case 1: rd |= CO_LED_flash_1; break;
 800571c:	7ffb      	ldrb	r3, [r7, #31]
 800571e:	f043 0304 	orr.w	r3, r3, #4
 8005722:	77fb      	strb	r3, [r7, #31]
 8005724:	e009      	b.n	800573a <CO_LEDs_process+0xd2>
                case 2: gr |= CO_LED_flash_1; break;
 8005726:	7fbb      	ldrb	r3, [r7, #30]
 8005728:	f043 0304 	orr.w	r3, r3, #4
 800572c:	77bb      	strb	r3, [r7, #30]
 800572e:	e004      	b.n	800573a <CO_LEDs_process+0xd2>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	715a      	strb	r2, [r3, #5]
 8005736:	e000      	b.n	800573a <CO_LEDs_process+0xd2>
                default: /* none */ break;
 8005738:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_2) {
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	799b      	ldrb	r3, [r3, #6]
 800573e:	3301      	adds	r3, #1
 8005740:	b2da      	uxtb	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	719a      	strb	r2, [r3, #6]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	799b      	ldrb	r3, [r3, #6]
 800574a:	3b01      	subs	r3, #1
 800574c:	2b07      	cmp	r3, #7
 800574e:	d821      	bhi.n	8005794 <CO_LEDs_process+0x12c>
 8005750:	a201      	add	r2, pc, #4	@ (adr r2, 8005758 <CO_LEDs_process+0xf0>)
 8005752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005756:	bf00      	nop
 8005758:	08005779 	.word	0x08005779
 800575c:	08005783 	.word	0x08005783
 8005760:	08005779 	.word	0x08005779
 8005764:	08005783 	.word	0x08005783
 8005768:	08005795 	.word	0x08005795
 800576c:	08005795 	.word	0x08005795
 8005770:	08005795 	.word	0x08005795
 8005774:	0800578d 	.word	0x0800578d
                case 1:
                case 3: rd |= CO_LED_flash_2; break;
 8005778:	7ffb      	ldrb	r3, [r7, #31]
 800577a:	f043 0308 	orr.w	r3, r3, #8
 800577e:	77fb      	strb	r3, [r7, #31]
 8005780:	e009      	b.n	8005796 <CO_LEDs_process+0x12e>
                case 2:
                case 4: gr |= CO_LED_flash_2; break;
 8005782:	7fbb      	ldrb	r3, [r7, #30]
 8005784:	f043 0308 	orr.w	r3, r3, #8
 8005788:	77bb      	strb	r3, [r7, #30]
 800578a:	e004      	b.n	8005796 <CO_LEDs_process+0x12e>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	719a      	strb	r2, [r3, #6]
 8005792:	e000      	b.n	8005796 <CO_LEDs_process+0x12e>
                default: /* none */ break;
 8005794:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_3) {
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	79db      	ldrb	r3, [r3, #7]
 800579a:	3301      	adds	r3, #1
 800579c:	b2da      	uxtb	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	71da      	strb	r2, [r3, #7]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	79db      	ldrb	r3, [r3, #7]
 80057a6:	2b0a      	cmp	r3, #10
 80057a8:	bf8c      	ite	hi
 80057aa:	2201      	movhi	r2, #1
 80057ac:	2200      	movls	r2, #0
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	2a00      	cmp	r2, #0
 80057b2:	d12c      	bne.n	800580e <CO_LEDs_process+0x1a6>
 80057b4:	2201      	movs	r2, #1
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	f003 0254 	and.w	r2, r3, #84	@ 0x54
 80057be:	2a00      	cmp	r2, #0
 80057c0:	bf14      	ite	ne
 80057c2:	2201      	movne	r2, #1
 80057c4:	2200      	moveq	r2, #0
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	2a00      	cmp	r2, #0
 80057ca:	d117      	bne.n	80057fc <CO_LEDs_process+0x194>
 80057cc:	f003 022a 	and.w	r2, r3, #42	@ 0x2a
 80057d0:	2a00      	cmp	r2, #0
 80057d2:	bf14      	ite	ne
 80057d4:	2201      	movne	r2, #1
 80057d6:	2200      	moveq	r2, #0
 80057d8:	b2d2      	uxtb	r2, r2
 80057da:	2a00      	cmp	r2, #0
 80057dc:	d109      	bne.n	80057f2 <CO_LEDs_process+0x18a>
 80057de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	bf14      	ite	ne
 80057e6:	2301      	movne	r3, #1
 80057e8:	2300      	moveq	r3, #0
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <CO_LEDs_process+0x19e>
                case 5: rd |= CO_LED_flash_3; break;
                case 2:
                case 4:
                case 6: gr |= CO_LED_flash_3; break;
                case 10: LEDs->LEDtmrflash_3 = 0; break;
                default: /* none */ break;
 80057f0:	e00d      	b.n	800580e <CO_LEDs_process+0x1a6>
                case 5: rd |= CO_LED_flash_3; break;
 80057f2:	7ffb      	ldrb	r3, [r7, #31]
 80057f4:	f043 0310 	orr.w	r3, r3, #16
 80057f8:	77fb      	strb	r3, [r7, #31]
 80057fa:	e009      	b.n	8005810 <CO_LEDs_process+0x1a8>
                case 6: gr |= CO_LED_flash_3; break;
 80057fc:	7fbb      	ldrb	r3, [r7, #30]
 80057fe:	f043 0310 	orr.w	r3, r3, #16
 8005802:	77bb      	strb	r3, [r7, #30]
 8005804:	e004      	b.n	8005810 <CO_LEDs_process+0x1a8>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	71da      	strb	r2, [r3, #7]
 800580c:	e000      	b.n	8005810 <CO_LEDs_process+0x1a8>
                default: /* none */ break;
 800580e:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_4) {
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	7a1b      	ldrb	r3, [r3, #8]
 8005814:	3301      	adds	r3, #1
 8005816:	b2da      	uxtb	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	721a      	strb	r2, [r3, #8]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	7a1b      	ldrb	r3, [r3, #8]
 8005820:	2b0c      	cmp	r3, #12
 8005822:	bf8c      	ite	hi
 8005824:	2201      	movhi	r2, #1
 8005826:	2200      	movls	r2, #0
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	2a00      	cmp	r2, #0
 800582c:	d137      	bne.n	800589e <CO_LEDs_process+0x236>
 800582e:	2201      	movs	r2, #1
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	f403 72aa 	and.w	r2, r3, #340	@ 0x154
 8005838:	2a00      	cmp	r2, #0
 800583a:	bf14      	ite	ne
 800583c:	2201      	movne	r2, #1
 800583e:	2200      	moveq	r2, #0
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	2a00      	cmp	r2, #0
 8005844:	d117      	bne.n	8005876 <CO_LEDs_process+0x20e>
 8005846:	f003 02aa 	and.w	r2, r3, #170	@ 0xaa
 800584a:	2a00      	cmp	r2, #0
 800584c:	bf14      	ite	ne
 800584e:	2201      	movne	r2, #1
 8005850:	2200      	moveq	r2, #0
 8005852:	b2d2      	uxtb	r2, r2
 8005854:	2a00      	cmp	r2, #0
 8005856:	d109      	bne.n	800586c <CO_LEDs_process+0x204>
 8005858:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800585c:	2b00      	cmp	r3, #0
 800585e:	bf14      	ite	ne
 8005860:	2301      	movne	r3, #1
 8005862:	2300      	moveq	r3, #0
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10a      	bne.n	8005880 <CO_LEDs_process+0x218>
                case 2:
                case 4:
                case 6:
                case 8: gr |= CO_LED_flash_4; break;
                case 12: LEDs->LEDtmrflash_4 = 0; break;
                default: /* none */ break;
 800586a:	e018      	b.n	800589e <CO_LEDs_process+0x236>
                case 7: rd |= CO_LED_flash_4; break;
 800586c:	7ffb      	ldrb	r3, [r7, #31]
 800586e:	f043 0320 	orr.w	r3, r3, #32
 8005872:	77fb      	strb	r3, [r7, #31]
 8005874:	e014      	b.n	80058a0 <CO_LEDs_process+0x238>
                case 8: gr |= CO_LED_flash_4; break;
 8005876:	7fbb      	ldrb	r3, [r7, #30]
 8005878:	f043 0320 	orr.w	r3, r3, #32
 800587c:	77bb      	strb	r3, [r7, #30]
 800587e:	e00f      	b.n	80058a0 <CO_LEDs_process+0x238>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	721a      	strb	r2, [r3, #8]
 8005886:	e00b      	b.n	80058a0 <CO_LEDs_process+0x238>
            }
        } else {
            /* clear flicker and CANopen bits, keep others */
            rd = LEDs->LEDred & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	7a5b      	ldrb	r3, [r3, #9]
 800588c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8005890:	77fb      	strb	r3, [r7, #31]
            gr = LEDs->LEDgreen & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	7a9b      	ldrb	r3, [r3, #10]
 8005896:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800589a:	77bb      	strb	r3, [r7, #30]
 800589c:	e000      	b.n	80058a0 <CO_LEDs_process+0x238>
                default: /* none */ break;
 800589e:	bf00      	nop
        }

        /* calculate 10Hz flickering */
        if (rdFlickerNext) {
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d004      	beq.n	80058b0 <CO_LEDs_process+0x248>
            rd |= CO_LED_flicker;
 80058a6:	7ffb      	ldrb	r3, [r7, #31]
 80058a8:	f043 0301 	orr.w	r3, r3, #1
 80058ac:	77fb      	strb	r3, [r7, #31]
 80058ae:	e003      	b.n	80058b8 <CO_LEDs_process+0x250>
        } else {
            gr |= CO_LED_flicker;
 80058b0:	7fbb      	ldrb	r3, [r7, #30]
 80058b2:	f043 0301 	orr.w	r3, r3, #1
 80058b6:	77bb      	strb	r3, [r7, #30]
    while (LEDs->LEDtmr50ms >= 50000U) {
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80058c0:	4293      	cmp	r3, r2
 80058c2:	f63f aee6 	bhi.w	8005692 <CO_LEDs_process+0x2a>
        }

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d077      	beq.n	80059bc <CO_LEDs_process+0x354>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if (ErrCANbusOff) {
 80058cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <CO_LEDs_process+0x270>
            rd_co = 1;
 80058d2:	2301      	movs	r3, #1
 80058d4:	75fb      	strb	r3, [r7, #23]
 80058d6:	e032      	b.n	800593e <CO_LEDs_process+0x2d6>
        } else if (NMTstate == CO_NMT_INITIALIZING) {
 80058d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d104      	bne.n	80058ea <CO_LEDs_process+0x282>
            rd_co = rd & CO_LED_flicker;
 80058e0:	7ffb      	ldrb	r3, [r7, #31]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	75fb      	strb	r3, [r7, #23]
 80058e8:	e029      	b.n	800593e <CO_LEDs_process+0x2d6>
        } else if (ErrRpdo) {
 80058ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d004      	beq.n	80058fa <CO_LEDs_process+0x292>
            rd_co = rd & CO_LED_flash_4;
 80058f0:	7ffb      	ldrb	r3, [r7, #31]
 80058f2:	f003 0320 	and.w	r3, r3, #32
 80058f6:	75fb      	strb	r3, [r7, #23]
 80058f8:	e021      	b.n	800593e <CO_LEDs_process+0x2d6>
        } else if (ErrSync) {
 80058fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d004      	beq.n	800590a <CO_LEDs_process+0x2a2>
            rd_co = rd & CO_LED_flash_3;
 8005900:	7ffb      	ldrb	r3, [r7, #31]
 8005902:	f003 0310 	and.w	r3, r3, #16
 8005906:	75fb      	strb	r3, [r7, #23]
 8005908:	e019      	b.n	800593e <CO_LEDs_process+0x2d6>
        } else if (ErrHbCons) {
 800590a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800590c:	2b00      	cmp	r3, #0
 800590e:	d004      	beq.n	800591a <CO_LEDs_process+0x2b2>
            rd_co = rd & CO_LED_flash_2;
 8005910:	7ffb      	ldrb	r3, [r7, #31]
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	75fb      	strb	r3, [r7, #23]
 8005918:	e011      	b.n	800593e <CO_LEDs_process+0x2d6>
        } else if (ErrCANbusWarn) {
 800591a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800591c:	2b00      	cmp	r3, #0
 800591e:	d004      	beq.n	800592a <CO_LEDs_process+0x2c2>
            rd_co = rd & CO_LED_flash_1;
 8005920:	7ffb      	ldrb	r3, [r7, #31]
 8005922:	f003 0304 	and.w	r3, r3, #4
 8005926:	75fb      	strb	r3, [r7, #23]
 8005928:	e009      	b.n	800593e <CO_LEDs_process+0x2d6>
        } else if (ErrOther) {
 800592a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800592c:	2b00      	cmp	r3, #0
 800592e:	d004      	beq.n	800593a <CO_LEDs_process+0x2d2>
            rd_co = rd & CO_LED_blink;
 8005930:	7ffb      	ldrb	r3, [r7, #31]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	75fb      	strb	r3, [r7, #23]
 8005938:	e001      	b.n	800593e <CO_LEDs_process+0x2d6>
        } else {
            rd_co = 0;
 800593a:	2300      	movs	r3, #0
 800593c:	75fb      	strb	r3, [r7, #23]
        }

        /* CANopen green RUN LED */
        if (LSSconfig) {
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d004      	beq.n	800594e <CO_LEDs_process+0x2e6>
            gr_co = gr & CO_LED_flicker;
 8005944:	7fbb      	ldrb	r3, [r7, #30]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	75bb      	strb	r3, [r7, #22]
 800594c:	e022      	b.n	8005994 <CO_LEDs_process+0x32c>
        } else if (firmwareDownload) {
 800594e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005950:	2b00      	cmp	r3, #0
 8005952:	d004      	beq.n	800595e <CO_LEDs_process+0x2f6>
            gr_co = gr & CO_LED_flash_3;
 8005954:	7fbb      	ldrb	r3, [r7, #30]
 8005956:	f003 0310 	and.w	r3, r3, #16
 800595a:	75bb      	strb	r3, [r7, #22]
 800595c:	e01a      	b.n	8005994 <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_STOPPED) {
 800595e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005962:	2b04      	cmp	r3, #4
 8005964:	d104      	bne.n	8005970 <CO_LEDs_process+0x308>
            gr_co = gr & CO_LED_flash_1;
 8005966:	7fbb      	ldrb	r3, [r7, #30]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	75bb      	strb	r3, [r7, #22]
 800596e:	e011      	b.n	8005994 <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_PRE_OPERATIONAL) {
 8005970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005974:	2b7f      	cmp	r3, #127	@ 0x7f
 8005976:	d104      	bne.n	8005982 <CO_LEDs_process+0x31a>
            gr_co = gr & CO_LED_blink;
 8005978:	7fbb      	ldrb	r3, [r7, #30]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	75bb      	strb	r3, [r7, #22]
 8005980:	e008      	b.n	8005994 <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_OPERATIONAL) {
 8005982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005986:	2b05      	cmp	r3, #5
 8005988:	d102      	bne.n	8005990 <CO_LEDs_process+0x328>
            gr_co = 1;
 800598a:	2301      	movs	r3, #1
 800598c:	75bb      	strb	r3, [r7, #22]
 800598e:	e001      	b.n	8005994 <CO_LEDs_process+0x32c>
        } else {
            gr_co = 0;
 8005990:	2300      	movs	r3, #0
 8005992:	75bb      	strb	r3, [r7, #22]
        }

        if (rd_co != 0U) {
 8005994:	7dfb      	ldrb	r3, [r7, #23]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <CO_LEDs_process+0x33a>
            rd |= CO_LED_CANopen;
 800599a:	7ffb      	ldrb	r3, [r7, #31]
 800599c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80059a0:	77fb      	strb	r3, [r7, #31]
        }
        if (gr_co != 0U) {
 80059a2:	7dbb      	ldrb	r3, [r7, #22]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <CO_LEDs_process+0x348>
            gr |= CO_LED_CANopen;
 80059a8:	7fbb      	ldrb	r3, [r7, #30]
 80059aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80059ae:	77bb      	strb	r3, [r7, #30]
        }
        LEDs->LEDred = rd;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	7ffa      	ldrb	r2, [r7, #31]
 80059b4:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	7fba      	ldrb	r2, [r7, #30]
 80059ba:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 80059bc:	bf00      	nop
 80059be:	3724      	adds	r7, #36	@ 0x24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <CO_LSSslave_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_LSSslave_receive(void* object, void* msg) {
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b090      	sub	sp, #64	@ 0x40
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t* LSSslave = (CO_LSSslave_t*)object;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	791b      	ldrb	r3, [r3, #4]
 80059da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    if ((DLC == 8U) && !CO_FLAG_READ(LSSslave->sendResponse)) {
 80059de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80059e2:	2b08      	cmp	r3, #8
 80059e4:	f040 814f 	bne.w	8005c86 <CO_LSSslave_receive+0x2be>
 80059e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f040 814a 	bne.w	8005c86 <CO_LSSslave_receive+0x2be>
        bool_t request_LSSslave_process = false;
 80059f2:	2300      	movs	r3, #0
 80059f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        const uint8_t* data = CO_CANrxMsg_readData(msg);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	3305      	adds	r3, #5
 80059fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t cs = data[0];
 80059fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 8005a04:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d12d      	bne.n	8005a68 <CO_LSSslave_receive+0xa0>
            uint8_t mode = data[1];
 8005a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0e:	3301      	adds	r3, #1
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 8005a14:	7ffb      	ldrb	r3, [r7, #31]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <CO_LSSslave_receive+0x58>
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d020      	beq.n	8005a60 <CO_LSSslave_receive+0x98>
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
                    break;
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
                default:
                    /* none */
                    break;
 8005a1e:	e12c      	b.n	8005c7a <CO_LSSslave_receive+0x2b2>
                    if ((LSSslave->lssState == CO_LSS_STATE_CONFIGURATION)
 8005a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a22:	7c1b      	ldrb	r3, [r3, #16]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d110      	bne.n	8005a4a <CO_LSSslave_receive+0x82>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8005a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a2e:	2bff      	cmp	r3, #255	@ 0xff
 8005a30:	d10b      	bne.n	8005a4a <CO_LSSslave_receive+0x82>
                        && (*LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)) {
 8005a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	2bff      	cmp	r3, #255	@ 0xff
 8005a3a:	d006      	beq.n	8005a4a <CO_LSSslave_receive+0x82>
                        LSSslave->service = cs;
 8005a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a3e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005a42:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                        request_LSSslave_process = true;
 8005a46:	2301      	movs	r3, #1
 8005a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8005a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	741a      	strb	r2, [r3, #16]
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
 8005a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a52:	3314      	adds	r3, #20
 8005a54:	2210      	movs	r2, #16
 8005a56:	2100      	movs	r1, #0
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f005 fba5 	bl	800b1a8 <memset>
                    break;
 8005a5e:	e10c      	b.n	8005c7a <CO_LSSslave_receive+0x2b2>
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
 8005a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a62:	2201      	movs	r2, #1
 8005a64:	741a      	strb	r2, [r3, #16]
 8005a66:	e108      	b.n	8005c7a <CO_LSSslave_receive+0x2b2>
            }
        } else if (LSSslave->lssState == CO_LSS_STATE_WAITING) {
 8005a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a6a:	7c1b      	ldrb	r3, [r3, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f040 80f0 	bne.w	8005c52 <CO_LSSslave_receive+0x28a>
            switch (cs) {
 8005a72:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a76:	3b40      	subs	r3, #64	@ 0x40
 8005a78:	2b11      	cmp	r3, #17
 8005a7a:	f200 80f9 	bhi.w	8005c70 <CO_LSSslave_receive+0x2a8>
 8005a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a84 <CO_LSSslave_receive+0xbc>)
 8005a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a84:	08005acd 	.word	0x08005acd
 8005a88:	08005add 	.word	0x08005add
 8005a8c:	08005aed 	.word	0x08005aed
 8005a90:	08005afd 	.word	0x08005afd
 8005a94:	08005c71 	.word	0x08005c71
 8005a98:	08005c71 	.word	0x08005c71
 8005a9c:	08005c71 	.word	0x08005c71
 8005aa0:	08005c71 	.word	0x08005c71
 8005aa4:	08005c71 	.word	0x08005c71
 8005aa8:	08005c71 	.word	0x08005c71
 8005aac:	08005c71 	.word	0x08005c71
 8005ab0:	08005c71 	.word	0x08005c71
 8005ab4:	08005c71 	.word	0x08005c71
 8005ab8:	08005c71 	.word	0x08005c71
 8005abc:	08005c71 	.word	0x08005c71
 8005ac0:	08005c71 	.word	0x08005c71
 8005ac4:	08005c71 	.word	0x08005c71
 8005ac8:	08005b59 	.word	0x08005b59
                case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ace:	3301      	adds	r3, #1
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	61bb      	str	r3, [r7, #24]
                    LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad8:	615a      	str	r2, [r3, #20]
                    break;
 8005ada:	e0ce      	b.n	8005c7a <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ade:	3301      	adds	r3, #1
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	617b      	str	r3, [r7, #20]
                    LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae8:	619a      	str	r2, [r3, #24]
                    break;
 8005aea:	e0c6      	b.n	8005c7a <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_REV: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aee:	3301      	adds	r3, #1
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	613b      	str	r3, [r7, #16]
                    LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af8:	61da      	str	r2, [r3, #28]
                    break;
 8005afa:	e0be      	b.n	8005c7a <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005afe:	3301      	adds	r3, #1
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	60fb      	str	r3, [r7, #12]
                    LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b08:	621a      	str	r2, [r3, #32]

                    if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress, LSSslave->lssSelect)) {
 8005b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	f040 80ae 	bne.w	8005c74 <CO_LSSslave_receive+0x2ac>
 8005b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	f040 80a7 	bne.w	8005c74 <CO_LSSslave_receive+0x2ac>
 8005b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b28:	68da      	ldr	r2, [r3, #12]
 8005b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	f040 80a0 	bne.w	8005c74 <CO_LSSslave_receive+0x2ac>
 8005b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	f040 8099 	bne.w	8005c74 <CO_LSSslave_receive+0x2ac>
                        LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8005b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b44:	2201      	movs	r2, #1
 8005b46:	741a      	strb	r2, [r3, #16]
                        LSSslave->service = cs;
 8005b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b4a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005b4e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                        request_LSSslave_process = true;
 8005b52:	2301      	movs	r3, #1
 8005b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    }
                    break;
 8005b56:	e08d      	b.n	8005c74 <CO_LSSslave_receive+0x2ac>
                }
                case CO_LSS_IDENT_FASTSCAN: {
                    /* fastscan is only active on unconfigured nodes */
                    if ((*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8005b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2bff      	cmp	r3, #255	@ 0xff
 8005b60:	f040 808a 	bne.w	8005c78 <CO_LSSslave_receive+0x2b0>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)) {
 8005b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b6a:	2bff      	cmp	r3, #255	@ 0xff
 8005b6c:	f040 8084 	bne.w	8005c78 <CO_LSSslave_receive+0x2b0>
                        uint8_t bitCheck = data[5];
 8005b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b72:	3305      	adds	r3, #5
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                        uint8_t lssSub = data[6];
 8005b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b7c:	3306      	adds	r3, #6
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                        uint8_t lssNext = data[7];
 8005b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b86:	3307      	adds	r3, #7
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                        uint32_t valSw;
                        uint32_t idNumber;
                        bool_t ack;

                        if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub)
 8005b8e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005b92:	2b1f      	cmp	r3, #31
 8005b94:	d903      	bls.n	8005b9e <CO_LSSslave_receive+0x1d6>
 8005b96:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005b9a:	2b80      	cmp	r3, #128	@ 0x80
 8005b9c:	d16d      	bne.n	8005c7a <CO_LSSslave_receive+0x2b2>
 8005b9e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005ba2:	2b03      	cmp	r3, #3
 8005ba4:	d869      	bhi.n	8005c7a <CO_LSSslave_receive+0x2b2>
                            || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
 8005ba6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d865      	bhi.n	8005c7a <CO_LSSslave_receive+0x2b2>
                            /* Invalid request */
                            break;
                        }

                        (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	60bb      	str	r3, [r7, #8]
                        idNumber = CO_SWAP_32(valSw);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	627b      	str	r3, [r7, #36]	@ 0x24
                        ack = false;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	63bb      	str	r3, [r7, #56]	@ 0x38

                        if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 8005bbe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005bc2:	2b80      	cmp	r3, #128	@ 0x80
 8005bc4:	d10d      	bne.n	8005be2 <CO_LSSslave_receive+0x21a>
                            /* Confirm, Reset */
                            ack = true;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
                            LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8005bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                            (void)memset(&LSSslave->lssFastscan, 0, sizeof(LSSslave->lssFastscan));
 8005bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd4:	3324      	adds	r3, #36	@ 0x24
 8005bd6:	2210      	movs	r2, #16
 8005bd8:	2100      	movs	r1, #0
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f005 fae4 	bl	800b1a8 <memset>
 8005be0:	e02c      	b.n	8005c3c <CO_LSSslave_receive+0x274>
                        } else if (LSSslave->fastscanPos == lssSub) {
 8005be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005be4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005be8:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d125      	bne.n	8005c3c <CO_LSSslave_receive+0x274>
                            uint32_t mask = 0xFFFFFFFFU << bitCheck;
 8005bf0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005bf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfc:	623b      	str	r3, [r7, #32]

                            if ((LSSslave->lssAddress.addr[lssSub] & mask) == (idNumber & mask)) {
 8005bfe:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0a:	405a      	eors	r2, r3
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d113      	bne.n	8005c3c <CO_LSSslave_receive+0x274>
                                /* all requested bits match */
                                ack = true;
 8005c14:	2301      	movs	r3, #1
 8005c16:	63bb      	str	r3, [r7, #56]	@ 0x38
                                LSSslave->fastscanPos = lssNext;
 8005c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c1a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005c1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

                                if ((bitCheck == 0U) && (lssNext < lssSub)) {
 8005c22:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d108      	bne.n	8005c3c <CO_LSSslave_receive+0x274>
 8005c2a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005c2e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d202      	bcs.n	8005c3c <CO_LSSslave_receive+0x274>
                                    /* complete match, enter configuration state */
                                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8005c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c38:	2201      	movs	r2, #1
 8005c3a:	741a      	strb	r2, [r3, #16]
                                }
                            }
                        } else { /* MISRA C 2004 14.10 */
                        }
                        if (ack) {
 8005c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d01a      	beq.n	8005c78 <CO_LSSslave_receive+0x2b0>
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE_FASTSCAN_DIRECT_RESPOND) != 0
                            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                            (void)memset(&LSSslave->TXbuff->data[1], 0, sizeof(LSSslave->TXbuff->data) - 1U);
                            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                            LSSslave->service = cs;
 8005c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c44:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005c48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                            request_LSSslave_process = true;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
                        }
                    }
                    break;
 8005c50:	e012      	b.n	8005c78 <CO_LSSslave_receive+0x2b0>
                    /* none */
                    break;
                }
            }
        } else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            (void)memcpy((void*)(&LSSslave->CANdata[0]), (const void*)(&data[0]), sizeof(LSSslave->CANdata));
 8005c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c54:	3349      	adds	r3, #73	@ 0x49
 8005c56:	2208      	movs	r2, #8
 8005c58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f005 fb2f 	bl	800b2be <memcpy>
            LSSslave->service = cs;
 8005c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c62:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005c66:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            request_LSSslave_process = true;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c6e:	e004      	b.n	8005c7a <CO_LSSslave_receive+0x2b2>
                    break;
 8005c70:	bf00      	nop
 8005c72:	e002      	b.n	8005c7a <CO_LSSslave_receive+0x2b2>
                    break;
 8005c74:	bf00      	nop
 8005c76:	e000      	b.n	8005c7a <CO_LSSslave_receive+0x2b2>
                    break;
 8005c78:	bf00      	nop
        }

        if (request_LSSslave_process) {
 8005c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <CO_LSSslave_receive+0x2be>
            CO_FLAG_SET(LSSslave->sendResponse);
 8005c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c82:	2201      	movs	r2, #1
 8005c84:	645a      	str	r2, [r3, #68]	@ 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 8005c86:	bf00      	nop
 8005c88:	3740      	adds	r7, #64	@ 0x40
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop

08005c90 <CO_LSSslave_init>:

CO_ReturnError_t
CO_LSSslave_init(CO_LSSslave_t* LSSslave, CO_LSS_address_t* lssAddress, uint16_t* pendingBitRate,
                 uint8_t* pendingNodeID, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANidLssMaster,
                 CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx, uint16_t CANidLssSlave) {
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08a      	sub	sp, #40	@ 0x28
 8005c94:	af04      	add	r7, sp, #16
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((LSSslave == NULL) || (pendingBitRate == NULL) || (pendingNodeID == NULL) || (CANdevRx == NULL)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d018      	beq.n	8005cda <CO_LSSslave_init+0x4a>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d015      	beq.n	8005cda <CO_LSSslave_init+0x4a>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d012      	beq.n	8005cda <CO_LSSslave_init+0x4a>
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00f      	beq.n	8005cda <CO_LSSslave_init+0x4a>
        || (CANdevTx == NULL) || !CO_LSS_NODE_ID_VALID(*pendingNodeID)) {
 8005cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00c      	beq.n	8005cda <CO_LSSslave_init+0x4a>
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d004      	beq.n	8005cd2 <CO_LSSslave_init+0x42>
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	b25b      	sxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	da06      	bge.n	8005ce0 <CO_LSSslave_init+0x50>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2bff      	cmp	r3, #255	@ 0xff
 8005cd8:	d002      	beq.n	8005ce0 <CO_LSSslave_init+0x50>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005cda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005cde:	e046      	b.n	8005d6e <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    (void)memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 8005ce0:	2274      	movs	r2, #116	@ 0x74
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f005 fa5f 	bl	800b1a8 <memset>

    /* Configure object variables */
    (void)memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2210      	movs	r2, #16
 8005cee:	68b9      	ldr	r1, [r7, #8]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f005 fae4 	bl	800b2be <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	639a      	str	r2, [r3, #56]	@ 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	63da      	str	r2, [r3, #60]	@ 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781a      	ldrb	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CANidLssMaster, 0x7FF, false, (void*)LSSslave, CO_LSSslave_receive);
 8005d20:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005d22:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8005d24:	4b14      	ldr	r3, [pc, #80]	@ (8005d78 <CO_LSSslave_init+0xe8>)
 8005d26:	9302      	str	r3, [sp, #8]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8005d34:	6a38      	ldr	r0, [r7, #32]
 8005d36:	f001 fb29 	bl	800738c <CO_CANrxBufferInit>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	75fb      	strb	r3, [r7, #23]

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d42:	66da      	str	r2, [r3, #108]	@ 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CANidLssSlave, false, 8, false);
 8005d44:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005d46:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8005d48:	2300      	movs	r3, #0
 8005d4a:	9301      	str	r3, [sp, #4]
 8005d4c:	2308      	movs	r3, #8
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	2300      	movs	r3, #0
 8005d52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d54:	f001 fb78 	bl	8007448 <CO_CANtxBufferInit>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	671a      	str	r2, [r3, #112]	@ 0x70

    if (LSSslave->TXbuff == NULL) {
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8005d66:	23ff      	movs	r3, #255	@ 0xff
 8005d68:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 8005d6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	080059c9 	.word	0x080059c9

08005d7c <CO_LSSslave_process>:
        LSSslave->pFunctLSScfgStore = pFunctLSScfgStore;
    }
}

bool_t
CO_LSSslave_process(CO_LSSslave_t* LSSslave) {
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08c      	sub	sp, #48	@ 0x30
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 8005d84:	2300      	movs	r3, #0
 8005d86:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 8202 	beq.w	8006196 <CO_LSSslave_process+0x41a>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 8005d92:	2300      	movs	r3, #0
 8005d94:	627b      	str	r3, [r7, #36]	@ 0x24
        uint32_t valSw;

        (void)memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d9a:	3305      	adds	r3, #5
 8005d9c:	2208      	movs	r2, #8
 8005d9e:	2100      	movs	r1, #0
 8005da0:	4618      	mov	r0, r3
 8005da2:	f005 fa01 	bl	800b1a8 <memset>

        switch (LSSslave->service) {
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005dac:	3b04      	subs	r3, #4
 8005dae:	2b5a      	cmp	r3, #90	@ 0x5a
 8005db0:	f200 81dc 	bhi.w	800616c <CO_LSSslave_process+0x3f0>
 8005db4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dbc <CO_LSSslave_process+0x40>)
 8005db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dba:	bf00      	nop
 8005dbc:	08005f29 	.word	0x08005f29
 8005dc0:	0800616d 	.word	0x0800616d
 8005dc4:	0800616d 	.word	0x0800616d
 8005dc8:	0800616d 	.word	0x0800616d
 8005dcc:	0800616d 	.word	0x0800616d
 8005dd0:	0800616d 	.word	0x0800616d
 8005dd4:	0800616d 	.word	0x0800616d
 8005dd8:	0800616d 	.word	0x0800616d
 8005ddc:	0800616d 	.word	0x0800616d
 8005de0:	0800616d 	.word	0x0800616d
 8005de4:	0800616d 	.word	0x0800616d
 8005de8:	0800616d 	.word	0x0800616d
 8005dec:	0800616d 	.word	0x0800616d
 8005df0:	08005f3d 	.word	0x08005f3d
 8005df4:	0800616d 	.word	0x0800616d
 8005df8:	08005f8b 	.word	0x08005f8b
 8005dfc:	0800616d 	.word	0x0800616d
 8005e00:	08006027 	.word	0x08006027
 8005e04:	0800616d 	.word	0x0800616d
 8005e08:	08006063 	.word	0x08006063
 8005e0c:	0800616d 	.word	0x0800616d
 8005e10:	0800616d 	.word	0x0800616d
 8005e14:	0800616d 	.word	0x0800616d
 8005e18:	0800616d 	.word	0x0800616d
 8005e1c:	0800616d 	.word	0x0800616d
 8005e20:	0800616d 	.word	0x0800616d
 8005e24:	0800616d 	.word	0x0800616d
 8005e28:	0800616d 	.word	0x0800616d
 8005e2c:	0800616d 	.word	0x0800616d
 8005e30:	0800616d 	.word	0x0800616d
 8005e34:	0800616d 	.word	0x0800616d
 8005e38:	0800616d 	.word	0x0800616d
 8005e3c:	0800616d 	.word	0x0800616d
 8005e40:	0800616d 	.word	0x0800616d
 8005e44:	0800616d 	.word	0x0800616d
 8005e48:	0800616d 	.word	0x0800616d
 8005e4c:	0800616d 	.word	0x0800616d
 8005e50:	0800616d 	.word	0x0800616d
 8005e54:	0800616d 	.word	0x0800616d
 8005e58:	0800616d 	.word	0x0800616d
 8005e5c:	0800616d 	.word	0x0800616d
 8005e60:	0800616d 	.word	0x0800616d
 8005e64:	0800616d 	.word	0x0800616d
 8005e68:	0800616d 	.word	0x0800616d
 8005e6c:	0800616d 	.word	0x0800616d
 8005e70:	0800616d 	.word	0x0800616d
 8005e74:	0800616d 	.word	0x0800616d
 8005e78:	0800616d 	.word	0x0800616d
 8005e7c:	0800616d 	.word	0x0800616d
 8005e80:	0800616d 	.word	0x0800616d
 8005e84:	0800616d 	.word	0x0800616d
 8005e88:	0800616d 	.word	0x0800616d
 8005e8c:	0800616d 	.word	0x0800616d
 8005e90:	0800616d 	.word	0x0800616d
 8005e94:	0800616d 	.word	0x0800616d
 8005e98:	0800616d 	.word	0x0800616d
 8005e9c:	0800616d 	.word	0x0800616d
 8005ea0:	0800616d 	.word	0x0800616d
 8005ea4:	0800616d 	.word	0x0800616d
 8005ea8:	0800616d 	.word	0x0800616d
 8005eac:	0800616d 	.word	0x0800616d
 8005eb0:	0800616d 	.word	0x0800616d
 8005eb4:	0800616d 	.word	0x0800616d
 8005eb8:	08005f2f 	.word	0x08005f2f
 8005ebc:	0800616d 	.word	0x0800616d
 8005ec0:	0800616d 	.word	0x0800616d
 8005ec4:	0800616d 	.word	0x0800616d
 8005ec8:	0800616d 	.word	0x0800616d
 8005ecc:	0800616d 	.word	0x0800616d
 8005ed0:	0800616d 	.word	0x0800616d
 8005ed4:	0800616d 	.word	0x0800616d
 8005ed8:	0800616d 	.word	0x0800616d
 8005edc:	0800616d 	.word	0x0800616d
 8005ee0:	0800616d 	.word	0x0800616d
 8005ee4:	0800616d 	.word	0x0800616d
 8005ee8:	0800616d 	.word	0x0800616d
 8005eec:	0800616d 	.word	0x0800616d
 8005ef0:	0800615f 	.word	0x0800615f
 8005ef4:	0800616d 	.word	0x0800616d
 8005ef8:	0800616d 	.word	0x0800616d
 8005efc:	0800616d 	.word	0x0800616d
 8005f00:	0800616d 	.word	0x0800616d
 8005f04:	0800616d 	.word	0x0800616d
 8005f08:	0800616d 	.word	0x0800616d
 8005f0c:	0800616d 	.word	0x0800616d
 8005f10:	0800616d 	.word	0x0800616d
 8005f14:	080060b9 	.word	0x080060b9
 8005f18:	080060db 	.word	0x080060db
 8005f1c:	080060fd 	.word	0x080060fd
 8005f20:	0800611f 	.word	0x0800611f
 8005f24:	08006141 	.word	0x08006141
            case CO_LSS_SWITCH_STATE_GLOBAL: {
                /* Node-Id was unconfigured before, now it is configured,
                 * enter the NMT Reset communication autonomously. */
                resetCommunication = true;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8005f2c:	e125      	b.n	800617a <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f32:	2244      	movs	r2, #68	@ 0x44
 8005f34:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 8005f36:	2301      	movs	r3, #1
 8005f38:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8005f3a:	e11e      	b.n	800617a <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_CFG_NODE_ID: {
                nid = LSSslave->CANdata[1];
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8005f42:	74fb      	strb	r3, [r7, #19]
                errorCode = CO_LSS_CFG_NODE_ID_OK;
 8005f44:	2300      	movs	r3, #0
 8005f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if (CO_LSS_NODE_ID_VALID(nid)) {
 8005f4a:	7cfb      	ldrb	r3, [r7, #19]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <CO_LSSslave_process+0x1dc>
 8005f50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	da02      	bge.n	8005f5e <CO_LSSslave_process+0x1e2>
 8005f58:	7cfb      	ldrb	r3, [r7, #19]
 8005f5a:	2bff      	cmp	r3, #255	@ 0xff
 8005f5c:	d104      	bne.n	8005f68 <CO_LSSslave_process+0x1ec>
                    *LSSslave->pendingNodeID = nid;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f62:	7cfa      	ldrb	r2, [r7, #19]
 8005f64:	701a      	strb	r2, [r3, #0]
 8005f66:	e002      	b.n	8005f6e <CO_LSSslave_process+0x1f2>
                } else {
                    errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8005f78:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f7e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005f82:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 8005f84:	2301      	movs	r3, #1
 8005f86:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8005f88:	e0f7      	b.n	800617a <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_CFG_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 80ee 	beq.w	8006170 <CO_LSSslave_process+0x3f4>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                tableSelector = LSSslave->CANdata[1];
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8005f9a:	777b      	strb	r3, [r7, #29]
                tableIndex = LSSslave->CANdata[2];
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8005fa2:	773b      	strb	r3, [r7, #28]
                errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8005fb0:	7f7b      	ldrb	r3, [r7, #29]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d121      	bne.n	8005ffa <CO_LSSslave_process+0x27e>
 8005fb6:	7f3b      	ldrb	r3, [r7, #28]
 8005fb8:	2b05      	cmp	r3, #5
 8005fba:	d01e      	beq.n	8005ffa <CO_LSSslave_process+0x27e>
 8005fbc:	7f3b      	ldrb	r3, [r7, #28]
 8005fbe:	2b09      	cmp	r3, #9
 8005fc0:	d81b      	bhi.n	8005ffa <CO_LSSslave_process+0x27e>
                    uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 8005fc2:	7f3b      	ldrb	r3, [r7, #28]
 8005fc4:	4a76      	ldr	r2, [pc, #472]	@ (80061a0 <CO_LSSslave_process+0x424>)
 8005fc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fca:	837b      	strh	r3, [r7, #26]
                    bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(LSSslave->functLSScheckBitRateObject,
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005fd4:	8b79      	ldrh	r1, [r7, #26]
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	4798      	blx	r3
 8005fda:	6178      	str	r0, [r7, #20]
                                                                                bit);

                    if (bit_rate_supported) {
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d004      	beq.n	8005fec <CO_LSSslave_process+0x270>
                        *LSSslave->pendingBitRate = bit;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe6:	8b7a      	ldrh	r2, [r7, #26]
 8005fe8:	801a      	strh	r2, [r3, #0]
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8005fea:	e009      	b.n	8006000 <CO_LSSslave_process+0x284>
                    } else {
                        errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 8005fec:	23ff      	movs	r3, #255	@ 0xff
 8005fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                        errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8005ff8:	e002      	b.n	8006000 <CO_LSSslave_process+0x284>
                    }
                } else {
                    /* we currently only support CiA301 bit timing table */
                    errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 800600a:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006010:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8006014:	719a      	strb	r2, [r3, #6]
                LSSslave->TXbuff->data[2] = errorCodeManuf;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800601a:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 800601e:	71da      	strb	r2, [r3, #7]
                CANsend = true;
 8006020:	2301      	movs	r3, #1
 8006022:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8006024:	e0a9      	b.n	800617a <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800602a:	2b00      	cmp	r3, #0
 800602c:	f000 80a2 	beq.w	8006174 <CO_LSSslave_process+0x3f8>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                /* notify application */
                if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 809f 	beq.w	8006178 <CO_LSSslave_process+0x3fc>
                    uint16_t delay = ((uint16_t)LSSslave->CANdata[2]) << 8;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8006040:	021b      	lsls	r3, r3, #8
 8006042:	83fb      	strh	r3, [r7, #30]
                    delay |= LSSslave->CANdata[1];
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800604a:	461a      	mov	r2, r3
 800604c:	8bfb      	ldrh	r3, [r7, #30]
 800604e:	4313      	orrs	r3, r2
 8006050:	83fb      	strh	r3, [r7, #30]
                    LSSslave->pFunctLSSactivateBitRate(LSSslave->functLSSactivateBitRateObject, delay);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 800605a:	8bf9      	ldrh	r1, [r7, #30]
 800605c:	4610      	mov	r0, r2
 800605e:	4798      	blx	r3
                }
                break;
 8006060:	e08a      	b.n	8006178 <CO_LSSslave_process+0x3fc>
            }
            case CO_LSS_CFG_STORE: {
                errorCode = CO_LSS_CFG_STORE_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if (LSSslave->pFunctLSScfgStore == NULL) {
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800606c:	2b00      	cmp	r3, #0
 800606e:	d103      	bne.n	8006078 <CO_LSSslave_process+0x2fc>
                    /* storing is not supported. Reply error */
                    errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 8006070:	2301      	movs	r3, #1
 8006072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006076:	e011      	b.n	800609c <CO_LSSslave_process+0x320>
                } else {
                    bool_t result;
                    /* Store "pending" to "persistent" */
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006084:	7811      	ldrb	r1, [r2, #0]
                                                         *LSSslave->pendingBitRate);
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	6b92      	ldr	r2, [r2, #56]	@ 0x38
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 800608a:	8812      	ldrh	r2, [r2, #0]
 800608c:	4798      	blx	r3
 800608e:	6238      	str	r0, [r7, #32]
                    if (!result) {
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d102      	bne.n	800609c <CO_LSSslave_process+0x320>
                        errorCode = CO_LSS_CFG_STORE_FAILED;
 8006096:	2302      	movs	r3, #2
 8006098:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                    }
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 80060a6:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ac:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80060b0:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 80060b2:	2301      	movs	r3, #1
 80060b4:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 80060b6:	e060      	b.n	800617a <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_VENDOR: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 80060c2:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ce:	3306      	adds	r3, #6
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	601a      	str	r2, [r3, #0]
                CANsend = true;
 80060d4:	2301      	movs	r3, #1
 80060d6:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 80060d8:	e04f      	b.n	800617a <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_PRODUCT: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 80060e4:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f0:	3306      	adds	r3, #6
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	601a      	str	r2, [r3, #0]
                CANsend = true;
 80060f6:	2301      	movs	r3, #1
 80060f8:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 80060fa:	e03e      	b.n	800617a <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_REV: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8006106:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006112:	3306      	adds	r3, #6
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	601a      	str	r2, [r3, #0]
                CANsend = true;
 8006118:	2301      	movs	r3, #1
 800611a:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 800611c:	e02d      	b.n	800617a <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_SERIAL: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8006128:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006134:	3306      	adds	r3, #6
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	601a      	str	r2, [r3, #0]
                CANsend = true;
 800613a:	2301      	movs	r3, #1
 800613c:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 800613e:	e01c      	b.n	800617a <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_NODE_ID: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 800614a:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8006156:	719a      	strb	r2, [r3, #6]
                CANsend = true;
 8006158:	2301      	movs	r3, #1
 800615a:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 800615c:	e00d      	b.n	800617a <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006162:	224f      	movs	r2, #79	@ 0x4f
 8006164:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 8006166:	2301      	movs	r3, #1
 8006168:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 800616a:	e006      	b.n	800617a <CO_LSSslave_process+0x3fe>
            }
            default: {
                /* none */
                break;
 800616c:	bf00      	nop
 800616e:	e004      	b.n	800617a <CO_LSSslave_process+0x3fe>
                    break;
 8006170:	bf00      	nop
 8006172:	e002      	b.n	800617a <CO_LSSslave_process+0x3fe>
                    break;
 8006174:	bf00      	nop
 8006176:	e000      	b.n	800617a <CO_LSSslave_process+0x3fe>
                break;
 8006178:	bf00      	nop
            }
        }

        if (CANsend) {
 800617a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617c:	2b00      	cmp	r3, #0
 800617e:	d007      	beq.n	8006190 <CO_LSSslave_process+0x414>
            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006188:	4619      	mov	r1, r3
 800618a:	4610      	mov	r0, r2
 800618c:	f001 f9d6 	bl	800753c <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    return resetCommunication;
 8006196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006198:	4618      	mov	r0, r3
 800619a:	3730      	adds	r7, #48	@ 0x30
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	0800bc60 	.word	0x0800bc60

080061a4 <CO_isError>:
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	460b      	mov	r3, r1
 80061ae:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 80061b0:	78fb      	ldrb	r3, [r7, #3]
 80061b2:	08db      	lsrs	r3, r3, #3
 80061b4:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80061b6:	78fb      	ldrb	r3, [r7, #3]
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	2201      	movs	r2, #1
 80061be:	fa02 f303 	lsl.w	r3, r2, r3
 80061c2:	73bb      	strb	r3, [r7, #14]
               : false;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
 80061cc:	2b09      	cmp	r3, #9
 80061ce:	d807      	bhi.n	80061e0 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0)
 80061d0:	7bfb      	ldrb	r3, [r7, #15]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	5cd2      	ldrb	r2, [r2, r3]
 80061d6:	7bbb      	ldrb	r3, [r7, #14]
 80061d8:	4013      	ands	r3, r2
 80061da:	b2db      	uxtb	r3, r3
               : false;
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <CO_isError+0x40>
 80061e0:	2301      	movs	r3, #1
 80061e2:	e000      	b.n	80061e6 <CO_isError+0x42>
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <CO_getErrorRegister>:
CO_getErrorRegister(CO_EM_t* em) {
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d007      	beq.n	8006210 <CO_getErrorRegister+0x1e>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <CO_getErrorRegister+0x1e>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	e000      	b.n	8006212 <CO_getErrorRegister+0x20>
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <CO_NMT_getInternalState>:
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t
CO_NMT_getInternalState(CO_NMT_t* NMT) {
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <CO_NMT_getInternalState+0x16>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f993 3000 	ldrsb.w	r3, [r3]
 8006232:	e000      	b.n	8006236 <CO_NMT_getInternalState+0x18>
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <CO_LSSslave_getState>:
 *
 * @param LSSslave This object.
 * @return @ref CO_LSS_STATE_state
 */
static inline uint8_t
CO_LSSslave_getState(CO_LSSslave_t* LSSslave) {
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d002      	beq.n	8006256 <CO_LSSslave_getState+0x14>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	7c1b      	ldrb	r3, [r3, #16]
 8006254:	e000      	b.n	8006258 <CO_LSSslave_getState+0x16>
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <CO_new>:
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t*
CO_new(CO_config_t* config, uint32_t* heapMemoryUsed) {
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
    CO_t* co = NULL;
 800626e:	2300      	movs	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t* coFinal = NULL;
 8006272:	2300      	movs	r3, #0
 8006274:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 8006276:	2300      	movs	r3, #0
 8006278:	613b      	str	r3, [r7, #16]
#else
        (void)config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1U, sizeof(*co));
 800627a:	2140      	movs	r1, #64	@ 0x40
 800627c:	2001      	movs	r0, #1
 800627e:	f004 fbdd 	bl	800aa3c <calloc>
 8006282:	4603      	mov	r3, r0
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 8101 	beq.w	8006490 <CO_new+0x22c>
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	3340      	adds	r3, #64	@ 0x40
 8006292:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1U) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8006294:	212c      	movs	r1, #44	@ 0x2c
 8006296:	2001      	movs	r0, #1
 8006298:	f004 fbd0 	bl	800aa3c <calloc>
 800629c:	4603      	mov	r3, r0
 800629e:	461a      	mov	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	611a      	str	r2, [r3, #16]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 80f1 	beq.w	8006490 <CO_new+0x22c>
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	332c      	adds	r3, #44	@ 0x2c
 80062b2:	613b      	str	r3, [r7, #16]
        }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1U) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 80062b4:	2308      	movs	r3, #8
 80062b6:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 80062b8:	2130      	movs	r1, #48	@ 0x30
 80062ba:	2001      	movs	r0, #1
 80062bc:	f004 fbbe 	bl	800aa3c <calloc>
 80062c0:	4603      	mov	r3, r0
 80062c2:	461a      	mov	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	615a      	str	r2, [r3, #20]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 80df 	beq.w	8006490 <CO_new+0x22c>
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	3330      	adds	r3, #48	@ 0x30
 80062d6:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 80062d8:	7afb      	ldrb	r3, [r7, #11]
 80062da:	2110      	movs	r1, #16
 80062dc:	4618      	mov	r0, r3
 80062de:	f004 fbad 	bl	800aa3c <calloc>
 80062e2:	4603      	mov	r3, r0
 80062e4:	461a      	mov	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	619a      	str	r2, [r3, #24]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 80ce 	beq.w	8006490 <CO_new+0x22c>
 80062f4:	7afb      	ldrb	r3, [r7, #11]
 80062f6:	011b      	lsls	r3, r3, #4
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	4413      	add	r3, r2
 80062fc:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1U) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 80062fe:	2150      	movs	r1, #80	@ 0x50
 8006300:	2001      	movs	r0, #1
 8006302:	f004 fb9b 	bl	800aa3c <calloc>
 8006306:	4603      	mov	r3, r0
 8006308:	461a      	mov	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	61da      	str	r2, [r3, #28]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 80bc 	beq.w	8006490 <CO_new+0x22c>
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	3350      	adds	r3, #80	@ 0x50
 800631c:	613b      	str	r3, [r7, #16]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
#endif
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1U;
 800631e:	2311      	movs	r3, #17
 8006320:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2U) {
 8006322:	7abb      	ldrb	r3, [r7, #10]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d912      	bls.n	800634e <CO_new+0xea>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8006328:	7abb      	ldrb	r3, [r7, #10]
 800632a:	2108      	movs	r1, #8
 800632c:	4618      	mov	r0, r3
 800632e:	f004 fb85 	bl	800aa3c <calloc>
 8006332:	4603      	mov	r3, r0
 8006334:	461a      	mov	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	621a      	str	r2, [r3, #32]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 80a6 	beq.w	8006490 <CO_new+0x22c>
 8006344:	7abb      	ldrb	r3, [r7, #10]
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	4413      	add	r3, r2
 800634c:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0U) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 800634e:	21ac      	movs	r1, #172	@ 0xac
 8006350:	2001      	movs	r0, #1
 8006352:	f004 fb73 	bl	800aa3c <calloc>
 8006356:	4603      	mov	r3, r0
 8006358:	461a      	mov	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	625a      	str	r2, [r3, #36]	@ 0x24
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 8094 	beq.w	8006490 <CO_new+0x22c>
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	33ac      	adds	r3, #172	@ 0xac
 800636c:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1U) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 800636e:	212c      	movs	r1, #44	@ 0x2c
 8006370:	2001      	movs	r0, #1
 8006372:	f004 fb63 	bl	800aa3c <calloc>
 8006376:	4603      	mov	r3, r0
 8006378:	461a      	mov	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	629a      	str	r2, [r3, #40]	@ 0x28
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 8084 	beq.w	8006490 <CO_new+0x22c>
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	332c      	adds	r3, #44	@ 0x2c
 800638c:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1U) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 800638e:	215c      	movs	r1, #92	@ 0x5c
 8006390:	2001      	movs	r0, #1
 8006392:	f004 fb53 	bl	800aa3c <calloc>
 8006396:	4603      	mov	r3, r0
 8006398:	461a      	mov	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d074      	beq.n	8006490 <CO_new+0x22c>
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	335c      	adds	r3, #92	@ 0x5c
 80063aa:	613b      	str	r3, [r7, #16]
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
        ON_MULTI_OD(uint16_t RX_CNT_RPDO = 0);
        if (CO_GET_CNT(RPDO) > 0U) {
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 80063ac:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 80063b0:	2004      	movs	r0, #4
 80063b2:	f004 fb43 	bl	800aa3c <calloc>
 80063b6:	4603      	mov	r3, r0
 80063b8:	461a      	mov	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d064      	beq.n	8006490 <CO_new+0x22c>
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 80063cc:	613b      	str	r3, [r7, #16]
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0U) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 80063ce:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 80063d2:	2004      	movs	r0, #4
 80063d4:	f004 fb32 	bl	800aa3c <calloc>
 80063d8:	4603      	mov	r3, r0
 80063da:	461a      	mov	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	635a      	str	r2, [r3, #52]	@ 0x34
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d053      	beq.n	8006490 <CO_new+0x22c>
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80063ee:	613b      	str	r3, [r7, #16]
        }
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
        if (CO_GET_CNT(LEDS) == 1U) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 80063f0:	210c      	movs	r1, #12
 80063f2:	2001      	movs	r0, #1
 80063f4:	f004 fb22 	bl	800aa3c <calloc>
 80063f8:	4603      	mov	r3, r0
 80063fa:	461a      	mov	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006404:	2b00      	cmp	r3, #0
 8006406:	d043      	beq.n	8006490 <CO_new+0x22c>
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	330c      	adds	r3, #12
 800640c:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1U) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 800640e:	2174      	movs	r1, #116	@ 0x74
 8006410:	2001      	movs	r0, #1
 8006412:	f004 fb13 	bl	800aa3c <calloc>
 8006416:	4603      	mov	r3, r0
 8006418:	461a      	mov	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006422:	2b00      	cmp	r3, #0
 8006424:	d034      	beq.n	8006490 <CO_new+0x22c>
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	3374      	adds	r3, #116	@ 0x74
 800642a:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1U, sizeof(*co->CANmodule));
 800642c:	2138      	movs	r1, #56	@ 0x38
 800642e:	2001      	movs	r0, #1
 8006430:	f004 fb04 	bl	800aa3c <calloc>
 8006434:	4603      	mov	r3, r0
 8006436:	461a      	mov	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	605a      	str	r2, [r3, #4]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d025      	beq.n	8006490 <CO_new+0x22c>
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	3338      	adds	r3, #56	@ 0x38
 8006448:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 800644a:	210c      	movs	r1, #12
 800644c:	2011      	movs	r0, #17
 800644e:	f004 faf5 	bl	800aa3c <calloc>
 8006452:	4603      	mov	r3, r0
 8006454:	461a      	mov	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	609a      	str	r2, [r3, #8]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d016      	beq.n	8006490 <CO_new+0x22c>
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	33cc      	adds	r3, #204	@ 0xcc
 8006466:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8006468:	2118      	movs	r1, #24
 800646a:	2009      	movs	r0, #9
 800646c:	f004 fae6 	bl	800aa3c <calloc>
 8006470:	4603      	mov	r3, r0
 8006472:	461a      	mov	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	60da      	str	r2, [r3, #12]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d007      	beq.n	8006490 <CO_new+0x22c>
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	33d8      	adds	r3, #216	@ 0xd8
 8006484:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2201      	movs	r2, #1
 800648a:	601a      	str	r2, [r3, #0]
        coFinal = co;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	617b      	str	r3, [r7, #20]
    } while (false);

    if (coFinal == NULL) {
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d102      	bne.n	800649c <CO_new+0x238>
        CO_delete(co);
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 f80b 	bl	80064b2 <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <CO_new+0x244>
        *heapMemoryUsed = mem;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 80064a8:	697b      	ldr	r3, [r7, #20]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <CO_delete>:

void
CO_delete(CO_t* co) {
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b082      	sub	sp, #8
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d053      	beq.n	8006568 <CO_delete+0xb6>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 ff4b 	bl	8007360 <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f004 fad0 	bl	800aa74 <free>
    CO_free(co->CANrx);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	4618      	mov	r0, r3
 80064da:	f004 facb 	bl	800aa74 <free>
    CO_free(co->CANmodule);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f004 fac6 	bl	800aa74 <free>
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_MASTER) != 0
    CO_free(co->LSSmaster);
#endif

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    CO_free(co->LSSslave);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ec:	4618      	mov	r0, r3
 80064ee:	f004 fac1 	bl	800aa74 <free>
#if ((CO_CONFIG_GFC)&CO_CONFIG_GFC_ENABLE) != 0
    CO_free(co->GFC);
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    CO_free(co->LEDs);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f6:	4618      	mov	r0, r3
 80064f8:	f004 fabc 	bl	800aa74 <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
    CO_free(co->TPDO);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006500:	4618      	mov	r0, r3
 8006502:	f004 fab7 	bl	800aa74 <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
    CO_free(co->RPDO);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800650a:	4618      	mov	r0, r3
 800650c:	f004 fab2 	bl	800aa74 <free>
#endif

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
    CO_free(co->SYNC);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006514:	4618      	mov	r0, r3
 8006516:	f004 faad 	bl	800aa74 <free>
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    CO_free(co->TIME);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651e:	4618      	mov	r0, r3
 8006520:	f004 faa8 	bl	800aa74 <free>
#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_ENABLE) != 0
    free(co->SDOclient);
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006528:	4618      	mov	r0, r3
 800652a:	f004 faa3 	bl	800aa74 <free>

    /* Emergency */
    CO_free(co->em);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	4618      	mov	r0, r3
 8006534:	f004 fa9e 	bl	800aa74 <free>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    CO_free(co->em_fifo);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	4618      	mov	r0, r3
 800653e:	f004 fa99 	bl	800aa74 <free>
#if ((CO_CONFIG_NODE_GUARDING)&CO_CONFIG_NODE_GUARDING_MASTER_ENABLE) != 0
    CO_free(co->NGmaster);
#endif

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    CO_free(co->HBconsMonitoredNodes);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	4618      	mov	r0, r3
 8006548:	f004 fa94 	bl	800aa74 <free>
    CO_free(co->HBcons);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	4618      	mov	r0, r3
 8006552:	f004 fa8f 	bl	800aa74 <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	4618      	mov	r0, r3
 800655c:	f004 fa8a 	bl	800aa74 <free>

    /* CANopen object */
    CO_free(co);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f004 fa87 	bl	800aa74 <free>
 8006566:	e000      	b.n	800656a <CO_delete+0xb8>
        return;
 8006568:	bf00      	nop
}
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <CO_CANinit>:
#endif
    return en;
}

CO_ReturnError_t
CO_CANinit(CO_t* co, void* CANptr, uint16_t bitRate) {
 8006570:	b580      	push	{r7, lr}
 8006572:	b08a      	sub	sp, #40	@ 0x28
 8006574:	af04      	add	r7, sp, #16
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	4613      	mov	r3, r2
 800657c:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) {
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d102      	bne.n	800658a <CO_CANinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006584:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006588:	e01a      	b.n	80065c0 <CO_CANinit+0x50>
    }

    co->CANmodule->CANnormal = false;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 8006592:	68b8      	ldr	r0, [r7, #8]
 8006594:	f000 fdf4 	bl	8007180 <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule, CANptr, co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), co->CANtx,
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6858      	ldr	r0, [r3, #4]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6899      	ldr	r1, [r3, #8]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	88fa      	ldrh	r2, [r7, #6]
 80065a6:	9202      	str	r2, [sp, #8]
 80065a8:	2209      	movs	r2, #9
 80065aa:	9201      	str	r2, [sp, #4]
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	2311      	movs	r3, #17
 80065b0:	460a      	mov	r2, r1
 80065b2:	68b9      	ldr	r1, [r7, #8]
 80065b4:	f000 fe0c 	bl	80071d0 <CO_CANmodule_init>
 80065b8:	4603      	mov	r3, r0
 80065ba:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_TX_MSGS), bitRate);

    return err;
 80065bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <CO_LSSinit>:

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
CO_ReturnError_t
CO_LSSinit(CO_t* co, CO_LSS_address_t* lssAddress, uint8_t* pendingNodeID, uint16_t* pendingBitRate) {
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08c      	sub	sp, #48	@ 0x30
 80065cc:	af06      	add	r7, sp, #24
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if ((co == NULL) || (CO_GET_CNT(LSS_SLV) != 1U)) {
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d102      	bne.n	80065e2 <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80065dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80065e0:	e01a      	b.n	8006618 <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave, lssAddress, pendingBitRate, pendingNodeID, co->CANmodule,
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	6852      	ldr	r2, [r2, #4]
 80065ee:	f240 71e4 	movw	r1, #2020	@ 0x7e4
 80065f2:	9105      	str	r1, [sp, #20]
 80065f4:	2108      	movs	r1, #8
 80065f6:	9104      	str	r1, [sp, #16]
 80065f8:	9203      	str	r2, [sp, #12]
 80065fa:	f240 72e5 	movw	r2, #2021	@ 0x7e5
 80065fe:	9202      	str	r2, [sp, #8]
 8006600:	2210      	movs	r2, #16
 8006602:	9201      	str	r2, [sp, #4]
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	68b9      	ldr	r1, [r7, #8]
 800660c:	f7ff fb40 	bl	8005c90 <CO_LSSslave_init>
 8006610:	4603      	mov	r3, r0
 8006612:	75fb      	strb	r3, [r7, #23]
                           CO_GET_CO(RX_IDX_LSS_SLV), CO_CAN_ID_LSS_MST, co->CANmodule, CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 8006614:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3718      	adds	r7, #24
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <CO_CANopenInit>:
#endif /* (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE */

CO_ReturnError_t
CO_CANopenInit(CO_t* co, CO_NMT_t* NMT, CO_EM_t* em, OD_t* od, OD_entry_t* OD_statusBits, uint16_t NMTcontrol,
               uint16_t firstHBTime_ms, uint16_t SDOserverTimeoutTime_ms, uint16_t SDOclientTimeoutTime_ms,
               bool_t SDOclientBlockTransfer, uint8_t nodeId, uint32_t* errInfo) {
 8006620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006622:	b091      	sub	sp, #68	@ 0x44
 8006624:	af0a      	add	r7, sp, #40	@ 0x28
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
 800662c:	603b      	str	r3, [r7, #0]

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_STATUS_BITS) == 0
    (void)OD_statusBits; /* may be unused */
#endif

    if ((co == NULL) || ((CO_GET_CNT(NMT) == 0U) && (NMT == NULL)) || ((CO_GET_CNT(EM) == 0U) && (em == NULL))) {
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d102      	bne.n	800663a <CO_CANopenInit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006634:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006638:	e12f      	b.n	800689a <CO_CANopenInit+0x27a>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0U) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d102      	bne.n	8006646 <CO_CANopenInit+0x26>
        em = co->em;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	69db      	ldr	r3, [r3, #28]
 8006644:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    if ((CO_GET_CNT(LSS_SLV) == 1U) && (nodeId == CO_LSS_NODE_ID_ASSIGNMENT)) {
 800664c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8006650:	2bff      	cmp	r3, #255	@ 0xff
 8006652:	d103      	bne.n	800665c <CO_CANopenInit+0x3c>
        co->nodeIdUnconfigured = true;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2201      	movs	r2, #1
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	e00a      	b.n	8006672 <CO_CANopenInit+0x52>
    } else
#endif
        if ((nodeId < 1U) || (nodeId > 127U)) {
 800665c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8006660:	2b00      	cmp	r3, #0
 8006662:	d003      	beq.n	800666c <CO_CANopenInit+0x4c>
 8006664:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8006668:	2b00      	cmp	r3, #0
 800666a:	da02      	bge.n	8006672 <CO_CANopenInit+0x52>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800666c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006670:	e113      	b.n	800689a <CO_CANopenInit+0x27a>
    } else { /* MISRA C 2004 14.10 */
    }

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    if (CO_GET_CNT(LEDS) == 1U) {
        err = CO_LEDs_init(co->LEDs);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006676:	4618      	mov	r0, r3
 8006678:	f7fe ffde 	bl	8005638 <CO_LEDs_init>
 800667c:	4603      	mov	r3, r0
 800667e:	747b      	strb	r3, [r7, #17]
        if (err != CO_ERROR_NO) {
 8006680:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <CO_CANopenInit+0x6e>
            return err;
 8006688:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800668c:	e105      	b.n	800689a <CO_CANopenInit+0x27a>
        }
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <CO_CANopenInit+0x7c>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 8006696:	f06f 0312 	mvn.w	r3, #18
 800669a:	e0fe      	b.n	800689a <CO_CANopenInit+0x27a>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1U) {
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	69d8      	ldr	r0, [r3, #28]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	685c      	ldr	r4, [r3, #4]
 80066a4:	4b7f      	ldr	r3, [pc, #508]	@ (80068a4 <CO_CANopenInit+0x284>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f103 050c 	add.w	r5, r3, #12
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6a1e      	ldr	r6, [r3, #32]
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
                         co->em_fifo, (CO_GET_CNT(ARR_1003) + 1U),
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY), CO_GET_CO(TX_IDX_EM_PROD),
 80066b2:	4b7c      	ldr	r3, [pc, #496]	@ (80068a4 <CO_CANopenInit+0x284>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 80066b8:	336c      	adds	r3, #108	@ 0x6c
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PROD_INHIBIT) != 0
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
#endif
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 80066ba:	4a7a      	ldr	r2, [pc, #488]	@ (80068a4 <CO_CANopenInit+0x284>)
 80066bc:	6812      	ldr	r2, [r2, #0]
 80066be:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 80066c0:	3218      	adds	r2, #24
 80066c2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80066c4:	9105      	str	r1, [sp, #20]
 80066c6:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 80066ca:	9104      	str	r1, [sp, #16]
 80066cc:	9203      	str	r2, [sp, #12]
 80066ce:	2201      	movs	r2, #1
 80066d0:	9202      	str	r2, [sp, #8]
 80066d2:	9301      	str	r3, [sp, #4]
 80066d4:	2311      	movs	r3, #17
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	4633      	mov	r3, r6
 80066da:	462a      	mov	r2, r5
 80066dc:	4621      	mov	r1, r4
 80066de:	f7fa f883 	bl	80007e8 <CO_EM_init>
 80066e2:	4603      	mov	r3, r0
 80066e4:	747b      	strb	r3, [r7, #17]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
                         co->CANmodule, CO_GET_CO(RX_IDX_EM_CONS),
#endif
                         nodeId, errInfo);
        if (err != CO_ERROR_NO) {
 80066e6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <CO_CANopenInit+0xd4>
            return err;
 80066ee:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80066f2:	e0d2      	b.n	800689a <CO_CANopenInit+0x27a>
        }
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U) {
        err = CO_NMT_init(co->NMT, OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME), em, nodeId, NMTcontrol, firstHBTime_ms,
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	691c      	ldr	r4, [r3, #16]
 80066f8:	4b6a      	ldr	r3, [pc, #424]	@ (80068a4 <CO_CANopenInit+0x284>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f103 0590 	add.w	r5, r3, #144	@ 0x90
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	6852      	ldr	r2, [r2, #4]
 800670a:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 800670e:	b289      	uxth	r1, r1
 8006710:	f501 61e0 	add.w	r1, r1, #1792	@ 0x700
 8006714:	b289      	uxth	r1, r1
 8006716:	f897 6048 	ldrb.w	r6, [r7, #72]	@ 0x48
 800671a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800671c:	9008      	str	r0, [sp, #32]
 800671e:	9107      	str	r1, [sp, #28]
 8006720:	2107      	movs	r1, #7
 8006722:	9106      	str	r1, [sp, #24]
 8006724:	9205      	str	r2, [sp, #20]
 8006726:	2200      	movs	r2, #0
 8006728:	9204      	str	r2, [sp, #16]
 800672a:	2200      	movs	r2, #0
 800672c:	9203      	str	r2, [sp, #12]
 800672e:	9302      	str	r3, [sp, #8]
 8006730:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006732:	9301      	str	r3, [sp, #4]
 8006734:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	4633      	mov	r3, r6
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	4629      	mov	r1, r5
 800673e:	4620      	mov	r0, r4
 8006740:	f7fa fee0 	bl	8001504 <CO_NMT_init>
 8006744:	4603      	mov	r3, r0
 8006746:	747b      	strb	r3, [r7, #17]
                          co->CANmodule, CO_GET_CO(RX_IDX_NMT_SLV), CO_CAN_ID_NMT_SERVICE,
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
                          co->CANmodule, CO_GET_CO(TX_IDX_NMT_MST), CO_CAN_ID_NMT_SERVICE,
#endif
                          co->CANmodule, CO_GET_CO(TX_IDX_HB_PROD), CO_CAN_ID_HEARTBEAT + nodeId, errInfo);
        if (err != CO_ERROR_NO) {
 8006748:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <CO_CANopenInit+0x136>
            return err;
 8006750:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006754:	e0a1      	b.n	800689a <CO_CANopenInit+0x27a>
        }
    }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    if (CO_GET_CNT(HB_CONS) == 1U) {
        err = CO_HBconsumer_init(co->HBcons, em, co->HBconsMonitoredNodes, CO_GET_CNT(ARR_1016),
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6958      	ldr	r0, [r3, #20]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	699c      	ldr	r4, [r3, #24]
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME), co->CANmodule, CO_GET_CO(RX_IDX_HB_CONS),
 800675e:	4b51      	ldr	r3, [pc, #324]	@ (80068a4 <CO_CANopenInit+0x284>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons, em, co->HBconsMonitoredNodes, CO_GET_CNT(ARR_1016),
 8006764:	3384      	adds	r3, #132	@ 0x84
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	6852      	ldr	r2, [r2, #4]
 800676a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800676c:	9103      	str	r1, [sp, #12]
 800676e:	2108      	movs	r1, #8
 8006770:	9102      	str	r1, [sp, #8]
 8006772:	9201      	str	r2, [sp, #4]
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	2308      	movs	r3, #8
 8006778:	4622      	mov	r2, r4
 800677a:	6879      	ldr	r1, [r7, #4]
 800677c:	f7fa fbca 	bl	8000f14 <CO_HBconsumer_init>
 8006780:	4603      	mov	r3, r0
 8006782:	747b      	strb	r3, [r7, #17]
                                 errInfo);
        if (err != CO_ERROR_NO) {
 8006784:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <CO_CANopenInit+0x172>
            return err;
 800678c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006790:	e083      	b.n	800689a <CO_CANopenInit+0x27a>
    }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0U) {
        OD_entry_t* SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 8006792:	4b44      	ldr	r3, [pc, #272]	@ (80068a4 <CO_CANopenInit+0x284>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	33b4      	adds	r3, #180	@ 0xb4
 800679a:	617b      	str	r3, [r7, #20]
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 800679c:	2300      	movs	r3, #0
 800679e:	827b      	strh	r3, [r7, #18]
 80067a0:	e02f      	b.n	8006802 <CO_CANopenInit+0x1e2>
            err = CO_SDOserver_init(&co->SDOserver[i], od, SDOsrvPar, nodeId, SDOserverTimeoutTime_ms, co->CANmodule,
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067a6:	8a7b      	ldrh	r3, [r7, #18]
 80067a8:	21ac      	movs	r1, #172	@ 0xac
 80067aa:	fb01 f303 	mul.w	r3, r1, r3
 80067ae:	18d5      	adds	r5, r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	8a7a      	ldrh	r2, [r7, #18]
 80067b6:	3207      	adds	r2, #7
 80067b8:	b292      	uxth	r2, r2
 80067ba:	68f9      	ldr	r1, [r7, #12]
 80067bc:	6849      	ldr	r1, [r1, #4]
 80067be:	8a78      	ldrh	r0, [r7, #18]
 80067c0:	3006      	adds	r0, #6
 80067c2:	b280      	uxth	r0, r0
 80067c4:	f897 6048 	ldrb.w	r6, [r7, #72]	@ 0x48
 80067c8:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 80067ca:	9405      	str	r4, [sp, #20]
 80067cc:	9004      	str	r0, [sp, #16]
 80067ce:	9103      	str	r1, [sp, #12]
 80067d0:	9202      	str	r2, [sp, #8]
 80067d2:	9301      	str	r3, [sp, #4]
 80067d4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	4633      	mov	r3, r6
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	6839      	ldr	r1, [r7, #0]
 80067de:	4628      	mov	r0, r5
 80067e0:	f7fd f968 	bl	8003ab4 <CO_SDOserver_init>
 80067e4:	4603      	mov	r3, r0
 80067e6:	747b      	strb	r3, [r7, #17]
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i, co->CANmodule, CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err != CO_ERROR_NO) {
 80067e8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <CO_CANopenInit+0x1d6>
                return err;
 80067f0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80067f4:	e051      	b.n	800689a <CO_CANopenInit+0x27a>
            }
            SDOsrvPar++;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	330c      	adds	r3, #12
 80067fa:	617b      	str	r3, [r7, #20]
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 80067fc:	8a7b      	ldrh	r3, [r7, #18]
 80067fe:	3301      	adds	r3, #1
 8006800:	827b      	strh	r3, [r7, #18]
 8006802:	8a7b      	ldrh	r3, [r7, #18]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0cc      	beq.n	80067a2 <CO_CANopenInit+0x182>
    }
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    if (CO_GET_CNT(TIME) == 1U) {
        err = CO_TIME_init(co->TIME, OD_GET(H1012, OD_H1012_COBID_TIME), co->CANmodule, CO_GET_CO(RX_IDX_TIME),
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800680c:	4b25      	ldr	r3, [pc, #148]	@ (80068a4 <CO_CANopenInit+0x284>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	2302      	movs	r3, #2
 8006820:	f7fe fe14 	bl	800544c <CO_TIME_init>
 8006824:	4603      	mov	r3, r0
 8006826:	747b      	strb	r3, [r7, #17]
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
                           co->CANmodule, CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err != CO_ERROR_NO) {
 8006828:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <CO_CANopenInit+0x216>
            return err;
 8006830:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006834:	e031      	b.n	800689a <CO_CANopenInit+0x27a>
    }
#endif

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
    if (CO_GET_CNT(SYNC) == 1U) {
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800683a:	4b1a      	ldr	r3, [pc, #104]	@ (80068a4 <CO_CANopenInit+0x284>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f103 0624 	add.w	r6, r3, #36	@ 0x24
 8006844:	4b17      	ldr	r3, [pc, #92]	@ (80068a4 <CO_CANopenInit+0x284>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f103 0c30 	add.w	ip, r3, #48	@ 0x30
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN), OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 800684e:	4b15      	ldr	r3, [pc, #84]	@ (80068a4 <CO_CANopenInit+0x284>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8006854:	333c      	adds	r3, #60	@ 0x3c
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN), OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8006856:	4a13      	ldr	r2, [pc, #76]	@ (80068a4 <CO_CANopenInit+0x284>)
 8006858:	6812      	ldr	r2, [r2, #0]
 800685a:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 800685c:	32a8      	adds	r2, #168	@ 0xa8
 800685e:	68f9      	ldr	r1, [r7, #12]
 8006860:	6849      	ldr	r1, [r1, #4]
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	6840      	ldr	r0, [r0, #4]
 8006866:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8006868:	9406      	str	r4, [sp, #24]
 800686a:	2400      	movs	r4, #0
 800686c:	9405      	str	r4, [sp, #20]
 800686e:	9004      	str	r0, [sp, #16]
 8006870:	2001      	movs	r0, #1
 8006872:	9003      	str	r0, [sp, #12]
 8006874:	9102      	str	r1, [sp, #8]
 8006876:	9201      	str	r2, [sp, #4]
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	4663      	mov	r3, ip
 800687c:	4632      	mov	r2, r6
 800687e:	6879      	ldr	r1, [r7, #4]
 8006880:	4628      	mov	r0, r5
 8006882:	f7fe fb1d 	bl	8004ec0 <CO_SYNC_init>
 8006886:	4603      	mov	r3, r0
 8006888:	747b      	strb	r3, [r7, #17]
                           co->CANmodule, CO_GET_CO(RX_IDX_SYNC),
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
                           co->CANmodule, CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err != CO_ERROR_NO) {
 800688a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d002      	beq.n	8006898 <CO_CANopenInit+0x278>
            return err;
 8006892:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006896:	e000      	b.n	800689a <CO_CANopenInit+0x27a>
            }
        }
    }
#endif

    return CO_ERROR_NO;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	371c      	adds	r7, #28
 800689e:	46bd      	mov	sp, r7
 80068a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068a2:	bf00      	nop
 80068a4:	200003cc 	.word	0x200003cc

080068a8 <CO_CANopenInitPDO>:

CO_ReturnError_t
CO_CANopenInitPDO(CO_t* co, CO_EM_t* em, OD_t* od, uint8_t nodeId, uint32_t* errInfo) {
 80068a8:	b590      	push	{r4, r7, lr}
 80068aa:	b093      	sub	sp, #76	@ 0x4c
 80068ac:	af06      	add	r7, sp, #24
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
 80068b4:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d102      	bne.n	80068c2 <CO_CANopenInitPDO+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80068bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80068c0:	e0b4      	b.n	8006a2c <CO_CANopenInitPDO+0x184>
    }
    if ((nodeId < 1U) || (nodeId > 127U) || co->nodeIdUnconfigured) {
 80068c2:	78fb      	ldrb	r3, [r7, #3]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d007      	beq.n	80068d8 <CO_CANopenInitPDO+0x30>
 80068c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	db03      	blt.n	80068d8 <CO_CANopenInitPDO+0x30>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d009      	beq.n	80068ec <CO_CANopenInitPDO+0x44>
        return (co->nodeIdUnconfigured) ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d002      	beq.n	80068e6 <CO_CANopenInitPDO+0x3e>
 80068e0:	f06f 0312 	mvn.w	r3, #18
 80068e4:	e0a2      	b.n	8006a2c <CO_CANopenInitPDO+0x184>
 80068e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80068ea:	e09f      	b.n	8006a2c <CO_CANopenInitPDO+0x184>
    }

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
    if (CO_GET_CNT(RPDO) > 0U) {
        OD_entry_t* RPDOcomm = OD_GET(H1400, OD_H1400_RXPDO_1_PARAM);
 80068ec:	4b51      	ldr	r3, [pc, #324]	@ (8006a34 <CO_CANopenInitPDO+0x18c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	33cc      	adds	r3, #204	@ 0xcc
 80068f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        OD_entry_t* RPDOmap = OD_GET(H1600, OD_H1600_RXPDO_1_MAPPING);
 80068f6:	4b4f      	ldr	r3, [pc, #316]	@ (8006a34 <CO_CANopenInitPDO+0x18c>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	33fc      	adds	r3, #252	@ 0xfc
 80068fe:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006900:	2300      	movs	r3, #0
 8006902:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006904:	e03d      	b.n	8006982 <CO_CANopenInitPDO+0xda>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 8006906:	2300      	movs	r3, #0
 8006908:	84bb      	strh	r3, [r7, #36]	@ 0x24
            if (i < CO_RPDO_DEFAULT_CANID_COUNT) {
 800690a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800690c:	2b03      	cmp	r3, #3
 800690e:	d808      	bhi.n	8006922 <CO_CANopenInitPDO+0x7a>
#if CO_RPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (uint16_t)((CO_CAN_ID_RPDO_1 + (i * 0x100U)) + nodeId);
 8006910:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006912:	3302      	adds	r3, #2
 8006914:	b29b      	uxth	r3, r3
 8006916:	021b      	lsls	r3, r3, #8
 8006918:	b29a      	uxth	r2, r3
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	b29b      	uxth	r3, r3
 800691e:	4413      	add	r3, r2
 8006920:	84bb      	strh	r3, [r7, #36]	@ 0x24
                uint16_t pdoOffset = i % 4;
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + pdoOffset * 0x100) + nodeId + nodeIdOffset;
#endif
            }
            err = CO_RPDO_init(&co->RPDO[i], od, em,
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006926:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006928:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 800692c:	fb01 f303 	mul.w	r3, r1, r3
 8006930:	18d0      	adds	r0, r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800693c:	3203      	adds	r2, #3
 800693e:	b292      	uxth	r2, r2
 8006940:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006942:	9105      	str	r1, [sp, #20]
 8006944:	9204      	str	r2, [sp, #16]
 8006946:	9303      	str	r3, [sp, #12]
 8006948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800694a:	9302      	str	r3, [sp, #8]
 800694c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800694e:	9301      	str	r3, [sp, #4]
 8006950:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	4623      	mov	r3, r4
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	6879      	ldr	r1, [r7, #4]
 800695a:	f7fb ff6f 	bl	800283c <CO_RPDO_init>
 800695e:	4603      	mov	r3, r0
 8006960:	75bb      	strb	r3, [r7, #22]
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
                               co->SYNC,
#endif
                               preDefinedCanId, RPDOcomm, RPDOmap, co->CANmodule, CO_GET_CO(RX_IDX_RPDO) + i, errInfo);
            if (err != CO_ERROR_NO) {
 8006962:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <CO_CANopenInitPDO+0xc8>
                return err;
 800696a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800696e:	e05d      	b.n	8006a2c <CO_CANopenInitPDO+0x184>
            }
            RPDOcomm++;
 8006970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006972:	330c      	adds	r3, #12
 8006974:	62fb      	str	r3, [r7, #44]	@ 0x2c
            RPDOmap++;
 8006976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006978:	330c      	adds	r3, #12
 800697a:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 800697c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800697e:	3301      	adds	r3, #1
 8006980:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006982:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006984:	2b03      	cmp	r3, #3
 8006986:	d9be      	bls.n	8006906 <CO_CANopenInitPDO+0x5e>
    }
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
    if (CO_GET_CNT(TPDO) > 0U) {
        OD_entry_t* TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 8006988:	4b2a      	ldr	r3, [pc, #168]	@ (8006a34 <CO_CANopenInitPDO+0x18c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8006992:	623b      	str	r3, [r7, #32]
        OD_entry_t* TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 8006994:	4b27      	ldr	r3, [pc, #156]	@ (8006a34 <CO_CANopenInitPDO+0x18c>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800699e:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80069a0:	2300      	movs	r3, #0
 80069a2:	837b      	strh	r3, [r7, #26]
 80069a4:	e03e      	b.n	8006a24 <CO_CANopenInitPDO+0x17c>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 80069a6:	2300      	movs	r3, #0
 80069a8:	833b      	strh	r3, [r7, #24]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 80069aa:	8b7b      	ldrh	r3, [r7, #26]
 80069ac:	2b03      	cmp	r3, #3
 80069ae:	d809      	bhi.n	80069c4 <CO_CANopenInitPDO+0x11c>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (uint16_t)((CO_CAN_ID_TPDO_1 + (i * 0x100U)) + nodeId);
 80069b0:	8b7b      	ldrh	r3, [r7, #26]
 80069b2:	021b      	lsls	r3, r3, #8
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	78fb      	ldrb	r3, [r7, #3]
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	4413      	add	r3, r2
 80069bc:	b29b      	uxth	r3, r3
 80069be:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80069c2:	833b      	strh	r3, [r7, #24]
                uint16_t pdoOffset = i % 4;
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100) + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i], od, em,
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069c8:	8b7b      	ldrh	r3, [r7, #26]
 80069ca:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 80069ce:	fb01 f303 	mul.w	r3, r1, r3
 80069d2:	18d0      	adds	r0, r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	8b7a      	ldrh	r2, [r7, #26]
 80069de:	3202      	adds	r2, #2
 80069e0:	b292      	uxth	r2, r2
 80069e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069e4:	9105      	str	r1, [sp, #20]
 80069e6:	9204      	str	r2, [sp, #16]
 80069e8:	9303      	str	r3, [sp, #12]
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	9302      	str	r3, [sp, #8]
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	9301      	str	r3, [sp, #4]
 80069f2:	8b3b      	ldrh	r3, [r7, #24]
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	4623      	mov	r3, r4
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	6879      	ldr	r1, [r7, #4]
 80069fc:	f7fc fafe 	bl	8002ffc <CO_TPDO_init>
 8006a00:	4603      	mov	r3, r0
 8006a02:	75fb      	strb	r3, [r7, #23]
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
                               co->SYNC,
#endif
                               preDefinedCanId, TPDOcomm, TPDOmap, co->CANmodule, CO_GET_CO(TX_IDX_TPDO) + i, errInfo);
            if (err != CO_ERROR_NO) {
 8006a04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <CO_CANopenInitPDO+0x16a>
                return err;
 8006a0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a10:	e00c      	b.n	8006a2c <CO_CANopenInitPDO+0x184>
            }
            TPDOcomm++;
 8006a12:	6a3b      	ldr	r3, [r7, #32]
 8006a14:	330c      	adds	r3, #12
 8006a16:	623b      	str	r3, [r7, #32]
            TPDOmap++;
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	330c      	adds	r3, #12
 8006a1c:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006a1e:	8b7b      	ldrh	r3, [r7, #26]
 8006a20:	3301      	adds	r3, #1
 8006a22:	837b      	strh	r3, [r7, #26]
 8006a24:	8b7b      	ldrh	r3, [r7, #26]
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d9bd      	bls.n	80069a6 <CO_CANopenInitPDO+0xfe>
        }
    }
#endif

    return CO_ERROR_NO;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3734      	adds	r7, #52	@ 0x34
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd90      	pop	{r4, r7, pc}
 8006a34:	200003cc 	.word	0x200003cc

08006a38 <CO_process>:
    return CO_ERROR_NO;
}
#endif

CO_NMT_reset_cmd_t
CO_process(CO_t* co, bool_t enableGateway, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8006a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a3a:	b09b      	sub	sp, #108	@ 0x6c
 8006a3c:	af08      	add	r7, sp, #32
 8006a3e:	61f8      	str	r0, [r7, #28]
 8006a40:	61b9      	str	r1, [r7, #24]
 8006a42:	617a      	str	r2, [r7, #20]
 8006a44:	613b      	str	r3, [r7, #16]
    (void)enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 8006a46:	2300      	movs	r3, #0
 8006a48:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7ff fbe4 	bl	800621e <CO_NMT_getInternalState>
 8006a56:	4603      	mov	r3, r0
 8006a58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    bool_t NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 8006a5c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006a60:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a62:	d003      	beq.n	8006a6c <CO_process+0x34>
 8006a64:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006a68:	2b05      	cmp	r3, #5
 8006a6a:	d101      	bne.n	8006a70 <CO_process+0x38>
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e000      	b.n	8006a72 <CO_process+0x3a>
 8006a70:	2300      	movs	r3, #0
 8006a72:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 fe08 	bl	800768e <CO_CANmodule_process>

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE)
    if (CO_GET_CNT(LSS_SLV) == 1U) {
        if (CO_LSSslave_process(co->LSSslave)) {
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7ff f97a 	bl	8005d7c <CO_LSSslave_process>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <CO_process+0x5c>
            reset = CO_RESET_COMM;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    bool_t unc = co->nodeIdUnconfigured;
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	637b      	str	r3, [r7, #52]	@ 0x34
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	8a5b      	ldrh	r3, [r3, #18]
 8006aa0:	867b      	strh	r3, [r7, #50]	@ 0x32
    bool_t LSSslave_configuration = false;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	643b      	str	r3, [r7, #64]	@ 0x40
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    if (CO_GET_CNT(LSS_SLV) == 1U) {
        if (CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION) {
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7ff fbc9 	bl	8006242 <CO_LSSslave_getState>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d101      	bne.n	8006aba <CO_process+0x82>
            LSSslave_configuration = true;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
#define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS false
#endif

    if (CO_GET_CNT(LEDS) == 1U) {
        bool_t ErrSync = CO_isError(co->em, CO_EM_SYNC_TIME_OUT);
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	2118      	movs	r1, #24
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7ff fb6f 	bl	80061a4 <CO_isError>
 8006ac6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        bool_t ErrHbCons = CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER);
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	211b      	movs	r1, #27
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7ff fb68 	bl	80061a4 <CO_isError>
 8006ad4:	62b8      	str	r0, [r7, #40]	@ 0x28
        bool_t ErrHbConsRemote = CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	211c      	movs	r1, #28
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7ff fb61 	bl	80061a4 <CO_isError>
 8006ae2:	6278      	str	r0, [r7, #36]	@ 0x24
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 8006ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d102      	bne.n	8006af4 <CO_process+0xbc>
 8006aee:	f997 5023 	ldrsb.w	r5, [r7, #35]	@ 0x23
 8006af2:	e000      	b.n	8006af6 <CO_process+0xbe>
 8006af4:	2500      	movs	r5, #0
                        (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0U, (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0U,
 8006af6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006af8:	f003 0304 	and.w	r3, r3, #4
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	bf14      	ite	ne
 8006b00:	2301      	movne	r3, #1
 8006b02:	2300      	moveq	r3, #0
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	60fb      	str	r3, [r7, #12]
                        (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0U, (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0U,
 8006b08:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8006b0a:	f240 3303 	movw	r3, #771	@ 0x303
 8006b0e:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	bf14      	ite	ne
 8006b14:	2301      	movne	r3, #1
 8006b16:	2300      	moveq	r3, #0
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	60bb      	str	r3, [r7, #8]
 8006b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <CO_process+0xee>
 8006b22:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8006b24:	e000      	b.n	8006b28 <CO_process+0xf0>
 8006b26:	2400      	movs	r4, #0
                        false, /* RPDO event timer timeout */
                        unc ? false : ErrSync, unc ? false : (ErrHbCons || ErrHbConsRemote),
 8006b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d107      	bne.n	8006b3e <CO_process+0x106>
 8006b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d102      	bne.n	8006b3a <CO_process+0x102>
 8006b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <CO_process+0x106>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e000      	b.n	8006b40 <CO_process+0x108>
 8006b3e:	2300      	movs	r3, #0
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8006b40:	607b      	str	r3, [r7, #4]
                        CO_getErrorRegister(co->em) != 0U, CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS, timerNext_us);
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7ff fb53 	bl	80061f2 <CO_getErrorRegister>
 8006b4c:	4603      	mov	r3, r0
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	bf14      	ite	ne
 8006b52:	2301      	movne	r3, #1
 8006b54:	2300      	moveq	r3, #0
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	461a      	mov	r2, r3
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	9307      	str	r3, [sp, #28]
 8006b5e:	2300      	movs	r3, #0
 8006b60:	9306      	str	r3, [sp, #24]
 8006b62:	9205      	str	r2, [sp, #20]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	9304      	str	r3, [sp, #16]
 8006b68:	9403      	str	r4, [sp, #12]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	9302      	str	r3, [sp, #8]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	9301      	str	r3, [sp, #4]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b78:	462a      	mov	r2, r5
 8006b7a:	6979      	ldr	r1, [r7, #20]
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	f7fe fd73 	bl	8005668 <CO_LEDs_process>
    }
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <CO_process+0x158>
        return reset;
 8006b8a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006b8e:	e047      	b.n	8006c20 <CO_process+0x1e8>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1U) {
        CO_EM_process(co->em, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	69d8      	ldr	r0, [r3, #28]
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006b9a:	f7f9 ff05 	bl	80009a8 <CO_EM_process>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U) {
        reset = CO_NMT_process(co->NMT, &NMTstate, timeDifference_us, timerNext_us);
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	6918      	ldr	r0, [r3, #16]
 8006ba2:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	f7fa fd69 	bl	8001680 <CO_NMT_process>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 8006bb4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006bb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bba:	d003      	beq.n	8006bc4 <CO_process+0x18c>
 8006bbc:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006bc0:	2b05      	cmp	r3, #5
 8006bc2:	d101      	bne.n	8006bc8 <CO_process+0x190>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e000      	b.n	8006bca <CO_process+0x192>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006bcc:	2300      	movs	r3, #0
 8006bce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006bd2:	e011      	b.n	8006bf8 <CO_process+0x1c0>
        (void)CO_SDOserver_process(&co->SDOserver[i], NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bd8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006bdc:	21ac      	movs	r1, #172	@ 0xac
 8006bde:	fb01 f303 	mul.w	r3, r1, r3
 8006be2:	18d0      	adds	r0, r2, r3
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006bea:	f7fd fa4d 	bl	8004088 <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006bee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006bf8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d0e9      	beq.n	8006bd4 <CO_process+0x19c>
    }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    if (CO_GET_CNT(HB_CONS) == 1U) {
        CO_HBconsumer_process(co->HBcons, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	6958      	ldr	r0, [r3, #20]
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006c0a:	f7fa fac3 	bl	8001194 <CO_HBconsumer_process>
    CO_nodeGuardingMaster_process(co->NGmaster, timeDifference_us, timerNext_us);
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    if (CO_GET_CNT(TIME) == 1U) {
        (void)CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fe fc98 	bl	800554c <CO_TIME_process>
    if (CO_GET_CNT(GTWA) == 1U) {
        CO_GTWA_process(co->gtwa, enableGateway, timeDifference_us, timerNext_us);
    }
#endif

    return reset;
 8006c1c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	374c      	adds	r7, #76	@ 0x4c
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c28 <CO_process_SYNC>:

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
bool_t
CO_process_SYNC(CO_t* co, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b088      	sub	sp, #32
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 8006c34:	2300      	movs	r3, #0
 8006c36:	61fb      	str	r3, [r7, #28]

    if ((!co->nodeIdUnconfigured) && (CO_GET_CNT(SYNC) == 1U)) {
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d131      	bne.n	8006ca4 <CO_process_SYNC+0x7c>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7ff faea 	bl	800621e <CO_NMT_getInternalState>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 8006c4e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006c52:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c54:	d003      	beq.n	8006c5e <CO_process_SYNC+0x36>
 8006c56:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006c5a:	2b05      	cmp	r3, #5
 8006c5c:	d101      	bne.n	8006c62 <CO_process_SYNC+0x3a>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e000      	b.n	8006c64 <CO_process_SYNC+0x3c>
 8006c62:	2300      	movs	r3, #0
 8006c64:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC, NMTisPreOrOperational, timeDifference_us,
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	6979      	ldr	r1, [r7, #20]
 8006c70:	f7fe fa4c 	bl	800510c <CO_SYNC_process>
 8006c74:	4603      	mov	r3, r0
 8006c76:	74fb      	strb	r3, [r7, #19]
                                                        timerNext_us);

        switch (sync_process) {
 8006c78:	7cfb      	ldrb	r3, [r7, #19]
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d009      	beq.n	8006c92 <CO_process_SYNC+0x6a>
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	dc0d      	bgt.n	8006c9e <CO_process_SYNC+0x76>
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00d      	beq.n	8006ca2 <CO_process_SYNC+0x7a>
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d000      	beq.n	8006c8c <CO_process_SYNC+0x64>
            case CO_SYNC_NONE: break;
            case CO_SYNC_RX_TX: syncWas = true; break;
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
            default:
                /* MISRA C 2004 15.3 */
                break;
 8006c8a:	e008      	b.n	8006c9e <CO_process_SYNC+0x76>
            case CO_SYNC_RX_TX: syncWas = true; break;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	61fb      	str	r3, [r7, #28]
 8006c90:	e008      	b.n	8006ca4 <CO_process_SYNC+0x7c>
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fc93 	bl	80075c2 <CO_CANclearPendingSyncPDOs>
 8006c9c:	e002      	b.n	8006ca4 <CO_process_SYNC+0x7c>
                break;
 8006c9e:	bf00      	nop
 8006ca0:	e000      	b.n	8006ca4 <CO_process_SYNC+0x7c>
            case CO_SYNC_NONE: break;
 8006ca2:	bf00      	nop
        }
    }

    return syncWas;
 8006ca4:	69fb      	ldr	r3, [r7, #28]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3720      	adds	r7, #32
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <CO_process_RPDO>:
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
void
CO_process_RPDO(CO_t* co, bool_t syncWas, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b088      	sub	sp, #32
 8006cb2:	af02      	add	r7, sp, #8
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	60b9      	str	r1, [r7, #8]
 8006cb8:	607a      	str	r2, [r7, #4]
 8006cba:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d124      	bne.n	8006d0e <CO_process_RPDO+0x60>
        return;
    }

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7ff faa8 	bl	800621e <CO_NMT_getInternalState>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b05      	cmp	r3, #5
 8006cd2:	bf0c      	ite	eq
 8006cd4:	2301      	moveq	r3, #1
 8006cd6:	2300      	movne	r3, #0
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	613b      	str	r3, [r7, #16]

    for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006cdc:	2300      	movs	r3, #0
 8006cde:	82fb      	strh	r3, [r7, #22]
 8006ce0:	e011      	b.n	8006d06 <CO_process_RPDO+0x58>
        CO_RPDO_process(&co->RPDO[i],
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ce6:	8afb      	ldrh	r3, [r7, #22]
 8006ce8:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8006cec:	fb01 f303 	mul.w	r3, r1, r3
 8006cf0:	18d0      	adds	r0, r2, r3
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	6879      	ldr	r1, [r7, #4]
 8006cfc:	f7fb fee0 	bl	8002ac0 <CO_RPDO_process>
    for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006d00:	8afb      	ldrh	r3, [r7, #22]
 8006d02:	3301      	adds	r3, #1
 8006d04:	82fb      	strh	r3, [r7, #22]
 8006d06:	8afb      	ldrh	r3, [r7, #22]
 8006d08:	2b03      	cmp	r3, #3
 8006d0a:	d9ea      	bls.n	8006ce2 <CO_process_RPDO+0x34>
 8006d0c:	e000      	b.n	8006d10 <CO_process_RPDO+0x62>
        return;
 8006d0e:	bf00      	nop
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
                        timeDifference_us, timerNext_us,
#endif
                        NMTisOperational, syncWas);
    }
}
 8006d10:	3718      	adds	r7, #24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <CO_process_TPDO>:
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
void
CO_process_TPDO(CO_t* co, bool_t syncWas, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b088      	sub	sp, #32
 8006d1a:	af02      	add	r7, sp, #8
 8006d1c:	60f8      	str	r0, [r7, #12]
 8006d1e:	60b9      	str	r1, [r7, #8]
 8006d20:	607a      	str	r2, [r7, #4]
 8006d22:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d124      	bne.n	8006d76 <CO_process_TPDO+0x60>
        return;
    }

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7ff fa74 	bl	800621e <CO_NMT_getInternalState>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b05      	cmp	r3, #5
 8006d3a:	bf0c      	ite	eq
 8006d3c:	2301      	moveq	r3, #1
 8006d3e:	2300      	movne	r3, #0
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	613b      	str	r3, [r7, #16]

    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006d44:	2300      	movs	r3, #0
 8006d46:	82fb      	strh	r3, [r7, #22]
 8006d48:	e011      	b.n	8006d6e <CO_process_TPDO+0x58>
        CO_TPDO_process(&co->TPDO[i],
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d4e:	8afb      	ldrh	r3, [r7, #22]
 8006d50:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8006d54:	fb01 f303 	mul.w	r3, r1, r3
 8006d58:	18d0      	adds	r0, r2, r3
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	6879      	ldr	r1, [r7, #4]
 8006d64:	f7fc fb7e 	bl	8003464 <CO_TPDO_process>
    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006d68:	8afb      	ldrh	r3, [r7, #22]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	82fb      	strh	r3, [r7, #22]
 8006d6e:	8afb      	ldrh	r3, [r7, #22]
 8006d70:	2b03      	cmp	r3, #3
 8006d72:	d9ea      	bls.n	8006d4a <CO_process_TPDO+0x34>
 8006d74:	e000      	b.n	8006d78 <CO_process_TPDO+0x62>
        return;
 8006d76:	bf00      	nop
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
                        timeDifference_us, timerNext_us,
#endif
                        NMTisOperational, syncWas);
    }
}
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
	...

08006d80 <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 8006d88:	4a13      	ldr	r2, [pc, #76]	@ (8006dd8 <canopen_app_init+0x58>)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 8006d92:	f107 0308 	add.w	r3, r7, #8
 8006d96:	4619      	mov	r1, r3
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f7ff fa63 	bl	8006264 <CO_new>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	4a0e      	ldr	r2, [pc, #56]	@ (8006ddc <canopen_app_init+0x5c>)
 8006da2:	6013      	str	r3, [r2, #0]
    if (CO == NULL) {
 8006da4:	4b0d      	ldr	r3, [pc, #52]	@ (8006ddc <canopen_app_init+0x5c>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d104      	bne.n	8006db6 <canopen_app_init+0x36>
        log_printf("Error: Can't allocate memory\n");
 8006dac:	480c      	ldr	r0, [pc, #48]	@ (8006de0 <canopen_app_init+0x60>)
 8006dae:	f004 f901 	bl	800afb4 <puts>
        return 1;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e00c      	b.n	8006dd0 <canopen_app_init+0x50>
    } else {
        log_printf("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	4619      	mov	r1, r3
 8006dba:	480a      	ldr	r0, [pc, #40]	@ (8006de4 <canopen_app_init+0x64>)
 8006dbc:	f004 f892 	bl	800aee4 <iprintf>
    }

    canopenNodeSTM32->canOpenStack = CO;
 8006dc0:	4b05      	ldr	r3, [pc, #20]	@ (8006dd8 <canopen_app_init+0x58>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a05      	ldr	r2, [pc, #20]	@ (8006ddc <canopen_app_init+0x5c>)
 8006dc6:	6812      	ldr	r2, [r2, #0]
 8006dc8:	615a      	str	r2, [r3, #20]
        log_printf("Error: Storage %d\n", storageInitError);
        return 2;
    }
#endif

    canopen_app_resetCommunication();
 8006dca:	f000 f80d 	bl	8006de8 <canopen_app_resetCommunication>
    return 0;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	20000454 	.word	0x20000454
 8006ddc:	20000458 	.word	0x20000458
 8006de0:	0800ba30 	.word	0x0800ba30
 8006de4:	0800ba50 	.word	0x0800ba50

08006de8 <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication() {
 8006de8:	b590      	push	{r4, r7, lr}
 8006dea:	b08f      	sub	sp, #60	@ 0x3c
 8006dec:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 8006dee:	487d      	ldr	r0, [pc, #500]	@ (8006fe4 <canopen_app_resetCommunication+0x1fc>)
 8006df0:	f004 f8e0 	bl	800afb4 <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 8006df4:	4b7c      	ldr	r3, [pc, #496]	@ (8006fe8 <canopen_app_resetCommunication+0x200>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8006dfe:	4b7b      	ldr	r3, [pc, #492]	@ (8006fec <canopen_app_resetCommunication+0x204>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 f9bc 	bl	8007180 <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 8006e08:	4b77      	ldr	r3, [pc, #476]	@ (8006fe8 <canopen_app_resetCommunication+0x200>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 faa6 	bl	8007360 <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 8006e14:	4b74      	ldr	r3, [pc, #464]	@ (8006fe8 <canopen_app_resetCommunication+0x200>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a74      	ldr	r2, [pc, #464]	@ (8006fec <canopen_app_resetCommunication+0x204>)
 8006e1a:	6811      	ldr	r1, [r2, #0]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7ff fba6 	bl	8006570 <CO_CANinit>
 8006e24:	4603      	mov	r3, r0
 8006e26:	461a      	mov	r2, r3
 8006e28:	4b71      	ldr	r3, [pc, #452]	@ (8006ff0 <canopen_app_resetCommunication+0x208>)
 8006e2a:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006e2c:	4b70      	ldr	r3, [pc, #448]	@ (8006ff0 <canopen_app_resetCommunication+0x208>)
 8006e2e:	f993 3000 	ldrsb.w	r3, [r3]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d008      	beq.n	8006e48 <canopen_app_resetCommunication+0x60>
        log_printf("Error: CAN initialization failed: %d\n", err);
 8006e36:	4b6e      	ldr	r3, [pc, #440]	@ (8006ff0 <canopen_app_resetCommunication+0x208>)
 8006e38:	f993 3000 	ldrsb.w	r3, [r3]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	486d      	ldr	r0, [pc, #436]	@ (8006ff4 <canopen_app_resetCommunication+0x20c>)
 8006e40:	f004 f850 	bl	800aee4 <iprintf>
        return 1;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e0c8      	b.n	8006fda <canopen_app_resetCommunication+0x1f2>
    }

    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006e48:	4b6b      	ldr	r3, [pc, #428]	@ (8006ff8 <canopen_app_resetCommunication+0x210>)
 8006e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e4c:	60bb      	str	r3, [r7, #8]
                                                .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 8006e4e:	4b6a      	ldr	r3, [pc, #424]	@ (8006ff8 <canopen_app_resetCommunication+0x210>)
 8006e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006e52:	60fb      	str	r3, [r7, #12]
                                                .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 8006e54:	4b68      	ldr	r3, [pc, #416]	@ (8006ff8 <canopen_app_resetCommunication+0x210>)
 8006e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006e58:	613b      	str	r3, [r7, #16]
                                                .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber}};
 8006e5a:	4b67      	ldr	r3, [pc, #412]	@ (8006ff8 <canopen_app_resetCommunication+0x210>)
 8006e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006e5e:	617b      	str	r3, [r7, #20]
    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 8006e60:	4b61      	ldr	r3, [pc, #388]	@ (8006fe8 <canopen_app_resetCommunication+0x200>)
 8006e62:	6818      	ldr	r0, [r3, #0]
 8006e64:	4b61      	ldr	r3, [pc, #388]	@ (8006fec <canopen_app_resetCommunication+0x204>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	4b60      	ldr	r3, [pc, #384]	@ (8006fec <canopen_app_resetCommunication+0x204>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	3302      	adds	r3, #2
 8006e70:	f107 0108 	add.w	r1, r7, #8
 8006e74:	f7ff fba8 	bl	80065c8 <CO_LSSinit>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	4b5c      	ldr	r3, [pc, #368]	@ (8006ff0 <canopen_app_resetCommunication+0x208>)
 8006e7e:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006e80:	4b5b      	ldr	r3, [pc, #364]	@ (8006ff0 <canopen_app_resetCommunication+0x208>)
 8006e82:	f993 3000 	ldrsb.w	r3, [r3]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d008      	beq.n	8006e9c <canopen_app_resetCommunication+0xb4>
        log_printf("Error: LSS slave initialization failed: %d\n", err);
 8006e8a:	4b59      	ldr	r3, [pc, #356]	@ (8006ff0 <canopen_app_resetCommunication+0x208>)
 8006e8c:	f993 3000 	ldrsb.w	r3, [r3]
 8006e90:	4619      	mov	r1, r3
 8006e92:	485a      	ldr	r0, [pc, #360]	@ (8006ffc <canopen_app_resetCommunication+0x214>)
 8006e94:	f004 f826 	bl	800aee4 <iprintf>
        return 2;
 8006e98:	2302      	movs	r3, #2
 8006e9a:	e09e      	b.n	8006fda <canopen_app_resetCommunication+0x1f2>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 8006e9c:	4b53      	ldr	r3, [pc, #332]	@ (8006fec <canopen_app_resetCommunication+0x204>)
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	4b52      	ldr	r3, [pc, #328]	@ (8006fec <canopen_app_resetCommunication+0x204>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	7812      	ldrb	r2, [r2, #0]
 8006ea6:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object */
 8006eac:	4b4e      	ldr	r3, [pc, #312]	@ (8006fe8 <canopen_app_resetCommunication+0x200>)
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	4b53      	ldr	r3, [pc, #332]	@ (8007000 <canopen_app_resetCommunication+0x218>)
 8006eb2:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t */
                         FIRST_HB_TIME,        /* firstHBTime_ms */
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer */
                         canopenNodeSTM32->activeNodeID, &errInfo);
 8006eb4:	4b4d      	ldr	r3, [pc, #308]	@ (8006fec <canopen_app_resetCommunication+0x204>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object */
 8006eb8:	785b      	ldrb	r3, [r3, #1]
 8006eba:	1d3a      	adds	r2, r7, #4
 8006ebc:	9207      	str	r2, [sp, #28]
 8006ebe:	9306      	str	r3, [sp, #24]
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	9305      	str	r3, [sp, #20]
 8006ec4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8006ec8:	9304      	str	r3, [sp, #16]
 8006eca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006ece:	9303      	str	r3, [sp, #12]
 8006ed0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8006ed4:	9302      	str	r3, [sp, #8]
 8006ed6:	f242 1311 	movw	r3, #8465	@ 0x2111
 8006eda:	9301      	str	r3, [sp, #4]
 8006edc:	2300      	movs	r3, #0
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	f7ff fb9b 	bl	8006620 <CO_CANopenInit>
 8006eea:	4603      	mov	r3, r0
 8006eec:	461a      	mov	r2, r3
 8006eee:	4b40      	ldr	r3, [pc, #256]	@ (8006ff0 <canopen_app_resetCommunication+0x208>)
 8006ef0:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 8006ef2:	4b3f      	ldr	r3, [pc, #252]	@ (8006ff0 <canopen_app_resetCommunication+0x208>)
 8006ef4:	f993 3000 	ldrsb.w	r3, [r3]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01a      	beq.n	8006f32 <canopen_app_resetCommunication+0x14a>
 8006efc:	4b3c      	ldr	r3, [pc, #240]	@ (8006ff0 <canopen_app_resetCommunication+0x208>)
 8006efe:	f993 3000 	ldrsb.w	r3, [r3]
 8006f02:	f113 0f13 	cmn.w	r3, #19
 8006f06:	d014      	beq.n	8006f32 <canopen_app_resetCommunication+0x14a>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8006f08:	4b39      	ldr	r3, [pc, #228]	@ (8006ff0 <canopen_app_resetCommunication+0x208>)
 8006f0a:	f993 3000 	ldrsb.w	r3, [r3]
 8006f0e:	f113 0f0c 	cmn.w	r3, #12
 8006f12:	d105      	bne.n	8006f20 <canopen_app_resetCommunication+0x138>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4619      	mov	r1, r3
 8006f18:	483a      	ldr	r0, [pc, #232]	@ (8007004 <canopen_app_resetCommunication+0x21c>)
 8006f1a:	f003 ffe3 	bl	800aee4 <iprintf>
 8006f1e:	e006      	b.n	8006f2e <canopen_app_resetCommunication+0x146>
        } else {
            log_printf("Error: CANopen initialization failed: %d\n", err);
 8006f20:	4b33      	ldr	r3, [pc, #204]	@ (8006ff0 <canopen_app_resetCommunication+0x208>)
 8006f22:	f993 3000 	ldrsb.w	r3, [r3]
 8006f26:	4619      	mov	r1, r3
 8006f28:	4837      	ldr	r0, [pc, #220]	@ (8007008 <canopen_app_resetCommunication+0x220>)
 8006f2a:	f003 ffdb 	bl	800aee4 <iprintf>
        }
        return 3;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e053      	b.n	8006fda <canopen_app_resetCommunication+0x1f2>
    }

    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 8006f32:	4b2d      	ldr	r3, [pc, #180]	@ (8006fe8 <canopen_app_resetCommunication+0x200>)
 8006f34:	6818      	ldr	r0, [r3, #0]
 8006f36:	4b2c      	ldr	r3, [pc, #176]	@ (8006fe8 <canopen_app_resetCommunication+0x200>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	69d9      	ldr	r1, [r3, #28]
 8006f3c:	4b30      	ldr	r3, [pc, #192]	@ (8007000 <canopen_app_resetCommunication+0x218>)
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	4b2a      	ldr	r3, [pc, #168]	@ (8006fec <canopen_app_resetCommunication+0x204>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	785c      	ldrb	r4, [r3, #1]
 8006f46:	1d3b      	adds	r3, r7, #4
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	4623      	mov	r3, r4
 8006f4c:	f7ff fcac 	bl	80068a8 <CO_CANopenInitPDO>
 8006f50:	4603      	mov	r3, r0
 8006f52:	461a      	mov	r2, r3
 8006f54:	4b26      	ldr	r3, [pc, #152]	@ (8006ff0 <canopen_app_resetCommunication+0x208>)
 8006f56:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006f58:	4b25      	ldr	r3, [pc, #148]	@ (8006ff0 <canopen_app_resetCommunication+0x208>)
 8006f5a:	f993 3000 	ldrsb.w	r3, [r3]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d014      	beq.n	8006f8c <canopen_app_resetCommunication+0x1a4>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8006f62:	4b23      	ldr	r3, [pc, #140]	@ (8006ff0 <canopen_app_resetCommunication+0x208>)
 8006f64:	f993 3000 	ldrsb.w	r3, [r3]
 8006f68:	f113 0f0c 	cmn.w	r3, #12
 8006f6c:	d105      	bne.n	8006f7a <canopen_app_resetCommunication+0x192>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4619      	mov	r1, r3
 8006f72:	4824      	ldr	r0, [pc, #144]	@ (8007004 <canopen_app_resetCommunication+0x21c>)
 8006f74:	f003 ffb6 	bl	800aee4 <iprintf>
 8006f78:	e006      	b.n	8006f88 <canopen_app_resetCommunication+0x1a0>
        } else {
            log_printf("Error: PDO initialization failed: %d\n", err);
 8006f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ff0 <canopen_app_resetCommunication+0x208>)
 8006f7c:	f993 3000 	ldrsb.w	r3, [r3]
 8006f80:	4619      	mov	r1, r3
 8006f82:	4822      	ldr	r0, [pc, #136]	@ (800700c <canopen_app_resetCommunication+0x224>)
 8006f84:	f003 ffae 	bl	800aee4 <iprintf>
        }
        return 4;
 8006f88:	2304      	movs	r3, #4
 8006f8a:	e026      	b.n	8006fda <canopen_app_resetCommunication+0x1f2>
    }

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 8006f8c:	4b17      	ldr	r3, [pc, #92]	@ (8006fec <canopen_app_resetCommunication+0x204>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f003 fada 	bl	800a54c <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured) {
 8006f98:	4b13      	ldr	r3, [pc, #76]	@ (8006fe8 <canopen_app_resetCommunication+0x200>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <canopen_app_resetCommunication+0x1c0>
        if (storageInitError != 0) {
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
        }
#endif
    } else {
        log_printf("CANopenNode - Node-id not initialized\n");
 8006fa2:	481b      	ldr	r0, [pc, #108]	@ (8007010 <canopen_app_resetCommunication+0x228>)
 8006fa4:	f004 f806 	bl	800afb4 <puts>
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 8006fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8006fe8 <canopen_app_resetCommunication+0x200>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 f8f6 	bl	80071a0 <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 8006fb4:	4817      	ldr	r0, [pc, #92]	@ (8007014 <canopen_app_resetCommunication+0x22c>)
 8006fb6:	f003 fffd 	bl	800afb4 <puts>
    fflush(stdout);
 8006fba:	4b17      	ldr	r3, [pc, #92]	@ (8007018 <canopen_app_resetCommunication+0x230>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f003 feb9 	bl	800ad38 <fflush>
    time_old = time_current = HAL_GetTick();
 8006fc6:	f001 fa75 	bl	80084b4 <HAL_GetTick>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	4a13      	ldr	r2, [pc, #76]	@ (800701c <canopen_app_resetCommunication+0x234>)
 8006fce:	6013      	str	r3, [r2, #0]
 8006fd0:	4b12      	ldr	r3, [pc, #72]	@ (800701c <canopen_app_resetCommunication+0x234>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a12      	ldr	r2, [pc, #72]	@ (8007020 <canopen_app_resetCommunication+0x238>)
 8006fd6:	6013      	str	r3, [r2, #0]
    return 0;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	371c      	adds	r7, #28
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd90      	pop	{r4, r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	0800ba78 	.word	0x0800ba78
 8006fe8:	20000458 	.word	0x20000458
 8006fec:	20000454 	.word	0x20000454
 8006ff0:	20000464 	.word	0x20000464
 8006ff4:	0800baa0 	.word	0x0800baa0
 8006ff8:	20000000 	.word	0x20000000
 8006ffc:	0800bac8 	.word	0x0800bac8
 8007000:	200003cc 	.word	0x200003cc
 8007004:	0800baf4 	.word	0x0800baf4
 8007008:	0800bb1c 	.word	0x0800bb1c
 800700c:	0800bb48 	.word	0x0800bb48
 8007010:	0800bb70 	.word	0x0800bb70
 8007014:	0800bb98 	.word	0x0800bb98
 8007018:	200003e8 	.word	0x200003e8
 800701c:	20000460 	.word	0x20000460
 8007020:	2000045c 	.word	0x2000045c

08007024 <canopen_app_process>:

void
canopen_app_process() {
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 800702a:	f001 fa43 	bl	80084b4 <HAL_GetTick>
 800702e:	4603      	mov	r3, r0
 8007030:	4a2c      	ldr	r2, [pc, #176]	@ (80070e4 <canopen_app_process+0xc0>)
 8007032:	6013      	str	r3, [r2, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 8007034:	4b2b      	ldr	r3, [pc, #172]	@ (80070e4 <canopen_app_process+0xc0>)
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	4b2b      	ldr	r3, [pc, #172]	@ (80070e8 <canopen_app_process+0xc4>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	429a      	cmp	r2, r3
 800703e:	d04c      	beq.n	80070da <canopen_app_process+0xb6>
        /* CANopen process */
        CO_NMT_reset_cmd_t reset_status;
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 8007040:	4b28      	ldr	r3, [pc, #160]	@ (80070e4 <canopen_app_process+0xc0>)
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	4b28      	ldr	r3, [pc, #160]	@ (80070e8 <canopen_app_process+0xc4>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800704e:	fb02 f303 	mul.w	r3, r2, r3
 8007052:	607b      	str	r3, [r7, #4]
        time_old = time_current;
 8007054:	4b23      	ldr	r3, [pc, #140]	@ (80070e4 <canopen_app_process+0xc0>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a23      	ldr	r2, [pc, #140]	@ (80070e8 <canopen_app_process+0xc4>)
 800705a:	6013      	str	r3, [r2, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 800705c:	4b23      	ldr	r3, [pc, #140]	@ (80070ec <canopen_app_process+0xc8>)
 800705e:	6818      	ldr	r0, [r3, #0]
 8007060:	2300      	movs	r3, #0
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	2100      	movs	r1, #0
 8007066:	f7ff fce7 	bl	8006a38 <CO_process>
 800706a:	4603      	mov	r3, r0
 800706c:	70fb      	strb	r3, [r7, #3]
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 800706e:	4b1f      	ldr	r3, [pc, #124]	@ (80070ec <canopen_app_process+0xc8>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007074:	7a5a      	ldrb	r2, [r3, #9]
 8007076:	4b1e      	ldr	r3, [pc, #120]	@ (80070f0 <canopen_app_process+0xcc>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	09d2      	lsrs	r2, r2, #7
 800707c:	b2d2      	uxtb	r2, r2
 800707e:	745a      	strb	r2, [r3, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 8007080:	4b1a      	ldr	r3, [pc, #104]	@ (80070ec <canopen_app_process+0xc8>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007086:	7a9a      	ldrb	r2, [r3, #10]
 8007088:	4b19      	ldr	r3, [pc, #100]	@ (80070f0 <canopen_app_process+0xcc>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	09d2      	lsrs	r2, r2, #7
 800708e:	b2d2      	uxtb	r2, r2
 8007090:	741a      	strb	r2, [r3, #16]

        if (reset_status == CO_RESET_COMM) {
 8007092:	78fb      	ldrb	r3, [r7, #3]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d118      	bne.n	80070ca <canopen_app_process+0xa6>
            /* delete objects from memory */
        	HAL_TIM_Base_Stop_IT(canopenNodeSTM32->timerHandle);
 8007098:	4b15      	ldr	r3, [pc, #84]	@ (80070f0 <canopen_app_process+0xcc>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	4618      	mov	r0, r3
 80070a0:	f003 fac4 	bl	800a62c <HAL_TIM_Base_Stop_IT>
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 80070a4:	4b12      	ldr	r3, [pc, #72]	@ (80070f0 <canopen_app_process+0xcc>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f000 f869 	bl	8007180 <CO_CANsetConfigurationMode>
            CO_delete(CO);
 80070ae:	4b0f      	ldr	r3, [pc, #60]	@ (80070ec <canopen_app_process+0xc8>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7ff f9fd 	bl	80064b2 <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 80070b8:	480e      	ldr	r0, [pc, #56]	@ (80070f4 <canopen_app_process+0xd0>)
 80070ba:	f003 ff7b 	bl	800afb4 <puts>
            canopen_app_init(canopenNodeSTM32); // Reset Communication routine
 80070be:	4b0c      	ldr	r3, [pc, #48]	@ (80070f0 <canopen_app_process+0xcc>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7ff fe5c 	bl	8006d80 <canopen_app_init>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 80070c8:	e007      	b.n	80070da <canopen_app_process+0xb6>
        } else if (reset_status == CO_RESET_APP) {
 80070ca:	78fb      	ldrb	r3, [r7, #3]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d104      	bne.n	80070da <canopen_app_process+0xb6>
            log_printf("CANopenNode Device Reset\n");
 80070d0:	4809      	ldr	r0, [pc, #36]	@ (80070f8 <canopen_app_process+0xd4>)
 80070d2:	f003 ff6f 	bl	800afb4 <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 80070d6:	f002 f9d2 	bl	800947e <HAL_NVIC_SystemReset>
}
 80070da:	bf00      	nop
 80070dc:	3708      	adds	r7, #8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	20000460 	.word	0x20000460
 80070e8:	2000045c 	.word	0x2000045c
 80070ec:	20000458 	.word	0x20000458
 80070f0:	20000454 	.word	0x20000454
 80070f4:	0800bbb4 	.word	0x0800bbb4
 80070f8:	0800bbdc 	.word	0x0800bbdc

080070fc <canopen_app_interrupt>:

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
    CO_LOCK_OD(CO->CANmodule);
 8007102:	4b1e      	ldr	r3, [pc, #120]	@ (800717c <canopen_app_interrupt+0x80>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007108:	f3ef 8210 	mrs	r2, PRIMASK
 800710c:	607a      	str	r2, [r7, #4]
  return(result);
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8007112:	b672      	cpsid	i
}
 8007114:	bf00      	nop
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 8007116:	4b19      	ldr	r3, [pc, #100]	@ (800717c <canopen_app_interrupt+0x80>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d120      	bne.n	8007162 <canopen_app_interrupt+0x66>
 8007120:	4b16      	ldr	r3, [pc, #88]	@ (800717c <canopen_app_interrupt+0x80>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d01a      	beq.n	8007162 <canopen_app_interrupt+0x66>
        bool_t syncWas = false;
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000; // 1ms second
 8007130:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007134:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 8007136:	4b11      	ldr	r3, [pc, #68]	@ (800717c <canopen_app_interrupt+0x80>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2200      	movs	r2, #0
 800713c:	68b9      	ldr	r1, [r7, #8]
 800713e:	4618      	mov	r0, r3
 8007140:	f7ff fd72 	bl	8006c28 <CO_process_SYNC>
 8007144:	60f8      	str	r0, [r7, #12]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 8007146:	4b0d      	ldr	r3, [pc, #52]	@ (800717c <canopen_app_interrupt+0x80>)
 8007148:	6818      	ldr	r0, [r3, #0]
 800714a:	2300      	movs	r3, #0
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	68f9      	ldr	r1, [r7, #12]
 8007150:	f7ff fdad 	bl	8006cae <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 8007154:	4b09      	ldr	r3, [pc, #36]	@ (800717c <canopen_app_interrupt+0x80>)
 8007156:	6818      	ldr	r0, [r3, #0]
 8007158:	2300      	movs	r3, #0
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	68f9      	ldr	r1, [r7, #12]
 800715e:	f7ff fdda 	bl	8006d16 <CO_process_TPDO>
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 8007162:	4b06      	ldr	r3, [pc, #24]	@ (800717c <canopen_app_interrupt+0x80>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800716a:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	f383 8810 	msr	PRIMASK, r3
}
 8007172:	bf00      	nop
}
 8007174:	bf00      	nop
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	20000458 	.word	0x20000458

08007180 <CO_CANsetConfigurationMode>:
#define CANID_MASK 0x07FF /*!< CAN standard ID mask */
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d004      	beq.n	8007198 <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	4618      	mov	r0, r3
 8007194:	f001 fbba 	bl	800890c <HAL_CAN_Stop>
#endif
    }
}
 8007198:	bf00      	nop
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00b      	beq.n	80071c8 <CO_CANsetNormalMode+0x28>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f001 fb64 	bl	8008884 <HAL_CAN_Start>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d102      	bne.n	80071c8 <CO_CANsetNormalMode+0x28>
#endif
        {
            CANmodule->CANnormal = true;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	615a      	str	r2, [r3, #20]
        }
    }
}
 80071c8:	bf00      	nop
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b090      	sub	sp, #64	@ 0x40
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
 80071dc:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d005      	beq.n	80071f0 <CO_CANmodule_init+0x20>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d002      	beq.n	80071f0 <CO_CANmodule_init+0x20>
 80071ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d102      	bne.n	80071f6 <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80071f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071f4:	e0ab      	b.n	800734e <CO_CANmodule_init+0x17e>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 80071fc:	4a56      	ldr	r2, [pc, #344]	@ (8007358 <CO_CANmodule_init+0x188>)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6013      	str	r3, [r2, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	887a      	ldrh	r2, [r7, #2]
 800720c:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007212:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800721a:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2201      	movs	r2, #1
 8007238:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	849a      	strh	r2, [r3, #36]	@ 0x24
    CANmodule->errOld = 0U;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 8007246:	2300      	movs	r3, #0
 8007248:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800724a:	e02b      	b.n	80072a4 <CO_CANmodule_init+0xd4>
        rxArray[i].ident = 0U;
 800724c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800724e:	4613      	mov	r3, r2
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	4413      	add	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	461a      	mov	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4413      	add	r3, r2
 800725c:	2200      	movs	r2, #0
 800725e:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 8007260:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8007262:	4613      	mov	r3, r2
 8007264:	005b      	lsls	r3, r3, #1
 8007266:	4413      	add	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	461a      	mov	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4413      	add	r3, r2
 8007270:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007274:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 8007276:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8007278:	4613      	mov	r3, r2
 800727a:	005b      	lsls	r3, r3, #1
 800727c:	4413      	add	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	461a      	mov	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4413      	add	r3, r2
 8007286:	2200      	movs	r2, #0
 8007288:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 800728a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800728c:	4613      	mov	r3, r2
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	4413      	add	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	461a      	mov	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4413      	add	r3, r2
 800729a:	2200      	movs	r2, #0
 800729c:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 800729e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80072a0:	3301      	adds	r3, #1
 80072a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80072a4:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80072a6:	887b      	ldrh	r3, [r7, #2]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d3cf      	bcc.n	800724c <CO_CANmodule_init+0x7c>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 80072ac:	2300      	movs	r3, #0
 80072ae:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80072b0:	e00c      	b.n	80072cc <CO_CANmodule_init+0xfc>
        txArray[i].bufferFull = false;
 80072b2:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80072b4:	4613      	mov	r3, r2
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	4413      	add	r3, r2
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	461a      	mov	r2, r3
 80072be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072c0:	4413      	add	r3, r2
 80072c2:	2200      	movs	r2, #0
 80072c4:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 80072c6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80072c8:	3301      	adds	r3, #1
 80072ca:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80072cc:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80072ce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d3ed      	bcc.n	80072b2 <CO_CANmodule_init+0xe2>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	4798      	blx	r3
#else
    CAN_FilterTypeDef FilterConfig;
#if defined(CAN)
    FilterConfig.FilterBank = 0;
#else
    if (((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance == CAN1) {
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a1d      	ldr	r2, [pc, #116]	@ (800735c <CO_CANmodule_init+0x18c>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d102      	bne.n	80072f0 <CO_CANmodule_init+0x120>
        FilterConfig.FilterBank = 0;
 80072ea:	2300      	movs	r3, #0
 80072ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072ee:	e001      	b.n	80072f4 <CO_CANmodule_init+0x124>
    } else {
        FilterConfig.FilterBank = 14;
 80072f0:	230e      	movs	r3, #14
 80072f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
#endif
    FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80072f8:	2301      	movs	r3, #1
 80072fa:	633b      	str	r3, [r7, #48]	@ 0x30
    FilterConfig.FilterIdHigh = 0x0;
 80072fc:	2300      	movs	r3, #0
 80072fe:	617b      	str	r3, [r7, #20]
    FilterConfig.FilterIdLow = 0x0;
 8007300:	2300      	movs	r3, #0
 8007302:	61bb      	str	r3, [r7, #24]
    FilterConfig.FilterMaskIdHigh = 0x0;
 8007304:	2300      	movs	r3, #0
 8007306:	61fb      	str	r3, [r7, #28]
    FilterConfig.FilterMaskIdLow = 0x0;
 8007308:	2300      	movs	r3, #0
 800730a:	623b      	str	r3, [r7, #32]
    FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800730c:	2300      	movs	r3, #0
 800730e:	627b      	str	r3, [r7, #36]	@ 0x24

    FilterConfig.FilterActivation = ENABLE;
 8007310:	2301      	movs	r3, #1
 8007312:	637b      	str	r3, [r7, #52]	@ 0x34
    FilterConfig.SlaveStartFilterBank = 14;
 8007314:	230e      	movs	r3, #14
 8007316:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (HAL_CAN_ConfigFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, &FilterConfig) != HAL_OK) {
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f107 0214 	add.w	r2, r7, #20
 8007320:	4611      	mov	r1, r2
 8007322:	4618      	mov	r0, r3
 8007324:	f001 f9ce 	bl	80086c4 <HAL_CAN_ConfigFilter>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d002      	beq.n	8007334 <CO_CANmodule_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800732e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007332:	e00c      	b.n	800734e <CO_CANmodule_init+0x17e>
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#else
    if (HAL_CAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle, CAN_IT_RX_FIFO0_MSG_PENDING
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	2113      	movs	r1, #19
 800733a:	4618      	mov	r0, r3
 800733c:	f001 fd56 	bl	8008dec <HAL_CAN_ActivateNotification>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <CO_CANmodule_init+0x17c>
                                                                                 | CAN_IT_RX_FIFO1_MSG_PENDING
                                                                                 | CAN_IT_TX_MAILBOX_EMPTY)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007346:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800734a:	e000      	b.n	800734e <CO_CANmodule_init+0x17e>
    }
#endif

    return CO_ERROR_NO;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3740      	adds	r7, #64	@ 0x40
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	20000468 	.word	0x20000468
 800735c:	40006400 	.word	0x40006400

08007360 <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d009      	beq.n	8007382 <CO_CANmodule_disable+0x22>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d005      	beq.n	8007382 <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	4618      	mov	r0, r3
 800737e:	f001 fac5 	bl	800890c <HAL_CAN_Stop>
#endif
    }
}
 8007382:	bf00      	nop
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
	...

0800738c <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 800738c:	b480      	push	{r7}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	4608      	mov	r0, r1
 8007396:	4611      	mov	r1, r2
 8007398:	461a      	mov	r2, r3
 800739a:	4603      	mov	r3, r0
 800739c:	817b      	strh	r3, [r7, #10]
 800739e:	460b      	mov	r3, r1
 80073a0:	813b      	strh	r3, [r7, #8]
 80073a2:	4613      	mov	r3, r2
 80073a4:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80073a6:	2300      	movs	r3, #0
 80073a8:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d03c      	beq.n	800742a <CO_CANrxBufferInit+0x9e>
 80073b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d039      	beq.n	800742a <CO_CANrxBufferInit+0x9e>
 80073b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d036      	beq.n	800742a <CO_CANrxBufferInit+0x9e>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	891b      	ldrh	r3, [r3, #8]
 80073c0:	897a      	ldrh	r2, [r7, #10]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d231      	bcs.n	800742a <CO_CANrxBufferInit+0x9e>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6859      	ldr	r1, [r3, #4]
 80073ca:	897a      	ldrh	r2, [r7, #10]
 80073cc:	4613      	mov	r3, r2
 80073ce:	005b      	lsls	r3, r3, #1
 80073d0:	4413      	add	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	440b      	add	r3, r1
 80073d6:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073dc:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073e2:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 80073e4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80073e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073ec:	b21b      	sxth	r3, r3
 80073ee:	6a3a      	ldr	r2, [r7, #32]
 80073f0:	2a00      	cmp	r2, #0
 80073f2:	d001      	beq.n	80073f8 <CO_CANrxBufferInit+0x6c>
 80073f4:	4a13      	ldr	r2, [pc, #76]	@ (8007444 <CO_CANrxBufferInit+0xb8>)
 80073f6:	e000      	b.n	80073fa <CO_CANrxBufferInit+0x6e>
 80073f8:	2200      	movs	r2, #0
 80073fa:	4313      	orrs	r3, r2
 80073fc:	b21b      	sxth	r3, r3
 80073fe:	b29a      	uxth	r2, r3
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 8007404:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007408:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800740c:	b21b      	sxth	r3, r3
 800740e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007416:	b21b      	sxth	r3, r3
 8007418:	b29a      	uxth	r2, r3
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d004      	beq.n	8007430 <CO_CANrxBufferInit+0xa4>
            __NOP();
 8007426:	bf00      	nop
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007428:	e002      	b.n	8007430 <CO_CANrxBufferInit+0xa4>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 800742a:	23ff      	movs	r3, #255	@ 0xff
 800742c:	75fb      	strb	r3, [r7, #23]
 800742e:	e000      	b.n	8007432 <CO_CANrxBufferInit+0xa6>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007430:	bf00      	nop
    }

    return ret;
 8007432:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007436:	4618      	mov	r0, r3
 8007438:	371c      	adds	r7, #28
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	ffff8000 	.word	0xffff8000

08007448 <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 8007448:	b480      	push	{r7}
 800744a:	b087      	sub	sp, #28
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	607b      	str	r3, [r7, #4]
 8007452:	460b      	mov	r3, r1
 8007454:	817b      	strh	r3, [r7, #10]
 8007456:	4613      	mov	r3, r2
 8007458:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t* buffer = NULL;
 800745a:	2300      	movs	r3, #0
 800745c:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d024      	beq.n	80074ae <CO_CANtxBufferInit+0x66>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8a1b      	ldrh	r3, [r3, #16]
 8007468:	897a      	ldrh	r2, [r7, #10]
 800746a:	429a      	cmp	r2, r3
 800746c:	d21f      	bcs.n	80074ae <CO_CANtxBufferInit+0x66>
        buffer = &CANmodule->txArray[index];
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	68d9      	ldr	r1, [r3, #12]
 8007472:	897a      	ldrh	r2, [r7, #10]
 8007474:	4613      	mov	r3, r2
 8007476:	005b      	lsls	r3, r3, #1
 8007478:	4413      	add	r3, r2
 800747a:	00db      	lsls	r3, r3, #3
 800747c:	440b      	add	r3, r1
 800747e:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 8007480:	893b      	ldrh	r3, [r7, #8]
 8007482:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	2a00      	cmp	r2, #0
 800748a:	d002      	beq.n	8007492 <CO_CANtxBufferInit+0x4a>
 800748c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007490:	e000      	b.n	8007494 <CO_CANtxBufferInit+0x4c>
 8007492:	2200      	movs	r2, #0
 8007494:	431a      	orrs	r2, r3
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f897 2020 	ldrb.w	r2, [r7, #32]
 80074a0:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	2200      	movs	r2, #0
 80074a6:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074ac:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 80074ae:	697b      	ldr	r3, [r7, #20]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	371c      	adds	r7, #28
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 80074c6:	2300      	movs	r3, #0
 80074c8:	73fb      	strb	r3, [r7, #15]
            == HAL_OK;
    }
#else
    static CAN_TxHeaderTypeDef tx_hdr;
    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_CAN_GetTxMailboxesFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f001 fb34 	bl	8008b3e <HAL_CAN_GetTxMailboxesFreeLevel>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d028      	beq.n	800752e <prv_send_can_message+0x72>
        /*
    		 * RTR flag is part of identifier value
    		 * hence it needs to be properly decoded
    		 */
        tx_hdr.ExtId = 0u;
 80074dc:	4b16      	ldr	r3, [pc, #88]	@ (8007538 <prv_send_can_message+0x7c>)
 80074de:	2200      	movs	r2, #0
 80074e0:	605a      	str	r2, [r3, #4]
        tx_hdr.IDE = CAN_ID_STD;
 80074e2:	4b15      	ldr	r3, [pc, #84]	@ (8007538 <prv_send_can_message+0x7c>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	609a      	str	r2, [r3, #8]
        tx_hdr.DLC = buffer->DLC;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	791b      	ldrb	r3, [r3, #4]
 80074ec:	461a      	mov	r2, r3
 80074ee:	4b12      	ldr	r3, [pc, #72]	@ (8007538 <prv_send_can_message+0x7c>)
 80074f0:	611a      	str	r2, [r3, #16]
        tx_hdr.StdId = buffer->ident & CANID_MASK;
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074fa:	4a0f      	ldr	r2, [pc, #60]	@ (8007538 <prv_send_can_message+0x7c>)
 80074fc:	6013      	str	r3, [r2, #0]
        tx_hdr.RTR = (buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	0b9b      	lsrs	r3, r3, #14
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	4a0b      	ldr	r2, [pc, #44]	@ (8007538 <prv_send_can_message+0x7c>)
 800750a:	60d3      	str	r3, [r2, #12]

        uint32_t TxMailboxNum; // Transmission MailBox number

        /* Now add message to FIFO. Should not fail */
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6898      	ldr	r0, [r3, #8]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	1d5a      	adds	r2, r3, #5
 8007516:	f107 0308 	add.w	r3, r7, #8
 800751a:	4907      	ldr	r1, [pc, #28]	@ (8007538 <prv_send_can_message+0x7c>)
 800751c:	f001 fa3f 	bl	800899e <HAL_CAN_AddTxMessage>
 8007520:	4603      	mov	r3, r0
                                       &TxMailboxNum)
                  == HAL_OK;
 8007522:	2b00      	cmp	r3, #0
 8007524:	bf0c      	ite	eq
 8007526:	2301      	moveq	r3, #1
 8007528:	2300      	movne	r3, #0
 800752a:	b2db      	uxtb	r3, r3
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 800752c:	73fb      	strb	r3, [r7, #15]
    }
#endif
    return success;
 800752e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	2000046c 	.word	0x2000046c

0800753c <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 8007546:	2300      	movs	r3, #0
 8007548:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00c      	beq.n	800756c <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d106      	bne.n	8007568 <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	8a5b      	ldrh	r3, [r3, #18]
 800755e:	f043 0308 	orr.w	r3, r3, #8
 8007562:	b29a      	uxth	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 8007568:	23f7      	movs	r3, #247	@ 0xf7
 800756a:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800756c:	f3ef 8310 	mrs	r3, PRIMASK
 8007570:	613b      	str	r3, [r7, #16]
  return(result);
 8007572:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8007578:	b672      	cpsid	i
}
 800757a:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7ff ff9c 	bl	80074bc <prv_send_can_message>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d004      	beq.n	8007594 <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	695a      	ldr	r2, [r3, #20]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	61da      	str	r2, [r3, #28]
 8007592:	e009      	b.n	80075a8 <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	2201      	movs	r2, #1
 8007598:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800759e:	b29b      	uxth	r3, r3
 80075a0:	3301      	adds	r3, #1
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f383 8810 	msr	PRIMASK, r3
}
 80075b4:	bf00      	nop

    return err;
 80075b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <CO_CANclearPendingSyncPDOs>:

/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 80075c2:	b480      	push	{r7}
 80075c4:	b087      	sub	sp, #28
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 80075ca:	2300      	movs	r3, #0
 80075cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80075ce:	f3ef 8310 	mrs	r3, PRIMASK
 80075d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80075d4:	68fa      	ldr	r2, [r7, #12]

    CO_LOCK_CAN_SEND(CANmodule);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 80075da:	b672      	cpsid	i
}
 80075dc:	bf00      	nop
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	69db      	ldr	r3, [r3, #28]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d004      	beq.n	80075f0 <CO_CANclearPendingSyncPDOs+0x2e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 80075ec:	2301      	movs	r3, #1
 80075ee:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if (CANmodule->CANtxCount > 0) {
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d032      	beq.n	8007660 <CO_CANclearPendingSyncPDOs+0x9e>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	8a1b      	ldrh	r3, [r3, #16]
 80075fe:	827b      	strh	r3, [r7, #18]
 8007600:	e02b      	b.n	800765a <CO_CANclearPendingSyncPDOs+0x98>
            if (CANmodule->txArray[i].bufferFull) {
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68d9      	ldr	r1, [r3, #12]
 8007606:	8a7a      	ldrh	r2, [r7, #18]
 8007608:	4613      	mov	r3, r2
 800760a:	005b      	lsls	r3, r3, #1
 800760c:	4413      	add	r3, r2
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	440b      	add	r3, r1
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d01d      	beq.n	8007654 <CO_CANclearPendingSyncPDOs+0x92>
                if (CANmodule->txArray[i].syncFlag) {
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	68d9      	ldr	r1, [r3, #12]
 800761c:	8a7a      	ldrh	r2, [r7, #18]
 800761e:	4613      	mov	r3, r2
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	4413      	add	r3, r2
 8007624:	00db      	lsls	r3, r3, #3
 8007626:	440b      	add	r3, r1
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d012      	beq.n	8007654 <CO_CANclearPendingSyncPDOs+0x92>
                    CANmodule->txArray[i].bufferFull = false;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68d9      	ldr	r1, [r3, #12]
 8007632:	8a7a      	ldrh	r2, [r7, #18]
 8007634:	4613      	mov	r3, r2
 8007636:	005b      	lsls	r3, r3, #1
 8007638:	4413      	add	r3, r2
 800763a:	00db      	lsls	r3, r3, #3
 800763c:	440b      	add	r3, r1
 800763e:	2200      	movs	r2, #0
 8007640:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007646:	b29b      	uxth	r3, r3
 8007648:	3b01      	subs	r3, #1
 800764a:	b29a      	uxth	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	849a      	strh	r2, [r3, #36]	@ 0x24
                    tpdoDeleted = 2U;
 8007650:	2302      	movs	r3, #2
 8007652:	617b      	str	r3, [r7, #20]
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8007654:	8a7b      	ldrh	r3, [r7, #18]
 8007656:	3b01      	subs	r3, #1
 8007658:	827b      	strh	r3, [r7, #18]
 800765a:	8a7b      	ldrh	r3, [r7, #18]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1d0      	bne.n	8007602 <CO_CANclearPendingSyncPDOs+0x40>
                }
            }
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007664:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	f383 8810 	msr	PRIMASK, r3
}
 800766c:	bf00      	nop
    if (tpdoDeleted) {
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d006      	beq.n	8007682 <CO_CANclearPendingSyncPDOs+0xc0>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	8a5b      	ldrh	r3, [r3, #18]
 8007678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800767c:	b29a      	uxth	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	825a      	strh	r2, [r3, #18]
    }
}
 8007682:	bf00      	nop
 8007684:	371c      	adds	r7, #28
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;

void
CO_CANmodule_process(CO_CANmodule_t* CANmodule) {
 800768e:	b480      	push	{r7}
 8007690:	b085      	sub	sp, #20
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
    uint32_t err = 0;
 8007696:	2300      	movs	r3, #0
 8007698:	60bb      	str	r3, [r7, #8]

        CANmodule->CANerrorStatus = status;
    }
#else

    err = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	f003 0307 	and.w	r3, r3, #7
 80076a8:	60bb      	str	r3, [r7, #8]
          & (CAN_ESR_BOFF | CAN_ESR_EPVF | CAN_ESR_EWGF);

    //    uint32_t esrVal = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR; Debug purpose
    if (CANmodule->errOld != err) {
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d02e      	beq.n	8007712 <CO_CANmodule_process+0x84>

        uint16_t status = CANmodule->CANerrorStatus;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	8a5b      	ldrh	r3, [r3, #18]
 80076b8:	81fb      	strh	r3, [r7, #14]

        CANmodule->errOld = err;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	629a      	str	r2, [r3, #40]	@ 0x28

        if (err & CAN_ESR_BOFF) {
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f003 0304 	and.w	r3, r3, #4
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d004      	beq.n	80076d4 <CO_CANmodule_process+0x46>
            status |= CO_CAN_ERRTX_BUS_OFF;
 80076ca:	89fb      	ldrh	r3, [r7, #14]
 80076cc:	f043 0304 	orr.w	r3, r3, #4
 80076d0:	81fb      	strh	r3, [r7, #14]
 80076d2:	e01b      	b.n	800770c <CO_CANmodule_process+0x7e>
            // In this driver, we assume that auto bus recovery is activated ! so this error will eventually handled automatically.

        } else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF
 80076d4:	89fb      	ldrh	r3, [r7, #14]
 80076d6:	f423 7341 	bic.w	r3, r3, #772	@ 0x304
 80076da:	f023 0303 	bic.w	r3, r3, #3
 80076de:	81fb      	strh	r3, [r7, #14]
                      ^ (CO_CAN_ERRTX_BUS_OFF | CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_WARNING
                         | CO_CAN_ERRTX_PASSIVE);

            if (err & CAN_ESR_EWGF) {
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d005      	beq.n	80076f6 <CO_CANmodule_process+0x68>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 80076ea:	89fb      	ldrh	r3, [r7, #14]
 80076ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076f0:	f043 0301 	orr.w	r3, r3, #1
 80076f4:	81fb      	strh	r3, [r7, #14]
            }

            if (err & CAN_ESR_EPVF) {
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d005      	beq.n	800770c <CO_CANmodule_process+0x7e>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 8007700:	89fb      	ldrh	r3, [r7, #14]
 8007702:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007706:	f043 0302 	orr.w	r3, r3, #2
 800770a:	81fb      	strh	r3, [r7, #14]
            }
        }

        CANmodule->CANerrorStatus = status;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	89fa      	ldrh	r2, [r7, #14]
 8007710:	825a      	strh	r2, [r3, #18]
    }

#endif
}
 8007712:	bf00      	nop
 8007714:	3714      	adds	r7, #20
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
	...

08007720 <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b08c      	sub	sp, #48	@ 0x30
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]

    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 800772c:	2300      	movs	r3, #0
 800772e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t index;            /* index of received message */
    uint32_t rcvMsgIdent;      /* identifier of the received message */
    uint8_t messageFound = 0;
 8007730:	2300      	movs	r3, #0
 8007732:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    }
    rcvMsgIdent = rcvMsg.ident;
#else
    static CAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_CAN_GetRxMessage(hcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 8007736:	f107 0314 	add.w	r3, r7, #20
 800773a:	3305      	adds	r3, #5
 800773c:	4a2c      	ldr	r2, [pc, #176]	@ (80077f0 <prv_read_can_received_msg+0xd0>)
 800773e:	68b9      	ldr	r1, [r7, #8]
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f001 fa31 	bl	8008ba8 <HAL_CAN_GetRxMessage>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d14c      	bne.n	80077e6 <prv_read_can_received_msg+0xc6>
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.StdId | (rx_hdr.RTR == CAN_RTR_REMOTE ? FLAG_RTR : 0x00);
 800774c:	4b28      	ldr	r3, [pc, #160]	@ (80077f0 <prv_read_can_received_msg+0xd0>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a27      	ldr	r2, [pc, #156]	@ (80077f0 <prv_read_can_received_msg+0xd0>)
 8007752:	68d2      	ldr	r2, [r2, #12]
 8007754:	2a02      	cmp	r2, #2
 8007756:	d102      	bne.n	800775e <prv_read_can_received_msg+0x3e>
 8007758:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800775c:	e000      	b.n	8007760 <prv_read_can_received_msg+0x40>
 800775e:	2200      	movs	r2, #0
 8007760:	4313      	orrs	r3, r2
 8007762:	617b      	str	r3, [r7, #20]
    rcvMsg.dlc = rx_hdr.DLC;
 8007764:	4b22      	ldr	r3, [pc, #136]	@ (80077f0 <prv_read_can_received_msg+0xd0>)
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	b2db      	uxtb	r3, r3
 800776a:	763b      	strb	r3, [r7, #24]
    rcvMsgIdent = rcvMsg.ident;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	627b      	str	r3, [r7, #36]	@ 0x24

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 8007770:	4b20      	ldr	r3, [pc, #128]	@ (80077f4 <prv_read_can_received_msg+0xd4>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <prv_read_can_received_msg+0x5e>
        __BKPT(0);
 800777a:	be00      	bkpt	0x0000
 800777c:	e01f      	b.n	80077be <prv_read_can_received_msg+0x9e>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 800777e:	4b1d      	ldr	r3, [pc, #116]	@ (80077f4 <prv_read_can_received_msg+0xd4>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8007786:	4b1b      	ldr	r3, [pc, #108]	@ (80077f4 <prv_read_can_received_msg+0xd4>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	891b      	ldrh	r3, [r3, #8]
 800778c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800778e:	e013      	b.n	80077b8 <prv_read_can_received_msg+0x98>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 8007790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007792:	881b      	ldrh	r3, [r3, #0]
 8007794:	461a      	mov	r2, r3
 8007796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007798:	4053      	eors	r3, r2
 800779a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800779c:	8852      	ldrh	r2, [r2, #2]
 800779e:	4013      	ands	r3, r2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d103      	bne.n	80077ac <prv_read_can_received_msg+0x8c>
                messageFound = 1;
 80077a4:	2301      	movs	r3, #1
 80077a6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                break;
 80077aa:	e008      	b.n	80077be <prv_read_can_received_msg+0x9e>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 80077ac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80077ae:	3b01      	subs	r3, #1
 80077b0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80077b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b4:	330c      	adds	r3, #12
 80077b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077b8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1e8      	bne.n	8007790 <prv_read_can_received_msg+0x70>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 80077be:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d010      	beq.n	80077e8 <prv_read_can_received_msg+0xc8>
 80077c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00d      	beq.n	80077e8 <prv_read_can_received_msg+0xc8>
 80077cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d009      	beq.n	80077e8 <prv_read_can_received_msg+0xc8>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 80077d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077da:	6852      	ldr	r2, [r2, #4]
 80077dc:	f107 0114 	add.w	r1, r7, #20
 80077e0:	4610      	mov	r0, r2
 80077e2:	4798      	blx	r3
 80077e4:	e000      	b.n	80077e8 <prv_read_can_received_msg+0xc8>
        return;
 80077e6:	bf00      	nop
    }
}
 80077e8:	3730      	adds	r7, #48	@ 0x30
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	20000484 	.word	0x20000484
 80077f4:	20000468 	.word	0x20000468

080077f8 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \brief           Rx FIFO 0 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO0, 0);
 8007800:	2200      	movs	r2, #0
 8007802:	2100      	movs	r1, #0
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7ff ff8b 	bl	8007720 <prv_read_can_received_msg>
}
 800780a:	bf00      	nop
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <HAL_CAN_RxFifo1MsgPendingCallback>:
 * \brief           Rx FIFO 1 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8007812:	b580      	push	{r7, lr}
 8007814:	b082      	sub	sp, #8
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO1, 0);
 800781a:	2200      	movs	r2, #0
 800781c:	2101      	movs	r1, #1
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7ff ff7e 	bl	8007720 <prv_read_can_received_msg>
}
 8007824:	bf00      	nop
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <CO_CANinterrupt_TX>:
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 * \param[in]       MailboxNumber: the mailbox number that has been transmitted
 */
void
CO_CANinterrupt_TX(CO_CANmodule_t* CANmodule, uint32_t MailboxNumber) {
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]

    CANmodule->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	621a      	str	r2, [r3, #32]
    CANmodule->bufferInhibitFlag = false;            /* Clear flag from previous message */
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	61da      	str	r2, [r3, #28]
    if (CANmodule->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007846:	b29b      	uxth	r3, r3
 8007848:	2b00      	cmp	r3, #0
 800784a:	d03d      	beq.n	80078c8 <CO_CANinterrupt_TX+0x9c>
        CO_CANtx_t* buffer = &CANmodule->txArray[0]; /* Start with first buffer handle */
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007852:	f3ef 8310 	mrs	r3, PRIMASK
 8007856:	60fb      	str	r3, [r7, #12]
  return(result);
 8007858:	68fa      	ldr	r2, [r7, #12]
		 * This function is always called from interrupt,
		 * however to make sure no preemption can happen, interrupts are anyway locked
		 * (unless you can guarantee no higher priority interrupt will try to access to CAN instance and send data,
		 *  then no need to lock interrupts..)
		 */
        CO_LOCK_CAN_SEND(CANmodule);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 800785e:	b672      	cpsid	i
}
 8007860:	bf00      	nop
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	8a1b      	ldrh	r3, [r3, #16]
 8007866:	827b      	strh	r3, [r7, #18]
 8007868:	e01e      	b.n	80078a8 <CO_CANinterrupt_TX+0x7c>
            /* Try to send message */
            if (buffer->bufferFull) {
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d014      	beq.n	800789c <CO_CANinterrupt_TX+0x70>
                if (prv_send_can_message(CANmodule, buffer)) {
 8007872:	6979      	ldr	r1, [r7, #20]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff fe21 	bl	80074bc <prv_send_can_message>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00d      	beq.n	800789c <CO_CANinterrupt_TX+0x70>
                    buffer->bufferFull = false;
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	2200      	movs	r2, #0
 8007884:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800788a:	b29b      	uxth	r3, r3
 800788c:	3b01      	subs	r3, #1
 800788e:	b29a      	uxth	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	849a      	strh	r2, [r3, #36]	@ 0x24
                    CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	695a      	ldr	r2, [r3, #20]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	61da      	str	r2, [r3, #28]
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 800789c:	8a7b      	ldrh	r3, [r7, #18]
 800789e:	3b01      	subs	r3, #1
 80078a0:	827b      	strh	r3, [r7, #18]
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	3318      	adds	r3, #24
 80078a6:	617b      	str	r3, [r7, #20]
 80078a8:	8a7b      	ldrh	r3, [r7, #18]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1dd      	bne.n	800786a <CO_CANinterrupt_TX+0x3e>
                }
            }
        }
        /* Clear counter if no more messages */
        if (i == 0U) {
 80078ae:	8a7b      	ldrh	r3, [r7, #18]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d102      	bne.n	80078ba <CO_CANinterrupt_TX+0x8e>
            CANmodule->CANtxCount = 0U;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	849a      	strh	r2, [r3, #36]	@ 0x24
        }
        CO_UNLOCK_CAN_SEND(CANmodule);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078be:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	f383 8810 	msr	PRIMASK, r3
}
 80078c6:	bf00      	nop
    }
}
 80078c8:	bf00      	nop
 80078ca:	3718      	adds	r7, #24
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <HAL_CAN_TxMailbox0CompleteCallback>:

void
HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan) {
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 80078d8:	4b04      	ldr	r3, [pc, #16]	@ (80078ec <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2101      	movs	r1, #1
 80078de:	4618      	mov	r0, r3
 80078e0:	f7ff ffa4 	bl	800782c <CO_CANinterrupt_TX>
}
 80078e4:	bf00      	nop
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	20000468 	.word	0x20000468

080078f0 <HAL_CAN_TxMailbox1CompleteCallback>:

void
HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan) {
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 80078f8:	4b04      	ldr	r3, [pc, #16]	@ (800790c <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2101      	movs	r1, #1
 80078fe:	4618      	mov	r0, r3
 8007900:	f7ff ff94 	bl	800782c <CO_CANinterrupt_TX>
}
 8007904:	bf00      	nop
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	20000468 	.word	0x20000468

08007910 <HAL_CAN_TxMailbox2CompleteCallback>:

void
HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan) {
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8007918:	4b04      	ldr	r3, [pc, #16]	@ (800792c <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2101      	movs	r1, #1
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff ff84 	bl	800782c <CO_CANinterrupt_TX>
}
 8007924:	bf00      	nop
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	20000468 	.word	0x20000468

08007930 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Timer interrupt function executes every 1 ms */
void
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
    if (htim == canopenNodeSTM32->timerHandle) {
 8007938:	4b05      	ldr	r3, [pc, #20]	@ (8007950 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	429a      	cmp	r2, r3
 8007942:	d101      	bne.n	8007948 <HAL_TIM_PeriodElapsedCallback+0x18>
        canopen_app_interrupt();
 8007944:	f7ff fbda 	bl	80070fc <canopen_app_interrupt>
    }
}
 8007948:	bf00      	nop
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	20000454 	.word	0x20000454

08007954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800795a:	f000 fd45 	bl	80083e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800795e:	f000 f83d 	bl	80079dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007962:	f000 f965 	bl	8007c30 <MX_GPIO_Init>
  MX_I2C1_Init();
 8007966:	f000 f8db 	bl	8007b20 <MX_I2C1_Init>
  MX_SPI1_Init();
 800796a:	f000 f907 	bl	8007b7c <MX_SPI1_Init>
  MX_TIM14_Init();
 800796e:	f000 f93b 	bl	8007be8 <MX_TIM14_Init>
  MX_CAN1_Init();
 8007972:	f000 f89d 	bl	8007ab0 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  CANopenNodeSTM32 canOpenNodeSTM32;
  canOpenNodeSTM32.CANHandle = &hcan1;
 8007976:	4b15      	ldr	r3, [pc, #84]	@ (80079cc <main+0x78>)
 8007978:	60bb      	str	r3, [r7, #8]
  canOpenNodeSTM32.HWInitFunction = MX_CAN1_Init;
 800797a:	4b15      	ldr	r3, [pc, #84]	@ (80079d0 <main+0x7c>)
 800797c:	60fb      	str	r3, [r7, #12]
  canOpenNodeSTM32.timerHandle = &htim14;
 800797e:	4b15      	ldr	r3, [pc, #84]	@ (80079d4 <main+0x80>)
 8007980:	607b      	str	r3, [r7, #4]
  canOpenNodeSTM32.desiredNodeID = 1;
 8007982:	2301      	movs	r3, #1
 8007984:	703b      	strb	r3, [r7, #0]
  canOpenNodeSTM32.baudrate = 100;
 8007986:	2364      	movs	r3, #100	@ 0x64
 8007988:	807b      	strh	r3, [r7, #2]
  canopen_app_init(&canOpenNodeSTM32);
 800798a:	463b      	mov	r3, r7
 800798c:	4618      	mov	r0, r3
 800798e:	f7ff f9f7 	bl	8006d80 <canopen_app_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, !canOpenNodeSTM32.outStatusLEDGreen);
 8007992:	7c3b      	ldrb	r3, [r7, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	bf0c      	ite	eq
 8007998:	2301      	moveq	r3, #1
 800799a:	2300      	movne	r3, #0
 800799c:	b2db      	uxtb	r3, r3
 800799e:	461a      	mov	r2, r3
 80079a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80079a4:	480c      	ldr	r0, [pc, #48]	@ (80079d8 <main+0x84>)
 80079a6:	f001 ff17 	bl	80097d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, !canOpenNodeSTM32.outStatusLEDRed);
 80079aa:	7c7b      	ldrb	r3, [r7, #17]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	bf0c      	ite	eq
 80079b0:	2301      	moveq	r3, #1
 80079b2:	2300      	movne	r3, #0
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	461a      	mov	r2, r3
 80079b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80079bc:	4806      	ldr	r0, [pc, #24]	@ (80079d8 <main+0x84>)
 80079be:	f001 ff0b 	bl	80097d8 <HAL_GPIO_WritePin>
	  canopen_app_process();
 80079c2:	f7ff fb2f 	bl	8007024 <canopen_app_process>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, !canOpenNodeSTM32.outStatusLEDGreen);
 80079c6:	bf00      	nop
 80079c8:	e7e3      	b.n	8007992 <main+0x3e>
 80079ca:	bf00      	nop
 80079cc:	200004a0 	.word	0x200004a0
 80079d0:	08007ab1 	.word	0x08007ab1
 80079d4:	20000574 	.word	0x20000574
 80079d8:	40020c00 	.word	0x40020c00

080079dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b094      	sub	sp, #80	@ 0x50
 80079e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80079e2:	f107 0320 	add.w	r3, r7, #32
 80079e6:	2230      	movs	r2, #48	@ 0x30
 80079e8:	2100      	movs	r1, #0
 80079ea:	4618      	mov	r0, r3
 80079ec:	f003 fbdc 	bl	800b1a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80079f0:	f107 030c 	add.w	r3, r7, #12
 80079f4:	2200      	movs	r2, #0
 80079f6:	601a      	str	r2, [r3, #0]
 80079f8:	605a      	str	r2, [r3, #4]
 80079fa:	609a      	str	r2, [r3, #8]
 80079fc:	60da      	str	r2, [r3, #12]
 80079fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007a00:	2300      	movs	r3, #0
 8007a02:	60bb      	str	r3, [r7, #8]
 8007a04:	4b28      	ldr	r3, [pc, #160]	@ (8007aa8 <SystemClock_Config+0xcc>)
 8007a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a08:	4a27      	ldr	r2, [pc, #156]	@ (8007aa8 <SystemClock_Config+0xcc>)
 8007a0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a10:	4b25      	ldr	r3, [pc, #148]	@ (8007aa8 <SystemClock_Config+0xcc>)
 8007a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a18:	60bb      	str	r3, [r7, #8]
 8007a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	607b      	str	r3, [r7, #4]
 8007a20:	4b22      	ldr	r3, [pc, #136]	@ (8007aac <SystemClock_Config+0xd0>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a21      	ldr	r2, [pc, #132]	@ (8007aac <SystemClock_Config+0xd0>)
 8007a26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a2a:	6013      	str	r3, [r2, #0]
 8007a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8007aac <SystemClock_Config+0xd0>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a34:	607b      	str	r3, [r7, #4]
 8007a36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007a3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007a40:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007a42:	2302      	movs	r3, #2
 8007a44:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007a46:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007a4c:	2304      	movs	r3, #4
 8007a4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007a50:	23a8      	movs	r3, #168	@ 0xa8
 8007a52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007a54:	2302      	movs	r3, #2
 8007a56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007a58:	2307      	movs	r3, #7
 8007a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007a5c:	f107 0320 	add.w	r3, r7, #32
 8007a60:	4618      	mov	r0, r3
 8007a62:	f002 f817 	bl	8009a94 <HAL_RCC_OscConfig>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007a6c:	f000 fa2c 	bl	8007ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007a70:	230f      	movs	r3, #15
 8007a72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007a74:	2302      	movs	r3, #2
 8007a76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007a7c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8007a80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007a82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007a88:	f107 030c 	add.w	r3, r7, #12
 8007a8c:	2105      	movs	r1, #5
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f002 fa78 	bl	8009f84 <HAL_RCC_ClockConfig>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8007a9a:	f000 fa15 	bl	8007ec8 <Error_Handler>
  }
}
 8007a9e:	bf00      	nop
 8007aa0:	3750      	adds	r7, #80	@ 0x50
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	40023800 	.word	0x40023800
 8007aac:	40007000 	.word	0x40007000

08007ab0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8007ab4:	4b18      	ldr	r3, [pc, #96]	@ (8007b18 <MX_CAN1_Init+0x68>)
 8007ab6:	4a19      	ldr	r2, [pc, #100]	@ (8007b1c <MX_CAN1_Init+0x6c>)
 8007ab8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8007aba:	4b17      	ldr	r3, [pc, #92]	@ (8007b18 <MX_CAN1_Init+0x68>)
 8007abc:	2215      	movs	r2, #21
 8007abe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8007ac0:	4b15      	ldr	r3, [pc, #84]	@ (8007b18 <MX_CAN1_Init+0x68>)
 8007ac2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007ac6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007ac8:	4b13      	ldr	r3, [pc, #76]	@ (8007b18 <MX_CAN1_Init+0x68>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 8007ace:	4b12      	ldr	r3, [pc, #72]	@ (8007b18 <MX_CAN1_Init+0x68>)
 8007ad0:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 8007ad4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8007ad6:	4b10      	ldr	r3, [pc, #64]	@ (8007b18 <MX_CAN1_Init+0x68>)
 8007ad8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007adc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8007ade:	4b0e      	ldr	r3, [pc, #56]	@ (8007b18 <MX_CAN1_Init+0x68>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8007ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8007b18 <MX_CAN1_Init+0x68>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8007aea:	4b0b      	ldr	r3, [pc, #44]	@ (8007b18 <MX_CAN1_Init+0x68>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8007af0:	4b09      	ldr	r3, [pc, #36]	@ (8007b18 <MX_CAN1_Init+0x68>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8007af6:	4b08      	ldr	r3, [pc, #32]	@ (8007b18 <MX_CAN1_Init+0x68>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8007afc:	4b06      	ldr	r3, [pc, #24]	@ (8007b18 <MX_CAN1_Init+0x68>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8007b02:	4805      	ldr	r0, [pc, #20]	@ (8007b18 <MX_CAN1_Init+0x68>)
 8007b04:	f000 fce2 	bl	80084cc <HAL_CAN_Init>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8007b0e:	f000 f9db 	bl	8007ec8 <Error_Handler>
//   {
// 	  Error_Handler();
//   }
  /* USER CODE END CAN1_Init 2 */

}
 8007b12:	bf00      	nop
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	200004a0 	.word	0x200004a0
 8007b1c:	40006400 	.word	0x40006400

08007b20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007b24:	4b12      	ldr	r3, [pc, #72]	@ (8007b70 <MX_I2C1_Init+0x50>)
 8007b26:	4a13      	ldr	r2, [pc, #76]	@ (8007b74 <MX_I2C1_Init+0x54>)
 8007b28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007b2a:	4b11      	ldr	r3, [pc, #68]	@ (8007b70 <MX_I2C1_Init+0x50>)
 8007b2c:	4a12      	ldr	r2, [pc, #72]	@ (8007b78 <MX_I2C1_Init+0x58>)
 8007b2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007b30:	4b0f      	ldr	r3, [pc, #60]	@ (8007b70 <MX_I2C1_Init+0x50>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007b36:	4b0e      	ldr	r3, [pc, #56]	@ (8007b70 <MX_I2C1_Init+0x50>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007b70 <MX_I2C1_Init+0x50>)
 8007b3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007b42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007b44:	4b0a      	ldr	r3, [pc, #40]	@ (8007b70 <MX_I2C1_Init+0x50>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007b4a:	4b09      	ldr	r3, [pc, #36]	@ (8007b70 <MX_I2C1_Init+0x50>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007b50:	4b07      	ldr	r3, [pc, #28]	@ (8007b70 <MX_I2C1_Init+0x50>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007b56:	4b06      	ldr	r3, [pc, #24]	@ (8007b70 <MX_I2C1_Init+0x50>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007b5c:	4804      	ldr	r0, [pc, #16]	@ (8007b70 <MX_I2C1_Init+0x50>)
 8007b5e:	f001 fe55 	bl	800980c <HAL_I2C_Init>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d001      	beq.n	8007b6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007b68:	f000 f9ae 	bl	8007ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007b6c:	bf00      	nop
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	200004c8 	.word	0x200004c8
 8007b74:	40005400 	.word	0x40005400
 8007b78:	000186a0 	.word	0x000186a0

08007b7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007b80:	4b17      	ldr	r3, [pc, #92]	@ (8007be0 <MX_SPI1_Init+0x64>)
 8007b82:	4a18      	ldr	r2, [pc, #96]	@ (8007be4 <MX_SPI1_Init+0x68>)
 8007b84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007b86:	4b16      	ldr	r3, [pc, #88]	@ (8007be0 <MX_SPI1_Init+0x64>)
 8007b88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007b8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007b8e:	4b14      	ldr	r3, [pc, #80]	@ (8007be0 <MX_SPI1_Init+0x64>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007b94:	4b12      	ldr	r3, [pc, #72]	@ (8007be0 <MX_SPI1_Init+0x64>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b9a:	4b11      	ldr	r3, [pc, #68]	@ (8007be0 <MX_SPI1_Init+0x64>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8007be0 <MX_SPI1_Init+0x64>)
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8007be0 <MX_SPI1_Init+0x64>)
 8007ba8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007bae:	4b0c      	ldr	r3, [pc, #48]	@ (8007be0 <MX_SPI1_Init+0x64>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8007be0 <MX_SPI1_Init+0x64>)
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007bba:	4b09      	ldr	r3, [pc, #36]	@ (8007be0 <MX_SPI1_Init+0x64>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bc0:	4b07      	ldr	r3, [pc, #28]	@ (8007be0 <MX_SPI1_Init+0x64>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007bc6:	4b06      	ldr	r3, [pc, #24]	@ (8007be0 <MX_SPI1_Init+0x64>)
 8007bc8:	220a      	movs	r2, #10
 8007bca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007bcc:	4804      	ldr	r0, [pc, #16]	@ (8007be0 <MX_SPI1_Init+0x64>)
 8007bce:	f002 fbe5 	bl	800a39c <HAL_SPI_Init>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8007bd8:	f000 f976 	bl	8007ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007bdc:	bf00      	nop
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	2000051c 	.word	0x2000051c
 8007be4:	40013000 	.word	0x40013000

08007be8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8007bec:	4b0e      	ldr	r3, [pc, #56]	@ (8007c28 <MX_TIM14_Init+0x40>)
 8007bee:	4a0f      	ldr	r2, [pc, #60]	@ (8007c2c <MX_TIM14_Init+0x44>)
 8007bf0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 83;
 8007bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8007c28 <MX_TIM14_Init+0x40>)
 8007bf4:	2253      	movs	r2, #83	@ 0x53
 8007bf6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8007c28 <MX_TIM14_Init+0x40>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 8007bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8007c28 <MX_TIM14_Init+0x40>)
 8007c00:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007c04:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c06:	4b08      	ldr	r3, [pc, #32]	@ (8007c28 <MX_TIM14_Init+0x40>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007c0c:	4b06      	ldr	r3, [pc, #24]	@ (8007c28 <MX_TIM14_Init+0x40>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8007c12:	4805      	ldr	r0, [pc, #20]	@ (8007c28 <MX_TIM14_Init+0x40>)
 8007c14:	f002 fc4b 	bl	800a4ae <HAL_TIM_Base_Init>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8007c1e:	f000 f953 	bl	8007ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8007c22:	bf00      	nop
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	20000574 	.word	0x20000574
 8007c2c:	40002000 	.word	0x40002000

08007c30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b08c      	sub	sp, #48	@ 0x30
 8007c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c36:	f107 031c 	add.w	r3, r7, #28
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	605a      	str	r2, [r3, #4]
 8007c40:	609a      	str	r2, [r3, #8]
 8007c42:	60da      	str	r2, [r3, #12]
 8007c44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007c46:	2300      	movs	r3, #0
 8007c48:	61bb      	str	r3, [r7, #24]
 8007c4a:	4b99      	ldr	r3, [pc, #612]	@ (8007eb0 <MX_GPIO_Init+0x280>)
 8007c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c4e:	4a98      	ldr	r2, [pc, #608]	@ (8007eb0 <MX_GPIO_Init+0x280>)
 8007c50:	f043 0310 	orr.w	r3, r3, #16
 8007c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8007c56:	4b96      	ldr	r3, [pc, #600]	@ (8007eb0 <MX_GPIO_Init+0x280>)
 8007c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c5a:	f003 0310 	and.w	r3, r3, #16
 8007c5e:	61bb      	str	r3, [r7, #24]
 8007c60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c62:	2300      	movs	r3, #0
 8007c64:	617b      	str	r3, [r7, #20]
 8007c66:	4b92      	ldr	r3, [pc, #584]	@ (8007eb0 <MX_GPIO_Init+0x280>)
 8007c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c6a:	4a91      	ldr	r2, [pc, #580]	@ (8007eb0 <MX_GPIO_Init+0x280>)
 8007c6c:	f043 0304 	orr.w	r3, r3, #4
 8007c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8007c72:	4b8f      	ldr	r3, [pc, #572]	@ (8007eb0 <MX_GPIO_Init+0x280>)
 8007c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c76:	f003 0304 	and.w	r3, r3, #4
 8007c7a:	617b      	str	r3, [r7, #20]
 8007c7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007c7e:	2300      	movs	r3, #0
 8007c80:	613b      	str	r3, [r7, #16]
 8007c82:	4b8b      	ldr	r3, [pc, #556]	@ (8007eb0 <MX_GPIO_Init+0x280>)
 8007c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c86:	4a8a      	ldr	r2, [pc, #552]	@ (8007eb0 <MX_GPIO_Init+0x280>)
 8007c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007c8e:	4b88      	ldr	r3, [pc, #544]	@ (8007eb0 <MX_GPIO_Init+0x280>)
 8007c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c96:	613b      	str	r3, [r7, #16]
 8007c98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60fb      	str	r3, [r7, #12]
 8007c9e:	4b84      	ldr	r3, [pc, #528]	@ (8007eb0 <MX_GPIO_Init+0x280>)
 8007ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ca2:	4a83      	ldr	r2, [pc, #524]	@ (8007eb0 <MX_GPIO_Init+0x280>)
 8007ca4:	f043 0301 	orr.w	r3, r3, #1
 8007ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8007caa:	4b81      	ldr	r3, [pc, #516]	@ (8007eb0 <MX_GPIO_Init+0x280>)
 8007cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	60fb      	str	r3, [r7, #12]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	60bb      	str	r3, [r7, #8]
 8007cba:	4b7d      	ldr	r3, [pc, #500]	@ (8007eb0 <MX_GPIO_Init+0x280>)
 8007cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cbe:	4a7c      	ldr	r2, [pc, #496]	@ (8007eb0 <MX_GPIO_Init+0x280>)
 8007cc0:	f043 0302 	orr.w	r3, r3, #2
 8007cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8007cc6:	4b7a      	ldr	r3, [pc, #488]	@ (8007eb0 <MX_GPIO_Init+0x280>)
 8007cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	60bb      	str	r3, [r7, #8]
 8007cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	607b      	str	r3, [r7, #4]
 8007cd6:	4b76      	ldr	r3, [pc, #472]	@ (8007eb0 <MX_GPIO_Init+0x280>)
 8007cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cda:	4a75      	ldr	r2, [pc, #468]	@ (8007eb0 <MX_GPIO_Init+0x280>)
 8007cdc:	f043 0308 	orr.w	r3, r3, #8
 8007ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8007ce2:	4b73      	ldr	r3, [pc, #460]	@ (8007eb0 <MX_GPIO_Init+0x280>)
 8007ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce6:	f003 0308 	and.w	r3, r3, #8
 8007cea:	607b      	str	r3, [r7, #4]
 8007cec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8007cee:	2200      	movs	r2, #0
 8007cf0:	2108      	movs	r1, #8
 8007cf2:	4870      	ldr	r0, [pc, #448]	@ (8007eb4 <MX_GPIO_Init+0x284>)
 8007cf4:	f001 fd70 	bl	80097d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	2101      	movs	r1, #1
 8007cfc:	486e      	ldr	r0, [pc, #440]	@ (8007eb8 <MX_GPIO_Init+0x288>)
 8007cfe:	f001 fd6b 	bl	80097d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8007d02:	2200      	movs	r2, #0
 8007d04:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8007d08:	486c      	ldr	r0, [pc, #432]	@ (8007ebc <MX_GPIO_Init+0x28c>)
 8007d0a:	f001 fd65 	bl	80097d8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8007d0e:	2308      	movs	r3, #8
 8007d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d12:	2301      	movs	r3, #1
 8007d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d16:	2300      	movs	r3, #0
 8007d18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8007d1e:	f107 031c 	add.w	r3, r7, #28
 8007d22:	4619      	mov	r1, r3
 8007d24:	4863      	ldr	r0, [pc, #396]	@ (8007eb4 <MX_GPIO_Init+0x284>)
 8007d26:	f001 fbbb 	bl	80094a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d32:	2300      	movs	r3, #0
 8007d34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d36:	2300      	movs	r3, #0
 8007d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8007d3a:	f107 031c 	add.w	r3, r7, #28
 8007d3e:	4619      	mov	r1, r3
 8007d40:	485d      	ldr	r0, [pc, #372]	@ (8007eb8 <MX_GPIO_Init+0x288>)
 8007d42:	f001 fbad 	bl	80094a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8007d46:	2308      	movs	r3, #8
 8007d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d52:	2300      	movs	r3, #0
 8007d54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007d56:	2305      	movs	r3, #5
 8007d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8007d5a:	f107 031c 	add.w	r3, r7, #28
 8007d5e:	4619      	mov	r1, r3
 8007d60:	4855      	ldr	r0, [pc, #340]	@ (8007eb8 <MX_GPIO_Init+0x288>)
 8007d62:	f001 fb9d 	bl	80094a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8007d66:	2301      	movs	r3, #1
 8007d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007d6a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8007d6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d70:	2300      	movs	r3, #0
 8007d72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8007d74:	f107 031c 	add.w	r3, r7, #28
 8007d78:	4619      	mov	r1, r3
 8007d7a:	4851      	ldr	r0, [pc, #324]	@ (8007ec0 <MX_GPIO_Init+0x290>)
 8007d7c:	f001 fb90 	bl	80094a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8007d80:	2310      	movs	r3, #16
 8007d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d84:	2302      	movs	r3, #2
 8007d86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007d90:	2306      	movs	r3, #6
 8007d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8007d94:	f107 031c 	add.w	r3, r7, #28
 8007d98:	4619      	mov	r1, r3
 8007d9a:	4849      	ldr	r0, [pc, #292]	@ (8007ec0 <MX_GPIO_Init+0x290>)
 8007d9c:	f001 fb80 	bl	80094a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8007da0:	2304      	movs	r3, #4
 8007da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007da4:	2300      	movs	r3, #0
 8007da6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007da8:	2300      	movs	r3, #0
 8007daa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8007dac:	f107 031c 	add.w	r3, r7, #28
 8007db0:	4619      	mov	r1, r3
 8007db2:	4844      	ldr	r0, [pc, #272]	@ (8007ec4 <MX_GPIO_Init+0x294>)
 8007db4:	f001 fb74 	bl	80094a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8007db8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007dca:	2305      	movs	r3, #5
 8007dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8007dce:	f107 031c 	add.w	r3, r7, #28
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	483b      	ldr	r0, [pc, #236]	@ (8007ec4 <MX_GPIO_Init+0x294>)
 8007dd6:	f001 fb63 	bl	80094a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8007dda:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8007dde:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007de0:	2301      	movs	r3, #1
 8007de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007de4:	2300      	movs	r3, #0
 8007de6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007de8:	2300      	movs	r3, #0
 8007dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007dec:	f107 031c 	add.w	r3, r7, #28
 8007df0:	4619      	mov	r1, r3
 8007df2:	4832      	ldr	r0, [pc, #200]	@ (8007ebc <MX_GPIO_Init+0x28c>)
 8007df4:	f001 fb54 	bl	80094a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8007df8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8007dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dfe:	2302      	movs	r3, #2
 8007e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e02:	2300      	movs	r3, #0
 8007e04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e06:	2300      	movs	r3, #0
 8007e08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007e0a:	2306      	movs	r3, #6
 8007e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e0e:	f107 031c 	add.w	r3, r7, #28
 8007e12:	4619      	mov	r1, r3
 8007e14:	4828      	ldr	r0, [pc, #160]	@ (8007eb8 <MX_GPIO_Init+0x288>)
 8007e16:	f001 fb43 	bl	80094a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007e1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e20:	2300      	movs	r3, #0
 8007e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e24:	2300      	movs	r3, #0
 8007e26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007e28:	f107 031c 	add.w	r3, r7, #28
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	4824      	ldr	r0, [pc, #144]	@ (8007ec0 <MX_GPIO_Init+0x290>)
 8007e30:	f001 fb36 	bl	80094a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin;
 8007e34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e42:	2300      	movs	r3, #0
 8007e44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007e46:	230a      	movs	r3, #10
 8007e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8007e4a:	f107 031c 	add.w	r3, r7, #28
 8007e4e:	4619      	mov	r1, r3
 8007e50:	481b      	ldr	r0, [pc, #108]	@ (8007ec0 <MX_GPIO_Init+0x290>)
 8007e52:	f001 fb25 	bl	80094a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8007e56:	2320      	movs	r3, #32
 8007e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8007e62:	f107 031c 	add.w	r3, r7, #28
 8007e66:	4619      	mov	r1, r3
 8007e68:	4814      	ldr	r0, [pc, #80]	@ (8007ebc <MX_GPIO_Init+0x28c>)
 8007e6a:	f001 fb19 	bl	80094a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007e6e:	2320      	movs	r3, #32
 8007e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e72:	2302      	movs	r3, #2
 8007e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e76:	2300      	movs	r3, #0
 8007e78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8007e7e:	2309      	movs	r3, #9
 8007e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e82:	f107 031c 	add.w	r3, r7, #28
 8007e86:	4619      	mov	r1, r3
 8007e88:	480e      	ldr	r0, [pc, #56]	@ (8007ec4 <MX_GPIO_Init+0x294>)
 8007e8a:	f001 fb09 	bl	80094a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8007e8e:	2302      	movs	r3, #2
 8007e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007e92:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8007e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8007e9c:	f107 031c 	add.w	r3, r7, #28
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	4804      	ldr	r0, [pc, #16]	@ (8007eb4 <MX_GPIO_Init+0x284>)
 8007ea4:	f001 fafc 	bl	80094a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007ea8:	bf00      	nop
 8007eaa:	3730      	adds	r7, #48	@ 0x30
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	40023800 	.word	0x40023800
 8007eb4:	40021000 	.word	0x40021000
 8007eb8:	40020800 	.word	0x40020800
 8007ebc:	40020c00 	.word	0x40020c00
 8007ec0:	40020000 	.word	0x40020000
 8007ec4:	40020400 	.word	0x40020400

08007ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007ecc:	b672      	cpsid	i
}
 8007ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007ed0:	bf00      	nop
 8007ed2:	e7fd      	b.n	8007ed0 <Error_Handler+0x8>

08007ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007eda:	2300      	movs	r3, #0
 8007edc:	607b      	str	r3, [r7, #4]
 8007ede:	4b10      	ldr	r3, [pc, #64]	@ (8007f20 <HAL_MspInit+0x4c>)
 8007ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ee2:	4a0f      	ldr	r2, [pc, #60]	@ (8007f20 <HAL_MspInit+0x4c>)
 8007ee4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007ee8:	6453      	str	r3, [r2, #68]	@ 0x44
 8007eea:	4b0d      	ldr	r3, [pc, #52]	@ (8007f20 <HAL_MspInit+0x4c>)
 8007eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ef2:	607b      	str	r3, [r7, #4]
 8007ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	603b      	str	r3, [r7, #0]
 8007efa:	4b09      	ldr	r3, [pc, #36]	@ (8007f20 <HAL_MspInit+0x4c>)
 8007efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007efe:	4a08      	ldr	r2, [pc, #32]	@ (8007f20 <HAL_MspInit+0x4c>)
 8007f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f06:	4b06      	ldr	r3, [pc, #24]	@ (8007f20 <HAL_MspInit+0x4c>)
 8007f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f0e:	603b      	str	r3, [r7, #0]
 8007f10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007f12:	2007      	movs	r0, #7
 8007f14:	f001 fa7e 	bl	8009414 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007f18:	bf00      	nop
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	40023800 	.word	0x40023800

08007f24 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b08a      	sub	sp, #40	@ 0x28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f2c:	f107 0314 	add.w	r3, r7, #20
 8007f30:	2200      	movs	r2, #0
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	605a      	str	r2, [r3, #4]
 8007f36:	609a      	str	r2, [r3, #8]
 8007f38:	60da      	str	r2, [r3, #12]
 8007f3a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a29      	ldr	r2, [pc, #164]	@ (8007fe8 <HAL_CAN_MspInit+0xc4>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d14c      	bne.n	8007fe0 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007f46:	2300      	movs	r3, #0
 8007f48:	613b      	str	r3, [r7, #16]
 8007f4a:	4b28      	ldr	r3, [pc, #160]	@ (8007fec <HAL_CAN_MspInit+0xc8>)
 8007f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f4e:	4a27      	ldr	r2, [pc, #156]	@ (8007fec <HAL_CAN_MspInit+0xc8>)
 8007f50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f56:	4b25      	ldr	r3, [pc, #148]	@ (8007fec <HAL_CAN_MspInit+0xc8>)
 8007f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f5e:	613b      	str	r3, [r7, #16]
 8007f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f62:	2300      	movs	r3, #0
 8007f64:	60fb      	str	r3, [r7, #12]
 8007f66:	4b21      	ldr	r3, [pc, #132]	@ (8007fec <HAL_CAN_MspInit+0xc8>)
 8007f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f6a:	4a20      	ldr	r2, [pc, #128]	@ (8007fec <HAL_CAN_MspInit+0xc8>)
 8007f6c:	f043 0301 	orr.w	r3, r3, #1
 8007f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8007f72:	4b1e      	ldr	r3, [pc, #120]	@ (8007fec <HAL_CAN_MspInit+0xc8>)
 8007f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	60fb      	str	r3, [r7, #12]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007f7e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f84:	2302      	movs	r3, #2
 8007f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8007f90:	2309      	movs	r3, #9
 8007f92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f94:	f107 0314 	add.w	r3, r7, #20
 8007f98:	4619      	mov	r1, r3
 8007f9a:	4815      	ldr	r0, [pc, #84]	@ (8007ff0 <HAL_CAN_MspInit+0xcc>)
 8007f9c:	f001 fa80 	bl	80094a0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	2013      	movs	r0, #19
 8007fa6:	f001 fa40 	bl	800942a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8007faa:	2013      	movs	r0, #19
 8007fac:	f001 fa59 	bl	8009462 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	2014      	movs	r0, #20
 8007fb6:	f001 fa38 	bl	800942a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8007fba:	2014      	movs	r0, #20
 8007fbc:	f001 fa51 	bl	8009462 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	2015      	movs	r0, #21
 8007fc6:	f001 fa30 	bl	800942a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8007fca:	2015      	movs	r0, #21
 8007fcc:	f001 fa49 	bl	8009462 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	2016      	movs	r0, #22
 8007fd6:	f001 fa28 	bl	800942a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8007fda:	2016      	movs	r0, #22
 8007fdc:	f001 fa41 	bl	8009462 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8007fe0:	bf00      	nop
 8007fe2:	3728      	adds	r7, #40	@ 0x28
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	40006400 	.word	0x40006400
 8007fec:	40023800 	.word	0x40023800
 8007ff0:	40020000 	.word	0x40020000

08007ff4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b08a      	sub	sp, #40	@ 0x28
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ffc:	f107 0314 	add.w	r3, r7, #20
 8008000:	2200      	movs	r2, #0
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	605a      	str	r2, [r3, #4]
 8008006:	609a      	str	r2, [r3, #8]
 8008008:	60da      	str	r2, [r3, #12]
 800800a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a19      	ldr	r2, [pc, #100]	@ (8008078 <HAL_I2C_MspInit+0x84>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d12c      	bne.n	8008070 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008016:	2300      	movs	r3, #0
 8008018:	613b      	str	r3, [r7, #16]
 800801a:	4b18      	ldr	r3, [pc, #96]	@ (800807c <HAL_I2C_MspInit+0x88>)
 800801c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800801e:	4a17      	ldr	r2, [pc, #92]	@ (800807c <HAL_I2C_MspInit+0x88>)
 8008020:	f043 0302 	orr.w	r3, r3, #2
 8008024:	6313      	str	r3, [r2, #48]	@ 0x30
 8008026:	4b15      	ldr	r3, [pc, #84]	@ (800807c <HAL_I2C_MspInit+0x88>)
 8008028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	613b      	str	r3, [r7, #16]
 8008030:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8008032:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8008036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008038:	2312      	movs	r3, #18
 800803a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800803c:	2301      	movs	r3, #1
 800803e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008040:	2300      	movs	r3, #0
 8008042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008044:	2304      	movs	r3, #4
 8008046:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008048:	f107 0314 	add.w	r3, r7, #20
 800804c:	4619      	mov	r1, r3
 800804e:	480c      	ldr	r0, [pc, #48]	@ (8008080 <HAL_I2C_MspInit+0x8c>)
 8008050:	f001 fa26 	bl	80094a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008054:	2300      	movs	r3, #0
 8008056:	60fb      	str	r3, [r7, #12]
 8008058:	4b08      	ldr	r3, [pc, #32]	@ (800807c <HAL_I2C_MspInit+0x88>)
 800805a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800805c:	4a07      	ldr	r2, [pc, #28]	@ (800807c <HAL_I2C_MspInit+0x88>)
 800805e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008062:	6413      	str	r3, [r2, #64]	@ 0x40
 8008064:	4b05      	ldr	r3, [pc, #20]	@ (800807c <HAL_I2C_MspInit+0x88>)
 8008066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800806c:	60fb      	str	r3, [r7, #12]
 800806e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8008070:	bf00      	nop
 8008072:	3728      	adds	r7, #40	@ 0x28
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	40005400 	.word	0x40005400
 800807c:	40023800 	.word	0x40023800
 8008080:	40020400 	.word	0x40020400

08008084 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b08a      	sub	sp, #40	@ 0x28
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800808c:	f107 0314 	add.w	r3, r7, #20
 8008090:	2200      	movs	r2, #0
 8008092:	601a      	str	r2, [r3, #0]
 8008094:	605a      	str	r2, [r3, #4]
 8008096:	609a      	str	r2, [r3, #8]
 8008098:	60da      	str	r2, [r3, #12]
 800809a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a19      	ldr	r2, [pc, #100]	@ (8008108 <HAL_SPI_MspInit+0x84>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d12b      	bne.n	80080fe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80080a6:	2300      	movs	r3, #0
 80080a8:	613b      	str	r3, [r7, #16]
 80080aa:	4b18      	ldr	r3, [pc, #96]	@ (800810c <HAL_SPI_MspInit+0x88>)
 80080ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ae:	4a17      	ldr	r2, [pc, #92]	@ (800810c <HAL_SPI_MspInit+0x88>)
 80080b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80080b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80080b6:	4b15      	ldr	r3, [pc, #84]	@ (800810c <HAL_SPI_MspInit+0x88>)
 80080b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80080be:	613b      	str	r3, [r7, #16]
 80080c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080c2:	2300      	movs	r3, #0
 80080c4:	60fb      	str	r3, [r7, #12]
 80080c6:	4b11      	ldr	r3, [pc, #68]	@ (800810c <HAL_SPI_MspInit+0x88>)
 80080c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ca:	4a10      	ldr	r2, [pc, #64]	@ (800810c <HAL_SPI_MspInit+0x88>)
 80080cc:	f043 0301 	orr.w	r3, r3, #1
 80080d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80080d2:	4b0e      	ldr	r3, [pc, #56]	@ (800810c <HAL_SPI_MspInit+0x88>)
 80080d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	60fb      	str	r3, [r7, #12]
 80080dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80080de:	23e0      	movs	r3, #224	@ 0xe0
 80080e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080e2:	2302      	movs	r3, #2
 80080e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080e6:	2300      	movs	r3, #0
 80080e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080ea:	2300      	movs	r3, #0
 80080ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80080ee:	2305      	movs	r3, #5
 80080f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080f2:	f107 0314 	add.w	r3, r7, #20
 80080f6:	4619      	mov	r1, r3
 80080f8:	4805      	ldr	r0, [pc, #20]	@ (8008110 <HAL_SPI_MspInit+0x8c>)
 80080fa:	f001 f9d1 	bl	80094a0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80080fe:	bf00      	nop
 8008100:	3728      	adds	r7, #40	@ 0x28
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	40013000 	.word	0x40013000
 800810c:	40023800 	.word	0x40023800
 8008110:	40020000 	.word	0x40020000

08008114 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a0e      	ldr	r2, [pc, #56]	@ (800815c <HAL_TIM_Base_MspInit+0x48>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d115      	bne.n	8008152 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8008126:	2300      	movs	r3, #0
 8008128:	60fb      	str	r3, [r7, #12]
 800812a:	4b0d      	ldr	r3, [pc, #52]	@ (8008160 <HAL_TIM_Base_MspInit+0x4c>)
 800812c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800812e:	4a0c      	ldr	r2, [pc, #48]	@ (8008160 <HAL_TIM_Base_MspInit+0x4c>)
 8008130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008134:	6413      	str	r3, [r2, #64]	@ 0x40
 8008136:	4b0a      	ldr	r3, [pc, #40]	@ (8008160 <HAL_TIM_Base_MspInit+0x4c>)
 8008138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800813a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8008142:	2200      	movs	r2, #0
 8008144:	2100      	movs	r1, #0
 8008146:	202d      	movs	r0, #45	@ 0x2d
 8008148:	f001 f96f 	bl	800942a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800814c:	202d      	movs	r0, #45	@ 0x2d
 800814e:	f001 f988 	bl	8009462 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 8008152:	bf00      	nop
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	40002000 	.word	0x40002000
 8008160:	40023800 	.word	0x40023800

08008164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008164:	b480      	push	{r7}
 8008166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008168:	bf00      	nop
 800816a:	e7fd      	b.n	8008168 <NMI_Handler+0x4>

0800816c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800816c:	b480      	push	{r7}
 800816e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008170:	bf00      	nop
 8008172:	e7fd      	b.n	8008170 <HardFault_Handler+0x4>

08008174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008174:	b480      	push	{r7}
 8008176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008178:	bf00      	nop
 800817a:	e7fd      	b.n	8008178 <MemManage_Handler+0x4>

0800817c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800817c:	b480      	push	{r7}
 800817e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008180:	bf00      	nop
 8008182:	e7fd      	b.n	8008180 <BusFault_Handler+0x4>

08008184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008184:	b480      	push	{r7}
 8008186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008188:	bf00      	nop
 800818a:	e7fd      	b.n	8008188 <UsageFault_Handler+0x4>

0800818c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800818c:	b480      	push	{r7}
 800818e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008190:	bf00      	nop
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800819a:	b480      	push	{r7}
 800819c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800819e:	bf00      	nop
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80081a8:	b480      	push	{r7}
 80081aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80081ac:	bf00      	nop
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80081ba:	f000 f967 	bl	800848c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80081be:	bf00      	nop
 80081c0:	bd80      	pop	{r7, pc}
	...

080081c4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80081c8:	4802      	ldr	r0, [pc, #8]	@ (80081d4 <CAN1_TX_IRQHandler+0x10>)
 80081ca:	f000 fe35 	bl	8008e38 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80081ce:	bf00      	nop
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	200004a0 	.word	0x200004a0

080081d8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80081dc:	4802      	ldr	r0, [pc, #8]	@ (80081e8 <CAN1_RX0_IRQHandler+0x10>)
 80081de:	f000 fe2b 	bl	8008e38 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80081e2:	bf00      	nop
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	200004a0 	.word	0x200004a0

080081ec <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80081f0:	4802      	ldr	r0, [pc, #8]	@ (80081fc <CAN1_RX1_IRQHandler+0x10>)
 80081f2:	f000 fe21 	bl	8008e38 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80081f6:	bf00      	nop
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	200004a0 	.word	0x200004a0

08008200 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8008204:	4802      	ldr	r0, [pc, #8]	@ (8008210 <CAN1_SCE_IRQHandler+0x10>)
 8008206:	f000 fe17 	bl	8008e38 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800820a:	bf00      	nop
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	200004a0 	.word	0x200004a0

08008214 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8008218:	4802      	ldr	r0, [pc, #8]	@ (8008224 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800821a:	f002 fa36 	bl	800a68a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800821e:	bf00      	nop
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	20000574 	.word	0x20000574

08008228 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008234:	2300      	movs	r3, #0
 8008236:	617b      	str	r3, [r7, #20]
 8008238:	e00a      	b.n	8008250 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800823a:	f3af 8000 	nop.w
 800823e:	4601      	mov	r1, r0
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	1c5a      	adds	r2, r3, #1
 8008244:	60ba      	str	r2, [r7, #8]
 8008246:	b2ca      	uxtb	r2, r1
 8008248:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	3301      	adds	r3, #1
 800824e:	617b      	str	r3, [r7, #20]
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	429a      	cmp	r2, r3
 8008256:	dbf0      	blt.n	800823a <_read+0x12>
	}

return len;
 8008258:	687b      	ldr	r3, [r7, #4]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3718      	adds	r7, #24
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b086      	sub	sp, #24
 8008266:	af00      	add	r7, sp, #0
 8008268:	60f8      	str	r0, [r7, #12]
 800826a:	60b9      	str	r1, [r7, #8]
 800826c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800826e:	2300      	movs	r3, #0
 8008270:	617b      	str	r3, [r7, #20]
 8008272:	e009      	b.n	8008288 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	60ba      	str	r2, [r7, #8]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	4618      	mov	r0, r3
 800827e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	3301      	adds	r3, #1
 8008286:	617b      	str	r3, [r7, #20]
 8008288:	697a      	ldr	r2, [r7, #20]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	429a      	cmp	r2, r3
 800828e:	dbf1      	blt.n	8008274 <_write+0x12>
	}
	return len;
 8008290:	687b      	ldr	r3, [r7, #4]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3718      	adds	r7, #24
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <_close>:

int _close(int file)
{
 800829a:	b480      	push	{r7}
 800829c:	b083      	sub	sp, #12
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
	return -1;
 80082a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b083      	sub	sp, #12
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80082c2:	605a      	str	r2, [r3, #4]
	return 0;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <_isatty>:

int _isatty(int file)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b083      	sub	sp, #12
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
	return 1;
 80082da:	2301      	movs	r3, #1
}
 80082dc:	4618      	mov	r0, r3
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
	return 0;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
	...

08008304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800830c:	4a14      	ldr	r2, [pc, #80]	@ (8008360 <_sbrk+0x5c>)
 800830e:	4b15      	ldr	r3, [pc, #84]	@ (8008364 <_sbrk+0x60>)
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008318:	4b13      	ldr	r3, [pc, #76]	@ (8008368 <_sbrk+0x64>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d102      	bne.n	8008326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008320:	4b11      	ldr	r3, [pc, #68]	@ (8008368 <_sbrk+0x64>)
 8008322:	4a12      	ldr	r2, [pc, #72]	@ (800836c <_sbrk+0x68>)
 8008324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008326:	4b10      	ldr	r3, [pc, #64]	@ (8008368 <_sbrk+0x64>)
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4413      	add	r3, r2
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	429a      	cmp	r2, r3
 8008332:	d207      	bcs.n	8008344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008334:	f002 ff96 	bl	800b264 <__errno>
 8008338:	4603      	mov	r3, r0
 800833a:	220c      	movs	r2, #12
 800833c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800833e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008342:	e009      	b.n	8008358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008344:	4b08      	ldr	r3, [pc, #32]	@ (8008368 <_sbrk+0x64>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800834a:	4b07      	ldr	r3, [pc, #28]	@ (8008368 <_sbrk+0x64>)
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4413      	add	r3, r2
 8008352:	4a05      	ldr	r2, [pc, #20]	@ (8008368 <_sbrk+0x64>)
 8008354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008356:	68fb      	ldr	r3, [r7, #12]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	20020000 	.word	0x20020000
 8008364:	00000400 	.word	0x00000400
 8008368:	200005bc 	.word	0x200005bc
 800836c:	20000710 	.word	0x20000710

08008370 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008370:	b480      	push	{r7}
 8008372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008374:	4b06      	ldr	r3, [pc, #24]	@ (8008390 <SystemInit+0x20>)
 8008376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800837a:	4a05      	ldr	r2, [pc, #20]	@ (8008390 <SystemInit+0x20>)
 800837c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008380:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008384:	bf00      	nop
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	e000ed00 	.word	0xe000ed00

08008394 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008394:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80083cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008398:	480d      	ldr	r0, [pc, #52]	@ (80083d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800839a:	490e      	ldr	r1, [pc, #56]	@ (80083d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800839c:	4a0e      	ldr	r2, [pc, #56]	@ (80083d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800839e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80083a0:	e002      	b.n	80083a8 <LoopCopyDataInit>

080083a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80083a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80083a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80083a6:	3304      	adds	r3, #4

080083a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80083a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80083aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80083ac:	d3f9      	bcc.n	80083a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80083ae:	4a0b      	ldr	r2, [pc, #44]	@ (80083dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80083b0:	4c0b      	ldr	r4, [pc, #44]	@ (80083e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80083b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80083b4:	e001      	b.n	80083ba <LoopFillZerobss>

080083b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80083b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80083b8:	3204      	adds	r2, #4

080083ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80083ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80083bc:	d3fb      	bcc.n	80083b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80083be:	f7ff ffd7 	bl	8008370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80083c2:	f002 ff55 	bl	800b270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80083c6:	f7ff fac5 	bl	8007954 <main>
  bx  lr    
 80083ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80083cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80083d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80083d4:	20000438 	.word	0x20000438
  ldr r2, =_sidata
 80083d8:	0800c368 	.word	0x0800c368
  ldr r2, =_sbss
 80083dc:	20000438 	.word	0x20000438
  ldr r4, =_ebss
 80083e0:	20000710 	.word	0x20000710

080083e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80083e4:	e7fe      	b.n	80083e4 <ADC_IRQHandler>
	...

080083e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80083ec:	4b0e      	ldr	r3, [pc, #56]	@ (8008428 <HAL_Init+0x40>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a0d      	ldr	r2, [pc, #52]	@ (8008428 <HAL_Init+0x40>)
 80083f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80083f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80083f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008428 <HAL_Init+0x40>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a0a      	ldr	r2, [pc, #40]	@ (8008428 <HAL_Init+0x40>)
 80083fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008402:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008404:	4b08      	ldr	r3, [pc, #32]	@ (8008428 <HAL_Init+0x40>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a07      	ldr	r2, [pc, #28]	@ (8008428 <HAL_Init+0x40>)
 800840a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800840e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008410:	2003      	movs	r0, #3
 8008412:	f000 ffff 	bl	8009414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008416:	2000      	movs	r0, #0
 8008418:	f000 f808 	bl	800842c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800841c:	f7ff fd5a 	bl	8007ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	40023c00 	.word	0x40023c00

0800842c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008434:	4b12      	ldr	r3, [pc, #72]	@ (8008480 <HAL_InitTick+0x54>)
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	4b12      	ldr	r3, [pc, #72]	@ (8008484 <HAL_InitTick+0x58>)
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	4619      	mov	r1, r3
 800843e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008442:	fbb3 f3f1 	udiv	r3, r3, r1
 8008446:	fbb2 f3f3 	udiv	r3, r2, r3
 800844a:	4618      	mov	r0, r3
 800844c:	f001 f81b 	bl	8009486 <HAL_SYSTICK_Config>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e00e      	b.n	8008478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2b0f      	cmp	r3, #15
 800845e:	d80a      	bhi.n	8008476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008460:	2200      	movs	r2, #0
 8008462:	6879      	ldr	r1, [r7, #4]
 8008464:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008468:	f000 ffdf 	bl	800942a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800846c:	4a06      	ldr	r2, [pc, #24]	@ (8008488 <HAL_InitTick+0x5c>)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008472:	2300      	movs	r3, #0
 8008474:	e000      	b.n	8008478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
}
 8008478:	4618      	mov	r0, r3
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	200003d0 	.word	0x200003d0
 8008484:	200003d8 	.word	0x200003d8
 8008488:	200003d4 	.word	0x200003d4

0800848c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800848c:	b480      	push	{r7}
 800848e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008490:	4b06      	ldr	r3, [pc, #24]	@ (80084ac <HAL_IncTick+0x20>)
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	461a      	mov	r2, r3
 8008496:	4b06      	ldr	r3, [pc, #24]	@ (80084b0 <HAL_IncTick+0x24>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4413      	add	r3, r2
 800849c:	4a04      	ldr	r2, [pc, #16]	@ (80084b0 <HAL_IncTick+0x24>)
 800849e:	6013      	str	r3, [r2, #0]
}
 80084a0:	bf00      	nop
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	200003d8 	.word	0x200003d8
 80084b0:	200005c0 	.word	0x200005c0

080084b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80084b4:	b480      	push	{r7}
 80084b6:	af00      	add	r7, sp, #0
  return uwTick;
 80084b8:	4b03      	ldr	r3, [pc, #12]	@ (80084c8 <HAL_GetTick+0x14>)
 80084ba:	681b      	ldr	r3, [r3, #0]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	200005c0 	.word	0x200005c0

080084cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d101      	bne.n	80084de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e0ed      	b.n	80086ba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d102      	bne.n	80084f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f7ff fd1a 	bl	8007f24 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f042 0201 	orr.w	r2, r2, #1
 80084fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008500:	f7ff ffd8 	bl	80084b4 <HAL_GetTick>
 8008504:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008506:	e012      	b.n	800852e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008508:	f7ff ffd4 	bl	80084b4 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	2b0a      	cmp	r3, #10
 8008514:	d90b      	bls.n	800852e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800851a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2205      	movs	r2, #5
 8008526:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e0c5      	b.n	80086ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	f003 0301 	and.w	r3, r3, #1
 8008538:	2b00      	cmp	r3, #0
 800853a:	d0e5      	beq.n	8008508 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f022 0202 	bic.w	r2, r2, #2
 800854a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800854c:	f7ff ffb2 	bl	80084b4 <HAL_GetTick>
 8008550:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008552:	e012      	b.n	800857a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008554:	f7ff ffae 	bl	80084b4 <HAL_GetTick>
 8008558:	4602      	mov	r2, r0
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	2b0a      	cmp	r3, #10
 8008560:	d90b      	bls.n	800857a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008566:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2205      	movs	r2, #5
 8008572:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e09f      	b.n	80086ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	f003 0302 	and.w	r3, r3, #2
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e5      	bne.n	8008554 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	7e1b      	ldrb	r3, [r3, #24]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d108      	bne.n	80085a2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800859e:	601a      	str	r2, [r3, #0]
 80085a0:	e007      	b.n	80085b2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80085b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	7e5b      	ldrb	r3, [r3, #25]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d108      	bne.n	80085cc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	e007      	b.n	80085dc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	7e9b      	ldrb	r3, [r3, #26]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d108      	bne.n	80085f6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f042 0220 	orr.w	r2, r2, #32
 80085f2:	601a      	str	r2, [r3, #0]
 80085f4:	e007      	b.n	8008606 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f022 0220 	bic.w	r2, r2, #32
 8008604:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	7edb      	ldrb	r3, [r3, #27]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d108      	bne.n	8008620 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f022 0210 	bic.w	r2, r2, #16
 800861c:	601a      	str	r2, [r3, #0]
 800861e:	e007      	b.n	8008630 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f042 0210 	orr.w	r2, r2, #16
 800862e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	7f1b      	ldrb	r3, [r3, #28]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d108      	bne.n	800864a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f042 0208 	orr.w	r2, r2, #8
 8008646:	601a      	str	r2, [r3, #0]
 8008648:	e007      	b.n	800865a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f022 0208 	bic.w	r2, r2, #8
 8008658:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	7f5b      	ldrb	r3, [r3, #29]
 800865e:	2b01      	cmp	r3, #1
 8008660:	d108      	bne.n	8008674 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f042 0204 	orr.w	r2, r2, #4
 8008670:	601a      	str	r2, [r3, #0]
 8008672:	e007      	b.n	8008684 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f022 0204 	bic.w	r2, r2, #4
 8008682:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	689a      	ldr	r2, [r3, #8]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	431a      	orrs	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	431a      	orrs	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	ea42 0103 	orr.w	r1, r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	1e5a      	subs	r2, r3, #1
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
	...

080086c4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80086da:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80086dc:	7cfb      	ldrb	r3, [r7, #19]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d003      	beq.n	80086ea <HAL_CAN_ConfigFilter+0x26>
 80086e2:	7cfb      	ldrb	r3, [r7, #19]
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	f040 80be 	bne.w	8008866 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80086ea:	4b65      	ldr	r3, [pc, #404]	@ (8008880 <HAL_CAN_ConfigFilter+0x1bc>)
 80086ec:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80086f4:	f043 0201 	orr.w	r2, r3, #1
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008704:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008718:	021b      	lsls	r3, r3, #8
 800871a:	431a      	orrs	r2, r3
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	f003 031f 	and.w	r3, r3, #31
 800872a:	2201      	movs	r2, #1
 800872c:	fa02 f303 	lsl.w	r3, r2, r3
 8008730:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	43db      	mvns	r3, r3
 800873c:	401a      	ands	r2, r3
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	69db      	ldr	r3, [r3, #28]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d123      	bne.n	8008794 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	43db      	mvns	r3, r3
 8008756:	401a      	ands	r2, r3
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800876a:	683a      	ldr	r2, [r7, #0]
 800876c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800876e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	3248      	adds	r2, #72	@ 0x48
 8008774:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008788:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800878a:	6979      	ldr	r1, [r7, #20]
 800878c:	3348      	adds	r3, #72	@ 0x48
 800878e:	00db      	lsls	r3, r3, #3
 8008790:	440b      	add	r3, r1
 8008792:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	69db      	ldr	r3, [r3, #28]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d122      	bne.n	80087e2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	431a      	orrs	r2, r3
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80087b8:	683a      	ldr	r2, [r7, #0]
 80087ba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80087bc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	3248      	adds	r2, #72	@ 0x48
 80087c2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80087d6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80087d8:	6979      	ldr	r1, [r7, #20]
 80087da:	3348      	adds	r3, #72	@ 0x48
 80087dc:	00db      	lsls	r3, r3, #3
 80087de:	440b      	add	r3, r1
 80087e0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d109      	bne.n	80087fe <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	43db      	mvns	r3, r3
 80087f4:	401a      	ands	r2, r3
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80087fc:	e007      	b.n	800880e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	431a      	orrs	r2, r3
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d109      	bne.n	800882a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	43db      	mvns	r3, r3
 8008820:	401a      	ands	r2, r3
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8008828:	e007      	b.n	800883a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	431a      	orrs	r2, r3
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d107      	bne.n	8008852 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	431a      	orrs	r2, r3
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008858:	f023 0201 	bic.w	r2, r3, #1
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8008862:	2300      	movs	r3, #0
 8008864:	e006      	b.n	8008874 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800886a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
  }
}
 8008874:	4618      	mov	r0, r3
 8008876:	371c      	adds	r7, #28
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	40006400 	.word	0x40006400

08008884 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008892:	b2db      	uxtb	r3, r3
 8008894:	2b01      	cmp	r3, #1
 8008896:	d12e      	bne.n	80088f6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2202      	movs	r2, #2
 800889c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f022 0201 	bic.w	r2, r2, #1
 80088ae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088b0:	f7ff fe00 	bl	80084b4 <HAL_GetTick>
 80088b4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80088b6:	e012      	b.n	80088de <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80088b8:	f7ff fdfc 	bl	80084b4 <HAL_GetTick>
 80088bc:	4602      	mov	r2, r0
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	2b0a      	cmp	r3, #10
 80088c4:	d90b      	bls.n	80088de <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2205      	movs	r2, #5
 80088d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e012      	b.n	8008904 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1e5      	bne.n	80088b8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	e006      	b.n	8008904 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088fa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
  }
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 3020 	ldrb.w	r3, [r3, #32]
 800891a:	b2db      	uxtb	r3, r3
 800891c:	2b02      	cmp	r3, #2
 800891e:	d133      	bne.n	8008988 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f042 0201 	orr.w	r2, r2, #1
 800892e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008930:	f7ff fdc0 	bl	80084b4 <HAL_GetTick>
 8008934:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008936:	e012      	b.n	800895e <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008938:	f7ff fdbc 	bl	80084b4 <HAL_GetTick>
 800893c:	4602      	mov	r2, r0
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	2b0a      	cmp	r3, #10
 8008944:	d90b      	bls.n	800895e <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800894a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2205      	movs	r2, #5
 8008956:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e01b      	b.n	8008996 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	f003 0301 	and.w	r3, r3, #1
 8008968:	2b00      	cmp	r3, #0
 800896a:	d0e5      	beq.n	8008938 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f022 0202 	bic.w	r2, r2, #2
 800897a:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	e006      	b.n	8008996 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800898c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
  }
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800899e:	b480      	push	{r7}
 80089a0:	b089      	sub	sp, #36	@ 0x24
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	60f8      	str	r0, [r7, #12]
 80089a6:	60b9      	str	r1, [r7, #8]
 80089a8:	607a      	str	r2, [r7, #4]
 80089aa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80089bc:	7ffb      	ldrb	r3, [r7, #31]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d003      	beq.n	80089ca <HAL_CAN_AddTxMessage+0x2c>
 80089c2:	7ffb      	ldrb	r3, [r7, #31]
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	f040 80ad 	bne.w	8008b24 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10a      	bne.n	80089ea <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d105      	bne.n	80089ea <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f000 8095 	beq.w	8008b14 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	0e1b      	lsrs	r3, r3, #24
 80089ee:	f003 0303 	and.w	r3, r3, #3
 80089f2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80089f4:	2201      	movs	r2, #1
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	409a      	lsls	r2, r3
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10d      	bne.n	8008a22 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008a10:	68f9      	ldr	r1, [r7, #12]
 8008a12:	6809      	ldr	r1, [r1, #0]
 8008a14:	431a      	orrs	r2, r3
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	3318      	adds	r3, #24
 8008a1a:	011b      	lsls	r3, r3, #4
 8008a1c:	440b      	add	r3, r1
 8008a1e:	601a      	str	r2, [r3, #0]
 8008a20:	e00f      	b.n	8008a42 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008a2c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008a32:	68f9      	ldr	r1, [r7, #12]
 8008a34:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8008a36:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	3318      	adds	r3, #24
 8008a3c:	011b      	lsls	r3, r3, #4
 8008a3e:	440b      	add	r3, r1
 8008a40:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6819      	ldr	r1, [r3, #0]
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	691a      	ldr	r2, [r3, #16]
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	3318      	adds	r3, #24
 8008a4e:	011b      	lsls	r3, r3, #4
 8008a50:	440b      	add	r3, r1
 8008a52:	3304      	adds	r3, #4
 8008a54:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	7d1b      	ldrb	r3, [r3, #20]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d111      	bne.n	8008a82 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	3318      	adds	r3, #24
 8008a66:	011b      	lsls	r3, r3, #4
 8008a68:	4413      	add	r3, r2
 8008a6a:	3304      	adds	r3, #4
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	6811      	ldr	r1, [r2, #0]
 8008a72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	3318      	adds	r3, #24
 8008a7a:	011b      	lsls	r3, r3, #4
 8008a7c:	440b      	add	r3, r1
 8008a7e:	3304      	adds	r3, #4
 8008a80:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	3307      	adds	r3, #7
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	061a      	lsls	r2, r3, #24
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	3306      	adds	r3, #6
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	041b      	lsls	r3, r3, #16
 8008a92:	431a      	orrs	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	3305      	adds	r3, #5
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	021b      	lsls	r3, r3, #8
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	3204      	adds	r2, #4
 8008aa2:	7812      	ldrb	r2, [r2, #0]
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	6811      	ldr	r1, [r2, #0]
 8008aaa:	ea43 0200 	orr.w	r2, r3, r0
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	011b      	lsls	r3, r3, #4
 8008ab2:	440b      	add	r3, r1
 8008ab4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8008ab8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	3303      	adds	r3, #3
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	061a      	lsls	r2, r3, #24
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	3302      	adds	r3, #2
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	041b      	lsls	r3, r3, #16
 8008aca:	431a      	orrs	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	021b      	lsls	r3, r3, #8
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	7812      	ldrb	r2, [r2, #0]
 8008ada:	4610      	mov	r0, r2
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	6811      	ldr	r1, [r2, #0]
 8008ae0:	ea43 0200 	orr.w	r2, r3, r0
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	011b      	lsls	r3, r3, #4
 8008ae8:	440b      	add	r3, r1
 8008aea:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8008aee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	3318      	adds	r3, #24
 8008af8:	011b      	lsls	r3, r3, #4
 8008afa:	4413      	add	r3, r2
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	6811      	ldr	r1, [r2, #0]
 8008b02:	f043 0201 	orr.w	r2, r3, #1
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	3318      	adds	r3, #24
 8008b0a:	011b      	lsls	r3, r3, #4
 8008b0c:	440b      	add	r3, r1
 8008b0e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8008b10:	2300      	movs	r3, #0
 8008b12:	e00e      	b.n	8008b32 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b18:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e006      	b.n	8008b32 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b28:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
  }
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3724      	adds	r7, #36	@ 0x24
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr

08008b3e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8008b3e:	b480      	push	{r7}
 8008b40:	b085      	sub	sp, #20
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8008b46:	2300      	movs	r3, #0
 8008b48:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b50:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8008b52:	7afb      	ldrb	r3, [r7, #11]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d002      	beq.n	8008b5e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8008b58:	7afb      	ldrb	r3, [r7, #11]
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d11d      	bne.n	8008b9a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d002      	beq.n	8008b72 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d002      	beq.n	8008b86 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	3301      	adds	r3, #1
 8008b84:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	3301      	adds	r3, #1
 8008b98:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3714      	adds	r7, #20
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
 8008bb4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008bbc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d003      	beq.n	8008bcc <HAL_CAN_GetRxMessage+0x24>
 8008bc4:	7dfb      	ldrb	r3, [r7, #23]
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	f040 8103 	bne.w	8008dd2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10e      	bne.n	8008bf0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	f003 0303 	and.w	r3, r3, #3
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d116      	bne.n	8008c0e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e0f7      	b.n	8008de0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	f003 0303 	and.w	r3, r3, #3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d107      	bne.n	8008c0e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c02:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e0e8      	b.n	8008de0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	331b      	adds	r3, #27
 8008c16:	011b      	lsls	r3, r3, #4
 8008c18:	4413      	add	r3, r2
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 0204 	and.w	r2, r3, #4
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10c      	bne.n	8008c46 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	331b      	adds	r3, #27
 8008c34:	011b      	lsls	r3, r3, #4
 8008c36:	4413      	add	r3, r2
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	0d5b      	lsrs	r3, r3, #21
 8008c3c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	601a      	str	r2, [r3, #0]
 8008c44:	e00b      	b.n	8008c5e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	331b      	adds	r3, #27
 8008c4e:	011b      	lsls	r3, r3, #4
 8008c50:	4413      	add	r3, r2
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	08db      	lsrs	r3, r3, #3
 8008c56:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	331b      	adds	r3, #27
 8008c66:	011b      	lsls	r3, r3, #4
 8008c68:	4413      	add	r3, r2
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 0202 	and.w	r2, r3, #2
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	331b      	adds	r3, #27
 8008c7c:	011b      	lsls	r3, r3, #4
 8008c7e:	4413      	add	r3, r2
 8008c80:	3304      	adds	r3, #4
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 0308 	and.w	r3, r3, #8
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d003      	beq.n	8008c94 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2208      	movs	r2, #8
 8008c90:	611a      	str	r2, [r3, #16]
 8008c92:	e00b      	b.n	8008cac <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	331b      	adds	r3, #27
 8008c9c:	011b      	lsls	r3, r3, #4
 8008c9e:	4413      	add	r3, r2
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 020f 	and.w	r2, r3, #15
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	331b      	adds	r3, #27
 8008cb4:	011b      	lsls	r3, r3, #4
 8008cb6:	4413      	add	r3, r2
 8008cb8:	3304      	adds	r3, #4
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	0a1b      	lsrs	r3, r3, #8
 8008cbe:	b2da      	uxtb	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	331b      	adds	r3, #27
 8008ccc:	011b      	lsls	r3, r3, #4
 8008cce:	4413      	add	r3, r2
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	0c1b      	lsrs	r3, r3, #16
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	011b      	lsls	r3, r3, #4
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	b2da      	uxtb	r2, r3
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	011b      	lsls	r3, r3, #4
 8008cfa:	4413      	add	r3, r2
 8008cfc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	0a1a      	lsrs	r2, r3, #8
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	3301      	adds	r3, #1
 8008d08:	b2d2      	uxtb	r2, r2
 8008d0a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	011b      	lsls	r3, r3, #4
 8008d14:	4413      	add	r3, r2
 8008d16:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	0c1a      	lsrs	r2, r3, #16
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	3302      	adds	r3, #2
 8008d22:	b2d2      	uxtb	r2, r2
 8008d24:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	011b      	lsls	r3, r3, #4
 8008d2e:	4413      	add	r3, r2
 8008d30:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	0e1a      	lsrs	r2, r3, #24
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	3303      	adds	r3, #3
 8008d3c:	b2d2      	uxtb	r2, r2
 8008d3e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	011b      	lsls	r3, r3, #4
 8008d48:	4413      	add	r3, r2
 8008d4a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	3304      	adds	r3, #4
 8008d54:	b2d2      	uxtb	r2, r2
 8008d56:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	011b      	lsls	r3, r3, #4
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	0a1a      	lsrs	r2, r3, #8
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	3305      	adds	r3, #5
 8008d6e:	b2d2      	uxtb	r2, r2
 8008d70:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	011b      	lsls	r3, r3, #4
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	0c1a      	lsrs	r2, r3, #16
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	3306      	adds	r3, #6
 8008d88:	b2d2      	uxtb	r2, r2
 8008d8a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	011b      	lsls	r3, r3, #4
 8008d94:	4413      	add	r3, r2
 8008d96:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	0e1a      	lsrs	r2, r3, #24
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	3307      	adds	r3, #7
 8008da2:	b2d2      	uxtb	r2, r2
 8008da4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d108      	bne.n	8008dbe <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68da      	ldr	r2, [r3, #12]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f042 0220 	orr.w	r2, r2, #32
 8008dba:	60da      	str	r2, [r3, #12]
 8008dbc:	e007      	b.n	8008dce <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	691a      	ldr	r2, [r3, #16]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f042 0220 	orr.w	r2, r2, #32
 8008dcc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	e006      	b.n	8008de0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
  }
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	371c      	adds	r7, #28
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008dfc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d002      	beq.n	8008e0a <HAL_CAN_ActivateNotification+0x1e>
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d109      	bne.n	8008e1e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	6959      	ldr	r1, [r3, #20]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	683a      	ldr	r2, [r7, #0]
 8008e16:	430a      	orrs	r2, r1
 8008e18:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e006      	b.n	8008e2c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e22:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
  }
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3714      	adds	r7, #20
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b08a      	sub	sp, #40	@ 0x28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8008e40:	2300      	movs	r3, #0
 8008e42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	695b      	ldr	r3, [r3, #20]
 8008e4a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d07c      	beq.n	8008f78 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	f003 0301 	and.w	r3, r3, #1
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d023      	beq.n	8008ed0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	f003 0302 	and.w	r3, r3, #2
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d003      	beq.n	8008ea2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f7fe fd18 	bl	80078d0 <HAL_CAN_TxMailbox0CompleteCallback>
 8008ea0:	e016      	b.n	8008ed0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	f003 0304 	and.w	r3, r3, #4
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d004      	beq.n	8008eb6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8008eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008eb4:	e00c      	b.n	8008ed0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	f003 0308 	and.w	r3, r3, #8
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d004      	beq.n	8008eca <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ec8:	e002      	b.n	8008ed0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f96b 	bl	80091a6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d024      	beq.n	8008f24 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ee2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d003      	beq.n	8008ef6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7fe fcfe 	bl	80078f0 <HAL_CAN_TxMailbox1CompleteCallback>
 8008ef4:	e016      	b.n	8008f24 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d004      	beq.n	8008f0a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8008f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f02:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f08:	e00c      	b.n	8008f24 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d004      	beq.n	8008f1e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8008f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f1c:	e002      	b.n	8008f24 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f94b 	bl	80091ba <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d024      	beq.n	8008f78 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008f36:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d003      	beq.n	8008f4a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f7fe fce4 	bl	8007910 <HAL_CAN_TxMailbox2CompleteCallback>
 8008f48:	e016      	b.n	8008f78 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d004      	beq.n	8008f5e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8008f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f5c:	e00c      	b.n	8008f78 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d004      	beq.n	8008f72 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8008f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f70:	e002      	b.n	8008f78 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f92b 	bl	80091ce <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8008f78:	6a3b      	ldr	r3, [r7, #32]
 8008f7a:	f003 0308 	and.w	r3, r3, #8
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00c      	beq.n	8008f9c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f003 0310 	and.w	r3, r3, #16
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d007      	beq.n	8008f9c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008f92:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2210      	movs	r2, #16
 8008f9a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	f003 0304 	and.w	r3, r3, #4
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00b      	beq.n	8008fbe <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f003 0308 	and.w	r3, r3, #8
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d006      	beq.n	8008fbe <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2208      	movs	r2, #8
 8008fb6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f912 	bl	80091e2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8008fbe:	6a3b      	ldr	r3, [r7, #32]
 8008fc0:	f003 0302 	and.w	r3, r3, #2
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d009      	beq.n	8008fdc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	f003 0303 	and.w	r3, r3, #3
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d002      	beq.n	8008fdc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7fe fc0e 	bl	80077f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8008fdc:	6a3b      	ldr	r3, [r7, #32]
 8008fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00c      	beq.n	8009000 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	f003 0310 	and.w	r3, r3, #16
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d007      	beq.n	8009000 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008ff6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2210      	movs	r2, #16
 8008ffe:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009000:	6a3b      	ldr	r3, [r7, #32]
 8009002:	f003 0320 	and.w	r3, r3, #32
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00b      	beq.n	8009022 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	f003 0308 	and.w	r3, r3, #8
 8009010:	2b00      	cmp	r3, #0
 8009012:	d006      	beq.n	8009022 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2208      	movs	r2, #8
 800901a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f8ea 	bl	80091f6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009022:	6a3b      	ldr	r3, [r7, #32]
 8009024:	f003 0310 	and.w	r3, r3, #16
 8009028:	2b00      	cmp	r3, #0
 800902a:	d009      	beq.n	8009040 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	f003 0303 	and.w	r3, r3, #3
 8009036:	2b00      	cmp	r3, #0
 8009038:	d002      	beq.n	8009040 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7fe fbe9 	bl	8007812 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00b      	beq.n	8009062 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	f003 0310 	and.w	r3, r3, #16
 8009050:	2b00      	cmp	r3, #0
 8009052:	d006      	beq.n	8009062 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2210      	movs	r2, #16
 800905a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f8d4 	bl	800920a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009062:	6a3b      	ldr	r3, [r7, #32]
 8009064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00b      	beq.n	8009084 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	f003 0308 	and.w	r3, r3, #8
 8009072:	2b00      	cmp	r3, #0
 8009074:	d006      	beq.n	8009084 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2208      	movs	r2, #8
 800907c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f8cd 	bl	800921e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009084:	6a3b      	ldr	r3, [r7, #32]
 8009086:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800908a:	2b00      	cmp	r3, #0
 800908c:	d07b      	beq.n	8009186 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	f003 0304 	and.w	r3, r3, #4
 8009094:	2b00      	cmp	r3, #0
 8009096:	d072      	beq.n	800917e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009098:	6a3b      	ldr	r3, [r7, #32]
 800909a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d008      	beq.n	80090b4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d003      	beq.n	80090b4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80090ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ae:	f043 0301 	orr.w	r3, r3, #1
 80090b2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80090b4:	6a3b      	ldr	r3, [r7, #32]
 80090b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d008      	beq.n	80090d0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d003      	beq.n	80090d0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80090c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ca:	f043 0302 	orr.w	r3, r3, #2
 80090ce:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80090d0:	6a3b      	ldr	r3, [r7, #32]
 80090d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d008      	beq.n	80090ec <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d003      	beq.n	80090ec <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80090e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e6:	f043 0304 	orr.w	r3, r3, #4
 80090ea:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d043      	beq.n	800917e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d03e      	beq.n	800917e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009106:	2b60      	cmp	r3, #96	@ 0x60
 8009108:	d02b      	beq.n	8009162 <HAL_CAN_IRQHandler+0x32a>
 800910a:	2b60      	cmp	r3, #96	@ 0x60
 800910c:	d82e      	bhi.n	800916c <HAL_CAN_IRQHandler+0x334>
 800910e:	2b50      	cmp	r3, #80	@ 0x50
 8009110:	d022      	beq.n	8009158 <HAL_CAN_IRQHandler+0x320>
 8009112:	2b50      	cmp	r3, #80	@ 0x50
 8009114:	d82a      	bhi.n	800916c <HAL_CAN_IRQHandler+0x334>
 8009116:	2b40      	cmp	r3, #64	@ 0x40
 8009118:	d019      	beq.n	800914e <HAL_CAN_IRQHandler+0x316>
 800911a:	2b40      	cmp	r3, #64	@ 0x40
 800911c:	d826      	bhi.n	800916c <HAL_CAN_IRQHandler+0x334>
 800911e:	2b30      	cmp	r3, #48	@ 0x30
 8009120:	d010      	beq.n	8009144 <HAL_CAN_IRQHandler+0x30c>
 8009122:	2b30      	cmp	r3, #48	@ 0x30
 8009124:	d822      	bhi.n	800916c <HAL_CAN_IRQHandler+0x334>
 8009126:	2b10      	cmp	r3, #16
 8009128:	d002      	beq.n	8009130 <HAL_CAN_IRQHandler+0x2f8>
 800912a:	2b20      	cmp	r3, #32
 800912c:	d005      	beq.n	800913a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800912e:	e01d      	b.n	800916c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8009130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009132:	f043 0308 	orr.w	r3, r3, #8
 8009136:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8009138:	e019      	b.n	800916e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800913a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913c:	f043 0310 	orr.w	r3, r3, #16
 8009140:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8009142:	e014      	b.n	800916e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009146:	f043 0320 	orr.w	r3, r3, #32
 800914a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800914c:	e00f      	b.n	800916e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800914e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009150:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009154:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8009156:	e00a      	b.n	800916e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8009158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800915e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8009160:	e005      	b.n	800916e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8009162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009168:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800916a:	e000      	b.n	800916e <HAL_CAN_IRQHandler+0x336>
            break;
 800916c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	699a      	ldr	r2, [r3, #24]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800917c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2204      	movs	r2, #4
 8009184:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8009186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009188:	2b00      	cmp	r3, #0
 800918a:	d008      	beq.n	800919e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009192:	431a      	orrs	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 f84a 	bl	8009232 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800919e:	bf00      	nop
 80091a0:	3728      	adds	r7, #40	@ 0x28
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80091a6:	b480      	push	{r7}
 80091a8:	b083      	sub	sp, #12
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80091ae:	bf00      	nop
 80091b0:	370c      	adds	r7, #12
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80091ba:	b480      	push	{r7}
 80091bc:	b083      	sub	sp, #12
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80091c2:	bf00      	nop
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr

080091ce <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80091ce:	b480      	push	{r7}
 80091d0:	b083      	sub	sp, #12
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80091d6:	bf00      	nop
 80091d8:	370c      	adds	r7, #12
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80091e2:	b480      	push	{r7}
 80091e4:	b083      	sub	sp, #12
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80091ea:	bf00      	nop
 80091ec:	370c      	adds	r7, #12
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr

080091f6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80091f6:	b480      	push	{r7}
 80091f8:	b083      	sub	sp, #12
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80091fe:	bf00      	nop
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800920a:	b480      	push	{r7}
 800920c:	b083      	sub	sp, #12
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8009212:	bf00      	nop
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800921e:	b480      	push	{r7}
 8009220:	b083      	sub	sp, #12
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8009226:	bf00      	nop
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr

08009232 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8009232:	b480      	push	{r7}
 8009234:	b083      	sub	sp, #12
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800923a:	bf00      	nop
 800923c:	370c      	adds	r7, #12
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
	...

08009248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009248:	b480      	push	{r7}
 800924a:	b085      	sub	sp, #20
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f003 0307 	and.w	r3, r3, #7
 8009256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009258:	4b0c      	ldr	r3, [pc, #48]	@ (800928c <__NVIC_SetPriorityGrouping+0x44>)
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800925e:	68ba      	ldr	r2, [r7, #8]
 8009260:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009264:	4013      	ands	r3, r2
 8009266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009270:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800927a:	4a04      	ldr	r2, [pc, #16]	@ (800928c <__NVIC_SetPriorityGrouping+0x44>)
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	60d3      	str	r3, [r2, #12]
}
 8009280:	bf00      	nop
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr
 800928c:	e000ed00 	.word	0xe000ed00

08009290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009290:	b480      	push	{r7}
 8009292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009294:	4b04      	ldr	r3, [pc, #16]	@ (80092a8 <__NVIC_GetPriorityGrouping+0x18>)
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	0a1b      	lsrs	r3, r3, #8
 800929a:	f003 0307 	and.w	r3, r3, #7
}
 800929e:	4618      	mov	r0, r3
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr
 80092a8:	e000ed00 	.word	0xe000ed00

080092ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	4603      	mov	r3, r0
 80092b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	db0b      	blt.n	80092d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80092be:	79fb      	ldrb	r3, [r7, #7]
 80092c0:	f003 021f 	and.w	r2, r3, #31
 80092c4:	4907      	ldr	r1, [pc, #28]	@ (80092e4 <__NVIC_EnableIRQ+0x38>)
 80092c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092ca:	095b      	lsrs	r3, r3, #5
 80092cc:	2001      	movs	r0, #1
 80092ce:	fa00 f202 	lsl.w	r2, r0, r2
 80092d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80092d6:	bf00      	nop
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	e000e100 	.word	0xe000e100

080092e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	4603      	mov	r3, r0
 80092f0:	6039      	str	r1, [r7, #0]
 80092f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	db0a      	blt.n	8009312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	490c      	ldr	r1, [pc, #48]	@ (8009334 <__NVIC_SetPriority+0x4c>)
 8009302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009306:	0112      	lsls	r2, r2, #4
 8009308:	b2d2      	uxtb	r2, r2
 800930a:	440b      	add	r3, r1
 800930c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009310:	e00a      	b.n	8009328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	b2da      	uxtb	r2, r3
 8009316:	4908      	ldr	r1, [pc, #32]	@ (8009338 <__NVIC_SetPriority+0x50>)
 8009318:	79fb      	ldrb	r3, [r7, #7]
 800931a:	f003 030f 	and.w	r3, r3, #15
 800931e:	3b04      	subs	r3, #4
 8009320:	0112      	lsls	r2, r2, #4
 8009322:	b2d2      	uxtb	r2, r2
 8009324:	440b      	add	r3, r1
 8009326:	761a      	strb	r2, [r3, #24]
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr
 8009334:	e000e100 	.word	0xe000e100
 8009338:	e000ed00 	.word	0xe000ed00

0800933c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800933c:	b480      	push	{r7}
 800933e:	b089      	sub	sp, #36	@ 0x24
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f003 0307 	and.w	r3, r3, #7
 800934e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	f1c3 0307 	rsb	r3, r3, #7
 8009356:	2b04      	cmp	r3, #4
 8009358:	bf28      	it	cs
 800935a:	2304      	movcs	r3, #4
 800935c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	3304      	adds	r3, #4
 8009362:	2b06      	cmp	r3, #6
 8009364:	d902      	bls.n	800936c <NVIC_EncodePriority+0x30>
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	3b03      	subs	r3, #3
 800936a:	e000      	b.n	800936e <NVIC_EncodePriority+0x32>
 800936c:	2300      	movs	r3, #0
 800936e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009370:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	fa02 f303 	lsl.w	r3, r2, r3
 800937a:	43da      	mvns	r2, r3
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	401a      	ands	r2, r3
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009384:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	fa01 f303 	lsl.w	r3, r1, r3
 800938e:	43d9      	mvns	r1, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009394:	4313      	orrs	r3, r2
         );
}
 8009396:	4618      	mov	r0, r3
 8009398:	3724      	adds	r7, #36	@ 0x24
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
	...

080093a4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80093a4:	b480      	push	{r7}
 80093a6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80093a8:	f3bf 8f4f 	dsb	sy
}
 80093ac:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80093ae:	4b06      	ldr	r3, [pc, #24]	@ (80093c8 <__NVIC_SystemReset+0x24>)
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80093b6:	4904      	ldr	r1, [pc, #16]	@ (80093c8 <__NVIC_SystemReset+0x24>)
 80093b8:	4b04      	ldr	r3, [pc, #16]	@ (80093cc <__NVIC_SystemReset+0x28>)
 80093ba:	4313      	orrs	r3, r2
 80093bc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80093be:	f3bf 8f4f 	dsb	sy
}
 80093c2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80093c4:	bf00      	nop
 80093c6:	e7fd      	b.n	80093c4 <__NVIC_SystemReset+0x20>
 80093c8:	e000ed00 	.word	0xe000ed00
 80093cc:	05fa0004 	.word	0x05fa0004

080093d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	3b01      	subs	r3, #1
 80093dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093e0:	d301      	bcc.n	80093e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80093e2:	2301      	movs	r3, #1
 80093e4:	e00f      	b.n	8009406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80093e6:	4a0a      	ldr	r2, [pc, #40]	@ (8009410 <SysTick_Config+0x40>)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	3b01      	subs	r3, #1
 80093ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80093ee:	210f      	movs	r1, #15
 80093f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093f4:	f7ff ff78 	bl	80092e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80093f8:	4b05      	ldr	r3, [pc, #20]	@ (8009410 <SysTick_Config+0x40>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80093fe:	4b04      	ldr	r3, [pc, #16]	@ (8009410 <SysTick_Config+0x40>)
 8009400:	2207      	movs	r2, #7
 8009402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3708      	adds	r7, #8
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	e000e010 	.word	0xe000e010

08009414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7ff ff13 	bl	8009248 <__NVIC_SetPriorityGrouping>
}
 8009422:	bf00      	nop
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800942a:	b580      	push	{r7, lr}
 800942c:	b086      	sub	sp, #24
 800942e:	af00      	add	r7, sp, #0
 8009430:	4603      	mov	r3, r0
 8009432:	60b9      	str	r1, [r7, #8]
 8009434:	607a      	str	r2, [r7, #4]
 8009436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009438:	2300      	movs	r3, #0
 800943a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800943c:	f7ff ff28 	bl	8009290 <__NVIC_GetPriorityGrouping>
 8009440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	68b9      	ldr	r1, [r7, #8]
 8009446:	6978      	ldr	r0, [r7, #20]
 8009448:	f7ff ff78 	bl	800933c <NVIC_EncodePriority>
 800944c:	4602      	mov	r2, r0
 800944e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009452:	4611      	mov	r1, r2
 8009454:	4618      	mov	r0, r3
 8009456:	f7ff ff47 	bl	80092e8 <__NVIC_SetPriority>
}
 800945a:	bf00      	nop
 800945c:	3718      	adds	r7, #24
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b082      	sub	sp, #8
 8009466:	af00      	add	r7, sp, #0
 8009468:	4603      	mov	r3, r0
 800946a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800946c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009470:	4618      	mov	r0, r3
 8009472:	f7ff ff1b 	bl	80092ac <__NVIC_EnableIRQ>
}
 8009476:	bf00      	nop
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8009482:	f7ff ff8f 	bl	80093a4 <__NVIC_SystemReset>

08009486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b082      	sub	sp, #8
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f7ff ff9e 	bl	80093d0 <SysTick_Config>
 8009494:	4603      	mov	r3, r0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
	...

080094a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b089      	sub	sp, #36	@ 0x24
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80094aa:	2300      	movs	r3, #0
 80094ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80094ae:	2300      	movs	r3, #0
 80094b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80094b2:	2300      	movs	r3, #0
 80094b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80094b6:	2300      	movs	r3, #0
 80094b8:	61fb      	str	r3, [r7, #28]
 80094ba:	e16b      	b.n	8009794 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80094bc:	2201      	movs	r2, #1
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	fa02 f303 	lsl.w	r3, r2, r3
 80094c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	697a      	ldr	r2, [r7, #20]
 80094cc:	4013      	ands	r3, r2
 80094ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80094d0:	693a      	ldr	r2, [r7, #16]
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	f040 815a 	bne.w	800978e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	f003 0303 	and.w	r3, r3, #3
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d005      	beq.n	80094f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d130      	bne.n	8009554 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	005b      	lsls	r3, r3, #1
 80094fc:	2203      	movs	r2, #3
 80094fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009502:	43db      	mvns	r3, r3
 8009504:	69ba      	ldr	r2, [r7, #24]
 8009506:	4013      	ands	r3, r2
 8009508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	68da      	ldr	r2, [r3, #12]
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	005b      	lsls	r3, r3, #1
 8009512:	fa02 f303 	lsl.w	r3, r2, r3
 8009516:	69ba      	ldr	r2, [r7, #24]
 8009518:	4313      	orrs	r3, r2
 800951a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	69ba      	ldr	r2, [r7, #24]
 8009520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009528:	2201      	movs	r2, #1
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	fa02 f303 	lsl.w	r3, r2, r3
 8009530:	43db      	mvns	r3, r3
 8009532:	69ba      	ldr	r2, [r7, #24]
 8009534:	4013      	ands	r3, r2
 8009536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	091b      	lsrs	r3, r3, #4
 800953e:	f003 0201 	and.w	r2, r3, #1
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	fa02 f303 	lsl.w	r3, r2, r3
 8009548:	69ba      	ldr	r2, [r7, #24]
 800954a:	4313      	orrs	r3, r2
 800954c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	69ba      	ldr	r2, [r7, #24]
 8009552:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	f003 0303 	and.w	r3, r3, #3
 800955c:	2b03      	cmp	r3, #3
 800955e:	d017      	beq.n	8009590 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	005b      	lsls	r3, r3, #1
 800956a:	2203      	movs	r2, #3
 800956c:	fa02 f303 	lsl.w	r3, r2, r3
 8009570:	43db      	mvns	r3, r3
 8009572:	69ba      	ldr	r2, [r7, #24]
 8009574:	4013      	ands	r3, r2
 8009576:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	689a      	ldr	r2, [r3, #8]
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	005b      	lsls	r3, r3, #1
 8009580:	fa02 f303 	lsl.w	r3, r2, r3
 8009584:	69ba      	ldr	r2, [r7, #24]
 8009586:	4313      	orrs	r3, r2
 8009588:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	69ba      	ldr	r2, [r7, #24]
 800958e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	f003 0303 	and.w	r3, r3, #3
 8009598:	2b02      	cmp	r3, #2
 800959a:	d123      	bne.n	80095e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	08da      	lsrs	r2, r3, #3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	3208      	adds	r2, #8
 80095a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	f003 0307 	and.w	r3, r3, #7
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	220f      	movs	r2, #15
 80095b4:	fa02 f303 	lsl.w	r3, r2, r3
 80095b8:	43db      	mvns	r3, r3
 80095ba:	69ba      	ldr	r2, [r7, #24]
 80095bc:	4013      	ands	r3, r2
 80095be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	691a      	ldr	r2, [r3, #16]
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	f003 0307 	and.w	r3, r3, #7
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	fa02 f303 	lsl.w	r3, r2, r3
 80095d0:	69ba      	ldr	r2, [r7, #24]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	08da      	lsrs	r2, r3, #3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	3208      	adds	r2, #8
 80095de:	69b9      	ldr	r1, [r7, #24]
 80095e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	005b      	lsls	r3, r3, #1
 80095ee:	2203      	movs	r2, #3
 80095f0:	fa02 f303 	lsl.w	r3, r2, r3
 80095f4:	43db      	mvns	r3, r3
 80095f6:	69ba      	ldr	r2, [r7, #24]
 80095f8:	4013      	ands	r3, r2
 80095fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	f003 0203 	and.w	r2, r3, #3
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	005b      	lsls	r3, r3, #1
 8009608:	fa02 f303 	lsl.w	r3, r2, r3
 800960c:	69ba      	ldr	r2, [r7, #24]
 800960e:	4313      	orrs	r3, r2
 8009610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	69ba      	ldr	r2, [r7, #24]
 8009616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009620:	2b00      	cmp	r3, #0
 8009622:	f000 80b4 	beq.w	800978e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009626:	2300      	movs	r3, #0
 8009628:	60fb      	str	r3, [r7, #12]
 800962a:	4b60      	ldr	r3, [pc, #384]	@ (80097ac <HAL_GPIO_Init+0x30c>)
 800962c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800962e:	4a5f      	ldr	r2, [pc, #380]	@ (80097ac <HAL_GPIO_Init+0x30c>)
 8009630:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009634:	6453      	str	r3, [r2, #68]	@ 0x44
 8009636:	4b5d      	ldr	r3, [pc, #372]	@ (80097ac <HAL_GPIO_Init+0x30c>)
 8009638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800963a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800963e:	60fb      	str	r3, [r7, #12]
 8009640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009642:	4a5b      	ldr	r2, [pc, #364]	@ (80097b0 <HAL_GPIO_Init+0x310>)
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	089b      	lsrs	r3, r3, #2
 8009648:	3302      	adds	r3, #2
 800964a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800964e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	f003 0303 	and.w	r3, r3, #3
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	220f      	movs	r2, #15
 800965a:	fa02 f303 	lsl.w	r3, r2, r3
 800965e:	43db      	mvns	r3, r3
 8009660:	69ba      	ldr	r2, [r7, #24]
 8009662:	4013      	ands	r3, r2
 8009664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a52      	ldr	r2, [pc, #328]	@ (80097b4 <HAL_GPIO_Init+0x314>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d02b      	beq.n	80096c6 <HAL_GPIO_Init+0x226>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a51      	ldr	r2, [pc, #324]	@ (80097b8 <HAL_GPIO_Init+0x318>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d025      	beq.n	80096c2 <HAL_GPIO_Init+0x222>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a50      	ldr	r2, [pc, #320]	@ (80097bc <HAL_GPIO_Init+0x31c>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d01f      	beq.n	80096be <HAL_GPIO_Init+0x21e>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a4f      	ldr	r2, [pc, #316]	@ (80097c0 <HAL_GPIO_Init+0x320>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d019      	beq.n	80096ba <HAL_GPIO_Init+0x21a>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a4e      	ldr	r2, [pc, #312]	@ (80097c4 <HAL_GPIO_Init+0x324>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d013      	beq.n	80096b6 <HAL_GPIO_Init+0x216>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a4d      	ldr	r2, [pc, #308]	@ (80097c8 <HAL_GPIO_Init+0x328>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d00d      	beq.n	80096b2 <HAL_GPIO_Init+0x212>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a4c      	ldr	r2, [pc, #304]	@ (80097cc <HAL_GPIO_Init+0x32c>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d007      	beq.n	80096ae <HAL_GPIO_Init+0x20e>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a4b      	ldr	r2, [pc, #300]	@ (80097d0 <HAL_GPIO_Init+0x330>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d101      	bne.n	80096aa <HAL_GPIO_Init+0x20a>
 80096a6:	2307      	movs	r3, #7
 80096a8:	e00e      	b.n	80096c8 <HAL_GPIO_Init+0x228>
 80096aa:	2308      	movs	r3, #8
 80096ac:	e00c      	b.n	80096c8 <HAL_GPIO_Init+0x228>
 80096ae:	2306      	movs	r3, #6
 80096b0:	e00a      	b.n	80096c8 <HAL_GPIO_Init+0x228>
 80096b2:	2305      	movs	r3, #5
 80096b4:	e008      	b.n	80096c8 <HAL_GPIO_Init+0x228>
 80096b6:	2304      	movs	r3, #4
 80096b8:	e006      	b.n	80096c8 <HAL_GPIO_Init+0x228>
 80096ba:	2303      	movs	r3, #3
 80096bc:	e004      	b.n	80096c8 <HAL_GPIO_Init+0x228>
 80096be:	2302      	movs	r3, #2
 80096c0:	e002      	b.n	80096c8 <HAL_GPIO_Init+0x228>
 80096c2:	2301      	movs	r3, #1
 80096c4:	e000      	b.n	80096c8 <HAL_GPIO_Init+0x228>
 80096c6:	2300      	movs	r3, #0
 80096c8:	69fa      	ldr	r2, [r7, #28]
 80096ca:	f002 0203 	and.w	r2, r2, #3
 80096ce:	0092      	lsls	r2, r2, #2
 80096d0:	4093      	lsls	r3, r2
 80096d2:	69ba      	ldr	r2, [r7, #24]
 80096d4:	4313      	orrs	r3, r2
 80096d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80096d8:	4935      	ldr	r1, [pc, #212]	@ (80097b0 <HAL_GPIO_Init+0x310>)
 80096da:	69fb      	ldr	r3, [r7, #28]
 80096dc:	089b      	lsrs	r3, r3, #2
 80096de:	3302      	adds	r3, #2
 80096e0:	69ba      	ldr	r2, [r7, #24]
 80096e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80096e6:	4b3b      	ldr	r3, [pc, #236]	@ (80097d4 <HAL_GPIO_Init+0x334>)
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	43db      	mvns	r3, r3
 80096f0:	69ba      	ldr	r2, [r7, #24]
 80096f2:	4013      	ands	r3, r2
 80096f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d003      	beq.n	800970a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009702:	69ba      	ldr	r2, [r7, #24]
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	4313      	orrs	r3, r2
 8009708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800970a:	4a32      	ldr	r2, [pc, #200]	@ (80097d4 <HAL_GPIO_Init+0x334>)
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009710:	4b30      	ldr	r3, [pc, #192]	@ (80097d4 <HAL_GPIO_Init+0x334>)
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	43db      	mvns	r3, r3
 800971a:	69ba      	ldr	r2, [r7, #24]
 800971c:	4013      	ands	r3, r2
 800971e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009728:	2b00      	cmp	r3, #0
 800972a:	d003      	beq.n	8009734 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800972c:	69ba      	ldr	r2, [r7, #24]
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	4313      	orrs	r3, r2
 8009732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009734:	4a27      	ldr	r2, [pc, #156]	@ (80097d4 <HAL_GPIO_Init+0x334>)
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800973a:	4b26      	ldr	r3, [pc, #152]	@ (80097d4 <HAL_GPIO_Init+0x334>)
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	43db      	mvns	r3, r3
 8009744:	69ba      	ldr	r2, [r7, #24]
 8009746:	4013      	ands	r3, r2
 8009748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009756:	69ba      	ldr	r2, [r7, #24]
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	4313      	orrs	r3, r2
 800975c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800975e:	4a1d      	ldr	r2, [pc, #116]	@ (80097d4 <HAL_GPIO_Init+0x334>)
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009764:	4b1b      	ldr	r3, [pc, #108]	@ (80097d4 <HAL_GPIO_Init+0x334>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	43db      	mvns	r3, r3
 800976e:	69ba      	ldr	r2, [r7, #24]
 8009770:	4013      	ands	r3, r2
 8009772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d003      	beq.n	8009788 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009780:	69ba      	ldr	r2, [r7, #24]
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	4313      	orrs	r3, r2
 8009786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009788:	4a12      	ldr	r2, [pc, #72]	@ (80097d4 <HAL_GPIO_Init+0x334>)
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	3301      	adds	r3, #1
 8009792:	61fb      	str	r3, [r7, #28]
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	2b0f      	cmp	r3, #15
 8009798:	f67f ae90 	bls.w	80094bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800979c:	bf00      	nop
 800979e:	bf00      	nop
 80097a0:	3724      	adds	r7, #36	@ 0x24
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	40023800 	.word	0x40023800
 80097b0:	40013800 	.word	0x40013800
 80097b4:	40020000 	.word	0x40020000
 80097b8:	40020400 	.word	0x40020400
 80097bc:	40020800 	.word	0x40020800
 80097c0:	40020c00 	.word	0x40020c00
 80097c4:	40021000 	.word	0x40021000
 80097c8:	40021400 	.word	0x40021400
 80097cc:	40021800 	.word	0x40021800
 80097d0:	40021c00 	.word	0x40021c00
 80097d4:	40013c00 	.word	0x40013c00

080097d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	460b      	mov	r3, r1
 80097e2:	807b      	strh	r3, [r7, #2]
 80097e4:	4613      	mov	r3, r2
 80097e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80097e8:	787b      	ldrb	r3, [r7, #1]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d003      	beq.n	80097f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80097ee:	887a      	ldrh	r2, [r7, #2]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80097f4:	e003      	b.n	80097fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80097f6:	887b      	ldrh	r3, [r7, #2]
 80097f8:	041a      	lsls	r2, r3, #16
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	619a      	str	r2, [r3, #24]
}
 80097fe:	bf00      	nop
 8009800:	370c      	adds	r7, #12
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
	...

0800980c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d101      	bne.n	800981e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	e12b      	b.n	8009a76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009824:	b2db      	uxtb	r3, r3
 8009826:	2b00      	cmp	r3, #0
 8009828:	d106      	bne.n	8009838 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f7fe fbde 	bl	8007ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2224      	movs	r2, #36	@ 0x24
 800983c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f022 0201 	bic.w	r2, r2, #1
 800984e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800985e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800986e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009870:	f000 fd80 	bl	800a374 <HAL_RCC_GetPCLK1Freq>
 8009874:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	4a81      	ldr	r2, [pc, #516]	@ (8009a80 <HAL_I2C_Init+0x274>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d807      	bhi.n	8009890 <HAL_I2C_Init+0x84>
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	4a80      	ldr	r2, [pc, #512]	@ (8009a84 <HAL_I2C_Init+0x278>)
 8009884:	4293      	cmp	r3, r2
 8009886:	bf94      	ite	ls
 8009888:	2301      	movls	r3, #1
 800988a:	2300      	movhi	r3, #0
 800988c:	b2db      	uxtb	r3, r3
 800988e:	e006      	b.n	800989e <HAL_I2C_Init+0x92>
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	4a7d      	ldr	r2, [pc, #500]	@ (8009a88 <HAL_I2C_Init+0x27c>)
 8009894:	4293      	cmp	r3, r2
 8009896:	bf94      	ite	ls
 8009898:	2301      	movls	r3, #1
 800989a:	2300      	movhi	r3, #0
 800989c:	b2db      	uxtb	r3, r3
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d001      	beq.n	80098a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	e0e7      	b.n	8009a76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	4a78      	ldr	r2, [pc, #480]	@ (8009a8c <HAL_I2C_Init+0x280>)
 80098aa:	fba2 2303 	umull	r2, r3, r2, r3
 80098ae:	0c9b      	lsrs	r3, r3, #18
 80098b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	68ba      	ldr	r2, [r7, #8]
 80098c2:	430a      	orrs	r2, r1
 80098c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	6a1b      	ldr	r3, [r3, #32]
 80098cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	4a6a      	ldr	r2, [pc, #424]	@ (8009a80 <HAL_I2C_Init+0x274>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d802      	bhi.n	80098e0 <HAL_I2C_Init+0xd4>
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	3301      	adds	r3, #1
 80098de:	e009      	b.n	80098f4 <HAL_I2C_Init+0xe8>
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80098e6:	fb02 f303 	mul.w	r3, r2, r3
 80098ea:	4a69      	ldr	r2, [pc, #420]	@ (8009a90 <HAL_I2C_Init+0x284>)
 80098ec:	fba2 2303 	umull	r2, r3, r2, r3
 80098f0:	099b      	lsrs	r3, r3, #6
 80098f2:	3301      	adds	r3, #1
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	6812      	ldr	r2, [r2, #0]
 80098f8:	430b      	orrs	r3, r1
 80098fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	69db      	ldr	r3, [r3, #28]
 8009902:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009906:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	495c      	ldr	r1, [pc, #368]	@ (8009a80 <HAL_I2C_Init+0x274>)
 8009910:	428b      	cmp	r3, r1
 8009912:	d819      	bhi.n	8009948 <HAL_I2C_Init+0x13c>
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	1e59      	subs	r1, r3, #1
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	005b      	lsls	r3, r3, #1
 800991e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009922:	1c59      	adds	r1, r3, #1
 8009924:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009928:	400b      	ands	r3, r1
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00a      	beq.n	8009944 <HAL_I2C_Init+0x138>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	1e59      	subs	r1, r3, #1
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	005b      	lsls	r3, r3, #1
 8009938:	fbb1 f3f3 	udiv	r3, r1, r3
 800993c:	3301      	adds	r3, #1
 800993e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009942:	e051      	b.n	80099e8 <HAL_I2C_Init+0x1dc>
 8009944:	2304      	movs	r3, #4
 8009946:	e04f      	b.n	80099e8 <HAL_I2C_Init+0x1dc>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d111      	bne.n	8009974 <HAL_I2C_Init+0x168>
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	1e58      	subs	r0, r3, #1
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6859      	ldr	r1, [r3, #4]
 8009958:	460b      	mov	r3, r1
 800995a:	005b      	lsls	r3, r3, #1
 800995c:	440b      	add	r3, r1
 800995e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009962:	3301      	adds	r3, #1
 8009964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009968:	2b00      	cmp	r3, #0
 800996a:	bf0c      	ite	eq
 800996c:	2301      	moveq	r3, #1
 800996e:	2300      	movne	r3, #0
 8009970:	b2db      	uxtb	r3, r3
 8009972:	e012      	b.n	800999a <HAL_I2C_Init+0x18e>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	1e58      	subs	r0, r3, #1
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6859      	ldr	r1, [r3, #4]
 800997c:	460b      	mov	r3, r1
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	440b      	add	r3, r1
 8009982:	0099      	lsls	r1, r3, #2
 8009984:	440b      	add	r3, r1
 8009986:	fbb0 f3f3 	udiv	r3, r0, r3
 800998a:	3301      	adds	r3, #1
 800998c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009990:	2b00      	cmp	r3, #0
 8009992:	bf0c      	ite	eq
 8009994:	2301      	moveq	r3, #1
 8009996:	2300      	movne	r3, #0
 8009998:	b2db      	uxtb	r3, r3
 800999a:	2b00      	cmp	r3, #0
 800999c:	d001      	beq.n	80099a2 <HAL_I2C_Init+0x196>
 800999e:	2301      	movs	r3, #1
 80099a0:	e022      	b.n	80099e8 <HAL_I2C_Init+0x1dc>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d10e      	bne.n	80099c8 <HAL_I2C_Init+0x1bc>
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	1e58      	subs	r0, r3, #1
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6859      	ldr	r1, [r3, #4]
 80099b2:	460b      	mov	r3, r1
 80099b4:	005b      	lsls	r3, r3, #1
 80099b6:	440b      	add	r3, r1
 80099b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80099bc:	3301      	adds	r3, #1
 80099be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099c6:	e00f      	b.n	80099e8 <HAL_I2C_Init+0x1dc>
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	1e58      	subs	r0, r3, #1
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6859      	ldr	r1, [r3, #4]
 80099d0:	460b      	mov	r3, r1
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	440b      	add	r3, r1
 80099d6:	0099      	lsls	r1, r3, #2
 80099d8:	440b      	add	r3, r1
 80099da:	fbb0 f3f3 	udiv	r3, r0, r3
 80099de:	3301      	adds	r3, #1
 80099e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80099e8:	6879      	ldr	r1, [r7, #4]
 80099ea:	6809      	ldr	r1, [r1, #0]
 80099ec:	4313      	orrs	r3, r2
 80099ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	69da      	ldr	r2, [r3, #28]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a1b      	ldr	r3, [r3, #32]
 8009a02:	431a      	orrs	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	430a      	orrs	r2, r1
 8009a0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009a16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	6911      	ldr	r1, [r2, #16]
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	68d2      	ldr	r2, [r2, #12]
 8009a22:	4311      	orrs	r1, r2
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	6812      	ldr	r2, [r2, #0]
 8009a28:	430b      	orrs	r3, r1
 8009a2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	695a      	ldr	r2, [r3, #20]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	699b      	ldr	r3, [r3, #24]
 8009a3e:	431a      	orrs	r2, r3
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	430a      	orrs	r2, r1
 8009a46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f042 0201 	orr.w	r2, r2, #1
 8009a56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2220      	movs	r2, #32
 8009a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	000186a0 	.word	0x000186a0
 8009a84:	001e847f 	.word	0x001e847f
 8009a88:	003d08ff 	.word	0x003d08ff
 8009a8c:	431bde83 	.word	0x431bde83
 8009a90:	10624dd3 	.word	0x10624dd3

08009a94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b086      	sub	sp, #24
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d101      	bne.n	8009aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e267      	b.n	8009f76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f003 0301 	and.w	r3, r3, #1
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d075      	beq.n	8009b9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009ab2:	4b88      	ldr	r3, [pc, #544]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	f003 030c 	and.w	r3, r3, #12
 8009aba:	2b04      	cmp	r3, #4
 8009abc:	d00c      	beq.n	8009ad8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009abe:	4b85      	ldr	r3, [pc, #532]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009ac6:	2b08      	cmp	r3, #8
 8009ac8:	d112      	bne.n	8009af0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009aca:	4b82      	ldr	r3, [pc, #520]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ad2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ad6:	d10b      	bne.n	8009af0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ad8:	4b7e      	ldr	r3, [pc, #504]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d05b      	beq.n	8009b9c <HAL_RCC_OscConfig+0x108>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d157      	bne.n	8009b9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	e242      	b.n	8009f76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009af8:	d106      	bne.n	8009b08 <HAL_RCC_OscConfig+0x74>
 8009afa:	4b76      	ldr	r3, [pc, #472]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a75      	ldr	r2, [pc, #468]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b04:	6013      	str	r3, [r2, #0]
 8009b06:	e01d      	b.n	8009b44 <HAL_RCC_OscConfig+0xb0>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009b10:	d10c      	bne.n	8009b2c <HAL_RCC_OscConfig+0x98>
 8009b12:	4b70      	ldr	r3, [pc, #448]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a6f      	ldr	r2, [pc, #444]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009b18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009b1c:	6013      	str	r3, [r2, #0]
 8009b1e:	4b6d      	ldr	r3, [pc, #436]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a6c      	ldr	r2, [pc, #432]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009b24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b28:	6013      	str	r3, [r2, #0]
 8009b2a:	e00b      	b.n	8009b44 <HAL_RCC_OscConfig+0xb0>
 8009b2c:	4b69      	ldr	r3, [pc, #420]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a68      	ldr	r2, [pc, #416]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b36:	6013      	str	r3, [r2, #0]
 8009b38:	4b66      	ldr	r3, [pc, #408]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a65      	ldr	r2, [pc, #404]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009b3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d013      	beq.n	8009b74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b4c:	f7fe fcb2 	bl	80084b4 <HAL_GetTick>
 8009b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b52:	e008      	b.n	8009b66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b54:	f7fe fcae 	bl	80084b4 <HAL_GetTick>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	1ad3      	subs	r3, r2, r3
 8009b5e:	2b64      	cmp	r3, #100	@ 0x64
 8009b60:	d901      	bls.n	8009b66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009b62:	2303      	movs	r3, #3
 8009b64:	e207      	b.n	8009f76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b66:	4b5b      	ldr	r3, [pc, #364]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d0f0      	beq.n	8009b54 <HAL_RCC_OscConfig+0xc0>
 8009b72:	e014      	b.n	8009b9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b74:	f7fe fc9e 	bl	80084b4 <HAL_GetTick>
 8009b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b7a:	e008      	b.n	8009b8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b7c:	f7fe fc9a 	bl	80084b4 <HAL_GetTick>
 8009b80:	4602      	mov	r2, r0
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	2b64      	cmp	r3, #100	@ 0x64
 8009b88:	d901      	bls.n	8009b8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e1f3      	b.n	8009f76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b8e:	4b51      	ldr	r3, [pc, #324]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1f0      	bne.n	8009b7c <HAL_RCC_OscConfig+0xe8>
 8009b9a:	e000      	b.n	8009b9e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 0302 	and.w	r3, r3, #2
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d063      	beq.n	8009c72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009baa:	4b4a      	ldr	r3, [pc, #296]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	f003 030c 	and.w	r3, r3, #12
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00b      	beq.n	8009bce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009bb6:	4b47      	ldr	r3, [pc, #284]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009bbe:	2b08      	cmp	r3, #8
 8009bc0:	d11c      	bne.n	8009bfc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009bc2:	4b44      	ldr	r3, [pc, #272]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d116      	bne.n	8009bfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009bce:	4b41      	ldr	r3, [pc, #260]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f003 0302 	and.w	r3, r3, #2
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d005      	beq.n	8009be6 <HAL_RCC_OscConfig+0x152>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d001      	beq.n	8009be6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e1c7      	b.n	8009f76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009be6:	4b3b      	ldr	r3, [pc, #236]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	00db      	lsls	r3, r3, #3
 8009bf4:	4937      	ldr	r1, [pc, #220]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009bfa:	e03a      	b.n	8009c72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d020      	beq.n	8009c46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009c04:	4b34      	ldr	r3, [pc, #208]	@ (8009cd8 <HAL_RCC_OscConfig+0x244>)
 8009c06:	2201      	movs	r2, #1
 8009c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c0a:	f7fe fc53 	bl	80084b4 <HAL_GetTick>
 8009c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c10:	e008      	b.n	8009c24 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c12:	f7fe fc4f 	bl	80084b4 <HAL_GetTick>
 8009c16:	4602      	mov	r2, r0
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d901      	bls.n	8009c24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009c20:	2303      	movs	r3, #3
 8009c22:	e1a8      	b.n	8009f76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c24:	4b2b      	ldr	r3, [pc, #172]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 0302 	and.w	r3, r3, #2
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d0f0      	beq.n	8009c12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c30:	4b28      	ldr	r3, [pc, #160]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	00db      	lsls	r3, r3, #3
 8009c3e:	4925      	ldr	r1, [pc, #148]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009c40:	4313      	orrs	r3, r2
 8009c42:	600b      	str	r3, [r1, #0]
 8009c44:	e015      	b.n	8009c72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c46:	4b24      	ldr	r3, [pc, #144]	@ (8009cd8 <HAL_RCC_OscConfig+0x244>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c4c:	f7fe fc32 	bl	80084b4 <HAL_GetTick>
 8009c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c52:	e008      	b.n	8009c66 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c54:	f7fe fc2e 	bl	80084b4 <HAL_GetTick>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d901      	bls.n	8009c66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	e187      	b.n	8009f76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c66:	4b1b      	ldr	r3, [pc, #108]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f003 0302 	and.w	r3, r3, #2
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1f0      	bne.n	8009c54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f003 0308 	and.w	r3, r3, #8
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d036      	beq.n	8009cec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	695b      	ldr	r3, [r3, #20]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d016      	beq.n	8009cb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c86:	4b15      	ldr	r3, [pc, #84]	@ (8009cdc <HAL_RCC_OscConfig+0x248>)
 8009c88:	2201      	movs	r2, #1
 8009c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c8c:	f7fe fc12 	bl	80084b4 <HAL_GetTick>
 8009c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c92:	e008      	b.n	8009ca6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c94:	f7fe fc0e 	bl	80084b4 <HAL_GetTick>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	1ad3      	subs	r3, r2, r3
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	d901      	bls.n	8009ca6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	e167      	b.n	8009f76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8009cd4 <HAL_RCC_OscConfig+0x240>)
 8009ca8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009caa:	f003 0302 	and.w	r3, r3, #2
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d0f0      	beq.n	8009c94 <HAL_RCC_OscConfig+0x200>
 8009cb2:	e01b      	b.n	8009cec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009cb4:	4b09      	ldr	r3, [pc, #36]	@ (8009cdc <HAL_RCC_OscConfig+0x248>)
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009cba:	f7fe fbfb 	bl	80084b4 <HAL_GetTick>
 8009cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009cc0:	e00e      	b.n	8009ce0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009cc2:	f7fe fbf7 	bl	80084b4 <HAL_GetTick>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	1ad3      	subs	r3, r2, r3
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	d907      	bls.n	8009ce0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	e150      	b.n	8009f76 <HAL_RCC_OscConfig+0x4e2>
 8009cd4:	40023800 	.word	0x40023800
 8009cd8:	42470000 	.word	0x42470000
 8009cdc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ce0:	4b88      	ldr	r3, [pc, #544]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009ce2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ce4:	f003 0302 	and.w	r3, r3, #2
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1ea      	bne.n	8009cc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 0304 	and.w	r3, r3, #4
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f000 8097 	beq.w	8009e28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009cfe:	4b81      	ldr	r3, [pc, #516]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10f      	bne.n	8009d2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	60bb      	str	r3, [r7, #8]
 8009d0e:	4b7d      	ldr	r3, [pc, #500]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d12:	4a7c      	ldr	r2, [pc, #496]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009d14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d18:	6413      	str	r3, [r2, #64]	@ 0x40
 8009d1a:	4b7a      	ldr	r3, [pc, #488]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d22:	60bb      	str	r3, [r7, #8]
 8009d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d26:	2301      	movs	r3, #1
 8009d28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d2a:	4b77      	ldr	r3, [pc, #476]	@ (8009f08 <HAL_RCC_OscConfig+0x474>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d118      	bne.n	8009d68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009d36:	4b74      	ldr	r3, [pc, #464]	@ (8009f08 <HAL_RCC_OscConfig+0x474>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a73      	ldr	r2, [pc, #460]	@ (8009f08 <HAL_RCC_OscConfig+0x474>)
 8009d3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d42:	f7fe fbb7 	bl	80084b4 <HAL_GetTick>
 8009d46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d48:	e008      	b.n	8009d5c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d4a:	f7fe fbb3 	bl	80084b4 <HAL_GetTick>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	d901      	bls.n	8009d5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009d58:	2303      	movs	r3, #3
 8009d5a:	e10c      	b.n	8009f76 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d5c:	4b6a      	ldr	r3, [pc, #424]	@ (8009f08 <HAL_RCC_OscConfig+0x474>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d0f0      	beq.n	8009d4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d106      	bne.n	8009d7e <HAL_RCC_OscConfig+0x2ea>
 8009d70:	4b64      	ldr	r3, [pc, #400]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d74:	4a63      	ldr	r2, [pc, #396]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009d76:	f043 0301 	orr.w	r3, r3, #1
 8009d7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d7c:	e01c      	b.n	8009db8 <HAL_RCC_OscConfig+0x324>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	2b05      	cmp	r3, #5
 8009d84:	d10c      	bne.n	8009da0 <HAL_RCC_OscConfig+0x30c>
 8009d86:	4b5f      	ldr	r3, [pc, #380]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d8a:	4a5e      	ldr	r2, [pc, #376]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009d8c:	f043 0304 	orr.w	r3, r3, #4
 8009d90:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d92:	4b5c      	ldr	r3, [pc, #368]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d96:	4a5b      	ldr	r2, [pc, #364]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009d98:	f043 0301 	orr.w	r3, r3, #1
 8009d9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d9e:	e00b      	b.n	8009db8 <HAL_RCC_OscConfig+0x324>
 8009da0:	4b58      	ldr	r3, [pc, #352]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009da4:	4a57      	ldr	r2, [pc, #348]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009da6:	f023 0301 	bic.w	r3, r3, #1
 8009daa:	6713      	str	r3, [r2, #112]	@ 0x70
 8009dac:	4b55      	ldr	r3, [pc, #340]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009db0:	4a54      	ldr	r2, [pc, #336]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009db2:	f023 0304 	bic.w	r3, r3, #4
 8009db6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d015      	beq.n	8009dec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dc0:	f7fe fb78 	bl	80084b4 <HAL_GetTick>
 8009dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009dc6:	e00a      	b.n	8009dde <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dc8:	f7fe fb74 	bl	80084b4 <HAL_GetTick>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d901      	bls.n	8009dde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	e0cb      	b.n	8009f76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009dde:	4b49      	ldr	r3, [pc, #292]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009de2:	f003 0302 	and.w	r3, r3, #2
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d0ee      	beq.n	8009dc8 <HAL_RCC_OscConfig+0x334>
 8009dea:	e014      	b.n	8009e16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009dec:	f7fe fb62 	bl	80084b4 <HAL_GetTick>
 8009df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009df2:	e00a      	b.n	8009e0a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009df4:	f7fe fb5e 	bl	80084b4 <HAL_GetTick>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	1ad3      	subs	r3, r2, r3
 8009dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d901      	bls.n	8009e0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009e06:	2303      	movs	r3, #3
 8009e08:	e0b5      	b.n	8009f76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e0a:	4b3e      	ldr	r3, [pc, #248]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e0e:	f003 0302 	and.w	r3, r3, #2
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1ee      	bne.n	8009df4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009e16:	7dfb      	ldrb	r3, [r7, #23]
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d105      	bne.n	8009e28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e1c:	4b39      	ldr	r3, [pc, #228]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e20:	4a38      	ldr	r2, [pc, #224]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009e22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	699b      	ldr	r3, [r3, #24]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f000 80a1 	beq.w	8009f74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009e32:	4b34      	ldr	r3, [pc, #208]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	f003 030c 	and.w	r3, r3, #12
 8009e3a:	2b08      	cmp	r3, #8
 8009e3c:	d05c      	beq.n	8009ef8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	699b      	ldr	r3, [r3, #24]
 8009e42:	2b02      	cmp	r3, #2
 8009e44:	d141      	bne.n	8009eca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e46:	4b31      	ldr	r3, [pc, #196]	@ (8009f0c <HAL_RCC_OscConfig+0x478>)
 8009e48:	2200      	movs	r2, #0
 8009e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e4c:	f7fe fb32 	bl	80084b4 <HAL_GetTick>
 8009e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e52:	e008      	b.n	8009e66 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e54:	f7fe fb2e 	bl	80084b4 <HAL_GetTick>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	d901      	bls.n	8009e66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009e62:	2303      	movs	r3, #3
 8009e64:	e087      	b.n	8009f76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e66:	4b27      	ldr	r3, [pc, #156]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1f0      	bne.n	8009e54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	69da      	ldr	r2, [r3, #28]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a1b      	ldr	r3, [r3, #32]
 8009e7a:	431a      	orrs	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e80:	019b      	lsls	r3, r3, #6
 8009e82:	431a      	orrs	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e88:	085b      	lsrs	r3, r3, #1
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	041b      	lsls	r3, r3, #16
 8009e8e:	431a      	orrs	r2, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e94:	061b      	lsls	r3, r3, #24
 8009e96:	491b      	ldr	r1, [pc, #108]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8009f0c <HAL_RCC_OscConfig+0x478>)
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ea2:	f7fe fb07 	bl	80084b4 <HAL_GetTick>
 8009ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ea8:	e008      	b.n	8009ebc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009eaa:	f7fe fb03 	bl	80084b4 <HAL_GetTick>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	1ad3      	subs	r3, r2, r3
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	d901      	bls.n	8009ebc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	e05c      	b.n	8009f76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ebc:	4b11      	ldr	r3, [pc, #68]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d0f0      	beq.n	8009eaa <HAL_RCC_OscConfig+0x416>
 8009ec8:	e054      	b.n	8009f74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009eca:	4b10      	ldr	r3, [pc, #64]	@ (8009f0c <HAL_RCC_OscConfig+0x478>)
 8009ecc:	2200      	movs	r2, #0
 8009ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ed0:	f7fe faf0 	bl	80084b4 <HAL_GetTick>
 8009ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ed6:	e008      	b.n	8009eea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ed8:	f7fe faec 	bl	80084b4 <HAL_GetTick>
 8009edc:	4602      	mov	r2, r0
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d901      	bls.n	8009eea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	e045      	b.n	8009f76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009eea:	4b06      	ldr	r3, [pc, #24]	@ (8009f04 <HAL_RCC_OscConfig+0x470>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1f0      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x444>
 8009ef6:	e03d      	b.n	8009f74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	699b      	ldr	r3, [r3, #24]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d107      	bne.n	8009f10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e038      	b.n	8009f76 <HAL_RCC_OscConfig+0x4e2>
 8009f04:	40023800 	.word	0x40023800
 8009f08:	40007000 	.word	0x40007000
 8009f0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009f10:	4b1b      	ldr	r3, [pc, #108]	@ (8009f80 <HAL_RCC_OscConfig+0x4ec>)
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d028      	beq.n	8009f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d121      	bne.n	8009f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d11a      	bne.n	8009f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009f40:	4013      	ands	r3, r2
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009f46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d111      	bne.n	8009f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f56:	085b      	lsrs	r3, r3, #1
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d107      	bne.n	8009f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d001      	beq.n	8009f74 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	e000      	b.n	8009f76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3718      	adds	r7, #24
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	40023800 	.word	0x40023800

08009f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d101      	bne.n	8009f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	e0cc      	b.n	800a132 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009f98:	4b68      	ldr	r3, [pc, #416]	@ (800a13c <HAL_RCC_ClockConfig+0x1b8>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f003 0307 	and.w	r3, r3, #7
 8009fa0:	683a      	ldr	r2, [r7, #0]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d90c      	bls.n	8009fc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fa6:	4b65      	ldr	r3, [pc, #404]	@ (800a13c <HAL_RCC_ClockConfig+0x1b8>)
 8009fa8:	683a      	ldr	r2, [r7, #0]
 8009faa:	b2d2      	uxtb	r2, r2
 8009fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fae:	4b63      	ldr	r3, [pc, #396]	@ (800a13c <HAL_RCC_ClockConfig+0x1b8>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f003 0307 	and.w	r3, r3, #7
 8009fb6:	683a      	ldr	r2, [r7, #0]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d001      	beq.n	8009fc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e0b8      	b.n	800a132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f003 0302 	and.w	r3, r3, #2
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d020      	beq.n	800a00e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f003 0304 	and.w	r3, r3, #4
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d005      	beq.n	8009fe4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009fd8:	4b59      	ldr	r3, [pc, #356]	@ (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	4a58      	ldr	r2, [pc, #352]	@ (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 8009fde:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009fe2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f003 0308 	and.w	r3, r3, #8
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d005      	beq.n	8009ffc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009ff0:	4b53      	ldr	r3, [pc, #332]	@ (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	4a52      	ldr	r2, [pc, #328]	@ (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 8009ff6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009ffa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ffc:	4b50      	ldr	r3, [pc, #320]	@ (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	494d      	ldr	r1, [pc, #308]	@ (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a00a:	4313      	orrs	r3, r2
 800a00c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f003 0301 	and.w	r3, r3, #1
 800a016:	2b00      	cmp	r3, #0
 800a018:	d044      	beq.n	800a0a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d107      	bne.n	800a032 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a022:	4b47      	ldr	r3, [pc, #284]	@ (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d119      	bne.n	800a062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e07f      	b.n	800a132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	2b02      	cmp	r3, #2
 800a038:	d003      	beq.n	800a042 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a03e:	2b03      	cmp	r3, #3
 800a040:	d107      	bne.n	800a052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a042:	4b3f      	ldr	r3, [pc, #252]	@ (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d109      	bne.n	800a062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e06f      	b.n	800a132 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a052:	4b3b      	ldr	r3, [pc, #236]	@ (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f003 0302 	and.w	r3, r3, #2
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d101      	bne.n	800a062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e067      	b.n	800a132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a062:	4b37      	ldr	r3, [pc, #220]	@ (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	f023 0203 	bic.w	r2, r3, #3
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	4934      	ldr	r1, [pc, #208]	@ (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a070:	4313      	orrs	r3, r2
 800a072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a074:	f7fe fa1e 	bl	80084b4 <HAL_GetTick>
 800a078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a07a:	e00a      	b.n	800a092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a07c:	f7fe fa1a 	bl	80084b4 <HAL_GetTick>
 800a080:	4602      	mov	r2, r0
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	1ad3      	subs	r3, r2, r3
 800a086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d901      	bls.n	800a092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a08e:	2303      	movs	r3, #3
 800a090:	e04f      	b.n	800a132 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a092:	4b2b      	ldr	r3, [pc, #172]	@ (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	f003 020c 	and.w	r2, r3, #12
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d1eb      	bne.n	800a07c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a0a4:	4b25      	ldr	r3, [pc, #148]	@ (800a13c <HAL_RCC_ClockConfig+0x1b8>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f003 0307 	and.w	r3, r3, #7
 800a0ac:	683a      	ldr	r2, [r7, #0]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d20c      	bcs.n	800a0cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0b2:	4b22      	ldr	r3, [pc, #136]	@ (800a13c <HAL_RCC_ClockConfig+0x1b8>)
 800a0b4:	683a      	ldr	r2, [r7, #0]
 800a0b6:	b2d2      	uxtb	r2, r2
 800a0b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0ba:	4b20      	ldr	r3, [pc, #128]	@ (800a13c <HAL_RCC_ClockConfig+0x1b8>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f003 0307 	and.w	r3, r3, #7
 800a0c2:	683a      	ldr	r2, [r7, #0]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d001      	beq.n	800a0cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e032      	b.n	800a132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 0304 	and.w	r3, r3, #4
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d008      	beq.n	800a0ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a0d8:	4b19      	ldr	r3, [pc, #100]	@ (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	4916      	ldr	r1, [pc, #88]	@ (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 0308 	and.w	r3, r3, #8
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d009      	beq.n	800a10a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a0f6:	4b12      	ldr	r3, [pc, #72]	@ (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	00db      	lsls	r3, r3, #3
 800a104:	490e      	ldr	r1, [pc, #56]	@ (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a106:	4313      	orrs	r3, r2
 800a108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a10a:	f000 f821 	bl	800a150 <HAL_RCC_GetSysClockFreq>
 800a10e:	4602      	mov	r2, r0
 800a110:	4b0b      	ldr	r3, [pc, #44]	@ (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	091b      	lsrs	r3, r3, #4
 800a116:	f003 030f 	and.w	r3, r3, #15
 800a11a:	490a      	ldr	r1, [pc, #40]	@ (800a144 <HAL_RCC_ClockConfig+0x1c0>)
 800a11c:	5ccb      	ldrb	r3, [r1, r3]
 800a11e:	fa22 f303 	lsr.w	r3, r2, r3
 800a122:	4a09      	ldr	r2, [pc, #36]	@ (800a148 <HAL_RCC_ClockConfig+0x1c4>)
 800a124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a126:	4b09      	ldr	r3, [pc, #36]	@ (800a14c <HAL_RCC_ClockConfig+0x1c8>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7fe f97e 	bl	800842c <HAL_InitTick>

  return HAL_OK;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	40023c00 	.word	0x40023c00
 800a140:	40023800 	.word	0x40023800
 800a144:	0800c30c 	.word	0x0800c30c
 800a148:	200003d0 	.word	0x200003d0
 800a14c:	200003d4 	.word	0x200003d4

0800a150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a154:	b094      	sub	sp, #80	@ 0x50
 800a156:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a158:	2300      	movs	r3, #0
 800a15a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800a15c:	2300      	movs	r3, #0
 800a15e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800a160:	2300      	movs	r3, #0
 800a162:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800a164:	2300      	movs	r3, #0
 800a166:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a168:	4b79      	ldr	r3, [pc, #484]	@ (800a350 <HAL_RCC_GetSysClockFreq+0x200>)
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	f003 030c 	and.w	r3, r3, #12
 800a170:	2b08      	cmp	r3, #8
 800a172:	d00d      	beq.n	800a190 <HAL_RCC_GetSysClockFreq+0x40>
 800a174:	2b08      	cmp	r3, #8
 800a176:	f200 80e1 	bhi.w	800a33c <HAL_RCC_GetSysClockFreq+0x1ec>
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d002      	beq.n	800a184 <HAL_RCC_GetSysClockFreq+0x34>
 800a17e:	2b04      	cmp	r3, #4
 800a180:	d003      	beq.n	800a18a <HAL_RCC_GetSysClockFreq+0x3a>
 800a182:	e0db      	b.n	800a33c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a184:	4b73      	ldr	r3, [pc, #460]	@ (800a354 <HAL_RCC_GetSysClockFreq+0x204>)
 800a186:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a188:	e0db      	b.n	800a342 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a18a:	4b73      	ldr	r3, [pc, #460]	@ (800a358 <HAL_RCC_GetSysClockFreq+0x208>)
 800a18c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a18e:	e0d8      	b.n	800a342 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a190:	4b6f      	ldr	r3, [pc, #444]	@ (800a350 <HAL_RCC_GetSysClockFreq+0x200>)
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a198:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a19a:	4b6d      	ldr	r3, [pc, #436]	@ (800a350 <HAL_RCC_GetSysClockFreq+0x200>)
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d063      	beq.n	800a26e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a1a6:	4b6a      	ldr	r3, [pc, #424]	@ (800a350 <HAL_RCC_GetSysClockFreq+0x200>)
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	099b      	lsrs	r3, r3, #6
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a1b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1b8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a1c2:	4622      	mov	r2, r4
 800a1c4:	462b      	mov	r3, r5
 800a1c6:	f04f 0000 	mov.w	r0, #0
 800a1ca:	f04f 0100 	mov.w	r1, #0
 800a1ce:	0159      	lsls	r1, r3, #5
 800a1d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a1d4:	0150      	lsls	r0, r2, #5
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	460b      	mov	r3, r1
 800a1da:	4621      	mov	r1, r4
 800a1dc:	1a51      	subs	r1, r2, r1
 800a1de:	6139      	str	r1, [r7, #16]
 800a1e0:	4629      	mov	r1, r5
 800a1e2:	eb63 0301 	sbc.w	r3, r3, r1
 800a1e6:	617b      	str	r3, [r7, #20]
 800a1e8:	f04f 0200 	mov.w	r2, #0
 800a1ec:	f04f 0300 	mov.w	r3, #0
 800a1f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a1f4:	4659      	mov	r1, fp
 800a1f6:	018b      	lsls	r3, r1, #6
 800a1f8:	4651      	mov	r1, sl
 800a1fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a1fe:	4651      	mov	r1, sl
 800a200:	018a      	lsls	r2, r1, #6
 800a202:	4651      	mov	r1, sl
 800a204:	ebb2 0801 	subs.w	r8, r2, r1
 800a208:	4659      	mov	r1, fp
 800a20a:	eb63 0901 	sbc.w	r9, r3, r1
 800a20e:	f04f 0200 	mov.w	r2, #0
 800a212:	f04f 0300 	mov.w	r3, #0
 800a216:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a21a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a21e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a222:	4690      	mov	r8, r2
 800a224:	4699      	mov	r9, r3
 800a226:	4623      	mov	r3, r4
 800a228:	eb18 0303 	adds.w	r3, r8, r3
 800a22c:	60bb      	str	r3, [r7, #8]
 800a22e:	462b      	mov	r3, r5
 800a230:	eb49 0303 	adc.w	r3, r9, r3
 800a234:	60fb      	str	r3, [r7, #12]
 800a236:	f04f 0200 	mov.w	r2, #0
 800a23a:	f04f 0300 	mov.w	r3, #0
 800a23e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a242:	4629      	mov	r1, r5
 800a244:	024b      	lsls	r3, r1, #9
 800a246:	4621      	mov	r1, r4
 800a248:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a24c:	4621      	mov	r1, r4
 800a24e:	024a      	lsls	r2, r1, #9
 800a250:	4610      	mov	r0, r2
 800a252:	4619      	mov	r1, r3
 800a254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a256:	2200      	movs	r2, #0
 800a258:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a25a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a25c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a260:	f7f6 f80e 	bl	8000280 <__aeabi_uldivmod>
 800a264:	4602      	mov	r2, r0
 800a266:	460b      	mov	r3, r1
 800a268:	4613      	mov	r3, r2
 800a26a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a26c:	e058      	b.n	800a320 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a26e:	4b38      	ldr	r3, [pc, #224]	@ (800a350 <HAL_RCC_GetSysClockFreq+0x200>)
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	099b      	lsrs	r3, r3, #6
 800a274:	2200      	movs	r2, #0
 800a276:	4618      	mov	r0, r3
 800a278:	4611      	mov	r1, r2
 800a27a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a27e:	623b      	str	r3, [r7, #32]
 800a280:	2300      	movs	r3, #0
 800a282:	627b      	str	r3, [r7, #36]	@ 0x24
 800a284:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a288:	4642      	mov	r2, r8
 800a28a:	464b      	mov	r3, r9
 800a28c:	f04f 0000 	mov.w	r0, #0
 800a290:	f04f 0100 	mov.w	r1, #0
 800a294:	0159      	lsls	r1, r3, #5
 800a296:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a29a:	0150      	lsls	r0, r2, #5
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	4641      	mov	r1, r8
 800a2a2:	ebb2 0a01 	subs.w	sl, r2, r1
 800a2a6:	4649      	mov	r1, r9
 800a2a8:	eb63 0b01 	sbc.w	fp, r3, r1
 800a2ac:	f04f 0200 	mov.w	r2, #0
 800a2b0:	f04f 0300 	mov.w	r3, #0
 800a2b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a2b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a2bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a2c0:	ebb2 040a 	subs.w	r4, r2, sl
 800a2c4:	eb63 050b 	sbc.w	r5, r3, fp
 800a2c8:	f04f 0200 	mov.w	r2, #0
 800a2cc:	f04f 0300 	mov.w	r3, #0
 800a2d0:	00eb      	lsls	r3, r5, #3
 800a2d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a2d6:	00e2      	lsls	r2, r4, #3
 800a2d8:	4614      	mov	r4, r2
 800a2da:	461d      	mov	r5, r3
 800a2dc:	4643      	mov	r3, r8
 800a2de:	18e3      	adds	r3, r4, r3
 800a2e0:	603b      	str	r3, [r7, #0]
 800a2e2:	464b      	mov	r3, r9
 800a2e4:	eb45 0303 	adc.w	r3, r5, r3
 800a2e8:	607b      	str	r3, [r7, #4]
 800a2ea:	f04f 0200 	mov.w	r2, #0
 800a2ee:	f04f 0300 	mov.w	r3, #0
 800a2f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a2f6:	4629      	mov	r1, r5
 800a2f8:	028b      	lsls	r3, r1, #10
 800a2fa:	4621      	mov	r1, r4
 800a2fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a300:	4621      	mov	r1, r4
 800a302:	028a      	lsls	r2, r1, #10
 800a304:	4610      	mov	r0, r2
 800a306:	4619      	mov	r1, r3
 800a308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a30a:	2200      	movs	r2, #0
 800a30c:	61bb      	str	r3, [r7, #24]
 800a30e:	61fa      	str	r2, [r7, #28]
 800a310:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a314:	f7f5 ffb4 	bl	8000280 <__aeabi_uldivmod>
 800a318:	4602      	mov	r2, r0
 800a31a:	460b      	mov	r3, r1
 800a31c:	4613      	mov	r3, r2
 800a31e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a320:	4b0b      	ldr	r3, [pc, #44]	@ (800a350 <HAL_RCC_GetSysClockFreq+0x200>)
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	0c1b      	lsrs	r3, r3, #16
 800a326:	f003 0303 	and.w	r3, r3, #3
 800a32a:	3301      	adds	r3, #1
 800a32c:	005b      	lsls	r3, r3, #1
 800a32e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800a330:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a334:	fbb2 f3f3 	udiv	r3, r2, r3
 800a338:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a33a:	e002      	b.n	800a342 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a33c:	4b05      	ldr	r3, [pc, #20]	@ (800a354 <HAL_RCC_GetSysClockFreq+0x204>)
 800a33e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a340:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800a344:	4618      	mov	r0, r3
 800a346:	3750      	adds	r7, #80	@ 0x50
 800a348:	46bd      	mov	sp, r7
 800a34a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a34e:	bf00      	nop
 800a350:	40023800 	.word	0x40023800
 800a354:	00f42400 	.word	0x00f42400
 800a358:	007a1200 	.word	0x007a1200

0800a35c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a35c:	b480      	push	{r7}
 800a35e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a360:	4b03      	ldr	r3, [pc, #12]	@ (800a370 <HAL_RCC_GetHCLKFreq+0x14>)
 800a362:	681b      	ldr	r3, [r3, #0]
}
 800a364:	4618      	mov	r0, r3
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	200003d0 	.word	0x200003d0

0800a374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a378:	f7ff fff0 	bl	800a35c <HAL_RCC_GetHCLKFreq>
 800a37c:	4602      	mov	r2, r0
 800a37e:	4b05      	ldr	r3, [pc, #20]	@ (800a394 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	0a9b      	lsrs	r3, r3, #10
 800a384:	f003 0307 	and.w	r3, r3, #7
 800a388:	4903      	ldr	r1, [pc, #12]	@ (800a398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a38a:	5ccb      	ldrb	r3, [r1, r3]
 800a38c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a390:	4618      	mov	r0, r3
 800a392:	bd80      	pop	{r7, pc}
 800a394:	40023800 	.word	0x40023800
 800a398:	0800c31c 	.word	0x0800c31c

0800a39c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d101      	bne.n	800a3ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e07b      	b.n	800a4a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d108      	bne.n	800a3c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a3be:	d009      	beq.n	800a3d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	61da      	str	r2, [r3, #28]
 800a3c6:	e005      	b.n	800a3d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d106      	bne.n	800a3f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f7fd fe48 	bl	8008084 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2202      	movs	r2, #2
 800a3f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a40a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a41c:	431a      	orrs	r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a426:	431a      	orrs	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	f003 0302 	and.w	r3, r3, #2
 800a430:	431a      	orrs	r2, r3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	695b      	ldr	r3, [r3, #20]
 800a436:	f003 0301 	and.w	r3, r3, #1
 800a43a:	431a      	orrs	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	699b      	ldr	r3, [r3, #24]
 800a440:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a444:	431a      	orrs	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	69db      	ldr	r3, [r3, #28]
 800a44a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a44e:	431a      	orrs	r2, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6a1b      	ldr	r3, [r3, #32]
 800a454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a458:	ea42 0103 	orr.w	r1, r2, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a460:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	430a      	orrs	r2, r1
 800a46a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	699b      	ldr	r3, [r3, #24]
 800a470:	0c1b      	lsrs	r3, r3, #16
 800a472:	f003 0104 	and.w	r1, r3, #4
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a47a:	f003 0210 	and.w	r2, r3, #16
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	430a      	orrs	r2, r1
 800a484:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	69da      	ldr	r2, [r3, #28]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a494:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b082      	sub	sp, #8
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d101      	bne.n	800a4c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	e041      	b.n	800a544 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d106      	bne.n	800a4da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f7fd fe1d 	bl	8008114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2202      	movs	r2, #2
 800a4de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	3304      	adds	r3, #4
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	4610      	mov	r0, r2
 800a4ee:	f000 f9e5 	bl	800a8bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2201      	movs	r2, #1
 800a506:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2201      	movs	r2, #1
 800a50e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2201      	movs	r2, #1
 800a516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2201      	movs	r2, #1
 800a51e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2201      	movs	r2, #1
 800a526:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2201      	movs	r2, #1
 800a52e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2201      	movs	r2, #1
 800a536:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2201      	movs	r2, #1
 800a53e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d001      	beq.n	800a564 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	e04e      	b.n	800a602 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2202      	movs	r2, #2
 800a568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68da      	ldr	r2, [r3, #12]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f042 0201 	orr.w	r2, r2, #1
 800a57a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a23      	ldr	r2, [pc, #140]	@ (800a610 <HAL_TIM_Base_Start_IT+0xc4>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d022      	beq.n	800a5cc <HAL_TIM_Base_Start_IT+0x80>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a58e:	d01d      	beq.n	800a5cc <HAL_TIM_Base_Start_IT+0x80>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a1f      	ldr	r2, [pc, #124]	@ (800a614 <HAL_TIM_Base_Start_IT+0xc8>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d018      	beq.n	800a5cc <HAL_TIM_Base_Start_IT+0x80>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a1e      	ldr	r2, [pc, #120]	@ (800a618 <HAL_TIM_Base_Start_IT+0xcc>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d013      	beq.n	800a5cc <HAL_TIM_Base_Start_IT+0x80>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a1c      	ldr	r2, [pc, #112]	@ (800a61c <HAL_TIM_Base_Start_IT+0xd0>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d00e      	beq.n	800a5cc <HAL_TIM_Base_Start_IT+0x80>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a1b      	ldr	r2, [pc, #108]	@ (800a620 <HAL_TIM_Base_Start_IT+0xd4>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d009      	beq.n	800a5cc <HAL_TIM_Base_Start_IT+0x80>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a19      	ldr	r2, [pc, #100]	@ (800a624 <HAL_TIM_Base_Start_IT+0xd8>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d004      	beq.n	800a5cc <HAL_TIM_Base_Start_IT+0x80>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a18      	ldr	r2, [pc, #96]	@ (800a628 <HAL_TIM_Base_Start_IT+0xdc>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d111      	bne.n	800a5f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	f003 0307 	and.w	r3, r3, #7
 800a5d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2b06      	cmp	r3, #6
 800a5dc:	d010      	beq.n	800a600 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f042 0201 	orr.w	r2, r2, #1
 800a5ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5ee:	e007      	b.n	800a600 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f042 0201 	orr.w	r2, r2, #1
 800a5fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3714      	adds	r7, #20
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop
 800a610:	40010000 	.word	0x40010000
 800a614:	40000400 	.word	0x40000400
 800a618:	40000800 	.word	0x40000800
 800a61c:	40000c00 	.word	0x40000c00
 800a620:	40010400 	.word	0x40010400
 800a624:	40014000 	.word	0x40014000
 800a628:	40001800 	.word	0x40001800

0800a62c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68da      	ldr	r2, [r3, #12]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f022 0201 	bic.w	r2, r2, #1
 800a642:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	6a1a      	ldr	r2, [r3, #32]
 800a64a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a64e:	4013      	ands	r3, r2
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10f      	bne.n	800a674 <HAL_TIM_Base_Stop_IT+0x48>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	6a1a      	ldr	r2, [r3, #32]
 800a65a:	f240 4344 	movw	r3, #1092	@ 0x444
 800a65e:	4013      	ands	r3, r2
 800a660:	2b00      	cmp	r3, #0
 800a662:	d107      	bne.n	800a674 <HAL_TIM_Base_Stop_IT+0x48>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f022 0201 	bic.w	r2, r2, #1
 800a672:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2201      	movs	r2, #1
 800a678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	370c      	adds	r7, #12
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr

0800a68a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b084      	sub	sp, #16
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	f003 0302 	and.w	r3, r3, #2
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d020      	beq.n	800a6ee <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f003 0302 	and.w	r3, r3, #2
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d01b      	beq.n	800a6ee <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f06f 0202 	mvn.w	r2, #2
 800a6be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	699b      	ldr	r3, [r3, #24]
 800a6cc:	f003 0303 	and.w	r3, r3, #3
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d003      	beq.n	800a6dc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 f8d2 	bl	800a87e <HAL_TIM_IC_CaptureCallback>
 800a6da:	e005      	b.n	800a6e8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 f8c4 	bl	800a86a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 f8d5 	bl	800a892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	f003 0304 	and.w	r3, r3, #4
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d020      	beq.n	800a73a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f003 0304 	and.w	r3, r3, #4
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d01b      	beq.n	800a73a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f06f 0204 	mvn.w	r2, #4
 800a70a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2202      	movs	r2, #2
 800a710:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	699b      	ldr	r3, [r3, #24]
 800a718:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d003      	beq.n	800a728 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 f8ac 	bl	800a87e <HAL_TIM_IC_CaptureCallback>
 800a726:	e005      	b.n	800a734 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 f89e 	bl	800a86a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 f8af 	bl	800a892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	f003 0308 	and.w	r3, r3, #8
 800a740:	2b00      	cmp	r3, #0
 800a742:	d020      	beq.n	800a786 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f003 0308 	and.w	r3, r3, #8
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d01b      	beq.n	800a786 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f06f 0208 	mvn.w	r2, #8
 800a756:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2204      	movs	r2, #4
 800a75c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	69db      	ldr	r3, [r3, #28]
 800a764:	f003 0303 	and.w	r3, r3, #3
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d003      	beq.n	800a774 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 f886 	bl	800a87e <HAL_TIM_IC_CaptureCallback>
 800a772:	e005      	b.n	800a780 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 f878 	bl	800a86a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 f889 	bl	800a892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2200      	movs	r2, #0
 800a784:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	f003 0310 	and.w	r3, r3, #16
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d020      	beq.n	800a7d2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f003 0310 	and.w	r3, r3, #16
 800a796:	2b00      	cmp	r3, #0
 800a798:	d01b      	beq.n	800a7d2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f06f 0210 	mvn.w	r2, #16
 800a7a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2208      	movs	r2, #8
 800a7a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	69db      	ldr	r3, [r3, #28]
 800a7b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d003      	beq.n	800a7c0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 f860 	bl	800a87e <HAL_TIM_IC_CaptureCallback>
 800a7be:	e005      	b.n	800a7cc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 f852 	bl	800a86a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 f863 	bl	800a892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	f003 0301 	and.w	r3, r3, #1
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00c      	beq.n	800a7f6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f003 0301 	and.w	r3, r3, #1
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d007      	beq.n	800a7f6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f06f 0201 	mvn.w	r2, #1
 800a7ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f7fd f89d 	bl	8007930 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00c      	beq.n	800a81a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a806:	2b00      	cmp	r3, #0
 800a808:	d007      	beq.n	800a81a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 f907 	bl	800aa28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00c      	beq.n	800a83e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d007      	beq.n	800a83e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 f834 	bl	800a8a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	f003 0320 	and.w	r3, r3, #32
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00c      	beq.n	800a862 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f003 0320 	and.w	r3, r3, #32
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d007      	beq.n	800a862 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f06f 0220 	mvn.w	r2, #32
 800a85a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 f8d9 	bl	800aa14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a862:	bf00      	nop
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b083      	sub	sp, #12
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a872:	bf00      	nop
 800a874:	370c      	adds	r7, #12
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a87e:	b480      	push	{r7}
 800a880:	b083      	sub	sp, #12
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a886:	bf00      	nop
 800a888:	370c      	adds	r7, #12
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr

0800a892 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a892:	b480      	push	{r7}
 800a894:	b083      	sub	sp, #12
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a89a:	bf00      	nop
 800a89c:	370c      	adds	r7, #12
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr

0800a8a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a8a6:	b480      	push	{r7}
 800a8a8:	b083      	sub	sp, #12
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8ae:	bf00      	nop
 800a8b0:	370c      	adds	r7, #12
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr
	...

0800a8bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4a46      	ldr	r2, [pc, #280]	@ (800a9e8 <TIM_Base_SetConfig+0x12c>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d013      	beq.n	800a8fc <TIM_Base_SetConfig+0x40>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8da:	d00f      	beq.n	800a8fc <TIM_Base_SetConfig+0x40>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4a43      	ldr	r2, [pc, #268]	@ (800a9ec <TIM_Base_SetConfig+0x130>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d00b      	beq.n	800a8fc <TIM_Base_SetConfig+0x40>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4a42      	ldr	r2, [pc, #264]	@ (800a9f0 <TIM_Base_SetConfig+0x134>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d007      	beq.n	800a8fc <TIM_Base_SetConfig+0x40>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4a41      	ldr	r2, [pc, #260]	@ (800a9f4 <TIM_Base_SetConfig+0x138>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d003      	beq.n	800a8fc <TIM_Base_SetConfig+0x40>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4a40      	ldr	r2, [pc, #256]	@ (800a9f8 <TIM_Base_SetConfig+0x13c>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d108      	bne.n	800a90e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a35      	ldr	r2, [pc, #212]	@ (800a9e8 <TIM_Base_SetConfig+0x12c>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d02b      	beq.n	800a96e <TIM_Base_SetConfig+0xb2>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a91c:	d027      	beq.n	800a96e <TIM_Base_SetConfig+0xb2>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4a32      	ldr	r2, [pc, #200]	@ (800a9ec <TIM_Base_SetConfig+0x130>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d023      	beq.n	800a96e <TIM_Base_SetConfig+0xb2>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a31      	ldr	r2, [pc, #196]	@ (800a9f0 <TIM_Base_SetConfig+0x134>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d01f      	beq.n	800a96e <TIM_Base_SetConfig+0xb2>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a30      	ldr	r2, [pc, #192]	@ (800a9f4 <TIM_Base_SetConfig+0x138>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d01b      	beq.n	800a96e <TIM_Base_SetConfig+0xb2>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a2f      	ldr	r2, [pc, #188]	@ (800a9f8 <TIM_Base_SetConfig+0x13c>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d017      	beq.n	800a96e <TIM_Base_SetConfig+0xb2>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a2e      	ldr	r2, [pc, #184]	@ (800a9fc <TIM_Base_SetConfig+0x140>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d013      	beq.n	800a96e <TIM_Base_SetConfig+0xb2>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a2d      	ldr	r2, [pc, #180]	@ (800aa00 <TIM_Base_SetConfig+0x144>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d00f      	beq.n	800a96e <TIM_Base_SetConfig+0xb2>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a2c      	ldr	r2, [pc, #176]	@ (800aa04 <TIM_Base_SetConfig+0x148>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d00b      	beq.n	800a96e <TIM_Base_SetConfig+0xb2>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a2b      	ldr	r2, [pc, #172]	@ (800aa08 <TIM_Base_SetConfig+0x14c>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d007      	beq.n	800a96e <TIM_Base_SetConfig+0xb2>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4a2a      	ldr	r2, [pc, #168]	@ (800aa0c <TIM_Base_SetConfig+0x150>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d003      	beq.n	800a96e <TIM_Base_SetConfig+0xb2>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a29      	ldr	r2, [pc, #164]	@ (800aa10 <TIM_Base_SetConfig+0x154>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d108      	bne.n	800a980 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	695b      	ldr	r3, [r3, #20]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	689a      	ldr	r2, [r3, #8]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a10      	ldr	r2, [pc, #64]	@ (800a9e8 <TIM_Base_SetConfig+0x12c>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d003      	beq.n	800a9b4 <TIM_Base_SetConfig+0xf8>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a12      	ldr	r2, [pc, #72]	@ (800a9f8 <TIM_Base_SetConfig+0x13c>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d103      	bne.n	800a9bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	691a      	ldr	r2, [r3, #16]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	691b      	ldr	r3, [r3, #16]
 800a9c6:	f003 0301 	and.w	r3, r3, #1
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d105      	bne.n	800a9da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	f023 0201 	bic.w	r2, r3, #1
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	611a      	str	r2, [r3, #16]
  }
}
 800a9da:	bf00      	nop
 800a9dc:	3714      	adds	r7, #20
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	40010000 	.word	0x40010000
 800a9ec:	40000400 	.word	0x40000400
 800a9f0:	40000800 	.word	0x40000800
 800a9f4:	40000c00 	.word	0x40000c00
 800a9f8:	40010400 	.word	0x40010400
 800a9fc:	40014000 	.word	0x40014000
 800aa00:	40014400 	.word	0x40014400
 800aa04:	40014800 	.word	0x40014800
 800aa08:	40001800 	.word	0x40001800
 800aa0c:	40001c00 	.word	0x40001c00
 800aa10:	40002000 	.word	0x40002000

0800aa14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa1c:	bf00      	nop
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa30:	bf00      	nop
 800aa32:	370c      	adds	r7, #12
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <calloc>:
 800aa3c:	4b02      	ldr	r3, [pc, #8]	@ (800aa48 <calloc+0xc>)
 800aa3e:	460a      	mov	r2, r1
 800aa40:	4601      	mov	r1, r0
 800aa42:	6818      	ldr	r0, [r3, #0]
 800aa44:	f000 b802 	b.w	800aa4c <_calloc_r>
 800aa48:	200003e8 	.word	0x200003e8

0800aa4c <_calloc_r>:
 800aa4c:	b570      	push	{r4, r5, r6, lr}
 800aa4e:	fba1 5402 	umull	r5, r4, r1, r2
 800aa52:	b93c      	cbnz	r4, 800aa64 <_calloc_r+0x18>
 800aa54:	4629      	mov	r1, r5
 800aa56:	f000 f837 	bl	800aac8 <_malloc_r>
 800aa5a:	4606      	mov	r6, r0
 800aa5c:	b928      	cbnz	r0, 800aa6a <_calloc_r+0x1e>
 800aa5e:	2600      	movs	r6, #0
 800aa60:	4630      	mov	r0, r6
 800aa62:	bd70      	pop	{r4, r5, r6, pc}
 800aa64:	220c      	movs	r2, #12
 800aa66:	6002      	str	r2, [r0, #0]
 800aa68:	e7f9      	b.n	800aa5e <_calloc_r+0x12>
 800aa6a:	462a      	mov	r2, r5
 800aa6c:	4621      	mov	r1, r4
 800aa6e:	f000 fb9b 	bl	800b1a8 <memset>
 800aa72:	e7f5      	b.n	800aa60 <_calloc_r+0x14>

0800aa74 <free>:
 800aa74:	4b02      	ldr	r3, [pc, #8]	@ (800aa80 <free+0xc>)
 800aa76:	4601      	mov	r1, r0
 800aa78:	6818      	ldr	r0, [r3, #0]
 800aa7a:	f000 bc2f 	b.w	800b2dc <_free_r>
 800aa7e:	bf00      	nop
 800aa80:	200003e8 	.word	0x200003e8

0800aa84 <sbrk_aligned>:
 800aa84:	b570      	push	{r4, r5, r6, lr}
 800aa86:	4e0f      	ldr	r6, [pc, #60]	@ (800aac4 <sbrk_aligned+0x40>)
 800aa88:	460c      	mov	r4, r1
 800aa8a:	6831      	ldr	r1, [r6, #0]
 800aa8c:	4605      	mov	r5, r0
 800aa8e:	b911      	cbnz	r1, 800aa96 <sbrk_aligned+0x12>
 800aa90:	f000 fbc6 	bl	800b220 <_sbrk_r>
 800aa94:	6030      	str	r0, [r6, #0]
 800aa96:	4621      	mov	r1, r4
 800aa98:	4628      	mov	r0, r5
 800aa9a:	f000 fbc1 	bl	800b220 <_sbrk_r>
 800aa9e:	1c43      	adds	r3, r0, #1
 800aaa0:	d103      	bne.n	800aaaa <sbrk_aligned+0x26>
 800aaa2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	bd70      	pop	{r4, r5, r6, pc}
 800aaaa:	1cc4      	adds	r4, r0, #3
 800aaac:	f024 0403 	bic.w	r4, r4, #3
 800aab0:	42a0      	cmp	r0, r4
 800aab2:	d0f8      	beq.n	800aaa6 <sbrk_aligned+0x22>
 800aab4:	1a21      	subs	r1, r4, r0
 800aab6:	4628      	mov	r0, r5
 800aab8:	f000 fbb2 	bl	800b220 <_sbrk_r>
 800aabc:	3001      	adds	r0, #1
 800aabe:	d1f2      	bne.n	800aaa6 <sbrk_aligned+0x22>
 800aac0:	e7ef      	b.n	800aaa2 <sbrk_aligned+0x1e>
 800aac2:	bf00      	nop
 800aac4:	200005c4 	.word	0x200005c4

0800aac8 <_malloc_r>:
 800aac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aacc:	1ccd      	adds	r5, r1, #3
 800aace:	f025 0503 	bic.w	r5, r5, #3
 800aad2:	3508      	adds	r5, #8
 800aad4:	2d0c      	cmp	r5, #12
 800aad6:	bf38      	it	cc
 800aad8:	250c      	movcc	r5, #12
 800aada:	2d00      	cmp	r5, #0
 800aadc:	4606      	mov	r6, r0
 800aade:	db01      	blt.n	800aae4 <_malloc_r+0x1c>
 800aae0:	42a9      	cmp	r1, r5
 800aae2:	d904      	bls.n	800aaee <_malloc_r+0x26>
 800aae4:	230c      	movs	r3, #12
 800aae6:	6033      	str	r3, [r6, #0]
 800aae8:	2000      	movs	r0, #0
 800aaea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800abc4 <_malloc_r+0xfc>
 800aaf2:	f000 f869 	bl	800abc8 <__malloc_lock>
 800aaf6:	f8d8 3000 	ldr.w	r3, [r8]
 800aafa:	461c      	mov	r4, r3
 800aafc:	bb44      	cbnz	r4, 800ab50 <_malloc_r+0x88>
 800aafe:	4629      	mov	r1, r5
 800ab00:	4630      	mov	r0, r6
 800ab02:	f7ff ffbf 	bl	800aa84 <sbrk_aligned>
 800ab06:	1c43      	adds	r3, r0, #1
 800ab08:	4604      	mov	r4, r0
 800ab0a:	d158      	bne.n	800abbe <_malloc_r+0xf6>
 800ab0c:	f8d8 4000 	ldr.w	r4, [r8]
 800ab10:	4627      	mov	r7, r4
 800ab12:	2f00      	cmp	r7, #0
 800ab14:	d143      	bne.n	800ab9e <_malloc_r+0xd6>
 800ab16:	2c00      	cmp	r4, #0
 800ab18:	d04b      	beq.n	800abb2 <_malloc_r+0xea>
 800ab1a:	6823      	ldr	r3, [r4, #0]
 800ab1c:	4639      	mov	r1, r7
 800ab1e:	4630      	mov	r0, r6
 800ab20:	eb04 0903 	add.w	r9, r4, r3
 800ab24:	f000 fb7c 	bl	800b220 <_sbrk_r>
 800ab28:	4581      	cmp	r9, r0
 800ab2a:	d142      	bne.n	800abb2 <_malloc_r+0xea>
 800ab2c:	6821      	ldr	r1, [r4, #0]
 800ab2e:	1a6d      	subs	r5, r5, r1
 800ab30:	4629      	mov	r1, r5
 800ab32:	4630      	mov	r0, r6
 800ab34:	f7ff ffa6 	bl	800aa84 <sbrk_aligned>
 800ab38:	3001      	adds	r0, #1
 800ab3a:	d03a      	beq.n	800abb2 <_malloc_r+0xea>
 800ab3c:	6823      	ldr	r3, [r4, #0]
 800ab3e:	442b      	add	r3, r5
 800ab40:	6023      	str	r3, [r4, #0]
 800ab42:	f8d8 3000 	ldr.w	r3, [r8]
 800ab46:	685a      	ldr	r2, [r3, #4]
 800ab48:	bb62      	cbnz	r2, 800aba4 <_malloc_r+0xdc>
 800ab4a:	f8c8 7000 	str.w	r7, [r8]
 800ab4e:	e00f      	b.n	800ab70 <_malloc_r+0xa8>
 800ab50:	6822      	ldr	r2, [r4, #0]
 800ab52:	1b52      	subs	r2, r2, r5
 800ab54:	d420      	bmi.n	800ab98 <_malloc_r+0xd0>
 800ab56:	2a0b      	cmp	r2, #11
 800ab58:	d917      	bls.n	800ab8a <_malloc_r+0xc2>
 800ab5a:	1961      	adds	r1, r4, r5
 800ab5c:	42a3      	cmp	r3, r4
 800ab5e:	6025      	str	r5, [r4, #0]
 800ab60:	bf18      	it	ne
 800ab62:	6059      	strne	r1, [r3, #4]
 800ab64:	6863      	ldr	r3, [r4, #4]
 800ab66:	bf08      	it	eq
 800ab68:	f8c8 1000 	streq.w	r1, [r8]
 800ab6c:	5162      	str	r2, [r4, r5]
 800ab6e:	604b      	str	r3, [r1, #4]
 800ab70:	4630      	mov	r0, r6
 800ab72:	f000 f82f 	bl	800abd4 <__malloc_unlock>
 800ab76:	f104 000b 	add.w	r0, r4, #11
 800ab7a:	1d23      	adds	r3, r4, #4
 800ab7c:	f020 0007 	bic.w	r0, r0, #7
 800ab80:	1ac2      	subs	r2, r0, r3
 800ab82:	bf1c      	itt	ne
 800ab84:	1a1b      	subne	r3, r3, r0
 800ab86:	50a3      	strne	r3, [r4, r2]
 800ab88:	e7af      	b.n	800aaea <_malloc_r+0x22>
 800ab8a:	6862      	ldr	r2, [r4, #4]
 800ab8c:	42a3      	cmp	r3, r4
 800ab8e:	bf0c      	ite	eq
 800ab90:	f8c8 2000 	streq.w	r2, [r8]
 800ab94:	605a      	strne	r2, [r3, #4]
 800ab96:	e7eb      	b.n	800ab70 <_malloc_r+0xa8>
 800ab98:	4623      	mov	r3, r4
 800ab9a:	6864      	ldr	r4, [r4, #4]
 800ab9c:	e7ae      	b.n	800aafc <_malloc_r+0x34>
 800ab9e:	463c      	mov	r4, r7
 800aba0:	687f      	ldr	r7, [r7, #4]
 800aba2:	e7b6      	b.n	800ab12 <_malloc_r+0x4a>
 800aba4:	461a      	mov	r2, r3
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	42a3      	cmp	r3, r4
 800abaa:	d1fb      	bne.n	800aba4 <_malloc_r+0xdc>
 800abac:	2300      	movs	r3, #0
 800abae:	6053      	str	r3, [r2, #4]
 800abb0:	e7de      	b.n	800ab70 <_malloc_r+0xa8>
 800abb2:	230c      	movs	r3, #12
 800abb4:	6033      	str	r3, [r6, #0]
 800abb6:	4630      	mov	r0, r6
 800abb8:	f000 f80c 	bl	800abd4 <__malloc_unlock>
 800abbc:	e794      	b.n	800aae8 <_malloc_r+0x20>
 800abbe:	6005      	str	r5, [r0, #0]
 800abc0:	e7d6      	b.n	800ab70 <_malloc_r+0xa8>
 800abc2:	bf00      	nop
 800abc4:	200005c8 	.word	0x200005c8

0800abc8 <__malloc_lock>:
 800abc8:	4801      	ldr	r0, [pc, #4]	@ (800abd0 <__malloc_lock+0x8>)
 800abca:	f000 bb76 	b.w	800b2ba <__retarget_lock_acquire_recursive>
 800abce:	bf00      	nop
 800abd0:	2000070c 	.word	0x2000070c

0800abd4 <__malloc_unlock>:
 800abd4:	4801      	ldr	r0, [pc, #4]	@ (800abdc <__malloc_unlock+0x8>)
 800abd6:	f000 bb71 	b.w	800b2bc <__retarget_lock_release_recursive>
 800abda:	bf00      	nop
 800abdc:	2000070c 	.word	0x2000070c

0800abe0 <__sflush_r>:
 800abe0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800abe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abe8:	0716      	lsls	r6, r2, #28
 800abea:	4605      	mov	r5, r0
 800abec:	460c      	mov	r4, r1
 800abee:	d454      	bmi.n	800ac9a <__sflush_r+0xba>
 800abf0:	684b      	ldr	r3, [r1, #4]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	dc02      	bgt.n	800abfc <__sflush_r+0x1c>
 800abf6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	dd48      	ble.n	800ac8e <__sflush_r+0xae>
 800abfc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800abfe:	2e00      	cmp	r6, #0
 800ac00:	d045      	beq.n	800ac8e <__sflush_r+0xae>
 800ac02:	2300      	movs	r3, #0
 800ac04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ac08:	682f      	ldr	r7, [r5, #0]
 800ac0a:	6a21      	ldr	r1, [r4, #32]
 800ac0c:	602b      	str	r3, [r5, #0]
 800ac0e:	d030      	beq.n	800ac72 <__sflush_r+0x92>
 800ac10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac12:	89a3      	ldrh	r3, [r4, #12]
 800ac14:	0759      	lsls	r1, r3, #29
 800ac16:	d505      	bpl.n	800ac24 <__sflush_r+0x44>
 800ac18:	6863      	ldr	r3, [r4, #4]
 800ac1a:	1ad2      	subs	r2, r2, r3
 800ac1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac1e:	b10b      	cbz	r3, 800ac24 <__sflush_r+0x44>
 800ac20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac22:	1ad2      	subs	r2, r2, r3
 800ac24:	2300      	movs	r3, #0
 800ac26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac28:	6a21      	ldr	r1, [r4, #32]
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	47b0      	blx	r6
 800ac2e:	1c43      	adds	r3, r0, #1
 800ac30:	89a3      	ldrh	r3, [r4, #12]
 800ac32:	d106      	bne.n	800ac42 <__sflush_r+0x62>
 800ac34:	6829      	ldr	r1, [r5, #0]
 800ac36:	291d      	cmp	r1, #29
 800ac38:	d82b      	bhi.n	800ac92 <__sflush_r+0xb2>
 800ac3a:	4a2a      	ldr	r2, [pc, #168]	@ (800ace4 <__sflush_r+0x104>)
 800ac3c:	410a      	asrs	r2, r1
 800ac3e:	07d6      	lsls	r6, r2, #31
 800ac40:	d427      	bmi.n	800ac92 <__sflush_r+0xb2>
 800ac42:	2200      	movs	r2, #0
 800ac44:	6062      	str	r2, [r4, #4]
 800ac46:	04d9      	lsls	r1, r3, #19
 800ac48:	6922      	ldr	r2, [r4, #16]
 800ac4a:	6022      	str	r2, [r4, #0]
 800ac4c:	d504      	bpl.n	800ac58 <__sflush_r+0x78>
 800ac4e:	1c42      	adds	r2, r0, #1
 800ac50:	d101      	bne.n	800ac56 <__sflush_r+0x76>
 800ac52:	682b      	ldr	r3, [r5, #0]
 800ac54:	b903      	cbnz	r3, 800ac58 <__sflush_r+0x78>
 800ac56:	6560      	str	r0, [r4, #84]	@ 0x54
 800ac58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac5a:	602f      	str	r7, [r5, #0]
 800ac5c:	b1b9      	cbz	r1, 800ac8e <__sflush_r+0xae>
 800ac5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac62:	4299      	cmp	r1, r3
 800ac64:	d002      	beq.n	800ac6c <__sflush_r+0x8c>
 800ac66:	4628      	mov	r0, r5
 800ac68:	f000 fb38 	bl	800b2dc <_free_r>
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac70:	e00d      	b.n	800ac8e <__sflush_r+0xae>
 800ac72:	2301      	movs	r3, #1
 800ac74:	4628      	mov	r0, r5
 800ac76:	47b0      	blx	r6
 800ac78:	4602      	mov	r2, r0
 800ac7a:	1c50      	adds	r0, r2, #1
 800ac7c:	d1c9      	bne.n	800ac12 <__sflush_r+0x32>
 800ac7e:	682b      	ldr	r3, [r5, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d0c6      	beq.n	800ac12 <__sflush_r+0x32>
 800ac84:	2b1d      	cmp	r3, #29
 800ac86:	d001      	beq.n	800ac8c <__sflush_r+0xac>
 800ac88:	2b16      	cmp	r3, #22
 800ac8a:	d11e      	bne.n	800acca <__sflush_r+0xea>
 800ac8c:	602f      	str	r7, [r5, #0]
 800ac8e:	2000      	movs	r0, #0
 800ac90:	e022      	b.n	800acd8 <__sflush_r+0xf8>
 800ac92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac96:	b21b      	sxth	r3, r3
 800ac98:	e01b      	b.n	800acd2 <__sflush_r+0xf2>
 800ac9a:	690f      	ldr	r7, [r1, #16]
 800ac9c:	2f00      	cmp	r7, #0
 800ac9e:	d0f6      	beq.n	800ac8e <__sflush_r+0xae>
 800aca0:	0793      	lsls	r3, r2, #30
 800aca2:	680e      	ldr	r6, [r1, #0]
 800aca4:	bf08      	it	eq
 800aca6:	694b      	ldreq	r3, [r1, #20]
 800aca8:	600f      	str	r7, [r1, #0]
 800acaa:	bf18      	it	ne
 800acac:	2300      	movne	r3, #0
 800acae:	eba6 0807 	sub.w	r8, r6, r7
 800acb2:	608b      	str	r3, [r1, #8]
 800acb4:	f1b8 0f00 	cmp.w	r8, #0
 800acb8:	dde9      	ble.n	800ac8e <__sflush_r+0xae>
 800acba:	6a21      	ldr	r1, [r4, #32]
 800acbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800acbe:	4643      	mov	r3, r8
 800acc0:	463a      	mov	r2, r7
 800acc2:	4628      	mov	r0, r5
 800acc4:	47b0      	blx	r6
 800acc6:	2800      	cmp	r0, #0
 800acc8:	dc08      	bgt.n	800acdc <__sflush_r+0xfc>
 800acca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acd2:	81a3      	strh	r3, [r4, #12]
 800acd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800acd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acdc:	4407      	add	r7, r0
 800acde:	eba8 0800 	sub.w	r8, r8, r0
 800ace2:	e7e7      	b.n	800acb4 <__sflush_r+0xd4>
 800ace4:	dfbffffe 	.word	0xdfbffffe

0800ace8 <_fflush_r>:
 800ace8:	b538      	push	{r3, r4, r5, lr}
 800acea:	690b      	ldr	r3, [r1, #16]
 800acec:	4605      	mov	r5, r0
 800acee:	460c      	mov	r4, r1
 800acf0:	b913      	cbnz	r3, 800acf8 <_fflush_r+0x10>
 800acf2:	2500      	movs	r5, #0
 800acf4:	4628      	mov	r0, r5
 800acf6:	bd38      	pop	{r3, r4, r5, pc}
 800acf8:	b118      	cbz	r0, 800ad02 <_fflush_r+0x1a>
 800acfa:	6a03      	ldr	r3, [r0, #32]
 800acfc:	b90b      	cbnz	r3, 800ad02 <_fflush_r+0x1a>
 800acfe:	f000 f8bb 	bl	800ae78 <__sinit>
 800ad02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d0f3      	beq.n	800acf2 <_fflush_r+0xa>
 800ad0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad0c:	07d0      	lsls	r0, r2, #31
 800ad0e:	d404      	bmi.n	800ad1a <_fflush_r+0x32>
 800ad10:	0599      	lsls	r1, r3, #22
 800ad12:	d402      	bmi.n	800ad1a <_fflush_r+0x32>
 800ad14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad16:	f000 fad0 	bl	800b2ba <__retarget_lock_acquire_recursive>
 800ad1a:	4628      	mov	r0, r5
 800ad1c:	4621      	mov	r1, r4
 800ad1e:	f7ff ff5f 	bl	800abe0 <__sflush_r>
 800ad22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad24:	07da      	lsls	r2, r3, #31
 800ad26:	4605      	mov	r5, r0
 800ad28:	d4e4      	bmi.n	800acf4 <_fflush_r+0xc>
 800ad2a:	89a3      	ldrh	r3, [r4, #12]
 800ad2c:	059b      	lsls	r3, r3, #22
 800ad2e:	d4e1      	bmi.n	800acf4 <_fflush_r+0xc>
 800ad30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad32:	f000 fac3 	bl	800b2bc <__retarget_lock_release_recursive>
 800ad36:	e7dd      	b.n	800acf4 <_fflush_r+0xc>

0800ad38 <fflush>:
 800ad38:	4601      	mov	r1, r0
 800ad3a:	b920      	cbnz	r0, 800ad46 <fflush+0xe>
 800ad3c:	4a04      	ldr	r2, [pc, #16]	@ (800ad50 <fflush+0x18>)
 800ad3e:	4905      	ldr	r1, [pc, #20]	@ (800ad54 <fflush+0x1c>)
 800ad40:	4805      	ldr	r0, [pc, #20]	@ (800ad58 <fflush+0x20>)
 800ad42:	f000 b8b1 	b.w	800aea8 <_fwalk_sglue>
 800ad46:	4b05      	ldr	r3, [pc, #20]	@ (800ad5c <fflush+0x24>)
 800ad48:	6818      	ldr	r0, [r3, #0]
 800ad4a:	f7ff bfcd 	b.w	800ace8 <_fflush_r>
 800ad4e:	bf00      	nop
 800ad50:	200003dc 	.word	0x200003dc
 800ad54:	0800ace9 	.word	0x0800ace9
 800ad58:	200003ec 	.word	0x200003ec
 800ad5c:	200003e8 	.word	0x200003e8

0800ad60 <std>:
 800ad60:	2300      	movs	r3, #0
 800ad62:	b510      	push	{r4, lr}
 800ad64:	4604      	mov	r4, r0
 800ad66:	e9c0 3300 	strd	r3, r3, [r0]
 800ad6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad6e:	6083      	str	r3, [r0, #8]
 800ad70:	8181      	strh	r1, [r0, #12]
 800ad72:	6643      	str	r3, [r0, #100]	@ 0x64
 800ad74:	81c2      	strh	r2, [r0, #14]
 800ad76:	6183      	str	r3, [r0, #24]
 800ad78:	4619      	mov	r1, r3
 800ad7a:	2208      	movs	r2, #8
 800ad7c:	305c      	adds	r0, #92	@ 0x5c
 800ad7e:	f000 fa13 	bl	800b1a8 <memset>
 800ad82:	4b0d      	ldr	r3, [pc, #52]	@ (800adb8 <std+0x58>)
 800ad84:	6263      	str	r3, [r4, #36]	@ 0x24
 800ad86:	4b0d      	ldr	r3, [pc, #52]	@ (800adbc <std+0x5c>)
 800ad88:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ad8a:	4b0d      	ldr	r3, [pc, #52]	@ (800adc0 <std+0x60>)
 800ad8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ad8e:	4b0d      	ldr	r3, [pc, #52]	@ (800adc4 <std+0x64>)
 800ad90:	6323      	str	r3, [r4, #48]	@ 0x30
 800ad92:	4b0d      	ldr	r3, [pc, #52]	@ (800adc8 <std+0x68>)
 800ad94:	6224      	str	r4, [r4, #32]
 800ad96:	429c      	cmp	r4, r3
 800ad98:	d006      	beq.n	800ada8 <std+0x48>
 800ad9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ad9e:	4294      	cmp	r4, r2
 800ada0:	d002      	beq.n	800ada8 <std+0x48>
 800ada2:	33d0      	adds	r3, #208	@ 0xd0
 800ada4:	429c      	cmp	r4, r3
 800ada6:	d105      	bne.n	800adb4 <std+0x54>
 800ada8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800adac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adb0:	f000 ba82 	b.w	800b2b8 <__retarget_lock_init_recursive>
 800adb4:	bd10      	pop	{r4, pc}
 800adb6:	bf00      	nop
 800adb8:	0800afc5 	.word	0x0800afc5
 800adbc:	0800afe7 	.word	0x0800afe7
 800adc0:	0800b01f 	.word	0x0800b01f
 800adc4:	0800b043 	.word	0x0800b043
 800adc8:	200005cc 	.word	0x200005cc

0800adcc <stdio_exit_handler>:
 800adcc:	4a02      	ldr	r2, [pc, #8]	@ (800add8 <stdio_exit_handler+0xc>)
 800adce:	4903      	ldr	r1, [pc, #12]	@ (800addc <stdio_exit_handler+0x10>)
 800add0:	4803      	ldr	r0, [pc, #12]	@ (800ade0 <stdio_exit_handler+0x14>)
 800add2:	f000 b869 	b.w	800aea8 <_fwalk_sglue>
 800add6:	bf00      	nop
 800add8:	200003dc 	.word	0x200003dc
 800addc:	0800ace9 	.word	0x0800ace9
 800ade0:	200003ec 	.word	0x200003ec

0800ade4 <cleanup_stdio>:
 800ade4:	6841      	ldr	r1, [r0, #4]
 800ade6:	4b0c      	ldr	r3, [pc, #48]	@ (800ae18 <cleanup_stdio+0x34>)
 800ade8:	4299      	cmp	r1, r3
 800adea:	b510      	push	{r4, lr}
 800adec:	4604      	mov	r4, r0
 800adee:	d001      	beq.n	800adf4 <cleanup_stdio+0x10>
 800adf0:	f7ff ff7a 	bl	800ace8 <_fflush_r>
 800adf4:	68a1      	ldr	r1, [r4, #8]
 800adf6:	4b09      	ldr	r3, [pc, #36]	@ (800ae1c <cleanup_stdio+0x38>)
 800adf8:	4299      	cmp	r1, r3
 800adfa:	d002      	beq.n	800ae02 <cleanup_stdio+0x1e>
 800adfc:	4620      	mov	r0, r4
 800adfe:	f7ff ff73 	bl	800ace8 <_fflush_r>
 800ae02:	68e1      	ldr	r1, [r4, #12]
 800ae04:	4b06      	ldr	r3, [pc, #24]	@ (800ae20 <cleanup_stdio+0x3c>)
 800ae06:	4299      	cmp	r1, r3
 800ae08:	d004      	beq.n	800ae14 <cleanup_stdio+0x30>
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae10:	f7ff bf6a 	b.w	800ace8 <_fflush_r>
 800ae14:	bd10      	pop	{r4, pc}
 800ae16:	bf00      	nop
 800ae18:	200005cc 	.word	0x200005cc
 800ae1c:	20000634 	.word	0x20000634
 800ae20:	2000069c 	.word	0x2000069c

0800ae24 <global_stdio_init.part.0>:
 800ae24:	b510      	push	{r4, lr}
 800ae26:	4b0b      	ldr	r3, [pc, #44]	@ (800ae54 <global_stdio_init.part.0+0x30>)
 800ae28:	4c0b      	ldr	r4, [pc, #44]	@ (800ae58 <global_stdio_init.part.0+0x34>)
 800ae2a:	4a0c      	ldr	r2, [pc, #48]	@ (800ae5c <global_stdio_init.part.0+0x38>)
 800ae2c:	601a      	str	r2, [r3, #0]
 800ae2e:	4620      	mov	r0, r4
 800ae30:	2200      	movs	r2, #0
 800ae32:	2104      	movs	r1, #4
 800ae34:	f7ff ff94 	bl	800ad60 <std>
 800ae38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	2109      	movs	r1, #9
 800ae40:	f7ff ff8e 	bl	800ad60 <std>
 800ae44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ae48:	2202      	movs	r2, #2
 800ae4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae4e:	2112      	movs	r1, #18
 800ae50:	f7ff bf86 	b.w	800ad60 <std>
 800ae54:	20000704 	.word	0x20000704
 800ae58:	200005cc 	.word	0x200005cc
 800ae5c:	0800adcd 	.word	0x0800adcd

0800ae60 <__sfp_lock_acquire>:
 800ae60:	4801      	ldr	r0, [pc, #4]	@ (800ae68 <__sfp_lock_acquire+0x8>)
 800ae62:	f000 ba2a 	b.w	800b2ba <__retarget_lock_acquire_recursive>
 800ae66:	bf00      	nop
 800ae68:	2000070d 	.word	0x2000070d

0800ae6c <__sfp_lock_release>:
 800ae6c:	4801      	ldr	r0, [pc, #4]	@ (800ae74 <__sfp_lock_release+0x8>)
 800ae6e:	f000 ba25 	b.w	800b2bc <__retarget_lock_release_recursive>
 800ae72:	bf00      	nop
 800ae74:	2000070d 	.word	0x2000070d

0800ae78 <__sinit>:
 800ae78:	b510      	push	{r4, lr}
 800ae7a:	4604      	mov	r4, r0
 800ae7c:	f7ff fff0 	bl	800ae60 <__sfp_lock_acquire>
 800ae80:	6a23      	ldr	r3, [r4, #32]
 800ae82:	b11b      	cbz	r3, 800ae8c <__sinit+0x14>
 800ae84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae88:	f7ff bff0 	b.w	800ae6c <__sfp_lock_release>
 800ae8c:	4b04      	ldr	r3, [pc, #16]	@ (800aea0 <__sinit+0x28>)
 800ae8e:	6223      	str	r3, [r4, #32]
 800ae90:	4b04      	ldr	r3, [pc, #16]	@ (800aea4 <__sinit+0x2c>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d1f5      	bne.n	800ae84 <__sinit+0xc>
 800ae98:	f7ff ffc4 	bl	800ae24 <global_stdio_init.part.0>
 800ae9c:	e7f2      	b.n	800ae84 <__sinit+0xc>
 800ae9e:	bf00      	nop
 800aea0:	0800ade5 	.word	0x0800ade5
 800aea4:	20000704 	.word	0x20000704

0800aea8 <_fwalk_sglue>:
 800aea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aeac:	4607      	mov	r7, r0
 800aeae:	4688      	mov	r8, r1
 800aeb0:	4614      	mov	r4, r2
 800aeb2:	2600      	movs	r6, #0
 800aeb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aeb8:	f1b9 0901 	subs.w	r9, r9, #1
 800aebc:	d505      	bpl.n	800aeca <_fwalk_sglue+0x22>
 800aebe:	6824      	ldr	r4, [r4, #0]
 800aec0:	2c00      	cmp	r4, #0
 800aec2:	d1f7      	bne.n	800aeb4 <_fwalk_sglue+0xc>
 800aec4:	4630      	mov	r0, r6
 800aec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeca:	89ab      	ldrh	r3, [r5, #12]
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d907      	bls.n	800aee0 <_fwalk_sglue+0x38>
 800aed0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aed4:	3301      	adds	r3, #1
 800aed6:	d003      	beq.n	800aee0 <_fwalk_sglue+0x38>
 800aed8:	4629      	mov	r1, r5
 800aeda:	4638      	mov	r0, r7
 800aedc:	47c0      	blx	r8
 800aede:	4306      	orrs	r6, r0
 800aee0:	3568      	adds	r5, #104	@ 0x68
 800aee2:	e7e9      	b.n	800aeb8 <_fwalk_sglue+0x10>

0800aee4 <iprintf>:
 800aee4:	b40f      	push	{r0, r1, r2, r3}
 800aee6:	b507      	push	{r0, r1, r2, lr}
 800aee8:	4906      	ldr	r1, [pc, #24]	@ (800af04 <iprintf+0x20>)
 800aeea:	ab04      	add	r3, sp, #16
 800aeec:	6808      	ldr	r0, [r1, #0]
 800aeee:	f853 2b04 	ldr.w	r2, [r3], #4
 800aef2:	6881      	ldr	r1, [r0, #8]
 800aef4:	9301      	str	r3, [sp, #4]
 800aef6:	f000 fa65 	bl	800b3c4 <_vfiprintf_r>
 800aefa:	b003      	add	sp, #12
 800aefc:	f85d eb04 	ldr.w	lr, [sp], #4
 800af00:	b004      	add	sp, #16
 800af02:	4770      	bx	lr
 800af04:	200003e8 	.word	0x200003e8

0800af08 <_puts_r>:
 800af08:	6a03      	ldr	r3, [r0, #32]
 800af0a:	b570      	push	{r4, r5, r6, lr}
 800af0c:	6884      	ldr	r4, [r0, #8]
 800af0e:	4605      	mov	r5, r0
 800af10:	460e      	mov	r6, r1
 800af12:	b90b      	cbnz	r3, 800af18 <_puts_r+0x10>
 800af14:	f7ff ffb0 	bl	800ae78 <__sinit>
 800af18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af1a:	07db      	lsls	r3, r3, #31
 800af1c:	d405      	bmi.n	800af2a <_puts_r+0x22>
 800af1e:	89a3      	ldrh	r3, [r4, #12]
 800af20:	0598      	lsls	r0, r3, #22
 800af22:	d402      	bmi.n	800af2a <_puts_r+0x22>
 800af24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af26:	f000 f9c8 	bl	800b2ba <__retarget_lock_acquire_recursive>
 800af2a:	89a3      	ldrh	r3, [r4, #12]
 800af2c:	0719      	lsls	r1, r3, #28
 800af2e:	d502      	bpl.n	800af36 <_puts_r+0x2e>
 800af30:	6923      	ldr	r3, [r4, #16]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d135      	bne.n	800afa2 <_puts_r+0x9a>
 800af36:	4621      	mov	r1, r4
 800af38:	4628      	mov	r0, r5
 800af3a:	f000 f8c5 	bl	800b0c8 <__swsetup_r>
 800af3e:	b380      	cbz	r0, 800afa2 <_puts_r+0x9a>
 800af40:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800af44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af46:	07da      	lsls	r2, r3, #31
 800af48:	d405      	bmi.n	800af56 <_puts_r+0x4e>
 800af4a:	89a3      	ldrh	r3, [r4, #12]
 800af4c:	059b      	lsls	r3, r3, #22
 800af4e:	d402      	bmi.n	800af56 <_puts_r+0x4e>
 800af50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af52:	f000 f9b3 	bl	800b2bc <__retarget_lock_release_recursive>
 800af56:	4628      	mov	r0, r5
 800af58:	bd70      	pop	{r4, r5, r6, pc}
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	da04      	bge.n	800af68 <_puts_r+0x60>
 800af5e:	69a2      	ldr	r2, [r4, #24]
 800af60:	429a      	cmp	r2, r3
 800af62:	dc17      	bgt.n	800af94 <_puts_r+0x8c>
 800af64:	290a      	cmp	r1, #10
 800af66:	d015      	beq.n	800af94 <_puts_r+0x8c>
 800af68:	6823      	ldr	r3, [r4, #0]
 800af6a:	1c5a      	adds	r2, r3, #1
 800af6c:	6022      	str	r2, [r4, #0]
 800af6e:	7019      	strb	r1, [r3, #0]
 800af70:	68a3      	ldr	r3, [r4, #8]
 800af72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800af76:	3b01      	subs	r3, #1
 800af78:	60a3      	str	r3, [r4, #8]
 800af7a:	2900      	cmp	r1, #0
 800af7c:	d1ed      	bne.n	800af5a <_puts_r+0x52>
 800af7e:	2b00      	cmp	r3, #0
 800af80:	da11      	bge.n	800afa6 <_puts_r+0x9e>
 800af82:	4622      	mov	r2, r4
 800af84:	210a      	movs	r1, #10
 800af86:	4628      	mov	r0, r5
 800af88:	f000 f85f 	bl	800b04a <__swbuf_r>
 800af8c:	3001      	adds	r0, #1
 800af8e:	d0d7      	beq.n	800af40 <_puts_r+0x38>
 800af90:	250a      	movs	r5, #10
 800af92:	e7d7      	b.n	800af44 <_puts_r+0x3c>
 800af94:	4622      	mov	r2, r4
 800af96:	4628      	mov	r0, r5
 800af98:	f000 f857 	bl	800b04a <__swbuf_r>
 800af9c:	3001      	adds	r0, #1
 800af9e:	d1e7      	bne.n	800af70 <_puts_r+0x68>
 800afa0:	e7ce      	b.n	800af40 <_puts_r+0x38>
 800afa2:	3e01      	subs	r6, #1
 800afa4:	e7e4      	b.n	800af70 <_puts_r+0x68>
 800afa6:	6823      	ldr	r3, [r4, #0]
 800afa8:	1c5a      	adds	r2, r3, #1
 800afaa:	6022      	str	r2, [r4, #0]
 800afac:	220a      	movs	r2, #10
 800afae:	701a      	strb	r2, [r3, #0]
 800afb0:	e7ee      	b.n	800af90 <_puts_r+0x88>
	...

0800afb4 <puts>:
 800afb4:	4b02      	ldr	r3, [pc, #8]	@ (800afc0 <puts+0xc>)
 800afb6:	4601      	mov	r1, r0
 800afb8:	6818      	ldr	r0, [r3, #0]
 800afba:	f7ff bfa5 	b.w	800af08 <_puts_r>
 800afbe:	bf00      	nop
 800afc0:	200003e8 	.word	0x200003e8

0800afc4 <__sread>:
 800afc4:	b510      	push	{r4, lr}
 800afc6:	460c      	mov	r4, r1
 800afc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afcc:	f000 f916 	bl	800b1fc <_read_r>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	bfab      	itete	ge
 800afd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800afd6:	89a3      	ldrhlt	r3, [r4, #12]
 800afd8:	181b      	addge	r3, r3, r0
 800afda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800afde:	bfac      	ite	ge
 800afe0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800afe2:	81a3      	strhlt	r3, [r4, #12]
 800afe4:	bd10      	pop	{r4, pc}

0800afe6 <__swrite>:
 800afe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afea:	461f      	mov	r7, r3
 800afec:	898b      	ldrh	r3, [r1, #12]
 800afee:	05db      	lsls	r3, r3, #23
 800aff0:	4605      	mov	r5, r0
 800aff2:	460c      	mov	r4, r1
 800aff4:	4616      	mov	r6, r2
 800aff6:	d505      	bpl.n	800b004 <__swrite+0x1e>
 800aff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800affc:	2302      	movs	r3, #2
 800affe:	2200      	movs	r2, #0
 800b000:	f000 f8ea 	bl	800b1d8 <_lseek_r>
 800b004:	89a3      	ldrh	r3, [r4, #12]
 800b006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b00a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b00e:	81a3      	strh	r3, [r4, #12]
 800b010:	4632      	mov	r2, r6
 800b012:	463b      	mov	r3, r7
 800b014:	4628      	mov	r0, r5
 800b016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b01a:	f000 b911 	b.w	800b240 <_write_r>

0800b01e <__sseek>:
 800b01e:	b510      	push	{r4, lr}
 800b020:	460c      	mov	r4, r1
 800b022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b026:	f000 f8d7 	bl	800b1d8 <_lseek_r>
 800b02a:	1c43      	adds	r3, r0, #1
 800b02c:	89a3      	ldrh	r3, [r4, #12]
 800b02e:	bf15      	itete	ne
 800b030:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b032:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b036:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b03a:	81a3      	strheq	r3, [r4, #12]
 800b03c:	bf18      	it	ne
 800b03e:	81a3      	strhne	r3, [r4, #12]
 800b040:	bd10      	pop	{r4, pc}

0800b042 <__sclose>:
 800b042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b046:	f000 b8b7 	b.w	800b1b8 <_close_r>

0800b04a <__swbuf_r>:
 800b04a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04c:	460e      	mov	r6, r1
 800b04e:	4614      	mov	r4, r2
 800b050:	4605      	mov	r5, r0
 800b052:	b118      	cbz	r0, 800b05c <__swbuf_r+0x12>
 800b054:	6a03      	ldr	r3, [r0, #32]
 800b056:	b90b      	cbnz	r3, 800b05c <__swbuf_r+0x12>
 800b058:	f7ff ff0e 	bl	800ae78 <__sinit>
 800b05c:	69a3      	ldr	r3, [r4, #24]
 800b05e:	60a3      	str	r3, [r4, #8]
 800b060:	89a3      	ldrh	r3, [r4, #12]
 800b062:	071a      	lsls	r2, r3, #28
 800b064:	d501      	bpl.n	800b06a <__swbuf_r+0x20>
 800b066:	6923      	ldr	r3, [r4, #16]
 800b068:	b943      	cbnz	r3, 800b07c <__swbuf_r+0x32>
 800b06a:	4621      	mov	r1, r4
 800b06c:	4628      	mov	r0, r5
 800b06e:	f000 f82b 	bl	800b0c8 <__swsetup_r>
 800b072:	b118      	cbz	r0, 800b07c <__swbuf_r+0x32>
 800b074:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b078:	4638      	mov	r0, r7
 800b07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b07c:	6823      	ldr	r3, [r4, #0]
 800b07e:	6922      	ldr	r2, [r4, #16]
 800b080:	1a98      	subs	r0, r3, r2
 800b082:	6963      	ldr	r3, [r4, #20]
 800b084:	b2f6      	uxtb	r6, r6
 800b086:	4283      	cmp	r3, r0
 800b088:	4637      	mov	r7, r6
 800b08a:	dc05      	bgt.n	800b098 <__swbuf_r+0x4e>
 800b08c:	4621      	mov	r1, r4
 800b08e:	4628      	mov	r0, r5
 800b090:	f7ff fe2a 	bl	800ace8 <_fflush_r>
 800b094:	2800      	cmp	r0, #0
 800b096:	d1ed      	bne.n	800b074 <__swbuf_r+0x2a>
 800b098:	68a3      	ldr	r3, [r4, #8]
 800b09a:	3b01      	subs	r3, #1
 800b09c:	60a3      	str	r3, [r4, #8]
 800b09e:	6823      	ldr	r3, [r4, #0]
 800b0a0:	1c5a      	adds	r2, r3, #1
 800b0a2:	6022      	str	r2, [r4, #0]
 800b0a4:	701e      	strb	r6, [r3, #0]
 800b0a6:	6962      	ldr	r2, [r4, #20]
 800b0a8:	1c43      	adds	r3, r0, #1
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d004      	beq.n	800b0b8 <__swbuf_r+0x6e>
 800b0ae:	89a3      	ldrh	r3, [r4, #12]
 800b0b0:	07db      	lsls	r3, r3, #31
 800b0b2:	d5e1      	bpl.n	800b078 <__swbuf_r+0x2e>
 800b0b4:	2e0a      	cmp	r6, #10
 800b0b6:	d1df      	bne.n	800b078 <__swbuf_r+0x2e>
 800b0b8:	4621      	mov	r1, r4
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	f7ff fe14 	bl	800ace8 <_fflush_r>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	d0d9      	beq.n	800b078 <__swbuf_r+0x2e>
 800b0c4:	e7d6      	b.n	800b074 <__swbuf_r+0x2a>
	...

0800b0c8 <__swsetup_r>:
 800b0c8:	b538      	push	{r3, r4, r5, lr}
 800b0ca:	4b29      	ldr	r3, [pc, #164]	@ (800b170 <__swsetup_r+0xa8>)
 800b0cc:	4605      	mov	r5, r0
 800b0ce:	6818      	ldr	r0, [r3, #0]
 800b0d0:	460c      	mov	r4, r1
 800b0d2:	b118      	cbz	r0, 800b0dc <__swsetup_r+0x14>
 800b0d4:	6a03      	ldr	r3, [r0, #32]
 800b0d6:	b90b      	cbnz	r3, 800b0dc <__swsetup_r+0x14>
 800b0d8:	f7ff fece 	bl	800ae78 <__sinit>
 800b0dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0e0:	0719      	lsls	r1, r3, #28
 800b0e2:	d422      	bmi.n	800b12a <__swsetup_r+0x62>
 800b0e4:	06da      	lsls	r2, r3, #27
 800b0e6:	d407      	bmi.n	800b0f8 <__swsetup_r+0x30>
 800b0e8:	2209      	movs	r2, #9
 800b0ea:	602a      	str	r2, [r5, #0]
 800b0ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0f0:	81a3      	strh	r3, [r4, #12]
 800b0f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0f6:	e033      	b.n	800b160 <__swsetup_r+0x98>
 800b0f8:	0758      	lsls	r0, r3, #29
 800b0fa:	d512      	bpl.n	800b122 <__swsetup_r+0x5a>
 800b0fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0fe:	b141      	cbz	r1, 800b112 <__swsetup_r+0x4a>
 800b100:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b104:	4299      	cmp	r1, r3
 800b106:	d002      	beq.n	800b10e <__swsetup_r+0x46>
 800b108:	4628      	mov	r0, r5
 800b10a:	f000 f8e7 	bl	800b2dc <_free_r>
 800b10e:	2300      	movs	r3, #0
 800b110:	6363      	str	r3, [r4, #52]	@ 0x34
 800b112:	89a3      	ldrh	r3, [r4, #12]
 800b114:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b118:	81a3      	strh	r3, [r4, #12]
 800b11a:	2300      	movs	r3, #0
 800b11c:	6063      	str	r3, [r4, #4]
 800b11e:	6923      	ldr	r3, [r4, #16]
 800b120:	6023      	str	r3, [r4, #0]
 800b122:	89a3      	ldrh	r3, [r4, #12]
 800b124:	f043 0308 	orr.w	r3, r3, #8
 800b128:	81a3      	strh	r3, [r4, #12]
 800b12a:	6923      	ldr	r3, [r4, #16]
 800b12c:	b94b      	cbnz	r3, 800b142 <__swsetup_r+0x7a>
 800b12e:	89a3      	ldrh	r3, [r4, #12]
 800b130:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b138:	d003      	beq.n	800b142 <__swsetup_r+0x7a>
 800b13a:	4621      	mov	r1, r4
 800b13c:	4628      	mov	r0, r5
 800b13e:	f000 fc0d 	bl	800b95c <__smakebuf_r>
 800b142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b146:	f013 0201 	ands.w	r2, r3, #1
 800b14a:	d00a      	beq.n	800b162 <__swsetup_r+0x9a>
 800b14c:	2200      	movs	r2, #0
 800b14e:	60a2      	str	r2, [r4, #8]
 800b150:	6962      	ldr	r2, [r4, #20]
 800b152:	4252      	negs	r2, r2
 800b154:	61a2      	str	r2, [r4, #24]
 800b156:	6922      	ldr	r2, [r4, #16]
 800b158:	b942      	cbnz	r2, 800b16c <__swsetup_r+0xa4>
 800b15a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b15e:	d1c5      	bne.n	800b0ec <__swsetup_r+0x24>
 800b160:	bd38      	pop	{r3, r4, r5, pc}
 800b162:	0799      	lsls	r1, r3, #30
 800b164:	bf58      	it	pl
 800b166:	6962      	ldrpl	r2, [r4, #20]
 800b168:	60a2      	str	r2, [r4, #8]
 800b16a:	e7f4      	b.n	800b156 <__swsetup_r+0x8e>
 800b16c:	2000      	movs	r0, #0
 800b16e:	e7f7      	b.n	800b160 <__swsetup_r+0x98>
 800b170:	200003e8 	.word	0x200003e8

0800b174 <memmove>:
 800b174:	4288      	cmp	r0, r1
 800b176:	b510      	push	{r4, lr}
 800b178:	eb01 0402 	add.w	r4, r1, r2
 800b17c:	d902      	bls.n	800b184 <memmove+0x10>
 800b17e:	4284      	cmp	r4, r0
 800b180:	4623      	mov	r3, r4
 800b182:	d807      	bhi.n	800b194 <memmove+0x20>
 800b184:	1e43      	subs	r3, r0, #1
 800b186:	42a1      	cmp	r1, r4
 800b188:	d008      	beq.n	800b19c <memmove+0x28>
 800b18a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b18e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b192:	e7f8      	b.n	800b186 <memmove+0x12>
 800b194:	4402      	add	r2, r0
 800b196:	4601      	mov	r1, r0
 800b198:	428a      	cmp	r2, r1
 800b19a:	d100      	bne.n	800b19e <memmove+0x2a>
 800b19c:	bd10      	pop	{r4, pc}
 800b19e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1a6:	e7f7      	b.n	800b198 <memmove+0x24>

0800b1a8 <memset>:
 800b1a8:	4402      	add	r2, r0
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d100      	bne.n	800b1b2 <memset+0xa>
 800b1b0:	4770      	bx	lr
 800b1b2:	f803 1b01 	strb.w	r1, [r3], #1
 800b1b6:	e7f9      	b.n	800b1ac <memset+0x4>

0800b1b8 <_close_r>:
 800b1b8:	b538      	push	{r3, r4, r5, lr}
 800b1ba:	4d06      	ldr	r5, [pc, #24]	@ (800b1d4 <_close_r+0x1c>)
 800b1bc:	2300      	movs	r3, #0
 800b1be:	4604      	mov	r4, r0
 800b1c0:	4608      	mov	r0, r1
 800b1c2:	602b      	str	r3, [r5, #0]
 800b1c4:	f7fd f869 	bl	800829a <_close>
 800b1c8:	1c43      	adds	r3, r0, #1
 800b1ca:	d102      	bne.n	800b1d2 <_close_r+0x1a>
 800b1cc:	682b      	ldr	r3, [r5, #0]
 800b1ce:	b103      	cbz	r3, 800b1d2 <_close_r+0x1a>
 800b1d0:	6023      	str	r3, [r4, #0]
 800b1d2:	bd38      	pop	{r3, r4, r5, pc}
 800b1d4:	20000708 	.word	0x20000708

0800b1d8 <_lseek_r>:
 800b1d8:	b538      	push	{r3, r4, r5, lr}
 800b1da:	4d07      	ldr	r5, [pc, #28]	@ (800b1f8 <_lseek_r+0x20>)
 800b1dc:	4604      	mov	r4, r0
 800b1de:	4608      	mov	r0, r1
 800b1e0:	4611      	mov	r1, r2
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	602a      	str	r2, [r5, #0]
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	f7fd f87e 	bl	80082e8 <_lseek>
 800b1ec:	1c43      	adds	r3, r0, #1
 800b1ee:	d102      	bne.n	800b1f6 <_lseek_r+0x1e>
 800b1f0:	682b      	ldr	r3, [r5, #0]
 800b1f2:	b103      	cbz	r3, 800b1f6 <_lseek_r+0x1e>
 800b1f4:	6023      	str	r3, [r4, #0]
 800b1f6:	bd38      	pop	{r3, r4, r5, pc}
 800b1f8:	20000708 	.word	0x20000708

0800b1fc <_read_r>:
 800b1fc:	b538      	push	{r3, r4, r5, lr}
 800b1fe:	4d07      	ldr	r5, [pc, #28]	@ (800b21c <_read_r+0x20>)
 800b200:	4604      	mov	r4, r0
 800b202:	4608      	mov	r0, r1
 800b204:	4611      	mov	r1, r2
 800b206:	2200      	movs	r2, #0
 800b208:	602a      	str	r2, [r5, #0]
 800b20a:	461a      	mov	r2, r3
 800b20c:	f7fd f80c 	bl	8008228 <_read>
 800b210:	1c43      	adds	r3, r0, #1
 800b212:	d102      	bne.n	800b21a <_read_r+0x1e>
 800b214:	682b      	ldr	r3, [r5, #0]
 800b216:	b103      	cbz	r3, 800b21a <_read_r+0x1e>
 800b218:	6023      	str	r3, [r4, #0]
 800b21a:	bd38      	pop	{r3, r4, r5, pc}
 800b21c:	20000708 	.word	0x20000708

0800b220 <_sbrk_r>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4d06      	ldr	r5, [pc, #24]	@ (800b23c <_sbrk_r+0x1c>)
 800b224:	2300      	movs	r3, #0
 800b226:	4604      	mov	r4, r0
 800b228:	4608      	mov	r0, r1
 800b22a:	602b      	str	r3, [r5, #0]
 800b22c:	f7fd f86a 	bl	8008304 <_sbrk>
 800b230:	1c43      	adds	r3, r0, #1
 800b232:	d102      	bne.n	800b23a <_sbrk_r+0x1a>
 800b234:	682b      	ldr	r3, [r5, #0]
 800b236:	b103      	cbz	r3, 800b23a <_sbrk_r+0x1a>
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	bd38      	pop	{r3, r4, r5, pc}
 800b23c:	20000708 	.word	0x20000708

0800b240 <_write_r>:
 800b240:	b538      	push	{r3, r4, r5, lr}
 800b242:	4d07      	ldr	r5, [pc, #28]	@ (800b260 <_write_r+0x20>)
 800b244:	4604      	mov	r4, r0
 800b246:	4608      	mov	r0, r1
 800b248:	4611      	mov	r1, r2
 800b24a:	2200      	movs	r2, #0
 800b24c:	602a      	str	r2, [r5, #0]
 800b24e:	461a      	mov	r2, r3
 800b250:	f7fd f807 	bl	8008262 <_write>
 800b254:	1c43      	adds	r3, r0, #1
 800b256:	d102      	bne.n	800b25e <_write_r+0x1e>
 800b258:	682b      	ldr	r3, [r5, #0]
 800b25a:	b103      	cbz	r3, 800b25e <_write_r+0x1e>
 800b25c:	6023      	str	r3, [r4, #0]
 800b25e:	bd38      	pop	{r3, r4, r5, pc}
 800b260:	20000708 	.word	0x20000708

0800b264 <__errno>:
 800b264:	4b01      	ldr	r3, [pc, #4]	@ (800b26c <__errno+0x8>)
 800b266:	6818      	ldr	r0, [r3, #0]
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	200003e8 	.word	0x200003e8

0800b270 <__libc_init_array>:
 800b270:	b570      	push	{r4, r5, r6, lr}
 800b272:	4d0d      	ldr	r5, [pc, #52]	@ (800b2a8 <__libc_init_array+0x38>)
 800b274:	4c0d      	ldr	r4, [pc, #52]	@ (800b2ac <__libc_init_array+0x3c>)
 800b276:	1b64      	subs	r4, r4, r5
 800b278:	10a4      	asrs	r4, r4, #2
 800b27a:	2600      	movs	r6, #0
 800b27c:	42a6      	cmp	r6, r4
 800b27e:	d109      	bne.n	800b294 <__libc_init_array+0x24>
 800b280:	4d0b      	ldr	r5, [pc, #44]	@ (800b2b0 <__libc_init_array+0x40>)
 800b282:	4c0c      	ldr	r4, [pc, #48]	@ (800b2b4 <__libc_init_array+0x44>)
 800b284:	f000 fbc8 	bl	800ba18 <_init>
 800b288:	1b64      	subs	r4, r4, r5
 800b28a:	10a4      	asrs	r4, r4, #2
 800b28c:	2600      	movs	r6, #0
 800b28e:	42a6      	cmp	r6, r4
 800b290:	d105      	bne.n	800b29e <__libc_init_array+0x2e>
 800b292:	bd70      	pop	{r4, r5, r6, pc}
 800b294:	f855 3b04 	ldr.w	r3, [r5], #4
 800b298:	4798      	blx	r3
 800b29a:	3601      	adds	r6, #1
 800b29c:	e7ee      	b.n	800b27c <__libc_init_array+0xc>
 800b29e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2a2:	4798      	blx	r3
 800b2a4:	3601      	adds	r6, #1
 800b2a6:	e7f2      	b.n	800b28e <__libc_init_array+0x1e>
 800b2a8:	0800c360 	.word	0x0800c360
 800b2ac:	0800c360 	.word	0x0800c360
 800b2b0:	0800c360 	.word	0x0800c360
 800b2b4:	0800c364 	.word	0x0800c364

0800b2b8 <__retarget_lock_init_recursive>:
 800b2b8:	4770      	bx	lr

0800b2ba <__retarget_lock_acquire_recursive>:
 800b2ba:	4770      	bx	lr

0800b2bc <__retarget_lock_release_recursive>:
 800b2bc:	4770      	bx	lr

0800b2be <memcpy>:
 800b2be:	440a      	add	r2, r1
 800b2c0:	4291      	cmp	r1, r2
 800b2c2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b2c6:	d100      	bne.n	800b2ca <memcpy+0xc>
 800b2c8:	4770      	bx	lr
 800b2ca:	b510      	push	{r4, lr}
 800b2cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2d4:	4291      	cmp	r1, r2
 800b2d6:	d1f9      	bne.n	800b2cc <memcpy+0xe>
 800b2d8:	bd10      	pop	{r4, pc}
	...

0800b2dc <_free_r>:
 800b2dc:	b538      	push	{r3, r4, r5, lr}
 800b2de:	4605      	mov	r5, r0
 800b2e0:	2900      	cmp	r1, #0
 800b2e2:	d041      	beq.n	800b368 <_free_r+0x8c>
 800b2e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2e8:	1f0c      	subs	r4, r1, #4
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	bfb8      	it	lt
 800b2ee:	18e4      	addlt	r4, r4, r3
 800b2f0:	f7ff fc6a 	bl	800abc8 <__malloc_lock>
 800b2f4:	4a1d      	ldr	r2, [pc, #116]	@ (800b36c <_free_r+0x90>)
 800b2f6:	6813      	ldr	r3, [r2, #0]
 800b2f8:	b933      	cbnz	r3, 800b308 <_free_r+0x2c>
 800b2fa:	6063      	str	r3, [r4, #4]
 800b2fc:	6014      	str	r4, [r2, #0]
 800b2fe:	4628      	mov	r0, r5
 800b300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b304:	f7ff bc66 	b.w	800abd4 <__malloc_unlock>
 800b308:	42a3      	cmp	r3, r4
 800b30a:	d908      	bls.n	800b31e <_free_r+0x42>
 800b30c:	6820      	ldr	r0, [r4, #0]
 800b30e:	1821      	adds	r1, r4, r0
 800b310:	428b      	cmp	r3, r1
 800b312:	bf01      	itttt	eq
 800b314:	6819      	ldreq	r1, [r3, #0]
 800b316:	685b      	ldreq	r3, [r3, #4]
 800b318:	1809      	addeq	r1, r1, r0
 800b31a:	6021      	streq	r1, [r4, #0]
 800b31c:	e7ed      	b.n	800b2fa <_free_r+0x1e>
 800b31e:	461a      	mov	r2, r3
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	b10b      	cbz	r3, 800b328 <_free_r+0x4c>
 800b324:	42a3      	cmp	r3, r4
 800b326:	d9fa      	bls.n	800b31e <_free_r+0x42>
 800b328:	6811      	ldr	r1, [r2, #0]
 800b32a:	1850      	adds	r0, r2, r1
 800b32c:	42a0      	cmp	r0, r4
 800b32e:	d10b      	bne.n	800b348 <_free_r+0x6c>
 800b330:	6820      	ldr	r0, [r4, #0]
 800b332:	4401      	add	r1, r0
 800b334:	1850      	adds	r0, r2, r1
 800b336:	4283      	cmp	r3, r0
 800b338:	6011      	str	r1, [r2, #0]
 800b33a:	d1e0      	bne.n	800b2fe <_free_r+0x22>
 800b33c:	6818      	ldr	r0, [r3, #0]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	6053      	str	r3, [r2, #4]
 800b342:	4408      	add	r0, r1
 800b344:	6010      	str	r0, [r2, #0]
 800b346:	e7da      	b.n	800b2fe <_free_r+0x22>
 800b348:	d902      	bls.n	800b350 <_free_r+0x74>
 800b34a:	230c      	movs	r3, #12
 800b34c:	602b      	str	r3, [r5, #0]
 800b34e:	e7d6      	b.n	800b2fe <_free_r+0x22>
 800b350:	6820      	ldr	r0, [r4, #0]
 800b352:	1821      	adds	r1, r4, r0
 800b354:	428b      	cmp	r3, r1
 800b356:	bf04      	itt	eq
 800b358:	6819      	ldreq	r1, [r3, #0]
 800b35a:	685b      	ldreq	r3, [r3, #4]
 800b35c:	6063      	str	r3, [r4, #4]
 800b35e:	bf04      	itt	eq
 800b360:	1809      	addeq	r1, r1, r0
 800b362:	6021      	streq	r1, [r4, #0]
 800b364:	6054      	str	r4, [r2, #4]
 800b366:	e7ca      	b.n	800b2fe <_free_r+0x22>
 800b368:	bd38      	pop	{r3, r4, r5, pc}
 800b36a:	bf00      	nop
 800b36c:	200005c8 	.word	0x200005c8

0800b370 <__sfputc_r>:
 800b370:	6893      	ldr	r3, [r2, #8]
 800b372:	3b01      	subs	r3, #1
 800b374:	2b00      	cmp	r3, #0
 800b376:	b410      	push	{r4}
 800b378:	6093      	str	r3, [r2, #8]
 800b37a:	da08      	bge.n	800b38e <__sfputc_r+0x1e>
 800b37c:	6994      	ldr	r4, [r2, #24]
 800b37e:	42a3      	cmp	r3, r4
 800b380:	db01      	blt.n	800b386 <__sfputc_r+0x16>
 800b382:	290a      	cmp	r1, #10
 800b384:	d103      	bne.n	800b38e <__sfputc_r+0x1e>
 800b386:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b38a:	f7ff be5e 	b.w	800b04a <__swbuf_r>
 800b38e:	6813      	ldr	r3, [r2, #0]
 800b390:	1c58      	adds	r0, r3, #1
 800b392:	6010      	str	r0, [r2, #0]
 800b394:	7019      	strb	r1, [r3, #0]
 800b396:	4608      	mov	r0, r1
 800b398:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b39c:	4770      	bx	lr

0800b39e <__sfputs_r>:
 800b39e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3a0:	4606      	mov	r6, r0
 800b3a2:	460f      	mov	r7, r1
 800b3a4:	4614      	mov	r4, r2
 800b3a6:	18d5      	adds	r5, r2, r3
 800b3a8:	42ac      	cmp	r4, r5
 800b3aa:	d101      	bne.n	800b3b0 <__sfputs_r+0x12>
 800b3ac:	2000      	movs	r0, #0
 800b3ae:	e007      	b.n	800b3c0 <__sfputs_r+0x22>
 800b3b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3b4:	463a      	mov	r2, r7
 800b3b6:	4630      	mov	r0, r6
 800b3b8:	f7ff ffda 	bl	800b370 <__sfputc_r>
 800b3bc:	1c43      	adds	r3, r0, #1
 800b3be:	d1f3      	bne.n	800b3a8 <__sfputs_r+0xa>
 800b3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3c4 <_vfiprintf_r>:
 800b3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c8:	460d      	mov	r5, r1
 800b3ca:	b09d      	sub	sp, #116	@ 0x74
 800b3cc:	4614      	mov	r4, r2
 800b3ce:	4698      	mov	r8, r3
 800b3d0:	4606      	mov	r6, r0
 800b3d2:	b118      	cbz	r0, 800b3dc <_vfiprintf_r+0x18>
 800b3d4:	6a03      	ldr	r3, [r0, #32]
 800b3d6:	b90b      	cbnz	r3, 800b3dc <_vfiprintf_r+0x18>
 800b3d8:	f7ff fd4e 	bl	800ae78 <__sinit>
 800b3dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3de:	07d9      	lsls	r1, r3, #31
 800b3e0:	d405      	bmi.n	800b3ee <_vfiprintf_r+0x2a>
 800b3e2:	89ab      	ldrh	r3, [r5, #12]
 800b3e4:	059a      	lsls	r2, r3, #22
 800b3e6:	d402      	bmi.n	800b3ee <_vfiprintf_r+0x2a>
 800b3e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3ea:	f7ff ff66 	bl	800b2ba <__retarget_lock_acquire_recursive>
 800b3ee:	89ab      	ldrh	r3, [r5, #12]
 800b3f0:	071b      	lsls	r3, r3, #28
 800b3f2:	d501      	bpl.n	800b3f8 <_vfiprintf_r+0x34>
 800b3f4:	692b      	ldr	r3, [r5, #16]
 800b3f6:	b99b      	cbnz	r3, 800b420 <_vfiprintf_r+0x5c>
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	4630      	mov	r0, r6
 800b3fc:	f7ff fe64 	bl	800b0c8 <__swsetup_r>
 800b400:	b170      	cbz	r0, 800b420 <_vfiprintf_r+0x5c>
 800b402:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b404:	07dc      	lsls	r4, r3, #31
 800b406:	d504      	bpl.n	800b412 <_vfiprintf_r+0x4e>
 800b408:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b40c:	b01d      	add	sp, #116	@ 0x74
 800b40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b412:	89ab      	ldrh	r3, [r5, #12]
 800b414:	0598      	lsls	r0, r3, #22
 800b416:	d4f7      	bmi.n	800b408 <_vfiprintf_r+0x44>
 800b418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b41a:	f7ff ff4f 	bl	800b2bc <__retarget_lock_release_recursive>
 800b41e:	e7f3      	b.n	800b408 <_vfiprintf_r+0x44>
 800b420:	2300      	movs	r3, #0
 800b422:	9309      	str	r3, [sp, #36]	@ 0x24
 800b424:	2320      	movs	r3, #32
 800b426:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b42a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b42e:	2330      	movs	r3, #48	@ 0x30
 800b430:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b5e0 <_vfiprintf_r+0x21c>
 800b434:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b438:	f04f 0901 	mov.w	r9, #1
 800b43c:	4623      	mov	r3, r4
 800b43e:	469a      	mov	sl, r3
 800b440:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b444:	b10a      	cbz	r2, 800b44a <_vfiprintf_r+0x86>
 800b446:	2a25      	cmp	r2, #37	@ 0x25
 800b448:	d1f9      	bne.n	800b43e <_vfiprintf_r+0x7a>
 800b44a:	ebba 0b04 	subs.w	fp, sl, r4
 800b44e:	d00b      	beq.n	800b468 <_vfiprintf_r+0xa4>
 800b450:	465b      	mov	r3, fp
 800b452:	4622      	mov	r2, r4
 800b454:	4629      	mov	r1, r5
 800b456:	4630      	mov	r0, r6
 800b458:	f7ff ffa1 	bl	800b39e <__sfputs_r>
 800b45c:	3001      	adds	r0, #1
 800b45e:	f000 80a7 	beq.w	800b5b0 <_vfiprintf_r+0x1ec>
 800b462:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b464:	445a      	add	r2, fp
 800b466:	9209      	str	r2, [sp, #36]	@ 0x24
 800b468:	f89a 3000 	ldrb.w	r3, [sl]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	f000 809f 	beq.w	800b5b0 <_vfiprintf_r+0x1ec>
 800b472:	2300      	movs	r3, #0
 800b474:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b478:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b47c:	f10a 0a01 	add.w	sl, sl, #1
 800b480:	9304      	str	r3, [sp, #16]
 800b482:	9307      	str	r3, [sp, #28]
 800b484:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b488:	931a      	str	r3, [sp, #104]	@ 0x68
 800b48a:	4654      	mov	r4, sl
 800b48c:	2205      	movs	r2, #5
 800b48e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b492:	4853      	ldr	r0, [pc, #332]	@ (800b5e0 <_vfiprintf_r+0x21c>)
 800b494:	f7f4 fea4 	bl	80001e0 <memchr>
 800b498:	9a04      	ldr	r2, [sp, #16]
 800b49a:	b9d8      	cbnz	r0, 800b4d4 <_vfiprintf_r+0x110>
 800b49c:	06d1      	lsls	r1, r2, #27
 800b49e:	bf44      	itt	mi
 800b4a0:	2320      	movmi	r3, #32
 800b4a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4a6:	0713      	lsls	r3, r2, #28
 800b4a8:	bf44      	itt	mi
 800b4aa:	232b      	movmi	r3, #43	@ 0x2b
 800b4ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4b0:	f89a 3000 	ldrb.w	r3, [sl]
 800b4b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4b6:	d015      	beq.n	800b4e4 <_vfiprintf_r+0x120>
 800b4b8:	9a07      	ldr	r2, [sp, #28]
 800b4ba:	4654      	mov	r4, sl
 800b4bc:	2000      	movs	r0, #0
 800b4be:	f04f 0c0a 	mov.w	ip, #10
 800b4c2:	4621      	mov	r1, r4
 800b4c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4c8:	3b30      	subs	r3, #48	@ 0x30
 800b4ca:	2b09      	cmp	r3, #9
 800b4cc:	d94b      	bls.n	800b566 <_vfiprintf_r+0x1a2>
 800b4ce:	b1b0      	cbz	r0, 800b4fe <_vfiprintf_r+0x13a>
 800b4d0:	9207      	str	r2, [sp, #28]
 800b4d2:	e014      	b.n	800b4fe <_vfiprintf_r+0x13a>
 800b4d4:	eba0 0308 	sub.w	r3, r0, r8
 800b4d8:	fa09 f303 	lsl.w	r3, r9, r3
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	9304      	str	r3, [sp, #16]
 800b4e0:	46a2      	mov	sl, r4
 800b4e2:	e7d2      	b.n	800b48a <_vfiprintf_r+0xc6>
 800b4e4:	9b03      	ldr	r3, [sp, #12]
 800b4e6:	1d19      	adds	r1, r3, #4
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	9103      	str	r1, [sp, #12]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	bfbb      	ittet	lt
 800b4f0:	425b      	neglt	r3, r3
 800b4f2:	f042 0202 	orrlt.w	r2, r2, #2
 800b4f6:	9307      	strge	r3, [sp, #28]
 800b4f8:	9307      	strlt	r3, [sp, #28]
 800b4fa:	bfb8      	it	lt
 800b4fc:	9204      	strlt	r2, [sp, #16]
 800b4fe:	7823      	ldrb	r3, [r4, #0]
 800b500:	2b2e      	cmp	r3, #46	@ 0x2e
 800b502:	d10a      	bne.n	800b51a <_vfiprintf_r+0x156>
 800b504:	7863      	ldrb	r3, [r4, #1]
 800b506:	2b2a      	cmp	r3, #42	@ 0x2a
 800b508:	d132      	bne.n	800b570 <_vfiprintf_r+0x1ac>
 800b50a:	9b03      	ldr	r3, [sp, #12]
 800b50c:	1d1a      	adds	r2, r3, #4
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	9203      	str	r2, [sp, #12]
 800b512:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b516:	3402      	adds	r4, #2
 800b518:	9305      	str	r3, [sp, #20]
 800b51a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b5f0 <_vfiprintf_r+0x22c>
 800b51e:	7821      	ldrb	r1, [r4, #0]
 800b520:	2203      	movs	r2, #3
 800b522:	4650      	mov	r0, sl
 800b524:	f7f4 fe5c 	bl	80001e0 <memchr>
 800b528:	b138      	cbz	r0, 800b53a <_vfiprintf_r+0x176>
 800b52a:	9b04      	ldr	r3, [sp, #16]
 800b52c:	eba0 000a 	sub.w	r0, r0, sl
 800b530:	2240      	movs	r2, #64	@ 0x40
 800b532:	4082      	lsls	r2, r0
 800b534:	4313      	orrs	r3, r2
 800b536:	3401      	adds	r4, #1
 800b538:	9304      	str	r3, [sp, #16]
 800b53a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b53e:	4829      	ldr	r0, [pc, #164]	@ (800b5e4 <_vfiprintf_r+0x220>)
 800b540:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b544:	2206      	movs	r2, #6
 800b546:	f7f4 fe4b 	bl	80001e0 <memchr>
 800b54a:	2800      	cmp	r0, #0
 800b54c:	d03f      	beq.n	800b5ce <_vfiprintf_r+0x20a>
 800b54e:	4b26      	ldr	r3, [pc, #152]	@ (800b5e8 <_vfiprintf_r+0x224>)
 800b550:	bb1b      	cbnz	r3, 800b59a <_vfiprintf_r+0x1d6>
 800b552:	9b03      	ldr	r3, [sp, #12]
 800b554:	3307      	adds	r3, #7
 800b556:	f023 0307 	bic.w	r3, r3, #7
 800b55a:	3308      	adds	r3, #8
 800b55c:	9303      	str	r3, [sp, #12]
 800b55e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b560:	443b      	add	r3, r7
 800b562:	9309      	str	r3, [sp, #36]	@ 0x24
 800b564:	e76a      	b.n	800b43c <_vfiprintf_r+0x78>
 800b566:	fb0c 3202 	mla	r2, ip, r2, r3
 800b56a:	460c      	mov	r4, r1
 800b56c:	2001      	movs	r0, #1
 800b56e:	e7a8      	b.n	800b4c2 <_vfiprintf_r+0xfe>
 800b570:	2300      	movs	r3, #0
 800b572:	3401      	adds	r4, #1
 800b574:	9305      	str	r3, [sp, #20]
 800b576:	4619      	mov	r1, r3
 800b578:	f04f 0c0a 	mov.w	ip, #10
 800b57c:	4620      	mov	r0, r4
 800b57e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b582:	3a30      	subs	r2, #48	@ 0x30
 800b584:	2a09      	cmp	r2, #9
 800b586:	d903      	bls.n	800b590 <_vfiprintf_r+0x1cc>
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d0c6      	beq.n	800b51a <_vfiprintf_r+0x156>
 800b58c:	9105      	str	r1, [sp, #20]
 800b58e:	e7c4      	b.n	800b51a <_vfiprintf_r+0x156>
 800b590:	fb0c 2101 	mla	r1, ip, r1, r2
 800b594:	4604      	mov	r4, r0
 800b596:	2301      	movs	r3, #1
 800b598:	e7f0      	b.n	800b57c <_vfiprintf_r+0x1b8>
 800b59a:	ab03      	add	r3, sp, #12
 800b59c:	9300      	str	r3, [sp, #0]
 800b59e:	462a      	mov	r2, r5
 800b5a0:	4b12      	ldr	r3, [pc, #72]	@ (800b5ec <_vfiprintf_r+0x228>)
 800b5a2:	a904      	add	r1, sp, #16
 800b5a4:	4630      	mov	r0, r6
 800b5a6:	f3af 8000 	nop.w
 800b5aa:	4607      	mov	r7, r0
 800b5ac:	1c78      	adds	r0, r7, #1
 800b5ae:	d1d6      	bne.n	800b55e <_vfiprintf_r+0x19a>
 800b5b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5b2:	07d9      	lsls	r1, r3, #31
 800b5b4:	d405      	bmi.n	800b5c2 <_vfiprintf_r+0x1fe>
 800b5b6:	89ab      	ldrh	r3, [r5, #12]
 800b5b8:	059a      	lsls	r2, r3, #22
 800b5ba:	d402      	bmi.n	800b5c2 <_vfiprintf_r+0x1fe>
 800b5bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5be:	f7ff fe7d 	bl	800b2bc <__retarget_lock_release_recursive>
 800b5c2:	89ab      	ldrh	r3, [r5, #12]
 800b5c4:	065b      	lsls	r3, r3, #25
 800b5c6:	f53f af1f 	bmi.w	800b408 <_vfiprintf_r+0x44>
 800b5ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5cc:	e71e      	b.n	800b40c <_vfiprintf_r+0x48>
 800b5ce:	ab03      	add	r3, sp, #12
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	462a      	mov	r2, r5
 800b5d4:	4b05      	ldr	r3, [pc, #20]	@ (800b5ec <_vfiprintf_r+0x228>)
 800b5d6:	a904      	add	r1, sp, #16
 800b5d8:	4630      	mov	r0, r6
 800b5da:	f000 f879 	bl	800b6d0 <_printf_i>
 800b5de:	e7e4      	b.n	800b5aa <_vfiprintf_r+0x1e6>
 800b5e0:	0800c324 	.word	0x0800c324
 800b5e4:	0800c32e 	.word	0x0800c32e
 800b5e8:	00000000 	.word	0x00000000
 800b5ec:	0800b39f 	.word	0x0800b39f
 800b5f0:	0800c32a 	.word	0x0800c32a

0800b5f4 <_printf_common>:
 800b5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f8:	4616      	mov	r6, r2
 800b5fa:	4698      	mov	r8, r3
 800b5fc:	688a      	ldr	r2, [r1, #8]
 800b5fe:	690b      	ldr	r3, [r1, #16]
 800b600:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b604:	4293      	cmp	r3, r2
 800b606:	bfb8      	it	lt
 800b608:	4613      	movlt	r3, r2
 800b60a:	6033      	str	r3, [r6, #0]
 800b60c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b610:	4607      	mov	r7, r0
 800b612:	460c      	mov	r4, r1
 800b614:	b10a      	cbz	r2, 800b61a <_printf_common+0x26>
 800b616:	3301      	adds	r3, #1
 800b618:	6033      	str	r3, [r6, #0]
 800b61a:	6823      	ldr	r3, [r4, #0]
 800b61c:	0699      	lsls	r1, r3, #26
 800b61e:	bf42      	ittt	mi
 800b620:	6833      	ldrmi	r3, [r6, #0]
 800b622:	3302      	addmi	r3, #2
 800b624:	6033      	strmi	r3, [r6, #0]
 800b626:	6825      	ldr	r5, [r4, #0]
 800b628:	f015 0506 	ands.w	r5, r5, #6
 800b62c:	d106      	bne.n	800b63c <_printf_common+0x48>
 800b62e:	f104 0a19 	add.w	sl, r4, #25
 800b632:	68e3      	ldr	r3, [r4, #12]
 800b634:	6832      	ldr	r2, [r6, #0]
 800b636:	1a9b      	subs	r3, r3, r2
 800b638:	42ab      	cmp	r3, r5
 800b63a:	dc26      	bgt.n	800b68a <_printf_common+0x96>
 800b63c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b640:	6822      	ldr	r2, [r4, #0]
 800b642:	3b00      	subs	r3, #0
 800b644:	bf18      	it	ne
 800b646:	2301      	movne	r3, #1
 800b648:	0692      	lsls	r2, r2, #26
 800b64a:	d42b      	bmi.n	800b6a4 <_printf_common+0xb0>
 800b64c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b650:	4641      	mov	r1, r8
 800b652:	4638      	mov	r0, r7
 800b654:	47c8      	blx	r9
 800b656:	3001      	adds	r0, #1
 800b658:	d01e      	beq.n	800b698 <_printf_common+0xa4>
 800b65a:	6823      	ldr	r3, [r4, #0]
 800b65c:	6922      	ldr	r2, [r4, #16]
 800b65e:	f003 0306 	and.w	r3, r3, #6
 800b662:	2b04      	cmp	r3, #4
 800b664:	bf02      	ittt	eq
 800b666:	68e5      	ldreq	r5, [r4, #12]
 800b668:	6833      	ldreq	r3, [r6, #0]
 800b66a:	1aed      	subeq	r5, r5, r3
 800b66c:	68a3      	ldr	r3, [r4, #8]
 800b66e:	bf0c      	ite	eq
 800b670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b674:	2500      	movne	r5, #0
 800b676:	4293      	cmp	r3, r2
 800b678:	bfc4      	itt	gt
 800b67a:	1a9b      	subgt	r3, r3, r2
 800b67c:	18ed      	addgt	r5, r5, r3
 800b67e:	2600      	movs	r6, #0
 800b680:	341a      	adds	r4, #26
 800b682:	42b5      	cmp	r5, r6
 800b684:	d11a      	bne.n	800b6bc <_printf_common+0xc8>
 800b686:	2000      	movs	r0, #0
 800b688:	e008      	b.n	800b69c <_printf_common+0xa8>
 800b68a:	2301      	movs	r3, #1
 800b68c:	4652      	mov	r2, sl
 800b68e:	4641      	mov	r1, r8
 800b690:	4638      	mov	r0, r7
 800b692:	47c8      	blx	r9
 800b694:	3001      	adds	r0, #1
 800b696:	d103      	bne.n	800b6a0 <_printf_common+0xac>
 800b698:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6a0:	3501      	adds	r5, #1
 800b6a2:	e7c6      	b.n	800b632 <_printf_common+0x3e>
 800b6a4:	18e1      	adds	r1, r4, r3
 800b6a6:	1c5a      	adds	r2, r3, #1
 800b6a8:	2030      	movs	r0, #48	@ 0x30
 800b6aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b6ae:	4422      	add	r2, r4
 800b6b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b6b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b6b8:	3302      	adds	r3, #2
 800b6ba:	e7c7      	b.n	800b64c <_printf_common+0x58>
 800b6bc:	2301      	movs	r3, #1
 800b6be:	4622      	mov	r2, r4
 800b6c0:	4641      	mov	r1, r8
 800b6c2:	4638      	mov	r0, r7
 800b6c4:	47c8      	blx	r9
 800b6c6:	3001      	adds	r0, #1
 800b6c8:	d0e6      	beq.n	800b698 <_printf_common+0xa4>
 800b6ca:	3601      	adds	r6, #1
 800b6cc:	e7d9      	b.n	800b682 <_printf_common+0x8e>
	...

0800b6d0 <_printf_i>:
 800b6d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6d4:	7e0f      	ldrb	r7, [r1, #24]
 800b6d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b6d8:	2f78      	cmp	r7, #120	@ 0x78
 800b6da:	4691      	mov	r9, r2
 800b6dc:	4680      	mov	r8, r0
 800b6de:	460c      	mov	r4, r1
 800b6e0:	469a      	mov	sl, r3
 800b6e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b6e6:	d807      	bhi.n	800b6f8 <_printf_i+0x28>
 800b6e8:	2f62      	cmp	r7, #98	@ 0x62
 800b6ea:	d80a      	bhi.n	800b702 <_printf_i+0x32>
 800b6ec:	2f00      	cmp	r7, #0
 800b6ee:	f000 80d2 	beq.w	800b896 <_printf_i+0x1c6>
 800b6f2:	2f58      	cmp	r7, #88	@ 0x58
 800b6f4:	f000 80b9 	beq.w	800b86a <_printf_i+0x19a>
 800b6f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b700:	e03a      	b.n	800b778 <_printf_i+0xa8>
 800b702:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b706:	2b15      	cmp	r3, #21
 800b708:	d8f6      	bhi.n	800b6f8 <_printf_i+0x28>
 800b70a:	a101      	add	r1, pc, #4	@ (adr r1, 800b710 <_printf_i+0x40>)
 800b70c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b710:	0800b769 	.word	0x0800b769
 800b714:	0800b77d 	.word	0x0800b77d
 800b718:	0800b6f9 	.word	0x0800b6f9
 800b71c:	0800b6f9 	.word	0x0800b6f9
 800b720:	0800b6f9 	.word	0x0800b6f9
 800b724:	0800b6f9 	.word	0x0800b6f9
 800b728:	0800b77d 	.word	0x0800b77d
 800b72c:	0800b6f9 	.word	0x0800b6f9
 800b730:	0800b6f9 	.word	0x0800b6f9
 800b734:	0800b6f9 	.word	0x0800b6f9
 800b738:	0800b6f9 	.word	0x0800b6f9
 800b73c:	0800b87d 	.word	0x0800b87d
 800b740:	0800b7a7 	.word	0x0800b7a7
 800b744:	0800b837 	.word	0x0800b837
 800b748:	0800b6f9 	.word	0x0800b6f9
 800b74c:	0800b6f9 	.word	0x0800b6f9
 800b750:	0800b89f 	.word	0x0800b89f
 800b754:	0800b6f9 	.word	0x0800b6f9
 800b758:	0800b7a7 	.word	0x0800b7a7
 800b75c:	0800b6f9 	.word	0x0800b6f9
 800b760:	0800b6f9 	.word	0x0800b6f9
 800b764:	0800b83f 	.word	0x0800b83f
 800b768:	6833      	ldr	r3, [r6, #0]
 800b76a:	1d1a      	adds	r2, r3, #4
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	6032      	str	r2, [r6, #0]
 800b770:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b774:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b778:	2301      	movs	r3, #1
 800b77a:	e09d      	b.n	800b8b8 <_printf_i+0x1e8>
 800b77c:	6833      	ldr	r3, [r6, #0]
 800b77e:	6820      	ldr	r0, [r4, #0]
 800b780:	1d19      	adds	r1, r3, #4
 800b782:	6031      	str	r1, [r6, #0]
 800b784:	0606      	lsls	r6, r0, #24
 800b786:	d501      	bpl.n	800b78c <_printf_i+0xbc>
 800b788:	681d      	ldr	r5, [r3, #0]
 800b78a:	e003      	b.n	800b794 <_printf_i+0xc4>
 800b78c:	0645      	lsls	r5, r0, #25
 800b78e:	d5fb      	bpl.n	800b788 <_printf_i+0xb8>
 800b790:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b794:	2d00      	cmp	r5, #0
 800b796:	da03      	bge.n	800b7a0 <_printf_i+0xd0>
 800b798:	232d      	movs	r3, #45	@ 0x2d
 800b79a:	426d      	negs	r5, r5
 800b79c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7a0:	4859      	ldr	r0, [pc, #356]	@ (800b908 <_printf_i+0x238>)
 800b7a2:	230a      	movs	r3, #10
 800b7a4:	e011      	b.n	800b7ca <_printf_i+0xfa>
 800b7a6:	6821      	ldr	r1, [r4, #0]
 800b7a8:	6833      	ldr	r3, [r6, #0]
 800b7aa:	0608      	lsls	r0, r1, #24
 800b7ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800b7b0:	d402      	bmi.n	800b7b8 <_printf_i+0xe8>
 800b7b2:	0649      	lsls	r1, r1, #25
 800b7b4:	bf48      	it	mi
 800b7b6:	b2ad      	uxthmi	r5, r5
 800b7b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b7ba:	4853      	ldr	r0, [pc, #332]	@ (800b908 <_printf_i+0x238>)
 800b7bc:	6033      	str	r3, [r6, #0]
 800b7be:	bf14      	ite	ne
 800b7c0:	230a      	movne	r3, #10
 800b7c2:	2308      	moveq	r3, #8
 800b7c4:	2100      	movs	r1, #0
 800b7c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b7ca:	6866      	ldr	r6, [r4, #4]
 800b7cc:	60a6      	str	r6, [r4, #8]
 800b7ce:	2e00      	cmp	r6, #0
 800b7d0:	bfa2      	ittt	ge
 800b7d2:	6821      	ldrge	r1, [r4, #0]
 800b7d4:	f021 0104 	bicge.w	r1, r1, #4
 800b7d8:	6021      	strge	r1, [r4, #0]
 800b7da:	b90d      	cbnz	r5, 800b7e0 <_printf_i+0x110>
 800b7dc:	2e00      	cmp	r6, #0
 800b7de:	d04b      	beq.n	800b878 <_printf_i+0x1a8>
 800b7e0:	4616      	mov	r6, r2
 800b7e2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b7e6:	fb03 5711 	mls	r7, r3, r1, r5
 800b7ea:	5dc7      	ldrb	r7, [r0, r7]
 800b7ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b7f0:	462f      	mov	r7, r5
 800b7f2:	42bb      	cmp	r3, r7
 800b7f4:	460d      	mov	r5, r1
 800b7f6:	d9f4      	bls.n	800b7e2 <_printf_i+0x112>
 800b7f8:	2b08      	cmp	r3, #8
 800b7fa:	d10b      	bne.n	800b814 <_printf_i+0x144>
 800b7fc:	6823      	ldr	r3, [r4, #0]
 800b7fe:	07df      	lsls	r7, r3, #31
 800b800:	d508      	bpl.n	800b814 <_printf_i+0x144>
 800b802:	6923      	ldr	r3, [r4, #16]
 800b804:	6861      	ldr	r1, [r4, #4]
 800b806:	4299      	cmp	r1, r3
 800b808:	bfde      	ittt	le
 800b80a:	2330      	movle	r3, #48	@ 0x30
 800b80c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b810:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b814:	1b92      	subs	r2, r2, r6
 800b816:	6122      	str	r2, [r4, #16]
 800b818:	f8cd a000 	str.w	sl, [sp]
 800b81c:	464b      	mov	r3, r9
 800b81e:	aa03      	add	r2, sp, #12
 800b820:	4621      	mov	r1, r4
 800b822:	4640      	mov	r0, r8
 800b824:	f7ff fee6 	bl	800b5f4 <_printf_common>
 800b828:	3001      	adds	r0, #1
 800b82a:	d14a      	bne.n	800b8c2 <_printf_i+0x1f2>
 800b82c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b830:	b004      	add	sp, #16
 800b832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b836:	6823      	ldr	r3, [r4, #0]
 800b838:	f043 0320 	orr.w	r3, r3, #32
 800b83c:	6023      	str	r3, [r4, #0]
 800b83e:	4833      	ldr	r0, [pc, #204]	@ (800b90c <_printf_i+0x23c>)
 800b840:	2778      	movs	r7, #120	@ 0x78
 800b842:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b846:	6823      	ldr	r3, [r4, #0]
 800b848:	6831      	ldr	r1, [r6, #0]
 800b84a:	061f      	lsls	r7, r3, #24
 800b84c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b850:	d402      	bmi.n	800b858 <_printf_i+0x188>
 800b852:	065f      	lsls	r7, r3, #25
 800b854:	bf48      	it	mi
 800b856:	b2ad      	uxthmi	r5, r5
 800b858:	6031      	str	r1, [r6, #0]
 800b85a:	07d9      	lsls	r1, r3, #31
 800b85c:	bf44      	itt	mi
 800b85e:	f043 0320 	orrmi.w	r3, r3, #32
 800b862:	6023      	strmi	r3, [r4, #0]
 800b864:	b11d      	cbz	r5, 800b86e <_printf_i+0x19e>
 800b866:	2310      	movs	r3, #16
 800b868:	e7ac      	b.n	800b7c4 <_printf_i+0xf4>
 800b86a:	4827      	ldr	r0, [pc, #156]	@ (800b908 <_printf_i+0x238>)
 800b86c:	e7e9      	b.n	800b842 <_printf_i+0x172>
 800b86e:	6823      	ldr	r3, [r4, #0]
 800b870:	f023 0320 	bic.w	r3, r3, #32
 800b874:	6023      	str	r3, [r4, #0]
 800b876:	e7f6      	b.n	800b866 <_printf_i+0x196>
 800b878:	4616      	mov	r6, r2
 800b87a:	e7bd      	b.n	800b7f8 <_printf_i+0x128>
 800b87c:	6833      	ldr	r3, [r6, #0]
 800b87e:	6825      	ldr	r5, [r4, #0]
 800b880:	6961      	ldr	r1, [r4, #20]
 800b882:	1d18      	adds	r0, r3, #4
 800b884:	6030      	str	r0, [r6, #0]
 800b886:	062e      	lsls	r6, r5, #24
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	d501      	bpl.n	800b890 <_printf_i+0x1c0>
 800b88c:	6019      	str	r1, [r3, #0]
 800b88e:	e002      	b.n	800b896 <_printf_i+0x1c6>
 800b890:	0668      	lsls	r0, r5, #25
 800b892:	d5fb      	bpl.n	800b88c <_printf_i+0x1bc>
 800b894:	8019      	strh	r1, [r3, #0]
 800b896:	2300      	movs	r3, #0
 800b898:	6123      	str	r3, [r4, #16]
 800b89a:	4616      	mov	r6, r2
 800b89c:	e7bc      	b.n	800b818 <_printf_i+0x148>
 800b89e:	6833      	ldr	r3, [r6, #0]
 800b8a0:	1d1a      	adds	r2, r3, #4
 800b8a2:	6032      	str	r2, [r6, #0]
 800b8a4:	681e      	ldr	r6, [r3, #0]
 800b8a6:	6862      	ldr	r2, [r4, #4]
 800b8a8:	2100      	movs	r1, #0
 800b8aa:	4630      	mov	r0, r6
 800b8ac:	f7f4 fc98 	bl	80001e0 <memchr>
 800b8b0:	b108      	cbz	r0, 800b8b6 <_printf_i+0x1e6>
 800b8b2:	1b80      	subs	r0, r0, r6
 800b8b4:	6060      	str	r0, [r4, #4]
 800b8b6:	6863      	ldr	r3, [r4, #4]
 800b8b8:	6123      	str	r3, [r4, #16]
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8c0:	e7aa      	b.n	800b818 <_printf_i+0x148>
 800b8c2:	6923      	ldr	r3, [r4, #16]
 800b8c4:	4632      	mov	r2, r6
 800b8c6:	4649      	mov	r1, r9
 800b8c8:	4640      	mov	r0, r8
 800b8ca:	47d0      	blx	sl
 800b8cc:	3001      	adds	r0, #1
 800b8ce:	d0ad      	beq.n	800b82c <_printf_i+0x15c>
 800b8d0:	6823      	ldr	r3, [r4, #0]
 800b8d2:	079b      	lsls	r3, r3, #30
 800b8d4:	d413      	bmi.n	800b8fe <_printf_i+0x22e>
 800b8d6:	68e0      	ldr	r0, [r4, #12]
 800b8d8:	9b03      	ldr	r3, [sp, #12]
 800b8da:	4298      	cmp	r0, r3
 800b8dc:	bfb8      	it	lt
 800b8de:	4618      	movlt	r0, r3
 800b8e0:	e7a6      	b.n	800b830 <_printf_i+0x160>
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	4632      	mov	r2, r6
 800b8e6:	4649      	mov	r1, r9
 800b8e8:	4640      	mov	r0, r8
 800b8ea:	47d0      	blx	sl
 800b8ec:	3001      	adds	r0, #1
 800b8ee:	d09d      	beq.n	800b82c <_printf_i+0x15c>
 800b8f0:	3501      	adds	r5, #1
 800b8f2:	68e3      	ldr	r3, [r4, #12]
 800b8f4:	9903      	ldr	r1, [sp, #12]
 800b8f6:	1a5b      	subs	r3, r3, r1
 800b8f8:	42ab      	cmp	r3, r5
 800b8fa:	dcf2      	bgt.n	800b8e2 <_printf_i+0x212>
 800b8fc:	e7eb      	b.n	800b8d6 <_printf_i+0x206>
 800b8fe:	2500      	movs	r5, #0
 800b900:	f104 0619 	add.w	r6, r4, #25
 800b904:	e7f5      	b.n	800b8f2 <_printf_i+0x222>
 800b906:	bf00      	nop
 800b908:	0800c335 	.word	0x0800c335
 800b90c:	0800c346 	.word	0x0800c346

0800b910 <__swhatbuf_r>:
 800b910:	b570      	push	{r4, r5, r6, lr}
 800b912:	460c      	mov	r4, r1
 800b914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b918:	2900      	cmp	r1, #0
 800b91a:	b096      	sub	sp, #88	@ 0x58
 800b91c:	4615      	mov	r5, r2
 800b91e:	461e      	mov	r6, r3
 800b920:	da0d      	bge.n	800b93e <__swhatbuf_r+0x2e>
 800b922:	89a3      	ldrh	r3, [r4, #12]
 800b924:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b928:	f04f 0100 	mov.w	r1, #0
 800b92c:	bf14      	ite	ne
 800b92e:	2340      	movne	r3, #64	@ 0x40
 800b930:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b934:	2000      	movs	r0, #0
 800b936:	6031      	str	r1, [r6, #0]
 800b938:	602b      	str	r3, [r5, #0]
 800b93a:	b016      	add	sp, #88	@ 0x58
 800b93c:	bd70      	pop	{r4, r5, r6, pc}
 800b93e:	466a      	mov	r2, sp
 800b940:	f000 f848 	bl	800b9d4 <_fstat_r>
 800b944:	2800      	cmp	r0, #0
 800b946:	dbec      	blt.n	800b922 <__swhatbuf_r+0x12>
 800b948:	9901      	ldr	r1, [sp, #4]
 800b94a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b94e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b952:	4259      	negs	r1, r3
 800b954:	4159      	adcs	r1, r3
 800b956:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b95a:	e7eb      	b.n	800b934 <__swhatbuf_r+0x24>

0800b95c <__smakebuf_r>:
 800b95c:	898b      	ldrh	r3, [r1, #12]
 800b95e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b960:	079d      	lsls	r5, r3, #30
 800b962:	4606      	mov	r6, r0
 800b964:	460c      	mov	r4, r1
 800b966:	d507      	bpl.n	800b978 <__smakebuf_r+0x1c>
 800b968:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b96c:	6023      	str	r3, [r4, #0]
 800b96e:	6123      	str	r3, [r4, #16]
 800b970:	2301      	movs	r3, #1
 800b972:	6163      	str	r3, [r4, #20]
 800b974:	b003      	add	sp, #12
 800b976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b978:	ab01      	add	r3, sp, #4
 800b97a:	466a      	mov	r2, sp
 800b97c:	f7ff ffc8 	bl	800b910 <__swhatbuf_r>
 800b980:	9f00      	ldr	r7, [sp, #0]
 800b982:	4605      	mov	r5, r0
 800b984:	4639      	mov	r1, r7
 800b986:	4630      	mov	r0, r6
 800b988:	f7ff f89e 	bl	800aac8 <_malloc_r>
 800b98c:	b948      	cbnz	r0, 800b9a2 <__smakebuf_r+0x46>
 800b98e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b992:	059a      	lsls	r2, r3, #22
 800b994:	d4ee      	bmi.n	800b974 <__smakebuf_r+0x18>
 800b996:	f023 0303 	bic.w	r3, r3, #3
 800b99a:	f043 0302 	orr.w	r3, r3, #2
 800b99e:	81a3      	strh	r3, [r4, #12]
 800b9a0:	e7e2      	b.n	800b968 <__smakebuf_r+0xc>
 800b9a2:	89a3      	ldrh	r3, [r4, #12]
 800b9a4:	6020      	str	r0, [r4, #0]
 800b9a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9aa:	81a3      	strh	r3, [r4, #12]
 800b9ac:	9b01      	ldr	r3, [sp, #4]
 800b9ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b9b2:	b15b      	cbz	r3, 800b9cc <__smakebuf_r+0x70>
 800b9b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9b8:	4630      	mov	r0, r6
 800b9ba:	f000 f81d 	bl	800b9f8 <_isatty_r>
 800b9be:	b128      	cbz	r0, 800b9cc <__smakebuf_r+0x70>
 800b9c0:	89a3      	ldrh	r3, [r4, #12]
 800b9c2:	f023 0303 	bic.w	r3, r3, #3
 800b9c6:	f043 0301 	orr.w	r3, r3, #1
 800b9ca:	81a3      	strh	r3, [r4, #12]
 800b9cc:	89a3      	ldrh	r3, [r4, #12]
 800b9ce:	431d      	orrs	r5, r3
 800b9d0:	81a5      	strh	r5, [r4, #12]
 800b9d2:	e7cf      	b.n	800b974 <__smakebuf_r+0x18>

0800b9d4 <_fstat_r>:
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	4d07      	ldr	r5, [pc, #28]	@ (800b9f4 <_fstat_r+0x20>)
 800b9d8:	2300      	movs	r3, #0
 800b9da:	4604      	mov	r4, r0
 800b9dc:	4608      	mov	r0, r1
 800b9de:	4611      	mov	r1, r2
 800b9e0:	602b      	str	r3, [r5, #0]
 800b9e2:	f7fc fc66 	bl	80082b2 <_fstat>
 800b9e6:	1c43      	adds	r3, r0, #1
 800b9e8:	d102      	bne.n	800b9f0 <_fstat_r+0x1c>
 800b9ea:	682b      	ldr	r3, [r5, #0]
 800b9ec:	b103      	cbz	r3, 800b9f0 <_fstat_r+0x1c>
 800b9ee:	6023      	str	r3, [r4, #0]
 800b9f0:	bd38      	pop	{r3, r4, r5, pc}
 800b9f2:	bf00      	nop
 800b9f4:	20000708 	.word	0x20000708

0800b9f8 <_isatty_r>:
 800b9f8:	b538      	push	{r3, r4, r5, lr}
 800b9fa:	4d06      	ldr	r5, [pc, #24]	@ (800ba14 <_isatty_r+0x1c>)
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	4604      	mov	r4, r0
 800ba00:	4608      	mov	r0, r1
 800ba02:	602b      	str	r3, [r5, #0]
 800ba04:	f7fc fc65 	bl	80082d2 <_isatty>
 800ba08:	1c43      	adds	r3, r0, #1
 800ba0a:	d102      	bne.n	800ba12 <_isatty_r+0x1a>
 800ba0c:	682b      	ldr	r3, [r5, #0]
 800ba0e:	b103      	cbz	r3, 800ba12 <_isatty_r+0x1a>
 800ba10:	6023      	str	r3, [r4, #0]
 800ba12:	bd38      	pop	{r3, r4, r5, pc}
 800ba14:	20000708 	.word	0x20000708

0800ba18 <_init>:
 800ba18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba1a:	bf00      	nop
 800ba1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba1e:	bc08      	pop	{r3}
 800ba20:	469e      	mov	lr, r3
 800ba22:	4770      	bx	lr

0800ba24 <_fini>:
 800ba24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba26:	bf00      	nop
 800ba28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba2a:	bc08      	pop	{r3}
 800ba2c:	469e      	mov	lr, r3
 800ba2e:	4770      	bx	lr
