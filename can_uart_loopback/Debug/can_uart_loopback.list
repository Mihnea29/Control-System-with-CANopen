
can_uart_loopback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003928  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003ad8  08003ad8  00004ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b40  08003b40  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b40  08003b40  00004b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b48  08003b48  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b48  08003b48  00004b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b4c  08003b4c  00004b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003b50  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          00000224  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000280  20000280  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000099f8  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000191a  00000000  00000000  0000ea84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000810  00000000  00000000  000103a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000621  00000000  00000000  00010bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ff0  00000000  00000000  000111d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000096f3  00000000  00000000  000341c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d439d  00000000  00000000  0003d8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00111c51  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002568  00000000  00000000  00111c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  001141fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003ac0 	.word	0x08003ac0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08003ac0 	.word	0x08003ac0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b090      	sub	sp, #64	@ 0x40
 8000594:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fb1b 	bl	8000bd0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f883 	bl	80006a4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f97b 	bl	8000898 <MX_GPIO_Init>
  MX_CAN1_Init();
 80005a2:	f000 f8f1 	bl	8000788 <MX_CAN1_Init>
  MX_USART6_UART_Init();
 80005a6:	f000 f94d 	bl	8000844 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
   TxHeader.StdId = 0x11;
 80005aa:	4b36      	ldr	r3, [pc, #216]	@ (8000684 <main+0xf4>)
 80005ac:	2211      	movs	r2, #17
 80005ae:	601a      	str	r2, [r3, #0]
   TxHeader.RTR = CAN_RTR_DATA;
 80005b0:	4b34      	ldr	r3, [pc, #208]	@ (8000684 <main+0xf4>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
   TxHeader.IDE = CAN_ID_STD;
 80005b6:	4b33      	ldr	r3, [pc, #204]	@ (8000684 <main+0xf4>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
   TxHeader.DLC = 2;
 80005bc:	4b31      	ldr	r3, [pc, #196]	@ (8000684 <main+0xf4>)
 80005be:	2202      	movs	r2, #2
 80005c0:	611a      	str	r2, [r3, #16]
   TxHeader.TransmitGlobalTime = DISABLE;
 80005c2:	4b30      	ldr	r3, [pc, #192]	@ (8000684 <main+0xf4>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	751a      	strb	r2, [r3, #20]
   TxData[0] = 0xCA;
 80005c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000688 <main+0xf8>)
 80005ca:	22ca      	movs	r2, #202	@ 0xca
 80005cc:	701a      	strb	r2, [r3, #0]
   TxData[1] = 0xFE;
 80005ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000688 <main+0xf8>)
 80005d0:	22fe      	movs	r2, #254	@ 0xfe
 80005d2:	705a      	strb	r2, [r3, #1]

   /* Request transmission */
   if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80005d4:	4b2d      	ldr	r3, [pc, #180]	@ (800068c <main+0xfc>)
 80005d6:	4a2c      	ldr	r2, [pc, #176]	@ (8000688 <main+0xf8>)
 80005d8:	492a      	ldr	r1, [pc, #168]	@ (8000684 <main+0xf4>)
 80005da:	482d      	ldr	r0, [pc, #180]	@ (8000690 <main+0x100>)
 80005dc:	f000 fd8a 	bl	80010f4 <HAL_CAN_AddTxMessage>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <main+0x5a>
   {
     Error_Handler();
 80005e6:	f000 f97f 	bl	80008e8 <Error_Handler>
   }

   /* Wait for transmission to complete */
   while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {}
 80005ea:	bf00      	nop
 80005ec:	4828      	ldr	r0, [pc, #160]	@ (8000690 <main+0x100>)
 80005ee:	f000 fe51 	bl	8001294 <HAL_CAN_GetTxMailboxesFreeLevel>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d1f9      	bne.n	80005ec <main+0x5c>

   /* Wait for a message to be received */
   if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 1)
 80005f8:	2100      	movs	r1, #0
 80005fa:	4825      	ldr	r0, [pc, #148]	@ (8000690 <main+0x100>)
 80005fc:	f000 ffa1 	bl	8001542 <HAL_CAN_GetRxFifoFillLevel>
 8000600:	4603      	mov	r3, r0
 8000602:	2b01      	cmp	r3, #1
 8000604:	d001      	beq.n	800060a <main+0x7a>
   {
     Error_Handler();
 8000606:	f000 f96f 	bl	80008e8 <Error_Handler>
   }

   /* Receive the CAN message */
   if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800060a:	4b22      	ldr	r3, [pc, #136]	@ (8000694 <main+0x104>)
 800060c:	4a22      	ldr	r2, [pc, #136]	@ (8000698 <main+0x108>)
 800060e:	2100      	movs	r1, #0
 8000610:	481f      	ldr	r0, [pc, #124]	@ (8000690 <main+0x100>)
 8000612:	f000 fe74 	bl	80012fe <HAL_CAN_GetRxMessage>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <main+0x90>
   {
     Error_Handler();
 800061c:	f000 f964 	bl	80008e8 <Error_Handler>
   }

   /* Verify the received message */
   if ((RxHeader.StdId == 0x11) &&
 8000620:	4b1d      	ldr	r3, [pc, #116]	@ (8000698 <main+0x108>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b11      	cmp	r3, #17
 8000626:	d127      	bne.n	8000678 <main+0xe8>
       (RxHeader.DLC == 2) &&
 8000628:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <main+0x108>)
 800062a:	691b      	ldr	r3, [r3, #16]
   if ((RxHeader.StdId == 0x11) &&
 800062c:	2b02      	cmp	r3, #2
 800062e:	d123      	bne.n	8000678 <main+0xe8>
       ((RxData[0] << 8 | RxData[1]) == 0xCAFE))
 8000630:	4b18      	ldr	r3, [pc, #96]	@ (8000694 <main+0x104>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	021b      	lsls	r3, r3, #8
 8000636:	4a17      	ldr	r2, [pc, #92]	@ (8000694 <main+0x104>)
 8000638:	7852      	ldrb	r2, [r2, #1]
 800063a:	4313      	orrs	r3, r2
       (RxHeader.DLC == 2) &&
 800063c:	f64c 22fe 	movw	r2, #51966	@ 0xcafe
 8000640:	4293      	cmp	r3, r2
 8000642:	d119      	bne.n	8000678 <main+0xe8>
   {
     /* Send the received data over UART6 */
     char message[50];
     snprintf(message, sizeof(message), "CAN Received: 0x%X 0x%X\r\n", RxData[0], RxData[1]);
 8000644:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <main+0x104>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	461a      	mov	r2, r3
 800064a:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <main+0x104>)
 800064c:	785b      	ldrb	r3, [r3, #1]
 800064e:	1d38      	adds	r0, r7, #4
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	4613      	mov	r3, r2
 8000654:	4a11      	ldr	r2, [pc, #68]	@ (800069c <main+0x10c>)
 8000656:	2132      	movs	r1, #50	@ 0x32
 8000658:	f002 fd86 	bl	8003168 <sniprintf>
     HAL_UART_Transmit(&huart6, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff fdc6 	bl	80001f0 <strlen>
 8000664:	4603      	mov	r3, r0
 8000666:	b29a      	uxth	r2, r3
 8000668:	1d39      	adds	r1, r7, #4
 800066a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800066e:	480c      	ldr	r0, [pc, #48]	@ (80006a0 <main+0x110>)
 8000670:	f002 f9be 	bl	80029f0 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
     while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <main+0xe4>
 8000678:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
   }
}
 800067a:	4618      	mov	r0, r3
 800067c:	3738      	adds	r7, #56	@ 0x38
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200000e8 	.word	0x200000e8
 8000688:	2000011c 	.word	0x2000011c
 800068c:	2000012c 	.word	0x2000012c
 8000690:	20000078 	.word	0x20000078
 8000694:	20000124 	.word	0x20000124
 8000698:	20000100 	.word	0x20000100
 800069c:	08003ad8 	.word	0x08003ad8
 80006a0:	200000a0 	.word	0x200000a0

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	@ 0x50
 80006a8:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	  RCC_OscInitTypeDef RCC_OscInitStruct;
	  HAL_StatusTypeDef ret = HAL_OK;
 80006aa:	2300      	movs	r3, #0
 80006ac:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	  /* Enable Power Control clock */
	  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	4b32      	ldr	r3, [pc, #200]	@ (8000780 <SystemClock_Config+0xdc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b8:	4a31      	ldr	r2, [pc, #196]	@ (8000780 <SystemClock_Config+0xdc>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000780 <SystemClock_Config+0xdc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]

	  /* The voltage scaling allows optimizing the power consumption when the device is
	     clocked below the maximum system frequency, to update the voltage scaling value
	     regarding system frequency refer to product datasheet.  */
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2300      	movs	r3, #0
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000784 <SystemClock_Config+0xe0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a2b      	ldr	r2, [pc, #172]	@ (8000784 <SystemClock_Config+0xe0>)
 80006d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b29      	ldr	r3, [pc, #164]	@ (8000784 <SystemClock_Config+0xe0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	683b      	ldr	r3, [r7, #0]

	  /* Enable HSE Oscillator and activate PLL with HSE as source */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e8:	2301      	movs	r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006f0:	60fb      	str	r3, [r7, #12]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	2302      	movs	r3, #2
 80006f4:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006fa:	627b      	str	r3, [r7, #36]	@ 0x24
	  RCC_OscInitStruct.PLL.PLLM = 8;
 80006fc:	2308      	movs	r3, #8
 80006fe:	62bb      	str	r3, [r7, #40]	@ 0x28
	  RCC_OscInitStruct.PLL.PLLN = 360;
 8000700:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8000704:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000706:	2302      	movs	r3, #2
 8000708:	633b      	str	r3, [r7, #48]	@ 0x30
	  RCC_OscInitStruct.PLL.PLLQ = 7;
 800070a:	2307      	movs	r3, #7
 800070c:	637b      	str	r3, [r7, #52]	@ 0x34

	  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fc84 	bl	8002020 <HAL_RCC_OscConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	  if(ret != HAL_OK)
 800071e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x86>
	  {
	    while(1) { ; }
 8000726:	bf00      	nop
 8000728:	e7fd      	b.n	8000726 <SystemClock_Config+0x82>
	  }

	  /* Activate the OverDrive to reach the 180 MHz Frequency */
	  ret = HAL_PWREx_EnableOverDrive();
 800072a:	f001 fc29 	bl	8001f80 <HAL_PWREx_EnableOverDrive>
 800072e:	4603      	mov	r3, r0
 8000730:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	  if(ret != HAL_OK)
 8000734:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x9c>
	  {
	    while(1) { ; }
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <SystemClock_Config+0x98>
	  }

	  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
	  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000740:	230f      	movs	r3, #15
 8000742:	63bb      	str	r3, [r7, #56]	@ 0x38
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000744:	2302      	movs	r3, #2
 8000746:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	643b      	str	r3, [r7, #64]	@ 0x40
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800074c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000750:	647b      	str	r3, [r7, #68]	@ 0x44
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000752:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000756:	64bb      	str	r3, [r7, #72]	@ 0x48

	  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000758:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800075c:	2105      	movs	r1, #5
 800075e:	4618      	mov	r0, r3
 8000760:	f001 fed6 	bl	8002510 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	  if(ret != HAL_OK)
 800076a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xd2>
	  {
	    while(1) { ; }
 8000772:	bf00      	nop
 8000774:	e7fd      	b.n	8000772 <SystemClock_Config+0xce>
	  }
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	@ 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	@ 0x28
 800078c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;

	  /* Configure CAN1 */
	  hcan1.Instance = CAN1;
 800078e:	4b2b      	ldr	r3, [pc, #172]	@ (800083c <MX_CAN1_Init+0xb4>)
 8000790:	4a2b      	ldr	r2, [pc, #172]	@ (8000840 <MX_CAN1_Init+0xb8>)
 8000792:	601a      	str	r2, [r3, #0]
	  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000794:	4b29      	ldr	r3, [pc, #164]	@ (800083c <MX_CAN1_Init+0xb4>)
 8000796:	2200      	movs	r2, #0
 8000798:	761a      	strb	r2, [r3, #24]
	  hcan1.Init.AutoBusOff = DISABLE;
 800079a:	4b28      	ldr	r3, [pc, #160]	@ (800083c <MX_CAN1_Init+0xb4>)
 800079c:	2200      	movs	r2, #0
 800079e:	765a      	strb	r2, [r3, #25]
	  hcan1.Init.AutoWakeUp = DISABLE;
 80007a0:	4b26      	ldr	r3, [pc, #152]	@ (800083c <MX_CAN1_Init+0xb4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	769a      	strb	r2, [r3, #26]
	  hcan1.Init.AutoRetransmission = ENABLE;
 80007a6:	4b25      	ldr	r3, [pc, #148]	@ (800083c <MX_CAN1_Init+0xb4>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	76da      	strb	r2, [r3, #27]
	  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007ac:	4b23      	ldr	r3, [pc, #140]	@ (800083c <MX_CAN1_Init+0xb4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	771a      	strb	r2, [r3, #28]
	  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007b2:	4b22      	ldr	r3, [pc, #136]	@ (800083c <MX_CAN1_Init+0xb4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	775a      	strb	r2, [r3, #29]
	  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80007b8:	4b20      	ldr	r3, [pc, #128]	@ (800083c <MX_CAN1_Init+0xb4>)
 80007ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007be:	609a      	str	r2, [r3, #8]
	  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007c0:	4b1e      	ldr	r3, [pc, #120]	@ (800083c <MX_CAN1_Init+0xb4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
	  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80007c6:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <MX_CAN1_Init+0xb4>)
 80007c8:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 80007cc:	611a      	str	r2, [r3, #16]
	  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80007ce:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <MX_CAN1_Init+0xb4>)
 80007d0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80007d4:	615a      	str	r2, [r3, #20]
	  hcan1.Init.Prescaler = 5;
 80007d6:	4b19      	ldr	r3, [pc, #100]	@ (800083c <MX_CAN1_Init+0xb4>)
 80007d8:	2205      	movs	r2, #5
 80007da:	605a      	str	r2, [r3, #4]

	  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007dc:	4817      	ldr	r0, [pc, #92]	@ (800083c <MX_CAN1_Init+0xb4>)
 80007de:	f000 fa69 	bl	8000cb4 <HAL_CAN_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_CAN1_Init+0x64>
	  {
	    Error_Handler();
 80007e8:	f000 f87e 	bl	80008e8 <Error_Handler>
	  }

	  /* Configure the CAN filter */
	  sFilterConfig.FilterBank = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61fb      	str	r3, [r7, #28]
	  sFilterConfig.FilterIdHigh = 0x0000;
 80007f8:	2300      	movs	r3, #0
 80007fa:	603b      	str	r3, [r7, #0]
	  sFilterConfig.FilterIdLow = 0x0000;
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
	  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterActivation = ENABLE;
 800080c:	2301      	movs	r3, #1
 800080e:	623b      	str	r3, [r7, #32]

	  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	4619      	mov	r1, r3
 8000814:	4809      	ldr	r0, [pc, #36]	@ (800083c <MX_CAN1_Init+0xb4>)
 8000816:	f000 fb49 	bl	8000eac <HAL_CAN_ConfigFilter>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_CAN1_Init+0x9c>
	  {
	    Error_Handler();
 8000820:	f000 f862 	bl	80008e8 <Error_Handler>
	  }

	  /* Start the CAN module */
	  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000824:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_CAN1_Init+0xb4>)
 8000826:	f000 fc21 	bl	800106c <HAL_CAN_Start>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_CAN1_Init+0xac>
	  {
	    Error_Handler();
 8000830:	f000 f85a 	bl	80008e8 <Error_Handler>
	  }

}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	@ 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000078 	.word	0x20000078
 8000840:	40006400 	.word	0x40006400

08000844 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0

	/* Configure USART6 */
	  huart6.Instance = USART6;
 8000848:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <MX_USART6_UART_Init+0x4c>)
 800084a:	4a12      	ldr	r2, [pc, #72]	@ (8000894 <MX_USART6_UART_Init+0x50>)
 800084c:	601a      	str	r2, [r3, #0]
	  huart6.Init.BaudRate = 115200;
 800084e:	4b10      	ldr	r3, [pc, #64]	@ (8000890 <MX_USART6_UART_Init+0x4c>)
 8000850:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000854:	605a      	str	r2, [r3, #4]
	  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <MX_USART6_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
	  huart6.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <MX_USART6_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
	  huart6.Init.Parity = UART_PARITY_NONE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <MX_USART6_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
	  huart6.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <MX_USART6_UART_Init+0x4c>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
	  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <MX_USART6_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
	  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <MX_USART6_UART_Init+0x4c>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]

	  if (HAL_UART_Init(&huart6) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	@ (8000890 <MX_USART6_UART_Init+0x4c>)
 800087c:	f002 f868 	bl	8002950 <HAL_UART_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_USART6_UART_Init+0x46>
	  {
	    Error_Handler();
 8000886:	f000 f82f 	bl	80008e8 <Error_Handler>
	  }
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200000a0 	.word	0x200000a0
 8000894:	40011400 	.word	0x40011400

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b10      	ldr	r3, [pc, #64]	@ (80008e4 <MX_GPIO_Init+0x4c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a0f      	ldr	r2, [pc, #60]	@ (80008e4 <MX_GPIO_Init+0x4c>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b0d      	ldr	r3, [pc, #52]	@ (80008e4 <MX_GPIO_Init+0x4c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <MX_GPIO_Init+0x4c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a08      	ldr	r2, [pc, #32]	@ (80008e4 <MX_GPIO_Init+0x4c>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <MX_GPIO_Init+0x4c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
	...

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <HAL_MspInit+0x4c>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	4a0f      	ldr	r2, [pc, #60]	@ (8000944 <HAL_MspInit+0x4c>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800090c:	6453      	str	r3, [r2, #68]	@ 0x44
 800090e:	4b0d      	ldr	r3, [pc, #52]	@ (8000944 <HAL_MspInit+0x4c>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <HAL_MspInit+0x4c>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	4a08      	ldr	r2, [pc, #32]	@ (8000944 <HAL_MspInit+0x4c>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000928:	6413      	str	r3, [r2, #64]	@ 0x40
 800092a:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <HAL_MspInit+0x4c>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800

08000948 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	@ 0x28
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a1d      	ldr	r2, [pc, #116]	@ (80009dc <HAL_CAN_MspInit+0x94>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d134      	bne.n	80009d4 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <HAL_CAN_MspInit+0x98>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000972:	4a1b      	ldr	r2, [pc, #108]	@ (80009e0 <HAL_CAN_MspInit+0x98>)
 8000974:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000978:	6413      	str	r3, [r2, #64]	@ 0x40
 800097a:	4b19      	ldr	r3, [pc, #100]	@ (80009e0 <HAL_CAN_MspInit+0x98>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <HAL_CAN_MspInit+0x98>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a14      	ldr	r2, [pc, #80]	@ (80009e0 <HAL_CAN_MspInit+0x98>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <HAL_CAN_MspInit+0x98>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009b4:	2309      	movs	r3, #9
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	4809      	ldr	r0, [pc, #36]	@ (80009e4 <HAL_CAN_MspInit+0x9c>)
 80009c0:	f001 f932 	bl	8001c28 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	2013      	movs	r0, #19
 80009ca:	f001 f8f6 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80009ce:	2013      	movs	r0, #19
 80009d0:	f001 f90f 	bl	8001bf2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80009d4:	bf00      	nop
 80009d6:	3728      	adds	r7, #40	@ 0x28
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40006400 	.word	0x40006400
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020000 	.word	0x40020000

080009e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a19      	ldr	r2, [pc, #100]	@ (8000a6c <HAL_UART_MspInit+0x84>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d12b      	bne.n	8000a62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a12:	4a17      	ldr	r2, [pc, #92]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a14:	f043 0320 	orr.w	r3, r3, #32
 8000a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1a:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1e:	f003 0320 	and.w	r3, r3, #32
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a10      	ldr	r2, [pc, #64]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a42:	23c0      	movs	r3, #192	@ 0xc0
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a52:	2308      	movs	r3, #8
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <HAL_UART_MspInit+0x8c>)
 8000a5e:	f001 f8e3 	bl	8001c28 <HAL_GPIO_Init>

  /* USER CODE END USART6_MspInit 1 */

  }

}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	@ 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40011400 	.word	0x40011400
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020800 	.word	0x40020800

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <NMI_Handler+0x4>

08000a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <MemManage_Handler+0x4>

08000a90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <UsageFault_Handler+0x4>

08000aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ace:	f000 f8d1 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000adc:	4802      	ldr	r0, [pc, #8]	@ (8000ae8 <CAN1_TX_IRQHandler+0x10>)
 8000ade:	f000 fd58 	bl	8001592 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000078 	.word	0x20000078

08000aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af4:	4a14      	ldr	r2, [pc, #80]	@ (8000b48 <_sbrk+0x5c>)
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <_sbrk+0x60>)
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b00:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d102      	bne.n	8000b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b08:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <_sbrk+0x64>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	@ (8000b54 <_sbrk+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d207      	bcs.n	8000b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b1c:	f002 fb58 	bl	80031d0 <__errno>
 8000b20:	4603      	mov	r3, r0
 8000b22:	220c      	movs	r2, #12
 8000b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b2a:	e009      	b.n	8000b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b32:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a05      	ldr	r2, [pc, #20]	@ (8000b50 <_sbrk+0x64>)
 8000b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20030000 	.word	0x20030000
 8000b4c:	00000400 	.word	0x00000400
 8000b50:	20000130 	.word	0x20000130
 8000b54:	20000280 	.word	0x20000280

08000b58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <SystemInit+0x20>)
 8000b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b62:	4a05      	ldr	r2, [pc, #20]	@ (8000b78 <SystemInit+0x20>)
 8000b64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000b7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b80:	f7ff ffea 	bl	8000b58 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b84:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b86:	490d      	ldr	r1, [pc, #52]	@ (8000bbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b88:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000baa:	f002 fb17 	bl	80031dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bae:	f7ff fcef 	bl	8000590 <main>
  bx  lr    
 8000bb2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000bb4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bc0:	08003b50 	.word	0x08003b50
  ldr r2, =_sbss
 8000bc4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bc8:	20000280 	.word	0x20000280

08000bcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC_IRQHandler>
	...

08000bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c10 <HAL_Init+0x40>)
 8000bda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000be0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <HAL_Init+0x40>)
 8000be6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bec:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <HAL_Init+0x40>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a07      	ldr	r2, [pc, #28]	@ (8000c10 <HAL_Init+0x40>)
 8000bf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f000 ffd3 	bl	8001ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfe:	200f      	movs	r0, #15
 8000c00:	f000 f808 	bl	8000c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c04:	f7ff fe78 	bl	80008f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023c00 	.word	0x40023c00

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <HAL_InitTick+0x54>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <HAL_InitTick+0x58>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 ffeb 	bl	8001c0e <HAL_SYSTICK_Config>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00e      	b.n	8000c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b0f      	cmp	r3, #15
 8000c46:	d80a      	bhi.n	8000c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c50:	f000 ffb3 	bl	8001bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c54:	4a06      	ldr	r2, [pc, #24]	@ (8000c70 <HAL_InitTick+0x5c>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e000      	b.n	8000c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000004 	.word	0x20000004

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000134 	.word	0x20000134

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	@ (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000134 	.word	0x20000134

08000cb4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d101      	bne.n	8000cc6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e0ed      	b.n	8000ea2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d102      	bne.n	8000cd8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff fe38 	bl	8000948 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f042 0201 	orr.w	r2, r2, #1
 8000ce6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ce8:	f7ff ffd8 	bl	8000c9c <HAL_GetTick>
 8000cec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cee:	e012      	b.n	8000d16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cf0:	f7ff ffd4 	bl	8000c9c <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	2b0a      	cmp	r3, #10
 8000cfc:	d90b      	bls.n	8000d16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d02:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2205      	movs	r2, #5
 8000d0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e0c5      	b.n	8000ea2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0e5      	beq.n	8000cf0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f022 0202 	bic.w	r2, r2, #2
 8000d32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d34:	f7ff ffb2 	bl	8000c9c <HAL_GetTick>
 8000d38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d3a:	e012      	b.n	8000d62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d3c:	f7ff ffae 	bl	8000c9c <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b0a      	cmp	r3, #10
 8000d48:	d90b      	bls.n	8000d62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d4e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2205      	movs	r2, #5
 8000d5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e09f      	b.n	8000ea2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1e5      	bne.n	8000d3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	7e1b      	ldrb	r3, [r3, #24]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d108      	bne.n	8000d8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	e007      	b.n	8000d9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7e5b      	ldrb	r3, [r3, #25]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d108      	bne.n	8000db4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	e007      	b.n	8000dc4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000dc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7e9b      	ldrb	r3, [r3, #26]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d108      	bne.n	8000dde <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f042 0220 	orr.w	r2, r2, #32
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	e007      	b.n	8000dee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f022 0220 	bic.w	r2, r2, #32
 8000dec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7edb      	ldrb	r3, [r3, #27]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d108      	bne.n	8000e08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f022 0210 	bic.w	r2, r2, #16
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	e007      	b.n	8000e18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f042 0210 	orr.w	r2, r2, #16
 8000e16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	7f1b      	ldrb	r3, [r3, #28]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d108      	bne.n	8000e32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f042 0208 	orr.w	r2, r2, #8
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	e007      	b.n	8000e42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 0208 	bic.w	r2, r2, #8
 8000e40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7f5b      	ldrb	r3, [r3, #29]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d108      	bne.n	8000e5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f042 0204 	orr.w	r2, r2, #4
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	e007      	b.n	8000e6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f022 0204 	bic.w	r2, r2, #4
 8000e6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	431a      	orrs	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	ea42 0103 	orr.w	r1, r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	1e5a      	subs	r2, r3, #1
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ec4:	7cfb      	ldrb	r3, [r7, #19]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d003      	beq.n	8000ed2 <HAL_CAN_ConfigFilter+0x26>
 8000eca:	7cfb      	ldrb	r3, [r7, #19]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	f040 80be 	bne.w	800104e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000ed2:	4b65      	ldr	r3, [pc, #404]	@ (8001068 <HAL_CAN_ConfigFilter+0x1bc>)
 8000ed4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000edc:	f043 0201 	orr.w	r2, r3, #1
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000eec:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f00:	021b      	lsls	r3, r3, #8
 8000f02:	431a      	orrs	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	f003 031f 	and.w	r3, r3, #31
 8000f12:	2201      	movs	r2, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	43db      	mvns	r3, r3
 8000f24:	401a      	ands	r2, r3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	69db      	ldr	r3, [r3, #28]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d123      	bne.n	8000f7c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	3248      	adds	r2, #72	@ 0x48
 8000f5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f72:	6979      	ldr	r1, [r7, #20]
 8000f74:	3348      	adds	r3, #72	@ 0x48
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	440b      	add	r3, r1
 8000f7a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	69db      	ldr	r3, [r3, #28]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d122      	bne.n	8000fca <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fa4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3248      	adds	r2, #72	@ 0x48
 8000faa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fbe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fc0:	6979      	ldr	r1, [r7, #20]
 8000fc2:	3348      	adds	r3, #72	@ 0x48
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	440b      	add	r3, r1
 8000fc8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d109      	bne.n	8000fe6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	401a      	ands	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000fe4:	e007      	b.n	8000ff6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d109      	bne.n	8001012 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	43db      	mvns	r3, r3
 8001008:	401a      	ands	r2, r3
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001010:	e007      	b.n	8001022 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	431a      	orrs	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d107      	bne.n	800103a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	431a      	orrs	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001040:	f023 0201 	bic.w	r2, r3, #1
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	e006      	b.n	800105c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001052:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
  }
}
 800105c:	4618      	mov	r0, r3
 800105e:	371c      	adds	r7, #28
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	40006400 	.word	0x40006400

0800106c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f893 3020 	ldrb.w	r3, [r3, #32]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b01      	cmp	r3, #1
 800107e:	d12e      	bne.n	80010de <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2202      	movs	r2, #2
 8001084:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0201 	bic.w	r2, r2, #1
 8001096:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001098:	f7ff fe00 	bl	8000c9c <HAL_GetTick>
 800109c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800109e:	e012      	b.n	80010c6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010a0:	f7ff fdfc 	bl	8000c9c <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b0a      	cmp	r3, #10
 80010ac:	d90b      	bls.n	80010c6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2205      	movs	r2, #5
 80010be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e012      	b.n	80010ec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1e5      	bne.n	80010a0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e006      	b.n	80010ec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
  }
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	@ 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001108:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001112:	7ffb      	ldrb	r3, [r7, #31]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d003      	beq.n	8001120 <HAL_CAN_AddTxMessage+0x2c>
 8001118:	7ffb      	ldrb	r3, [r7, #31]
 800111a:	2b02      	cmp	r3, #2
 800111c:	f040 80ad 	bne.w	800127a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10a      	bne.n	8001140 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001130:	2b00      	cmp	r3, #0
 8001132:	d105      	bne.n	8001140 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 8095 	beq.w	800126a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	0e1b      	lsrs	r3, r3, #24
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800114a:	2201      	movs	r2, #1
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10d      	bne.n	8001178 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001166:	68f9      	ldr	r1, [r7, #12]
 8001168:	6809      	ldr	r1, [r1, #0]
 800116a:	431a      	orrs	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	3318      	adds	r3, #24
 8001170:	011b      	lsls	r3, r3, #4
 8001172:	440b      	add	r3, r1
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	e00f      	b.n	8001198 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001182:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001188:	68f9      	ldr	r1, [r7, #12]
 800118a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800118c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3318      	adds	r3, #24
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	440b      	add	r3, r1
 8001196:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6819      	ldr	r1, [r3, #0]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3318      	adds	r3, #24
 80011a4:	011b      	lsls	r3, r3, #4
 80011a6:	440b      	add	r3, r1
 80011a8:	3304      	adds	r3, #4
 80011aa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	7d1b      	ldrb	r3, [r3, #20]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d111      	bne.n	80011d8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3318      	adds	r3, #24
 80011bc:	011b      	lsls	r3, r3, #4
 80011be:	4413      	add	r3, r2
 80011c0:	3304      	adds	r3, #4
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	6811      	ldr	r1, [r2, #0]
 80011c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	3318      	adds	r3, #24
 80011d0:	011b      	lsls	r3, r3, #4
 80011d2:	440b      	add	r3, r1
 80011d4:	3304      	adds	r3, #4
 80011d6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3307      	adds	r3, #7
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	061a      	lsls	r2, r3, #24
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3306      	adds	r3, #6
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	041b      	lsls	r3, r3, #16
 80011e8:	431a      	orrs	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3305      	adds	r3, #5
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	4313      	orrs	r3, r2
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	3204      	adds	r2, #4
 80011f8:	7812      	ldrb	r2, [r2, #0]
 80011fa:	4610      	mov	r0, r2
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	6811      	ldr	r1, [r2, #0]
 8001200:	ea43 0200 	orr.w	r2, r3, r0
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	440b      	add	r3, r1
 800120a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800120e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3303      	adds	r3, #3
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	061a      	lsls	r2, r3, #24
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3302      	adds	r3, #2
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	041b      	lsls	r3, r3, #16
 8001220:	431a      	orrs	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3301      	adds	r3, #1
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	4313      	orrs	r3, r2
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	7812      	ldrb	r2, [r2, #0]
 8001230:	4610      	mov	r0, r2
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	6811      	ldr	r1, [r2, #0]
 8001236:	ea43 0200 	orr.w	r2, r3, r0
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	011b      	lsls	r3, r3, #4
 800123e:	440b      	add	r3, r1
 8001240:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001244:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3318      	adds	r3, #24
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	4413      	add	r3, r2
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	6811      	ldr	r1, [r2, #0]
 8001258:	f043 0201 	orr.w	r2, r3, #1
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	3318      	adds	r3, #24
 8001260:	011b      	lsls	r3, r3, #4
 8001262:	440b      	add	r3, r1
 8001264:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	e00e      	b.n	8001288 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e006      	b.n	8001288 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
  }
}
 8001288:	4618      	mov	r0, r3
 800128a:	3724      	adds	r7, #36	@ 0x24
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a6:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80012a8:	7afb      	ldrb	r3, [r7, #11]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d002      	beq.n	80012b4 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80012ae:	7afb      	ldrb	r3, [r7, #11]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d11d      	bne.n	80012f0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d002      	beq.n	80012c8 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3301      	adds	r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d002      	beq.n	80012dc <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	3301      	adds	r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3301      	adds	r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80012f0:	68fb      	ldr	r3, [r7, #12]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012fe:	b480      	push	{r7}
 8001300:	b087      	sub	sp, #28
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001312:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001314:	7dfb      	ldrb	r3, [r7, #23]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d003      	beq.n	8001322 <HAL_CAN_GetRxMessage+0x24>
 800131a:	7dfb      	ldrb	r3, [r7, #23]
 800131c:	2b02      	cmp	r3, #2
 800131e:	f040 8103 	bne.w	8001528 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d10e      	bne.n	8001346 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d116      	bne.n	8001364 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800133a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e0f7      	b.n	8001536 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d107      	bne.n	8001364 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001358:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e0e8      	b.n	8001536 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	331b      	adds	r3, #27
 800136c:	011b      	lsls	r3, r3, #4
 800136e:	4413      	add	r3, r2
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0204 	and.w	r2, r3, #4
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10c      	bne.n	800139c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	331b      	adds	r3, #27
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	4413      	add	r3, r2
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	0d5b      	lsrs	r3, r3, #21
 8001392:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	e00b      	b.n	80013b4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	331b      	adds	r3, #27
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	4413      	add	r3, r2
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	08db      	lsrs	r3, r3, #3
 80013ac:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	331b      	adds	r3, #27
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	4413      	add	r3, r2
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0202 	and.w	r2, r3, #2
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	331b      	adds	r3, #27
 80013d2:	011b      	lsls	r3, r3, #4
 80013d4:	4413      	add	r3, r2
 80013d6:	3304      	adds	r3, #4
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2208      	movs	r2, #8
 80013e6:	611a      	str	r2, [r3, #16]
 80013e8:	e00b      	b.n	8001402 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	331b      	adds	r3, #27
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	4413      	add	r3, r2
 80013f6:	3304      	adds	r3, #4
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 020f 	and.w	r2, r3, #15
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	331b      	adds	r3, #27
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	4413      	add	r3, r2
 800140e:	3304      	adds	r3, #4
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	0a1b      	lsrs	r3, r3, #8
 8001414:	b2da      	uxtb	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	331b      	adds	r3, #27
 8001422:	011b      	lsls	r3, r3, #4
 8001424:	4413      	add	r3, r2
 8001426:	3304      	adds	r3, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	0c1b      	lsrs	r3, r3, #16
 800142c:	b29a      	uxth	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	4413      	add	r3, r2
 800143c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	4413      	add	r3, r2
 8001452:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	0a1a      	lsrs	r2, r3, #8
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	011b      	lsls	r3, r3, #4
 800146a:	4413      	add	r3, r2
 800146c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	0c1a      	lsrs	r2, r3, #16
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	3302      	adds	r3, #2
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	011b      	lsls	r3, r3, #4
 8001484:	4413      	add	r3, r2
 8001486:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	0e1a      	lsrs	r2, r3, #24
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	3303      	adds	r3, #3
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	011b      	lsls	r3, r3, #4
 800149e:	4413      	add	r3, r2
 80014a0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	3304      	adds	r3, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	4413      	add	r3, r2
 80014b8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	0a1a      	lsrs	r2, r3, #8
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	3305      	adds	r3, #5
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	4413      	add	r3, r2
 80014d2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	0c1a      	lsrs	r2, r3, #16
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	3306      	adds	r3, #6
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	4413      	add	r3, r2
 80014ec:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	0e1a      	lsrs	r2, r3, #24
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	3307      	adds	r3, #7
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d108      	bne.n	8001514 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f042 0220 	orr.w	r2, r2, #32
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	e007      	b.n	8001524 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	691a      	ldr	r2, [r3, #16]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0220 	orr.w	r2, r2, #32
 8001522:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001524:	2300      	movs	r3, #0
 8001526:	e006      	b.n	8001536 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
  }
}
 8001536:	4618      	mov	r0, r3
 8001538:	371c      	adds	r7, #28
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001542:	b480      	push	{r7}
 8001544:	b085      	sub	sp, #20
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001556:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001558:	7afb      	ldrb	r3, [r7, #11]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d002      	beq.n	8001564 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800155e:	7afb      	ldrb	r3, [r7, #11]
 8001560:	2b02      	cmp	r3, #2
 8001562:	d10f      	bne.n	8001584 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d106      	bne.n	8001578 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	e005      	b.n	8001584 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001584:	68fb      	ldr	r3, [r7, #12]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b08a      	sub	sp, #40	@ 0x28
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d07c      	beq.n	80016d2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d023      	beq.n	800162a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2201      	movs	r2, #1
 80015e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f983 	bl	8001900 <HAL_CAN_TxMailbox0CompleteCallback>
 80015fa:	e016      	b.n	800162a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	2b00      	cmp	r3, #0
 8001604:	d004      	beq.n	8001610 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001608:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
 800160e:	e00c      	b.n	800162a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b00      	cmp	r3, #0
 8001618:	d004      	beq.n	8001624 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001620:	627b      	str	r3, [r7, #36]	@ 0x24
 8001622:	e002      	b.n	800162a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 f989 	bl	800193c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d024      	beq.n	800167e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800163c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f963 	bl	8001914 <HAL_CAN_TxMailbox1CompleteCallback>
 800164e:	e016      	b.n	800167e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001656:	2b00      	cmp	r3, #0
 8001658:	d004      	beq.n	8001664 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
 8001662:	e00c      	b.n	800167e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800166a:	2b00      	cmp	r3, #0
 800166c:	d004      	beq.n	8001678 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001670:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
 8001676:	e002      	b.n	800167e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 f969 	bl	8001950 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d024      	beq.n	80016d2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001690:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 f943 	bl	8001928 <HAL_CAN_TxMailbox2CompleteCallback>
 80016a2:	e016      	b.n	80016d2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d004      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80016ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80016b6:	e00c      	b.n	80016d2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d004      	beq.n	80016cc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80016c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ca:	e002      	b.n	80016d2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 f949 	bl	8001964 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00c      	beq.n	80016f6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f003 0310 	and.w	r3, r3, #16
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d007      	beq.n	80016f6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80016e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2210      	movs	r2, #16
 80016f4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00b      	beq.n	8001718 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d006      	beq.n	8001718 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2208      	movs	r2, #8
 8001710:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f93a 	bl	800198c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001718:	6a3b      	ldr	r3, [r7, #32]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d009      	beq.n	8001736 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d002      	beq.n	8001736 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 f921 	bl	8001978 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00c      	beq.n	800175a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	f003 0310 	and.w	r3, r3, #16
 8001746:	2b00      	cmp	r3, #0
 8001748:	d007      	beq.n	800175a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800174a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001750:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2210      	movs	r2, #16
 8001758:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	f003 0320 	and.w	r3, r3, #32
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00b      	beq.n	800177c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d006      	beq.n	800177c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2208      	movs	r2, #8
 8001774:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f91c 	bl	80019b4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	2b00      	cmp	r3, #0
 8001784:	d009      	beq.n	800179a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 f903 	bl	80019a0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00b      	beq.n	80017bc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d006      	beq.n	80017bc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2210      	movs	r2, #16
 80017b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f906 	bl	80019c8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00b      	beq.n	80017de <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d006      	beq.n	80017de <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2208      	movs	r2, #8
 80017d6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f8ff 	bl	80019dc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d07b      	beq.n	80018e0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d072      	beq.n	80018d8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d008      	beq.n	800180e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001830:	2b00      	cmp	r3, #0
 8001832:	d008      	beq.n	8001846 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	f043 0304 	orr.w	r3, r3, #4
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800184c:	2b00      	cmp	r3, #0
 800184e:	d043      	beq.n	80018d8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001856:	2b00      	cmp	r3, #0
 8001858:	d03e      	beq.n	80018d8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001860:	2b60      	cmp	r3, #96	@ 0x60
 8001862:	d02b      	beq.n	80018bc <HAL_CAN_IRQHandler+0x32a>
 8001864:	2b60      	cmp	r3, #96	@ 0x60
 8001866:	d82e      	bhi.n	80018c6 <HAL_CAN_IRQHandler+0x334>
 8001868:	2b50      	cmp	r3, #80	@ 0x50
 800186a:	d022      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x320>
 800186c:	2b50      	cmp	r3, #80	@ 0x50
 800186e:	d82a      	bhi.n	80018c6 <HAL_CAN_IRQHandler+0x334>
 8001870:	2b40      	cmp	r3, #64	@ 0x40
 8001872:	d019      	beq.n	80018a8 <HAL_CAN_IRQHandler+0x316>
 8001874:	2b40      	cmp	r3, #64	@ 0x40
 8001876:	d826      	bhi.n	80018c6 <HAL_CAN_IRQHandler+0x334>
 8001878:	2b30      	cmp	r3, #48	@ 0x30
 800187a:	d010      	beq.n	800189e <HAL_CAN_IRQHandler+0x30c>
 800187c:	2b30      	cmp	r3, #48	@ 0x30
 800187e:	d822      	bhi.n	80018c6 <HAL_CAN_IRQHandler+0x334>
 8001880:	2b10      	cmp	r3, #16
 8001882:	d002      	beq.n	800188a <HAL_CAN_IRQHandler+0x2f8>
 8001884:	2b20      	cmp	r3, #32
 8001886:	d005      	beq.n	8001894 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001888:	e01d      	b.n	80018c6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188c:	f043 0308 	orr.w	r3, r3, #8
 8001890:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001892:	e019      	b.n	80018c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001896:	f043 0310 	orr.w	r3, r3, #16
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800189c:	e014      	b.n	80018c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	f043 0320 	orr.w	r3, r3, #32
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018a6:	e00f      	b.n	80018c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80018a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018ae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018b0:	e00a      	b.n	80018c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018ba:	e005      	b.n	80018c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80018bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018c4:	e000      	b.n	80018c8 <HAL_CAN_IRQHandler+0x336>
            break;
 80018c6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	699a      	ldr	r2, [r3, #24]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80018d6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2204      	movs	r2, #4
 80018de:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80018e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d008      	beq.n	80018f8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f87c 	bl	80019f0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80018f8:	bf00      	nop
 80018fa:	3728      	adds	r7, #40	@ 0x28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a14:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a20:	4013      	ands	r3, r2
 8001a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a36:	4a04      	ldr	r2, [pc, #16]	@ (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	60d3      	str	r3, [r2, #12]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a50:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <__NVIC_GetPriorityGrouping+0x18>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	0a1b      	lsrs	r3, r3, #8
 8001a56:	f003 0307 	and.w	r3, r3, #7
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	db0b      	blt.n	8001a92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	f003 021f 	and.w	r2, r3, #31
 8001a80:	4907      	ldr	r1, [pc, #28]	@ (8001aa0 <__NVIC_EnableIRQ+0x38>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	095b      	lsrs	r3, r3, #5
 8001a88:	2001      	movs	r0, #1
 8001a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000e100 	.word	0xe000e100

08001aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	db0a      	blt.n	8001ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	490c      	ldr	r1, [pc, #48]	@ (8001af0 <__NVIC_SetPriority+0x4c>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001acc:	e00a      	b.n	8001ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4908      	ldr	r1, [pc, #32]	@ (8001af4 <__NVIC_SetPriority+0x50>)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	3b04      	subs	r3, #4
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	761a      	strb	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000e100 	.word	0xe000e100
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	@ 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f1c3 0307 	rsb	r3, r3, #7
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	bf28      	it	cs
 8001b16:	2304      	movcs	r3, #4
 8001b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d902      	bls.n	8001b28 <NVIC_EncodePriority+0x30>
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3b03      	subs	r3, #3
 8001b26:	e000      	b.n	8001b2a <NVIC_EncodePriority+0x32>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	4313      	orrs	r3, r2
         );
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	@ 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b70:	d301      	bcc.n	8001b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00f      	b.n	8001b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba0 <SysTick_Config+0x40>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7e:	210f      	movs	r1, #15
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b84:	f7ff ff8e 	bl	8001aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b88:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <SysTick_Config+0x40>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ba0 <SysTick_Config+0x40>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	e000e010 	.word	0xe000e010

08001ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff29 	bl	8001a04 <__NVIC_SetPriorityGrouping>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bcc:	f7ff ff3e 	bl	8001a4c <__NVIC_GetPriorityGrouping>
 8001bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	6978      	ldr	r0, [r7, #20]
 8001bd8:	f7ff ff8e 	bl	8001af8 <NVIC_EncodePriority>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff5d 	bl	8001aa4 <__NVIC_SetPriority>
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff31 	bl	8001a68 <__NVIC_EnableIRQ>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ffa2 	bl	8001b60 <SysTick_Config>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	@ 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	e177      	b.n	8001f34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c44:	2201      	movs	r2, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	f040 8166 	bne.w	8001f2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d005      	beq.n	8001c7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d130      	bne.n	8001cdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2203      	movs	r2, #3
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 0201 	and.w	r2, r3, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d017      	beq.n	8001d18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d123      	bne.n	8001d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	08da      	lsrs	r2, r3, #3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3208      	adds	r2, #8
 8001d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	08da      	lsrs	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3208      	adds	r2, #8
 8001d66:	69b9      	ldr	r1, [r7, #24]
 8001d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0203 	and.w	r2, r3, #3
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80c0 	beq.w	8001f2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b66      	ldr	r3, [pc, #408]	@ (8001f4c <HAL_GPIO_Init+0x324>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	4a65      	ldr	r2, [pc, #404]	@ (8001f4c <HAL_GPIO_Init+0x324>)
 8001db8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dbe:	4b63      	ldr	r3, [pc, #396]	@ (8001f4c <HAL_GPIO_Init+0x324>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dca:	4a61      	ldr	r2, [pc, #388]	@ (8001f50 <HAL_GPIO_Init+0x328>)
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	089b      	lsrs	r3, r3, #2
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	220f      	movs	r2, #15
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a58      	ldr	r2, [pc, #352]	@ (8001f54 <HAL_GPIO_Init+0x32c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d037      	beq.n	8001e66 <HAL_GPIO_Init+0x23e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a57      	ldr	r2, [pc, #348]	@ (8001f58 <HAL_GPIO_Init+0x330>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d031      	beq.n	8001e62 <HAL_GPIO_Init+0x23a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a56      	ldr	r2, [pc, #344]	@ (8001f5c <HAL_GPIO_Init+0x334>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d02b      	beq.n	8001e5e <HAL_GPIO_Init+0x236>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a55      	ldr	r2, [pc, #340]	@ (8001f60 <HAL_GPIO_Init+0x338>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d025      	beq.n	8001e5a <HAL_GPIO_Init+0x232>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a54      	ldr	r2, [pc, #336]	@ (8001f64 <HAL_GPIO_Init+0x33c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d01f      	beq.n	8001e56 <HAL_GPIO_Init+0x22e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a53      	ldr	r2, [pc, #332]	@ (8001f68 <HAL_GPIO_Init+0x340>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d019      	beq.n	8001e52 <HAL_GPIO_Init+0x22a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a52      	ldr	r2, [pc, #328]	@ (8001f6c <HAL_GPIO_Init+0x344>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d013      	beq.n	8001e4e <HAL_GPIO_Init+0x226>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a51      	ldr	r2, [pc, #324]	@ (8001f70 <HAL_GPIO_Init+0x348>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00d      	beq.n	8001e4a <HAL_GPIO_Init+0x222>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a50      	ldr	r2, [pc, #320]	@ (8001f74 <HAL_GPIO_Init+0x34c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d007      	beq.n	8001e46 <HAL_GPIO_Init+0x21e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4f      	ldr	r2, [pc, #316]	@ (8001f78 <HAL_GPIO_Init+0x350>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d101      	bne.n	8001e42 <HAL_GPIO_Init+0x21a>
 8001e3e:	2309      	movs	r3, #9
 8001e40:	e012      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e42:	230a      	movs	r3, #10
 8001e44:	e010      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e46:	2308      	movs	r3, #8
 8001e48:	e00e      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e4a:	2307      	movs	r3, #7
 8001e4c:	e00c      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e4e:	2306      	movs	r3, #6
 8001e50:	e00a      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e52:	2305      	movs	r3, #5
 8001e54:	e008      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e56:	2304      	movs	r3, #4
 8001e58:	e006      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e004      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e002      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e66:	2300      	movs	r3, #0
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	f002 0203 	and.w	r2, r2, #3
 8001e6e:	0092      	lsls	r2, r2, #2
 8001e70:	4093      	lsls	r3, r2
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e78:	4935      	ldr	r1, [pc, #212]	@ (8001f50 <HAL_GPIO_Init+0x328>)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e86:	4b3d      	ldr	r3, [pc, #244]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eaa:	4a34      	ldr	r2, [pc, #208]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eb0:	4b32      	ldr	r3, [pc, #200]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ed4:	4a29      	ldr	r2, [pc, #164]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eda:	4b28      	ldr	r3, [pc, #160]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001efe:	4a1f      	ldr	r2, [pc, #124]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f04:	4b1d      	ldr	r3, [pc, #116]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f28:	4a14      	ldr	r2, [pc, #80]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3301      	adds	r3, #1
 8001f32:	61fb      	str	r3, [r7, #28]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	2b0f      	cmp	r3, #15
 8001f38:	f67f ae84 	bls.w	8001c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	bf00      	nop
 8001f40:	3724      	adds	r7, #36	@ 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40013800 	.word	0x40013800
 8001f54:	40020000 	.word	0x40020000
 8001f58:	40020400 	.word	0x40020400
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	40020c00 	.word	0x40020c00
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40021400 	.word	0x40021400
 8001f6c:	40021800 	.word	0x40021800
 8001f70:	40021c00 	.word	0x40021c00
 8001f74:	40022000 	.word	0x40022000
 8001f78:	40022400 	.word	0x40022400
 8001f7c:	40013c00 	.word	0x40013c00

08001f80 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	603b      	str	r3, [r7, #0]
 8001f8e:	4b20      	ldr	r3, [pc, #128]	@ (8002010 <HAL_PWREx_EnableOverDrive+0x90>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	4a1f      	ldr	r2, [pc, #124]	@ (8002010 <HAL_PWREx_EnableOverDrive+0x90>)
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002010 <HAL_PWREx_EnableOverDrive+0x90>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8002014 <HAL_PWREx_EnableOverDrive+0x94>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fac:	f7fe fe76 	bl	8000c9c <HAL_GetTick>
 8001fb0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fb2:	e009      	b.n	8001fc8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fb4:	f7fe fe72 	bl	8000c9c <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fc2:	d901      	bls.n	8001fc8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e01f      	b.n	8002008 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fc8:	4b13      	ldr	r3, [pc, #76]	@ (8002018 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fd4:	d1ee      	bne.n	8001fb4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001fd6:	4b11      	ldr	r3, [pc, #68]	@ (800201c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fdc:	f7fe fe5e 	bl	8000c9c <HAL_GetTick>
 8001fe0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fe2:	e009      	b.n	8001ff8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fe4:	f7fe fe5a 	bl	8000c9c <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ff2:	d901      	bls.n	8001ff8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e007      	b.n	8002008 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ff8:	4b07      	ldr	r3, [pc, #28]	@ (8002018 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002000:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002004:	d1ee      	bne.n	8001fe4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40023800 	.word	0x40023800
 8002014:	420e0040 	.word	0x420e0040
 8002018:	40007000 	.word	0x40007000
 800201c:	420e0044 	.word	0x420e0044

08002020 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e267      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d075      	beq.n	800212a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800203e:	4b88      	ldr	r3, [pc, #544]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b04      	cmp	r3, #4
 8002048:	d00c      	beq.n	8002064 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800204a:	4b85      	ldr	r3, [pc, #532]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002052:	2b08      	cmp	r3, #8
 8002054:	d112      	bne.n	800207c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002056:	4b82      	ldr	r3, [pc, #520]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800205e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002062:	d10b      	bne.n	800207c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002064:	4b7e      	ldr	r3, [pc, #504]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d05b      	beq.n	8002128 <HAL_RCC_OscConfig+0x108>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d157      	bne.n	8002128 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e242      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002084:	d106      	bne.n	8002094 <HAL_RCC_OscConfig+0x74>
 8002086:	4b76      	ldr	r3, [pc, #472]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a75      	ldr	r2, [pc, #468]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 800208c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	e01d      	b.n	80020d0 <HAL_RCC_OscConfig+0xb0>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800209c:	d10c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x98>
 800209e:	4b70      	ldr	r3, [pc, #448]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a6f      	ldr	r2, [pc, #444]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 80020a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a6c      	ldr	r2, [pc, #432]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 80020b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	e00b      	b.n	80020d0 <HAL_RCC_OscConfig+0xb0>
 80020b8:	4b69      	ldr	r3, [pc, #420]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a68      	ldr	r2, [pc, #416]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 80020be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	4b66      	ldr	r3, [pc, #408]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a65      	ldr	r2, [pc, #404]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 80020ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d013      	beq.n	8002100 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7fe fde0 	bl	8000c9c <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e0:	f7fe fddc 	bl	8000c9c <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	@ 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e207      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0xc0>
 80020fe:	e014      	b.n	800212a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7fe fdcc 	bl	8000c9c <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002108:	f7fe fdc8 	bl	8000c9c <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b64      	cmp	r3, #100	@ 0x64
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e1f3      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211a:	4b51      	ldr	r3, [pc, #324]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0xe8>
 8002126:	e000      	b.n	800212a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d063      	beq.n	80021fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002136:	4b4a      	ldr	r3, [pc, #296]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00b      	beq.n	800215a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002142:	4b47      	ldr	r3, [pc, #284]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800214a:	2b08      	cmp	r3, #8
 800214c:	d11c      	bne.n	8002188 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800214e:	4b44      	ldr	r3, [pc, #272]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d116      	bne.n	8002188 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215a:	4b41      	ldr	r3, [pc, #260]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d005      	beq.n	8002172 <HAL_RCC_OscConfig+0x152>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d001      	beq.n	8002172 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e1c7      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002172:	4b3b      	ldr	r3, [pc, #236]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4937      	ldr	r1, [pc, #220]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 8002182:	4313      	orrs	r3, r2
 8002184:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002186:	e03a      	b.n	80021fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d020      	beq.n	80021d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002190:	4b34      	ldr	r3, [pc, #208]	@ (8002264 <HAL_RCC_OscConfig+0x244>)
 8002192:	2201      	movs	r2, #1
 8002194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002196:	f7fe fd81 	bl	8000c9c <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219e:	f7fe fd7d 	bl	8000c9c <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e1a8      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0f0      	beq.n	800219e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021bc:	4b28      	ldr	r3, [pc, #160]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4925      	ldr	r1, [pc, #148]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	600b      	str	r3, [r1, #0]
 80021d0:	e015      	b.n	80021fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021d2:	4b24      	ldr	r3, [pc, #144]	@ (8002264 <HAL_RCC_OscConfig+0x244>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe fd60 	bl	8000c9c <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e0:	f7fe fd5c 	bl	8000c9c <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e187      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d036      	beq.n	8002278 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d016      	beq.n	8002240 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002212:	4b15      	ldr	r3, [pc, #84]	@ (8002268 <HAL_RCC_OscConfig+0x248>)
 8002214:	2201      	movs	r2, #1
 8002216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002218:	f7fe fd40 	bl	8000c9c <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002220:	f7fe fd3c 	bl	8000c9c <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e167      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002232:	4b0b      	ldr	r3, [pc, #44]	@ (8002260 <HAL_RCC_OscConfig+0x240>)
 8002234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0x200>
 800223e:	e01b      	b.n	8002278 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002240:	4b09      	ldr	r3, [pc, #36]	@ (8002268 <HAL_RCC_OscConfig+0x248>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002246:	f7fe fd29 	bl	8000c9c <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224c:	e00e      	b.n	800226c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800224e:	f7fe fd25 	bl	8000c9c <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d907      	bls.n	800226c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e150      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
 8002260:	40023800 	.word	0x40023800
 8002264:	42470000 	.word	0x42470000
 8002268:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800226c:	4b88      	ldr	r3, [pc, #544]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 800226e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1ea      	bne.n	800224e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 8097 	beq.w	80023b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002286:	2300      	movs	r3, #0
 8002288:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228a:	4b81      	ldr	r3, [pc, #516]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10f      	bne.n	80022b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	4b7d      	ldr	r3, [pc, #500]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	4a7c      	ldr	r2, [pc, #496]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 80022a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a6:	4b7a      	ldr	r3, [pc, #488]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b2:	2301      	movs	r3, #1
 80022b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b6:	4b77      	ldr	r3, [pc, #476]	@ (8002494 <HAL_RCC_OscConfig+0x474>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d118      	bne.n	80022f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022c2:	4b74      	ldr	r3, [pc, #464]	@ (8002494 <HAL_RCC_OscConfig+0x474>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a73      	ldr	r2, [pc, #460]	@ (8002494 <HAL_RCC_OscConfig+0x474>)
 80022c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ce:	f7fe fce5 	bl	8000c9c <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d6:	f7fe fce1 	bl	8000c9c <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e10c      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002494 <HAL_RCC_OscConfig+0x474>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d106      	bne.n	800230a <HAL_RCC_OscConfig+0x2ea>
 80022fc:	4b64      	ldr	r3, [pc, #400]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 80022fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002300:	4a63      	ldr	r2, [pc, #396]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6713      	str	r3, [r2, #112]	@ 0x70
 8002308:	e01c      	b.n	8002344 <HAL_RCC_OscConfig+0x324>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2b05      	cmp	r3, #5
 8002310:	d10c      	bne.n	800232c <HAL_RCC_OscConfig+0x30c>
 8002312:	4b5f      	ldr	r3, [pc, #380]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002316:	4a5e      	ldr	r2, [pc, #376]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 8002318:	f043 0304 	orr.w	r3, r3, #4
 800231c:	6713      	str	r3, [r2, #112]	@ 0x70
 800231e:	4b5c      	ldr	r3, [pc, #368]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 8002320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002322:	4a5b      	ldr	r2, [pc, #364]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6713      	str	r3, [r2, #112]	@ 0x70
 800232a:	e00b      	b.n	8002344 <HAL_RCC_OscConfig+0x324>
 800232c:	4b58      	ldr	r3, [pc, #352]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002330:	4a57      	ldr	r2, [pc, #348]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 8002332:	f023 0301 	bic.w	r3, r3, #1
 8002336:	6713      	str	r3, [r2, #112]	@ 0x70
 8002338:	4b55      	ldr	r3, [pc, #340]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 800233a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233c:	4a54      	ldr	r2, [pc, #336]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 800233e:	f023 0304 	bic.w	r3, r3, #4
 8002342:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d015      	beq.n	8002378 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234c:	f7fe fca6 	bl	8000c9c <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002352:	e00a      	b.n	800236a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002354:	f7fe fca2 	bl	8000c9c <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e0cb      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236a:	4b49      	ldr	r3, [pc, #292]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 800236c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0ee      	beq.n	8002354 <HAL_RCC_OscConfig+0x334>
 8002376:	e014      	b.n	80023a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002378:	f7fe fc90 	bl	8000c9c <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800237e:	e00a      	b.n	8002396 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002380:	f7fe fc8c 	bl	8000c9c <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e0b5      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002396:	4b3e      	ldr	r3, [pc, #248]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 8002398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1ee      	bne.n	8002380 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023a2:	7dfb      	ldrb	r3, [r7, #23]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d105      	bne.n	80023b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a8:	4b39      	ldr	r3, [pc, #228]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 80023aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ac:	4a38      	ldr	r2, [pc, #224]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 80023ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80a1 	beq.w	8002500 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023be:	4b34      	ldr	r3, [pc, #208]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d05c      	beq.n	8002484 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d141      	bne.n	8002456 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d2:	4b31      	ldr	r3, [pc, #196]	@ (8002498 <HAL_RCC_OscConfig+0x478>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7fe fc60 	bl	8000c9c <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e0:	f7fe fc5c 	bl	8000c9c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e087      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f2:	4b27      	ldr	r3, [pc, #156]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69da      	ldr	r2, [r3, #28]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240c:	019b      	lsls	r3, r3, #6
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002414:	085b      	lsrs	r3, r3, #1
 8002416:	3b01      	subs	r3, #1
 8002418:	041b      	lsls	r3, r3, #16
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002420:	061b      	lsls	r3, r3, #24
 8002422:	491b      	ldr	r1, [pc, #108]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002428:	4b1b      	ldr	r3, [pc, #108]	@ (8002498 <HAL_RCC_OscConfig+0x478>)
 800242a:	2201      	movs	r2, #1
 800242c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242e:	f7fe fc35 	bl	8000c9c <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002436:	f7fe fc31 	bl	8000c9c <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e05c      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002448:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x416>
 8002454:	e054      	b.n	8002500 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002456:	4b10      	ldr	r3, [pc, #64]	@ (8002498 <HAL_RCC_OscConfig+0x478>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7fe fc1e 	bl	8000c9c <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002464:	f7fe fc1a 	bl	8000c9c <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e045      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002476:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <HAL_RCC_OscConfig+0x470>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x444>
 8002482:	e03d      	b.n	8002500 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d107      	bne.n	800249c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e038      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
 8002490:	40023800 	.word	0x40023800
 8002494:	40007000 	.word	0x40007000
 8002498:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800249c:	4b1b      	ldr	r3, [pc, #108]	@ (800250c <HAL_RCC_OscConfig+0x4ec>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d028      	beq.n	80024fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d121      	bne.n	80024fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d11a      	bne.n	80024fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024cc:	4013      	ands	r3, r2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d111      	bne.n	80024fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e2:	085b      	lsrs	r3, r3, #1
 80024e4:	3b01      	subs	r3, #1
 80024e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d107      	bne.n	80024fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800

08002510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0cc      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002524:	4b68      	ldr	r3, [pc, #416]	@ (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 030f 	and.w	r3, r3, #15
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d90c      	bls.n	800254c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002532:	4b65      	ldr	r3, [pc, #404]	@ (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253a:	4b63      	ldr	r3, [pc, #396]	@ (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0b8      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d020      	beq.n	800259a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002564:	4b59      	ldr	r3, [pc, #356]	@ (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4a58      	ldr	r2, [pc, #352]	@ (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800256e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800257c:	4b53      	ldr	r3, [pc, #332]	@ (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	4a52      	ldr	r2, [pc, #328]	@ (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002586:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002588:	4b50      	ldr	r3, [pc, #320]	@ (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	494d      	ldr	r1, [pc, #308]	@ (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	4313      	orrs	r3, r2
 8002598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d044      	beq.n	8002630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ae:	4b47      	ldr	r3, [pc, #284]	@ (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d119      	bne.n	80025ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e07f      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d003      	beq.n	80025ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	d107      	bne.n	80025de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ce:	4b3f      	ldr	r3, [pc, #252]	@ (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e06f      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025de:	4b3b      	ldr	r3, [pc, #236]	@ (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e067      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ee:	4b37      	ldr	r3, [pc, #220]	@ (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f023 0203 	bic.w	r2, r3, #3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	4934      	ldr	r1, [pc, #208]	@ (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002600:	f7fe fb4c 	bl	8000c9c <HAL_GetTick>
 8002604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002606:	e00a      	b.n	800261e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002608:	f7fe fb48 	bl	8000c9c <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e04f      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261e:	4b2b      	ldr	r3, [pc, #172]	@ (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 020c 	and.w	r2, r3, #12
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	429a      	cmp	r2, r3
 800262e:	d1eb      	bne.n	8002608 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002630:	4b25      	ldr	r3, [pc, #148]	@ (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d20c      	bcs.n	8002658 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b22      	ldr	r3, [pc, #136]	@ (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b20      	ldr	r3, [pc, #128]	@ (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e032      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002664:	4b19      	ldr	r3, [pc, #100]	@ (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4916      	ldr	r1, [pc, #88]	@ (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002682:	4b12      	ldr	r3, [pc, #72]	@ (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	490e      	ldr	r1, [pc, #56]	@ (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	4313      	orrs	r3, r2
 8002694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002696:	f000 f821 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 800269a:	4602      	mov	r2, r0
 800269c:	4b0b      	ldr	r3, [pc, #44]	@ (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	490a      	ldr	r1, [pc, #40]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	5ccb      	ldrb	r3, [r1, r3]
 80026aa:	fa22 f303 	lsr.w	r3, r2, r3
 80026ae:	4a09      	ldr	r2, [pc, #36]	@ (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80026b2:	4b09      	ldr	r3, [pc, #36]	@ (80026d8 <HAL_RCC_ClockConfig+0x1c8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe faac 	bl	8000c14 <HAL_InitTick>

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40023c00 	.word	0x40023c00
 80026cc:	40023800 	.word	0x40023800
 80026d0:	08003af4 	.word	0x08003af4
 80026d4:	20000000 	.word	0x20000000
 80026d8:	20000004 	.word	0x20000004

080026dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026e0:	b094      	sub	sp, #80	@ 0x50
 80026e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026f4:	4b79      	ldr	r3, [pc, #484]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x200>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 030c 	and.w	r3, r3, #12
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d00d      	beq.n	800271c <HAL_RCC_GetSysClockFreq+0x40>
 8002700:	2b08      	cmp	r3, #8
 8002702:	f200 80e1 	bhi.w	80028c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x34>
 800270a:	2b04      	cmp	r3, #4
 800270c:	d003      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0x3a>
 800270e:	e0db      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002710:	4b73      	ldr	r3, [pc, #460]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002712:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002714:	e0db      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002716:	4b73      	ldr	r3, [pc, #460]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002718:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800271a:	e0d8      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800271c:	4b6f      	ldr	r3, [pc, #444]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x200>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002724:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002726:	4b6d      	ldr	r3, [pc, #436]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d063      	beq.n	80027fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002732:	4b6a      	ldr	r3, [pc, #424]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	099b      	lsrs	r3, r3, #6
 8002738:	2200      	movs	r2, #0
 800273a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800273c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800273e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002744:	633b      	str	r3, [r7, #48]	@ 0x30
 8002746:	2300      	movs	r3, #0
 8002748:	637b      	str	r3, [r7, #52]	@ 0x34
 800274a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800274e:	4622      	mov	r2, r4
 8002750:	462b      	mov	r3, r5
 8002752:	f04f 0000 	mov.w	r0, #0
 8002756:	f04f 0100 	mov.w	r1, #0
 800275a:	0159      	lsls	r1, r3, #5
 800275c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002760:	0150      	lsls	r0, r2, #5
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4621      	mov	r1, r4
 8002768:	1a51      	subs	r1, r2, r1
 800276a:	6139      	str	r1, [r7, #16]
 800276c:	4629      	mov	r1, r5
 800276e:	eb63 0301 	sbc.w	r3, r3, r1
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002780:	4659      	mov	r1, fp
 8002782:	018b      	lsls	r3, r1, #6
 8002784:	4651      	mov	r1, sl
 8002786:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800278a:	4651      	mov	r1, sl
 800278c:	018a      	lsls	r2, r1, #6
 800278e:	4651      	mov	r1, sl
 8002790:	ebb2 0801 	subs.w	r8, r2, r1
 8002794:	4659      	mov	r1, fp
 8002796:	eb63 0901 	sbc.w	r9, r3, r1
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027ae:	4690      	mov	r8, r2
 80027b0:	4699      	mov	r9, r3
 80027b2:	4623      	mov	r3, r4
 80027b4:	eb18 0303 	adds.w	r3, r8, r3
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	462b      	mov	r3, r5
 80027bc:	eb49 0303 	adc.w	r3, r9, r3
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027ce:	4629      	mov	r1, r5
 80027d0:	024b      	lsls	r3, r1, #9
 80027d2:	4621      	mov	r1, r4
 80027d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027d8:	4621      	mov	r1, r4
 80027da:	024a      	lsls	r2, r1, #9
 80027dc:	4610      	mov	r0, r2
 80027de:	4619      	mov	r1, r3
 80027e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027e2:	2200      	movs	r2, #0
 80027e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027ec:	f7fd fd58 	bl	80002a0 <__aeabi_uldivmod>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4613      	mov	r3, r2
 80027f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027f8:	e058      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027fa:	4b38      	ldr	r3, [pc, #224]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x200>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	099b      	lsrs	r3, r3, #6
 8002800:	2200      	movs	r2, #0
 8002802:	4618      	mov	r0, r3
 8002804:	4611      	mov	r1, r2
 8002806:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800280a:	623b      	str	r3, [r7, #32]
 800280c:	2300      	movs	r3, #0
 800280e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002810:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002814:	4642      	mov	r2, r8
 8002816:	464b      	mov	r3, r9
 8002818:	f04f 0000 	mov.w	r0, #0
 800281c:	f04f 0100 	mov.w	r1, #0
 8002820:	0159      	lsls	r1, r3, #5
 8002822:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002826:	0150      	lsls	r0, r2, #5
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4641      	mov	r1, r8
 800282e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002832:	4649      	mov	r1, r9
 8002834:	eb63 0b01 	sbc.w	fp, r3, r1
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002844:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002848:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800284c:	ebb2 040a 	subs.w	r4, r2, sl
 8002850:	eb63 050b 	sbc.w	r5, r3, fp
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	00eb      	lsls	r3, r5, #3
 800285e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002862:	00e2      	lsls	r2, r4, #3
 8002864:	4614      	mov	r4, r2
 8002866:	461d      	mov	r5, r3
 8002868:	4643      	mov	r3, r8
 800286a:	18e3      	adds	r3, r4, r3
 800286c:	603b      	str	r3, [r7, #0]
 800286e:	464b      	mov	r3, r9
 8002870:	eb45 0303 	adc.w	r3, r5, r3
 8002874:	607b      	str	r3, [r7, #4]
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002882:	4629      	mov	r1, r5
 8002884:	028b      	lsls	r3, r1, #10
 8002886:	4621      	mov	r1, r4
 8002888:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800288c:	4621      	mov	r1, r4
 800288e:	028a      	lsls	r2, r1, #10
 8002890:	4610      	mov	r0, r2
 8002892:	4619      	mov	r1, r3
 8002894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002896:	2200      	movs	r2, #0
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	61fa      	str	r2, [r7, #28]
 800289c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028a0:	f7fd fcfe 	bl	80002a0 <__aeabi_uldivmod>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4613      	mov	r3, r2
 80028aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028ac:	4b0b      	ldr	r3, [pc, #44]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x200>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	0c1b      	lsrs	r3, r3, #16
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	3301      	adds	r3, #1
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80028bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028c6:	e002      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028c8:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80028ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3750      	adds	r7, #80	@ 0x50
 80028d4:	46bd      	mov	sp, r7
 80028d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	00f42400 	.word	0x00f42400
 80028e4:	007a1200 	.word	0x007a1200

080028e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028ec:	4b03      	ldr	r3, [pc, #12]	@ (80028fc <HAL_RCC_GetHCLKFreq+0x14>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000000 	.word	0x20000000

08002900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002904:	f7ff fff0 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8002908:	4602      	mov	r2, r0
 800290a:	4b05      	ldr	r3, [pc, #20]	@ (8002920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	0a9b      	lsrs	r3, r3, #10
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4903      	ldr	r1, [pc, #12]	@ (8002924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002916:	5ccb      	ldrb	r3, [r1, r3]
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800291c:	4618      	mov	r0, r3
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40023800 	.word	0x40023800
 8002924:	08003b04 	.word	0x08003b04

08002928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800292c:	f7ff ffdc 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8002930:	4602      	mov	r2, r0
 8002932:	4b05      	ldr	r3, [pc, #20]	@ (8002948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	0b5b      	lsrs	r3, r3, #13
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	4903      	ldr	r1, [pc, #12]	@ (800294c <HAL_RCC_GetPCLK2Freq+0x24>)
 800293e:	5ccb      	ldrb	r3, [r1, r3]
 8002940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002944:	4618      	mov	r0, r3
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40023800 	.word	0x40023800
 800294c:	08003b04 	.word	0x08003b04

08002950 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e042      	b.n	80029e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe f836 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2224      	movs	r2, #36	@ 0x24
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002992:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f973 	bl	8002c80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	@ 0x28
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	4613      	mov	r3, r2
 80029fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d175      	bne.n	8002afc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <HAL_UART_Transmit+0x2c>
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e06e      	b.n	8002afe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2221      	movs	r2, #33	@ 0x21
 8002a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a2e:	f7fe f935 	bl	8000c9c <HAL_GetTick>
 8002a32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	88fa      	ldrh	r2, [r7, #6]
 8002a38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	88fa      	ldrh	r2, [r7, #6]
 8002a3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a48:	d108      	bne.n	8002a5c <HAL_UART_Transmit+0x6c>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d104      	bne.n	8002a5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	61bb      	str	r3, [r7, #24]
 8002a5a:	e003      	b.n	8002a64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a64:	e02e      	b.n	8002ac4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2180      	movs	r1, #128	@ 0x80
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 f848 	bl	8002b06 <UART_WaitOnFlagUntilTimeout>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e03a      	b.n	8002afe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10b      	bne.n	8002aa6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	61bb      	str	r3, [r7, #24]
 8002aa4:	e007      	b.n	8002ab6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	781a      	ldrb	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1cb      	bne.n	8002a66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2140      	movs	r1, #64	@ 0x40
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 f814 	bl	8002b06 <UART_WaitOnFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e006      	b.n	8002afe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e000      	b.n	8002afe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002afc:	2302      	movs	r3, #2
  }
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b086      	sub	sp, #24
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	603b      	str	r3, [r7, #0]
 8002b12:	4613      	mov	r3, r2
 8002b14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b16:	e03b      	b.n	8002b90 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b1e:	d037      	beq.n	8002b90 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b20:	f7fe f8bc 	bl	8000c9c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	6a3a      	ldr	r2, [r7, #32]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d302      	bcc.n	8002b36 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e03a      	b.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d023      	beq.n	8002b90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b80      	cmp	r3, #128	@ 0x80
 8002b4c:	d020      	beq.n	8002b90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b40      	cmp	r3, #64	@ 0x40
 8002b52:	d01d      	beq.n	8002b90 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d116      	bne.n	8002b90 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f81d 	bl	8002bb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2208      	movs	r2, #8
 8002b82:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e00f      	b.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d0b4      	beq.n	8002b18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b095      	sub	sp, #84	@ 0x54
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	330c      	adds	r3, #12
 8002bc6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bca:	e853 3f00 	ldrex	r3, [r3]
 8002bce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	330c      	adds	r3, #12
 8002bde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002be0:	643a      	str	r2, [r7, #64]	@ 0x40
 8002be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002be6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002be8:	e841 2300 	strex	r3, r2, [r1]
 8002bec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1e5      	bne.n	8002bc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	3314      	adds	r3, #20
 8002bfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	e853 3f00 	ldrex	r3, [r3]
 8002c02:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f023 0301 	bic.w	r3, r3, #1
 8002c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	3314      	adds	r3, #20
 8002c12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c1c:	e841 2300 	strex	r3, r2, [r1]
 8002c20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1e5      	bne.n	8002bf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d119      	bne.n	8002c64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	330c      	adds	r3, #12
 8002c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	e853 3f00 	ldrex	r3, [r3]
 8002c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f023 0310 	bic.w	r3, r3, #16
 8002c46:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	330c      	adds	r3, #12
 8002c4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c50:	61ba      	str	r2, [r7, #24]
 8002c52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c54:	6979      	ldr	r1, [r7, #20]
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	e841 2300 	strex	r3, r2, [r1]
 8002c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1e5      	bne.n	8002c30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002c72:	bf00      	nop
 8002c74:	3754      	adds	r7, #84	@ 0x54
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c84:	b0c0      	sub	sp, #256	@ 0x100
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c9c:	68d9      	ldr	r1, [r3, #12]
 8002c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	ea40 0301 	orr.w	r3, r0, r1
 8002ca8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002cd8:	f021 010c 	bic.w	r1, r1, #12
 8002cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002ce6:	430b      	orrs	r3, r1
 8002ce8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cfa:	6999      	ldr	r1, [r3, #24]
 8002cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	ea40 0301 	orr.w	r3, r0, r1
 8002d06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	4b8f      	ldr	r3, [pc, #572]	@ (8002f4c <UART_SetConfig+0x2cc>)
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d005      	beq.n	8002d20 <UART_SetConfig+0xa0>
 8002d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	4b8d      	ldr	r3, [pc, #564]	@ (8002f50 <UART_SetConfig+0x2d0>)
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d104      	bne.n	8002d2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d20:	f7ff fe02 	bl	8002928 <HAL_RCC_GetPCLK2Freq>
 8002d24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d28:	e003      	b.n	8002d32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d2a:	f7ff fde9 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 8002d2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d3c:	f040 810c 	bne.w	8002f58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d44:	2200      	movs	r2, #0
 8002d46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002d4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002d52:	4622      	mov	r2, r4
 8002d54:	462b      	mov	r3, r5
 8002d56:	1891      	adds	r1, r2, r2
 8002d58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002d5a:	415b      	adcs	r3, r3
 8002d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d62:	4621      	mov	r1, r4
 8002d64:	eb12 0801 	adds.w	r8, r2, r1
 8002d68:	4629      	mov	r1, r5
 8002d6a:	eb43 0901 	adc.w	r9, r3, r1
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d82:	4690      	mov	r8, r2
 8002d84:	4699      	mov	r9, r3
 8002d86:	4623      	mov	r3, r4
 8002d88:	eb18 0303 	adds.w	r3, r8, r3
 8002d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002d90:	462b      	mov	r3, r5
 8002d92:	eb49 0303 	adc.w	r3, r9, r3
 8002d96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002da6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002daa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002dae:	460b      	mov	r3, r1
 8002db0:	18db      	adds	r3, r3, r3
 8002db2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002db4:	4613      	mov	r3, r2
 8002db6:	eb42 0303 	adc.w	r3, r2, r3
 8002dba:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002dc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002dc4:	f7fd fa6c 	bl	80002a0 <__aeabi_uldivmod>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4b61      	ldr	r3, [pc, #388]	@ (8002f54 <UART_SetConfig+0x2d4>)
 8002dce:	fba3 2302 	umull	r2, r3, r3, r2
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	011c      	lsls	r4, r3, #4
 8002dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002de0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002de4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002de8:	4642      	mov	r2, r8
 8002dea:	464b      	mov	r3, r9
 8002dec:	1891      	adds	r1, r2, r2
 8002dee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002df0:	415b      	adcs	r3, r3
 8002df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002df4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002df8:	4641      	mov	r1, r8
 8002dfa:	eb12 0a01 	adds.w	sl, r2, r1
 8002dfe:	4649      	mov	r1, r9
 8002e00:	eb43 0b01 	adc.w	fp, r3, r1
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e18:	4692      	mov	sl, r2
 8002e1a:	469b      	mov	fp, r3
 8002e1c:	4643      	mov	r3, r8
 8002e1e:	eb1a 0303 	adds.w	r3, sl, r3
 8002e22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e26:	464b      	mov	r3, r9
 8002e28:	eb4b 0303 	adc.w	r3, fp, r3
 8002e2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e44:	460b      	mov	r3, r1
 8002e46:	18db      	adds	r3, r3, r3
 8002e48:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	eb42 0303 	adc.w	r3, r2, r3
 8002e50:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002e5a:	f7fd fa21 	bl	80002a0 <__aeabi_uldivmod>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4611      	mov	r1, r2
 8002e64:	4b3b      	ldr	r3, [pc, #236]	@ (8002f54 <UART_SetConfig+0x2d4>)
 8002e66:	fba3 2301 	umull	r2, r3, r3, r1
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	2264      	movs	r2, #100	@ 0x64
 8002e6e:	fb02 f303 	mul.w	r3, r2, r3
 8002e72:	1acb      	subs	r3, r1, r3
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002e7a:	4b36      	ldr	r3, [pc, #216]	@ (8002f54 <UART_SetConfig+0x2d4>)
 8002e7c:	fba3 2302 	umull	r2, r3, r3, r2
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002e88:	441c      	add	r4, r3
 8002e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002e98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002e9c:	4642      	mov	r2, r8
 8002e9e:	464b      	mov	r3, r9
 8002ea0:	1891      	adds	r1, r2, r2
 8002ea2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ea4:	415b      	adcs	r3, r3
 8002ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ea8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002eac:	4641      	mov	r1, r8
 8002eae:	1851      	adds	r1, r2, r1
 8002eb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002eb2:	4649      	mov	r1, r9
 8002eb4:	414b      	adcs	r3, r1
 8002eb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ec4:	4659      	mov	r1, fp
 8002ec6:	00cb      	lsls	r3, r1, #3
 8002ec8:	4651      	mov	r1, sl
 8002eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ece:	4651      	mov	r1, sl
 8002ed0:	00ca      	lsls	r2, r1, #3
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4642      	mov	r2, r8
 8002eda:	189b      	adds	r3, r3, r2
 8002edc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ee0:	464b      	mov	r3, r9
 8002ee2:	460a      	mov	r2, r1
 8002ee4:	eb42 0303 	adc.w	r3, r2, r3
 8002ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ef8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002efc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f00:	460b      	mov	r3, r1
 8002f02:	18db      	adds	r3, r3, r3
 8002f04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f06:	4613      	mov	r3, r2
 8002f08:	eb42 0303 	adc.w	r3, r2, r3
 8002f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002f16:	f7fd f9c3 	bl	80002a0 <__aeabi_uldivmod>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f54 <UART_SetConfig+0x2d4>)
 8002f20:	fba3 1302 	umull	r1, r3, r3, r2
 8002f24:	095b      	lsrs	r3, r3, #5
 8002f26:	2164      	movs	r1, #100	@ 0x64
 8002f28:	fb01 f303 	mul.w	r3, r1, r3
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	3332      	adds	r3, #50	@ 0x32
 8002f32:	4a08      	ldr	r2, [pc, #32]	@ (8002f54 <UART_SetConfig+0x2d4>)
 8002f34:	fba2 2303 	umull	r2, r3, r2, r3
 8002f38:	095b      	lsrs	r3, r3, #5
 8002f3a:	f003 0207 	and.w	r2, r3, #7
 8002f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4422      	add	r2, r4
 8002f46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f48:	e106      	b.n	8003158 <UART_SetConfig+0x4d8>
 8002f4a:	bf00      	nop
 8002f4c:	40011000 	.word	0x40011000
 8002f50:	40011400 	.word	0x40011400
 8002f54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002f66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002f6a:	4642      	mov	r2, r8
 8002f6c:	464b      	mov	r3, r9
 8002f6e:	1891      	adds	r1, r2, r2
 8002f70:	6239      	str	r1, [r7, #32]
 8002f72:	415b      	adcs	r3, r3
 8002f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f7a:	4641      	mov	r1, r8
 8002f7c:	1854      	adds	r4, r2, r1
 8002f7e:	4649      	mov	r1, r9
 8002f80:	eb43 0501 	adc.w	r5, r3, r1
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	00eb      	lsls	r3, r5, #3
 8002f8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f92:	00e2      	lsls	r2, r4, #3
 8002f94:	4614      	mov	r4, r2
 8002f96:	461d      	mov	r5, r3
 8002f98:	4643      	mov	r3, r8
 8002f9a:	18e3      	adds	r3, r4, r3
 8002f9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002fa0:	464b      	mov	r3, r9
 8002fa2:	eb45 0303 	adc.w	r3, r5, r3
 8002fa6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002fb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	008b      	lsls	r3, r1, #2
 8002fca:	4621      	mov	r1, r4
 8002fcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fd0:	4621      	mov	r1, r4
 8002fd2:	008a      	lsls	r2, r1, #2
 8002fd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002fd8:	f7fd f962 	bl	80002a0 <__aeabi_uldivmod>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4b60      	ldr	r3, [pc, #384]	@ (8003164 <UART_SetConfig+0x4e4>)
 8002fe2:	fba3 2302 	umull	r2, r3, r3, r2
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	011c      	lsls	r4, r3, #4
 8002fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ff4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002ff8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002ffc:	4642      	mov	r2, r8
 8002ffe:	464b      	mov	r3, r9
 8003000:	1891      	adds	r1, r2, r2
 8003002:	61b9      	str	r1, [r7, #24]
 8003004:	415b      	adcs	r3, r3
 8003006:	61fb      	str	r3, [r7, #28]
 8003008:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800300c:	4641      	mov	r1, r8
 800300e:	1851      	adds	r1, r2, r1
 8003010:	6139      	str	r1, [r7, #16]
 8003012:	4649      	mov	r1, r9
 8003014:	414b      	adcs	r3, r1
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003024:	4659      	mov	r1, fp
 8003026:	00cb      	lsls	r3, r1, #3
 8003028:	4651      	mov	r1, sl
 800302a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800302e:	4651      	mov	r1, sl
 8003030:	00ca      	lsls	r2, r1, #3
 8003032:	4610      	mov	r0, r2
 8003034:	4619      	mov	r1, r3
 8003036:	4603      	mov	r3, r0
 8003038:	4642      	mov	r2, r8
 800303a:	189b      	adds	r3, r3, r2
 800303c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003040:	464b      	mov	r3, r9
 8003042:	460a      	mov	r2, r1
 8003044:	eb42 0303 	adc.w	r3, r2, r3
 8003048:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800304c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003056:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003064:	4649      	mov	r1, r9
 8003066:	008b      	lsls	r3, r1, #2
 8003068:	4641      	mov	r1, r8
 800306a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800306e:	4641      	mov	r1, r8
 8003070:	008a      	lsls	r2, r1, #2
 8003072:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003076:	f7fd f913 	bl	80002a0 <__aeabi_uldivmod>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4611      	mov	r1, r2
 8003080:	4b38      	ldr	r3, [pc, #224]	@ (8003164 <UART_SetConfig+0x4e4>)
 8003082:	fba3 2301 	umull	r2, r3, r3, r1
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	2264      	movs	r2, #100	@ 0x64
 800308a:	fb02 f303 	mul.w	r3, r2, r3
 800308e:	1acb      	subs	r3, r1, r3
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	3332      	adds	r3, #50	@ 0x32
 8003094:	4a33      	ldr	r2, [pc, #204]	@ (8003164 <UART_SetConfig+0x4e4>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030a0:	441c      	add	r4, r3
 80030a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030a6:	2200      	movs	r2, #0
 80030a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80030aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80030ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80030b0:	4642      	mov	r2, r8
 80030b2:	464b      	mov	r3, r9
 80030b4:	1891      	adds	r1, r2, r2
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	415b      	adcs	r3, r3
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030c0:	4641      	mov	r1, r8
 80030c2:	1851      	adds	r1, r2, r1
 80030c4:	6039      	str	r1, [r7, #0]
 80030c6:	4649      	mov	r1, r9
 80030c8:	414b      	adcs	r3, r1
 80030ca:	607b      	str	r3, [r7, #4]
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030d8:	4659      	mov	r1, fp
 80030da:	00cb      	lsls	r3, r1, #3
 80030dc:	4651      	mov	r1, sl
 80030de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030e2:	4651      	mov	r1, sl
 80030e4:	00ca      	lsls	r2, r1, #3
 80030e6:	4610      	mov	r0, r2
 80030e8:	4619      	mov	r1, r3
 80030ea:	4603      	mov	r3, r0
 80030ec:	4642      	mov	r2, r8
 80030ee:	189b      	adds	r3, r3, r2
 80030f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030f2:	464b      	mov	r3, r9
 80030f4:	460a      	mov	r2, r1
 80030f6:	eb42 0303 	adc.w	r3, r2, r3
 80030fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80030fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	663b      	str	r3, [r7, #96]	@ 0x60
 8003106:	667a      	str	r2, [r7, #100]	@ 0x64
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003114:	4649      	mov	r1, r9
 8003116:	008b      	lsls	r3, r1, #2
 8003118:	4641      	mov	r1, r8
 800311a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800311e:	4641      	mov	r1, r8
 8003120:	008a      	lsls	r2, r1, #2
 8003122:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003126:	f7fd f8bb 	bl	80002a0 <__aeabi_uldivmod>
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	4b0d      	ldr	r3, [pc, #52]	@ (8003164 <UART_SetConfig+0x4e4>)
 8003130:	fba3 1302 	umull	r1, r3, r3, r2
 8003134:	095b      	lsrs	r3, r3, #5
 8003136:	2164      	movs	r1, #100	@ 0x64
 8003138:	fb01 f303 	mul.w	r3, r1, r3
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	3332      	adds	r3, #50	@ 0x32
 8003142:	4a08      	ldr	r2, [pc, #32]	@ (8003164 <UART_SetConfig+0x4e4>)
 8003144:	fba2 2303 	umull	r2, r3, r2, r3
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	f003 020f 	and.w	r2, r3, #15
 800314e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4422      	add	r2, r4
 8003156:	609a      	str	r2, [r3, #8]
}
 8003158:	bf00      	nop
 800315a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800315e:	46bd      	mov	sp, r7
 8003160:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003164:	51eb851f 	.word	0x51eb851f

08003168 <sniprintf>:
 8003168:	b40c      	push	{r2, r3}
 800316a:	b530      	push	{r4, r5, lr}
 800316c:	4b17      	ldr	r3, [pc, #92]	@ (80031cc <sniprintf+0x64>)
 800316e:	1e0c      	subs	r4, r1, #0
 8003170:	681d      	ldr	r5, [r3, #0]
 8003172:	b09d      	sub	sp, #116	@ 0x74
 8003174:	da08      	bge.n	8003188 <sniprintf+0x20>
 8003176:	238b      	movs	r3, #139	@ 0x8b
 8003178:	602b      	str	r3, [r5, #0]
 800317a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800317e:	b01d      	add	sp, #116	@ 0x74
 8003180:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003184:	b002      	add	sp, #8
 8003186:	4770      	bx	lr
 8003188:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800318c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003190:	bf14      	ite	ne
 8003192:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8003196:	4623      	moveq	r3, r4
 8003198:	9304      	str	r3, [sp, #16]
 800319a:	9307      	str	r3, [sp, #28]
 800319c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031a0:	9002      	str	r0, [sp, #8]
 80031a2:	9006      	str	r0, [sp, #24]
 80031a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80031a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80031aa:	ab21      	add	r3, sp, #132	@ 0x84
 80031ac:	a902      	add	r1, sp, #8
 80031ae:	4628      	mov	r0, r5
 80031b0:	9301      	str	r3, [sp, #4]
 80031b2:	f000 f98d 	bl	80034d0 <_svfiprintf_r>
 80031b6:	1c43      	adds	r3, r0, #1
 80031b8:	bfbc      	itt	lt
 80031ba:	238b      	movlt	r3, #139	@ 0x8b
 80031bc:	602b      	strlt	r3, [r5, #0]
 80031be:	2c00      	cmp	r4, #0
 80031c0:	d0dd      	beq.n	800317e <sniprintf+0x16>
 80031c2:	9b02      	ldr	r3, [sp, #8]
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
 80031c8:	e7d9      	b.n	800317e <sniprintf+0x16>
 80031ca:	bf00      	nop
 80031cc:	2000000c 	.word	0x2000000c

080031d0 <__errno>:
 80031d0:	4b01      	ldr	r3, [pc, #4]	@ (80031d8 <__errno+0x8>)
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	2000000c 	.word	0x2000000c

080031dc <__libc_init_array>:
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	4d0d      	ldr	r5, [pc, #52]	@ (8003214 <__libc_init_array+0x38>)
 80031e0:	4c0d      	ldr	r4, [pc, #52]	@ (8003218 <__libc_init_array+0x3c>)
 80031e2:	1b64      	subs	r4, r4, r5
 80031e4:	10a4      	asrs	r4, r4, #2
 80031e6:	2600      	movs	r6, #0
 80031e8:	42a6      	cmp	r6, r4
 80031ea:	d109      	bne.n	8003200 <__libc_init_array+0x24>
 80031ec:	4d0b      	ldr	r5, [pc, #44]	@ (800321c <__libc_init_array+0x40>)
 80031ee:	4c0c      	ldr	r4, [pc, #48]	@ (8003220 <__libc_init_array+0x44>)
 80031f0:	f000 fc66 	bl	8003ac0 <_init>
 80031f4:	1b64      	subs	r4, r4, r5
 80031f6:	10a4      	asrs	r4, r4, #2
 80031f8:	2600      	movs	r6, #0
 80031fa:	42a6      	cmp	r6, r4
 80031fc:	d105      	bne.n	800320a <__libc_init_array+0x2e>
 80031fe:	bd70      	pop	{r4, r5, r6, pc}
 8003200:	f855 3b04 	ldr.w	r3, [r5], #4
 8003204:	4798      	blx	r3
 8003206:	3601      	adds	r6, #1
 8003208:	e7ee      	b.n	80031e8 <__libc_init_array+0xc>
 800320a:	f855 3b04 	ldr.w	r3, [r5], #4
 800320e:	4798      	blx	r3
 8003210:	3601      	adds	r6, #1
 8003212:	e7f2      	b.n	80031fa <__libc_init_array+0x1e>
 8003214:	08003b48 	.word	0x08003b48
 8003218:	08003b48 	.word	0x08003b48
 800321c:	08003b48 	.word	0x08003b48
 8003220:	08003b4c 	.word	0x08003b4c

08003224 <__retarget_lock_acquire_recursive>:
 8003224:	4770      	bx	lr

08003226 <__retarget_lock_release_recursive>:
 8003226:	4770      	bx	lr

08003228 <_free_r>:
 8003228:	b538      	push	{r3, r4, r5, lr}
 800322a:	4605      	mov	r5, r0
 800322c:	2900      	cmp	r1, #0
 800322e:	d041      	beq.n	80032b4 <_free_r+0x8c>
 8003230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003234:	1f0c      	subs	r4, r1, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	bfb8      	it	lt
 800323a:	18e4      	addlt	r4, r4, r3
 800323c:	f000 f8e0 	bl	8003400 <__malloc_lock>
 8003240:	4a1d      	ldr	r2, [pc, #116]	@ (80032b8 <_free_r+0x90>)
 8003242:	6813      	ldr	r3, [r2, #0]
 8003244:	b933      	cbnz	r3, 8003254 <_free_r+0x2c>
 8003246:	6063      	str	r3, [r4, #4]
 8003248:	6014      	str	r4, [r2, #0]
 800324a:	4628      	mov	r0, r5
 800324c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003250:	f000 b8dc 	b.w	800340c <__malloc_unlock>
 8003254:	42a3      	cmp	r3, r4
 8003256:	d908      	bls.n	800326a <_free_r+0x42>
 8003258:	6820      	ldr	r0, [r4, #0]
 800325a:	1821      	adds	r1, r4, r0
 800325c:	428b      	cmp	r3, r1
 800325e:	bf01      	itttt	eq
 8003260:	6819      	ldreq	r1, [r3, #0]
 8003262:	685b      	ldreq	r3, [r3, #4]
 8003264:	1809      	addeq	r1, r1, r0
 8003266:	6021      	streq	r1, [r4, #0]
 8003268:	e7ed      	b.n	8003246 <_free_r+0x1e>
 800326a:	461a      	mov	r2, r3
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	b10b      	cbz	r3, 8003274 <_free_r+0x4c>
 8003270:	42a3      	cmp	r3, r4
 8003272:	d9fa      	bls.n	800326a <_free_r+0x42>
 8003274:	6811      	ldr	r1, [r2, #0]
 8003276:	1850      	adds	r0, r2, r1
 8003278:	42a0      	cmp	r0, r4
 800327a:	d10b      	bne.n	8003294 <_free_r+0x6c>
 800327c:	6820      	ldr	r0, [r4, #0]
 800327e:	4401      	add	r1, r0
 8003280:	1850      	adds	r0, r2, r1
 8003282:	4283      	cmp	r3, r0
 8003284:	6011      	str	r1, [r2, #0]
 8003286:	d1e0      	bne.n	800324a <_free_r+0x22>
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	6053      	str	r3, [r2, #4]
 800328e:	4408      	add	r0, r1
 8003290:	6010      	str	r0, [r2, #0]
 8003292:	e7da      	b.n	800324a <_free_r+0x22>
 8003294:	d902      	bls.n	800329c <_free_r+0x74>
 8003296:	230c      	movs	r3, #12
 8003298:	602b      	str	r3, [r5, #0]
 800329a:	e7d6      	b.n	800324a <_free_r+0x22>
 800329c:	6820      	ldr	r0, [r4, #0]
 800329e:	1821      	adds	r1, r4, r0
 80032a0:	428b      	cmp	r3, r1
 80032a2:	bf04      	itt	eq
 80032a4:	6819      	ldreq	r1, [r3, #0]
 80032a6:	685b      	ldreq	r3, [r3, #4]
 80032a8:	6063      	str	r3, [r4, #4]
 80032aa:	bf04      	itt	eq
 80032ac:	1809      	addeq	r1, r1, r0
 80032ae:	6021      	streq	r1, [r4, #0]
 80032b0:	6054      	str	r4, [r2, #4]
 80032b2:	e7ca      	b.n	800324a <_free_r+0x22>
 80032b4:	bd38      	pop	{r3, r4, r5, pc}
 80032b6:	bf00      	nop
 80032b8:	2000027c 	.word	0x2000027c

080032bc <sbrk_aligned>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	4e0f      	ldr	r6, [pc, #60]	@ (80032fc <sbrk_aligned+0x40>)
 80032c0:	460c      	mov	r4, r1
 80032c2:	6831      	ldr	r1, [r6, #0]
 80032c4:	4605      	mov	r5, r0
 80032c6:	b911      	cbnz	r1, 80032ce <sbrk_aligned+0x12>
 80032c8:	f000 fba6 	bl	8003a18 <_sbrk_r>
 80032cc:	6030      	str	r0, [r6, #0]
 80032ce:	4621      	mov	r1, r4
 80032d0:	4628      	mov	r0, r5
 80032d2:	f000 fba1 	bl	8003a18 <_sbrk_r>
 80032d6:	1c43      	adds	r3, r0, #1
 80032d8:	d103      	bne.n	80032e2 <sbrk_aligned+0x26>
 80032da:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80032de:	4620      	mov	r0, r4
 80032e0:	bd70      	pop	{r4, r5, r6, pc}
 80032e2:	1cc4      	adds	r4, r0, #3
 80032e4:	f024 0403 	bic.w	r4, r4, #3
 80032e8:	42a0      	cmp	r0, r4
 80032ea:	d0f8      	beq.n	80032de <sbrk_aligned+0x22>
 80032ec:	1a21      	subs	r1, r4, r0
 80032ee:	4628      	mov	r0, r5
 80032f0:	f000 fb92 	bl	8003a18 <_sbrk_r>
 80032f4:	3001      	adds	r0, #1
 80032f6:	d1f2      	bne.n	80032de <sbrk_aligned+0x22>
 80032f8:	e7ef      	b.n	80032da <sbrk_aligned+0x1e>
 80032fa:	bf00      	nop
 80032fc:	20000278 	.word	0x20000278

08003300 <_malloc_r>:
 8003300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003304:	1ccd      	adds	r5, r1, #3
 8003306:	f025 0503 	bic.w	r5, r5, #3
 800330a:	3508      	adds	r5, #8
 800330c:	2d0c      	cmp	r5, #12
 800330e:	bf38      	it	cc
 8003310:	250c      	movcc	r5, #12
 8003312:	2d00      	cmp	r5, #0
 8003314:	4606      	mov	r6, r0
 8003316:	db01      	blt.n	800331c <_malloc_r+0x1c>
 8003318:	42a9      	cmp	r1, r5
 800331a:	d904      	bls.n	8003326 <_malloc_r+0x26>
 800331c:	230c      	movs	r3, #12
 800331e:	6033      	str	r3, [r6, #0]
 8003320:	2000      	movs	r0, #0
 8003322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003326:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80033fc <_malloc_r+0xfc>
 800332a:	f000 f869 	bl	8003400 <__malloc_lock>
 800332e:	f8d8 3000 	ldr.w	r3, [r8]
 8003332:	461c      	mov	r4, r3
 8003334:	bb44      	cbnz	r4, 8003388 <_malloc_r+0x88>
 8003336:	4629      	mov	r1, r5
 8003338:	4630      	mov	r0, r6
 800333a:	f7ff ffbf 	bl	80032bc <sbrk_aligned>
 800333e:	1c43      	adds	r3, r0, #1
 8003340:	4604      	mov	r4, r0
 8003342:	d158      	bne.n	80033f6 <_malloc_r+0xf6>
 8003344:	f8d8 4000 	ldr.w	r4, [r8]
 8003348:	4627      	mov	r7, r4
 800334a:	2f00      	cmp	r7, #0
 800334c:	d143      	bne.n	80033d6 <_malloc_r+0xd6>
 800334e:	2c00      	cmp	r4, #0
 8003350:	d04b      	beq.n	80033ea <_malloc_r+0xea>
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	4639      	mov	r1, r7
 8003356:	4630      	mov	r0, r6
 8003358:	eb04 0903 	add.w	r9, r4, r3
 800335c:	f000 fb5c 	bl	8003a18 <_sbrk_r>
 8003360:	4581      	cmp	r9, r0
 8003362:	d142      	bne.n	80033ea <_malloc_r+0xea>
 8003364:	6821      	ldr	r1, [r4, #0]
 8003366:	1a6d      	subs	r5, r5, r1
 8003368:	4629      	mov	r1, r5
 800336a:	4630      	mov	r0, r6
 800336c:	f7ff ffa6 	bl	80032bc <sbrk_aligned>
 8003370:	3001      	adds	r0, #1
 8003372:	d03a      	beq.n	80033ea <_malloc_r+0xea>
 8003374:	6823      	ldr	r3, [r4, #0]
 8003376:	442b      	add	r3, r5
 8003378:	6023      	str	r3, [r4, #0]
 800337a:	f8d8 3000 	ldr.w	r3, [r8]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	bb62      	cbnz	r2, 80033dc <_malloc_r+0xdc>
 8003382:	f8c8 7000 	str.w	r7, [r8]
 8003386:	e00f      	b.n	80033a8 <_malloc_r+0xa8>
 8003388:	6822      	ldr	r2, [r4, #0]
 800338a:	1b52      	subs	r2, r2, r5
 800338c:	d420      	bmi.n	80033d0 <_malloc_r+0xd0>
 800338e:	2a0b      	cmp	r2, #11
 8003390:	d917      	bls.n	80033c2 <_malloc_r+0xc2>
 8003392:	1961      	adds	r1, r4, r5
 8003394:	42a3      	cmp	r3, r4
 8003396:	6025      	str	r5, [r4, #0]
 8003398:	bf18      	it	ne
 800339a:	6059      	strne	r1, [r3, #4]
 800339c:	6863      	ldr	r3, [r4, #4]
 800339e:	bf08      	it	eq
 80033a0:	f8c8 1000 	streq.w	r1, [r8]
 80033a4:	5162      	str	r2, [r4, r5]
 80033a6:	604b      	str	r3, [r1, #4]
 80033a8:	4630      	mov	r0, r6
 80033aa:	f000 f82f 	bl	800340c <__malloc_unlock>
 80033ae:	f104 000b 	add.w	r0, r4, #11
 80033b2:	1d23      	adds	r3, r4, #4
 80033b4:	f020 0007 	bic.w	r0, r0, #7
 80033b8:	1ac2      	subs	r2, r0, r3
 80033ba:	bf1c      	itt	ne
 80033bc:	1a1b      	subne	r3, r3, r0
 80033be:	50a3      	strne	r3, [r4, r2]
 80033c0:	e7af      	b.n	8003322 <_malloc_r+0x22>
 80033c2:	6862      	ldr	r2, [r4, #4]
 80033c4:	42a3      	cmp	r3, r4
 80033c6:	bf0c      	ite	eq
 80033c8:	f8c8 2000 	streq.w	r2, [r8]
 80033cc:	605a      	strne	r2, [r3, #4]
 80033ce:	e7eb      	b.n	80033a8 <_malloc_r+0xa8>
 80033d0:	4623      	mov	r3, r4
 80033d2:	6864      	ldr	r4, [r4, #4]
 80033d4:	e7ae      	b.n	8003334 <_malloc_r+0x34>
 80033d6:	463c      	mov	r4, r7
 80033d8:	687f      	ldr	r7, [r7, #4]
 80033da:	e7b6      	b.n	800334a <_malloc_r+0x4a>
 80033dc:	461a      	mov	r2, r3
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	42a3      	cmp	r3, r4
 80033e2:	d1fb      	bne.n	80033dc <_malloc_r+0xdc>
 80033e4:	2300      	movs	r3, #0
 80033e6:	6053      	str	r3, [r2, #4]
 80033e8:	e7de      	b.n	80033a8 <_malloc_r+0xa8>
 80033ea:	230c      	movs	r3, #12
 80033ec:	6033      	str	r3, [r6, #0]
 80033ee:	4630      	mov	r0, r6
 80033f0:	f000 f80c 	bl	800340c <__malloc_unlock>
 80033f4:	e794      	b.n	8003320 <_malloc_r+0x20>
 80033f6:	6005      	str	r5, [r0, #0]
 80033f8:	e7d6      	b.n	80033a8 <_malloc_r+0xa8>
 80033fa:	bf00      	nop
 80033fc:	2000027c 	.word	0x2000027c

08003400 <__malloc_lock>:
 8003400:	4801      	ldr	r0, [pc, #4]	@ (8003408 <__malloc_lock+0x8>)
 8003402:	f7ff bf0f 	b.w	8003224 <__retarget_lock_acquire_recursive>
 8003406:	bf00      	nop
 8003408:	20000274 	.word	0x20000274

0800340c <__malloc_unlock>:
 800340c:	4801      	ldr	r0, [pc, #4]	@ (8003414 <__malloc_unlock+0x8>)
 800340e:	f7ff bf0a 	b.w	8003226 <__retarget_lock_release_recursive>
 8003412:	bf00      	nop
 8003414:	20000274 	.word	0x20000274

08003418 <__ssputs_r>:
 8003418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800341c:	688e      	ldr	r6, [r1, #8]
 800341e:	461f      	mov	r7, r3
 8003420:	42be      	cmp	r6, r7
 8003422:	680b      	ldr	r3, [r1, #0]
 8003424:	4682      	mov	sl, r0
 8003426:	460c      	mov	r4, r1
 8003428:	4690      	mov	r8, r2
 800342a:	d82d      	bhi.n	8003488 <__ssputs_r+0x70>
 800342c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003430:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003434:	d026      	beq.n	8003484 <__ssputs_r+0x6c>
 8003436:	6965      	ldr	r5, [r4, #20]
 8003438:	6909      	ldr	r1, [r1, #16]
 800343a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800343e:	eba3 0901 	sub.w	r9, r3, r1
 8003442:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003446:	1c7b      	adds	r3, r7, #1
 8003448:	444b      	add	r3, r9
 800344a:	106d      	asrs	r5, r5, #1
 800344c:	429d      	cmp	r5, r3
 800344e:	bf38      	it	cc
 8003450:	461d      	movcc	r5, r3
 8003452:	0553      	lsls	r3, r2, #21
 8003454:	d527      	bpl.n	80034a6 <__ssputs_r+0x8e>
 8003456:	4629      	mov	r1, r5
 8003458:	f7ff ff52 	bl	8003300 <_malloc_r>
 800345c:	4606      	mov	r6, r0
 800345e:	b360      	cbz	r0, 80034ba <__ssputs_r+0xa2>
 8003460:	6921      	ldr	r1, [r4, #16]
 8003462:	464a      	mov	r2, r9
 8003464:	f000 fae8 	bl	8003a38 <memcpy>
 8003468:	89a3      	ldrh	r3, [r4, #12]
 800346a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800346e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003472:	81a3      	strh	r3, [r4, #12]
 8003474:	6126      	str	r6, [r4, #16]
 8003476:	6165      	str	r5, [r4, #20]
 8003478:	444e      	add	r6, r9
 800347a:	eba5 0509 	sub.w	r5, r5, r9
 800347e:	6026      	str	r6, [r4, #0]
 8003480:	60a5      	str	r5, [r4, #8]
 8003482:	463e      	mov	r6, r7
 8003484:	42be      	cmp	r6, r7
 8003486:	d900      	bls.n	800348a <__ssputs_r+0x72>
 8003488:	463e      	mov	r6, r7
 800348a:	6820      	ldr	r0, [r4, #0]
 800348c:	4632      	mov	r2, r6
 800348e:	4641      	mov	r1, r8
 8003490:	f000 faa8 	bl	80039e4 <memmove>
 8003494:	68a3      	ldr	r3, [r4, #8]
 8003496:	1b9b      	subs	r3, r3, r6
 8003498:	60a3      	str	r3, [r4, #8]
 800349a:	6823      	ldr	r3, [r4, #0]
 800349c:	4433      	add	r3, r6
 800349e:	6023      	str	r3, [r4, #0]
 80034a0:	2000      	movs	r0, #0
 80034a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034a6:	462a      	mov	r2, r5
 80034a8:	f000 fad4 	bl	8003a54 <_realloc_r>
 80034ac:	4606      	mov	r6, r0
 80034ae:	2800      	cmp	r0, #0
 80034b0:	d1e0      	bne.n	8003474 <__ssputs_r+0x5c>
 80034b2:	6921      	ldr	r1, [r4, #16]
 80034b4:	4650      	mov	r0, sl
 80034b6:	f7ff feb7 	bl	8003228 <_free_r>
 80034ba:	230c      	movs	r3, #12
 80034bc:	f8ca 3000 	str.w	r3, [sl]
 80034c0:	89a3      	ldrh	r3, [r4, #12]
 80034c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034c6:	81a3      	strh	r3, [r4, #12]
 80034c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034cc:	e7e9      	b.n	80034a2 <__ssputs_r+0x8a>
	...

080034d0 <_svfiprintf_r>:
 80034d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d4:	4698      	mov	r8, r3
 80034d6:	898b      	ldrh	r3, [r1, #12]
 80034d8:	061b      	lsls	r3, r3, #24
 80034da:	b09d      	sub	sp, #116	@ 0x74
 80034dc:	4607      	mov	r7, r0
 80034de:	460d      	mov	r5, r1
 80034e0:	4614      	mov	r4, r2
 80034e2:	d510      	bpl.n	8003506 <_svfiprintf_r+0x36>
 80034e4:	690b      	ldr	r3, [r1, #16]
 80034e6:	b973      	cbnz	r3, 8003506 <_svfiprintf_r+0x36>
 80034e8:	2140      	movs	r1, #64	@ 0x40
 80034ea:	f7ff ff09 	bl	8003300 <_malloc_r>
 80034ee:	6028      	str	r0, [r5, #0]
 80034f0:	6128      	str	r0, [r5, #16]
 80034f2:	b930      	cbnz	r0, 8003502 <_svfiprintf_r+0x32>
 80034f4:	230c      	movs	r3, #12
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034fc:	b01d      	add	sp, #116	@ 0x74
 80034fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003502:	2340      	movs	r3, #64	@ 0x40
 8003504:	616b      	str	r3, [r5, #20]
 8003506:	2300      	movs	r3, #0
 8003508:	9309      	str	r3, [sp, #36]	@ 0x24
 800350a:	2320      	movs	r3, #32
 800350c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003510:	f8cd 800c 	str.w	r8, [sp, #12]
 8003514:	2330      	movs	r3, #48	@ 0x30
 8003516:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80036b4 <_svfiprintf_r+0x1e4>
 800351a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800351e:	f04f 0901 	mov.w	r9, #1
 8003522:	4623      	mov	r3, r4
 8003524:	469a      	mov	sl, r3
 8003526:	f813 2b01 	ldrb.w	r2, [r3], #1
 800352a:	b10a      	cbz	r2, 8003530 <_svfiprintf_r+0x60>
 800352c:	2a25      	cmp	r2, #37	@ 0x25
 800352e:	d1f9      	bne.n	8003524 <_svfiprintf_r+0x54>
 8003530:	ebba 0b04 	subs.w	fp, sl, r4
 8003534:	d00b      	beq.n	800354e <_svfiprintf_r+0x7e>
 8003536:	465b      	mov	r3, fp
 8003538:	4622      	mov	r2, r4
 800353a:	4629      	mov	r1, r5
 800353c:	4638      	mov	r0, r7
 800353e:	f7ff ff6b 	bl	8003418 <__ssputs_r>
 8003542:	3001      	adds	r0, #1
 8003544:	f000 80a7 	beq.w	8003696 <_svfiprintf_r+0x1c6>
 8003548:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800354a:	445a      	add	r2, fp
 800354c:	9209      	str	r2, [sp, #36]	@ 0x24
 800354e:	f89a 3000 	ldrb.w	r3, [sl]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 809f 	beq.w	8003696 <_svfiprintf_r+0x1c6>
 8003558:	2300      	movs	r3, #0
 800355a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800355e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003562:	f10a 0a01 	add.w	sl, sl, #1
 8003566:	9304      	str	r3, [sp, #16]
 8003568:	9307      	str	r3, [sp, #28]
 800356a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800356e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003570:	4654      	mov	r4, sl
 8003572:	2205      	movs	r2, #5
 8003574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003578:	484e      	ldr	r0, [pc, #312]	@ (80036b4 <_svfiprintf_r+0x1e4>)
 800357a:	f7fc fe41 	bl	8000200 <memchr>
 800357e:	9a04      	ldr	r2, [sp, #16]
 8003580:	b9d8      	cbnz	r0, 80035ba <_svfiprintf_r+0xea>
 8003582:	06d0      	lsls	r0, r2, #27
 8003584:	bf44      	itt	mi
 8003586:	2320      	movmi	r3, #32
 8003588:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800358c:	0711      	lsls	r1, r2, #28
 800358e:	bf44      	itt	mi
 8003590:	232b      	movmi	r3, #43	@ 0x2b
 8003592:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003596:	f89a 3000 	ldrb.w	r3, [sl]
 800359a:	2b2a      	cmp	r3, #42	@ 0x2a
 800359c:	d015      	beq.n	80035ca <_svfiprintf_r+0xfa>
 800359e:	9a07      	ldr	r2, [sp, #28]
 80035a0:	4654      	mov	r4, sl
 80035a2:	2000      	movs	r0, #0
 80035a4:	f04f 0c0a 	mov.w	ip, #10
 80035a8:	4621      	mov	r1, r4
 80035aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035ae:	3b30      	subs	r3, #48	@ 0x30
 80035b0:	2b09      	cmp	r3, #9
 80035b2:	d94b      	bls.n	800364c <_svfiprintf_r+0x17c>
 80035b4:	b1b0      	cbz	r0, 80035e4 <_svfiprintf_r+0x114>
 80035b6:	9207      	str	r2, [sp, #28]
 80035b8:	e014      	b.n	80035e4 <_svfiprintf_r+0x114>
 80035ba:	eba0 0308 	sub.w	r3, r0, r8
 80035be:	fa09 f303 	lsl.w	r3, r9, r3
 80035c2:	4313      	orrs	r3, r2
 80035c4:	9304      	str	r3, [sp, #16]
 80035c6:	46a2      	mov	sl, r4
 80035c8:	e7d2      	b.n	8003570 <_svfiprintf_r+0xa0>
 80035ca:	9b03      	ldr	r3, [sp, #12]
 80035cc:	1d19      	adds	r1, r3, #4
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	9103      	str	r1, [sp, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	bfbb      	ittet	lt
 80035d6:	425b      	neglt	r3, r3
 80035d8:	f042 0202 	orrlt.w	r2, r2, #2
 80035dc:	9307      	strge	r3, [sp, #28]
 80035de:	9307      	strlt	r3, [sp, #28]
 80035e0:	bfb8      	it	lt
 80035e2:	9204      	strlt	r2, [sp, #16]
 80035e4:	7823      	ldrb	r3, [r4, #0]
 80035e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80035e8:	d10a      	bne.n	8003600 <_svfiprintf_r+0x130>
 80035ea:	7863      	ldrb	r3, [r4, #1]
 80035ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80035ee:	d132      	bne.n	8003656 <_svfiprintf_r+0x186>
 80035f0:	9b03      	ldr	r3, [sp, #12]
 80035f2:	1d1a      	adds	r2, r3, #4
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	9203      	str	r2, [sp, #12]
 80035f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035fc:	3402      	adds	r4, #2
 80035fe:	9305      	str	r3, [sp, #20]
 8003600:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80036c4 <_svfiprintf_r+0x1f4>
 8003604:	7821      	ldrb	r1, [r4, #0]
 8003606:	2203      	movs	r2, #3
 8003608:	4650      	mov	r0, sl
 800360a:	f7fc fdf9 	bl	8000200 <memchr>
 800360e:	b138      	cbz	r0, 8003620 <_svfiprintf_r+0x150>
 8003610:	9b04      	ldr	r3, [sp, #16]
 8003612:	eba0 000a 	sub.w	r0, r0, sl
 8003616:	2240      	movs	r2, #64	@ 0x40
 8003618:	4082      	lsls	r2, r0
 800361a:	4313      	orrs	r3, r2
 800361c:	3401      	adds	r4, #1
 800361e:	9304      	str	r3, [sp, #16]
 8003620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003624:	4824      	ldr	r0, [pc, #144]	@ (80036b8 <_svfiprintf_r+0x1e8>)
 8003626:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800362a:	2206      	movs	r2, #6
 800362c:	f7fc fde8 	bl	8000200 <memchr>
 8003630:	2800      	cmp	r0, #0
 8003632:	d036      	beq.n	80036a2 <_svfiprintf_r+0x1d2>
 8003634:	4b21      	ldr	r3, [pc, #132]	@ (80036bc <_svfiprintf_r+0x1ec>)
 8003636:	bb1b      	cbnz	r3, 8003680 <_svfiprintf_r+0x1b0>
 8003638:	9b03      	ldr	r3, [sp, #12]
 800363a:	3307      	adds	r3, #7
 800363c:	f023 0307 	bic.w	r3, r3, #7
 8003640:	3308      	adds	r3, #8
 8003642:	9303      	str	r3, [sp, #12]
 8003644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003646:	4433      	add	r3, r6
 8003648:	9309      	str	r3, [sp, #36]	@ 0x24
 800364a:	e76a      	b.n	8003522 <_svfiprintf_r+0x52>
 800364c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003650:	460c      	mov	r4, r1
 8003652:	2001      	movs	r0, #1
 8003654:	e7a8      	b.n	80035a8 <_svfiprintf_r+0xd8>
 8003656:	2300      	movs	r3, #0
 8003658:	3401      	adds	r4, #1
 800365a:	9305      	str	r3, [sp, #20]
 800365c:	4619      	mov	r1, r3
 800365e:	f04f 0c0a 	mov.w	ip, #10
 8003662:	4620      	mov	r0, r4
 8003664:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003668:	3a30      	subs	r2, #48	@ 0x30
 800366a:	2a09      	cmp	r2, #9
 800366c:	d903      	bls.n	8003676 <_svfiprintf_r+0x1a6>
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0c6      	beq.n	8003600 <_svfiprintf_r+0x130>
 8003672:	9105      	str	r1, [sp, #20]
 8003674:	e7c4      	b.n	8003600 <_svfiprintf_r+0x130>
 8003676:	fb0c 2101 	mla	r1, ip, r1, r2
 800367a:	4604      	mov	r4, r0
 800367c:	2301      	movs	r3, #1
 800367e:	e7f0      	b.n	8003662 <_svfiprintf_r+0x192>
 8003680:	ab03      	add	r3, sp, #12
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	462a      	mov	r2, r5
 8003686:	4b0e      	ldr	r3, [pc, #56]	@ (80036c0 <_svfiprintf_r+0x1f0>)
 8003688:	a904      	add	r1, sp, #16
 800368a:	4638      	mov	r0, r7
 800368c:	f3af 8000 	nop.w
 8003690:	1c42      	adds	r2, r0, #1
 8003692:	4606      	mov	r6, r0
 8003694:	d1d6      	bne.n	8003644 <_svfiprintf_r+0x174>
 8003696:	89ab      	ldrh	r3, [r5, #12]
 8003698:	065b      	lsls	r3, r3, #25
 800369a:	f53f af2d 	bmi.w	80034f8 <_svfiprintf_r+0x28>
 800369e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80036a0:	e72c      	b.n	80034fc <_svfiprintf_r+0x2c>
 80036a2:	ab03      	add	r3, sp, #12
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	462a      	mov	r2, r5
 80036a8:	4b05      	ldr	r3, [pc, #20]	@ (80036c0 <_svfiprintf_r+0x1f0>)
 80036aa:	a904      	add	r1, sp, #16
 80036ac:	4638      	mov	r0, r7
 80036ae:	f000 f879 	bl	80037a4 <_printf_i>
 80036b2:	e7ed      	b.n	8003690 <_svfiprintf_r+0x1c0>
 80036b4:	08003b0c 	.word	0x08003b0c
 80036b8:	08003b16 	.word	0x08003b16
 80036bc:	00000000 	.word	0x00000000
 80036c0:	08003419 	.word	0x08003419
 80036c4:	08003b12 	.word	0x08003b12

080036c8 <_printf_common>:
 80036c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036cc:	4616      	mov	r6, r2
 80036ce:	4698      	mov	r8, r3
 80036d0:	688a      	ldr	r2, [r1, #8]
 80036d2:	690b      	ldr	r3, [r1, #16]
 80036d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036d8:	4293      	cmp	r3, r2
 80036da:	bfb8      	it	lt
 80036dc:	4613      	movlt	r3, r2
 80036de:	6033      	str	r3, [r6, #0]
 80036e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036e4:	4607      	mov	r7, r0
 80036e6:	460c      	mov	r4, r1
 80036e8:	b10a      	cbz	r2, 80036ee <_printf_common+0x26>
 80036ea:	3301      	adds	r3, #1
 80036ec:	6033      	str	r3, [r6, #0]
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	0699      	lsls	r1, r3, #26
 80036f2:	bf42      	ittt	mi
 80036f4:	6833      	ldrmi	r3, [r6, #0]
 80036f6:	3302      	addmi	r3, #2
 80036f8:	6033      	strmi	r3, [r6, #0]
 80036fa:	6825      	ldr	r5, [r4, #0]
 80036fc:	f015 0506 	ands.w	r5, r5, #6
 8003700:	d106      	bne.n	8003710 <_printf_common+0x48>
 8003702:	f104 0a19 	add.w	sl, r4, #25
 8003706:	68e3      	ldr	r3, [r4, #12]
 8003708:	6832      	ldr	r2, [r6, #0]
 800370a:	1a9b      	subs	r3, r3, r2
 800370c:	42ab      	cmp	r3, r5
 800370e:	dc26      	bgt.n	800375e <_printf_common+0x96>
 8003710:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003714:	6822      	ldr	r2, [r4, #0]
 8003716:	3b00      	subs	r3, #0
 8003718:	bf18      	it	ne
 800371a:	2301      	movne	r3, #1
 800371c:	0692      	lsls	r2, r2, #26
 800371e:	d42b      	bmi.n	8003778 <_printf_common+0xb0>
 8003720:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003724:	4641      	mov	r1, r8
 8003726:	4638      	mov	r0, r7
 8003728:	47c8      	blx	r9
 800372a:	3001      	adds	r0, #1
 800372c:	d01e      	beq.n	800376c <_printf_common+0xa4>
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	6922      	ldr	r2, [r4, #16]
 8003732:	f003 0306 	and.w	r3, r3, #6
 8003736:	2b04      	cmp	r3, #4
 8003738:	bf02      	ittt	eq
 800373a:	68e5      	ldreq	r5, [r4, #12]
 800373c:	6833      	ldreq	r3, [r6, #0]
 800373e:	1aed      	subeq	r5, r5, r3
 8003740:	68a3      	ldr	r3, [r4, #8]
 8003742:	bf0c      	ite	eq
 8003744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003748:	2500      	movne	r5, #0
 800374a:	4293      	cmp	r3, r2
 800374c:	bfc4      	itt	gt
 800374e:	1a9b      	subgt	r3, r3, r2
 8003750:	18ed      	addgt	r5, r5, r3
 8003752:	2600      	movs	r6, #0
 8003754:	341a      	adds	r4, #26
 8003756:	42b5      	cmp	r5, r6
 8003758:	d11a      	bne.n	8003790 <_printf_common+0xc8>
 800375a:	2000      	movs	r0, #0
 800375c:	e008      	b.n	8003770 <_printf_common+0xa8>
 800375e:	2301      	movs	r3, #1
 8003760:	4652      	mov	r2, sl
 8003762:	4641      	mov	r1, r8
 8003764:	4638      	mov	r0, r7
 8003766:	47c8      	blx	r9
 8003768:	3001      	adds	r0, #1
 800376a:	d103      	bne.n	8003774 <_printf_common+0xac>
 800376c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003774:	3501      	adds	r5, #1
 8003776:	e7c6      	b.n	8003706 <_printf_common+0x3e>
 8003778:	18e1      	adds	r1, r4, r3
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	2030      	movs	r0, #48	@ 0x30
 800377e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003782:	4422      	add	r2, r4
 8003784:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003788:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800378c:	3302      	adds	r3, #2
 800378e:	e7c7      	b.n	8003720 <_printf_common+0x58>
 8003790:	2301      	movs	r3, #1
 8003792:	4622      	mov	r2, r4
 8003794:	4641      	mov	r1, r8
 8003796:	4638      	mov	r0, r7
 8003798:	47c8      	blx	r9
 800379a:	3001      	adds	r0, #1
 800379c:	d0e6      	beq.n	800376c <_printf_common+0xa4>
 800379e:	3601      	adds	r6, #1
 80037a0:	e7d9      	b.n	8003756 <_printf_common+0x8e>
	...

080037a4 <_printf_i>:
 80037a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037a8:	7e0f      	ldrb	r7, [r1, #24]
 80037aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037ac:	2f78      	cmp	r7, #120	@ 0x78
 80037ae:	4691      	mov	r9, r2
 80037b0:	4680      	mov	r8, r0
 80037b2:	460c      	mov	r4, r1
 80037b4:	469a      	mov	sl, r3
 80037b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037ba:	d807      	bhi.n	80037cc <_printf_i+0x28>
 80037bc:	2f62      	cmp	r7, #98	@ 0x62
 80037be:	d80a      	bhi.n	80037d6 <_printf_i+0x32>
 80037c0:	2f00      	cmp	r7, #0
 80037c2:	f000 80d2 	beq.w	800396a <_printf_i+0x1c6>
 80037c6:	2f58      	cmp	r7, #88	@ 0x58
 80037c8:	f000 80b9 	beq.w	800393e <_printf_i+0x19a>
 80037cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037d4:	e03a      	b.n	800384c <_printf_i+0xa8>
 80037d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037da:	2b15      	cmp	r3, #21
 80037dc:	d8f6      	bhi.n	80037cc <_printf_i+0x28>
 80037de:	a101      	add	r1, pc, #4	@ (adr r1, 80037e4 <_printf_i+0x40>)
 80037e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037e4:	0800383d 	.word	0x0800383d
 80037e8:	08003851 	.word	0x08003851
 80037ec:	080037cd 	.word	0x080037cd
 80037f0:	080037cd 	.word	0x080037cd
 80037f4:	080037cd 	.word	0x080037cd
 80037f8:	080037cd 	.word	0x080037cd
 80037fc:	08003851 	.word	0x08003851
 8003800:	080037cd 	.word	0x080037cd
 8003804:	080037cd 	.word	0x080037cd
 8003808:	080037cd 	.word	0x080037cd
 800380c:	080037cd 	.word	0x080037cd
 8003810:	08003951 	.word	0x08003951
 8003814:	0800387b 	.word	0x0800387b
 8003818:	0800390b 	.word	0x0800390b
 800381c:	080037cd 	.word	0x080037cd
 8003820:	080037cd 	.word	0x080037cd
 8003824:	08003973 	.word	0x08003973
 8003828:	080037cd 	.word	0x080037cd
 800382c:	0800387b 	.word	0x0800387b
 8003830:	080037cd 	.word	0x080037cd
 8003834:	080037cd 	.word	0x080037cd
 8003838:	08003913 	.word	0x08003913
 800383c:	6833      	ldr	r3, [r6, #0]
 800383e:	1d1a      	adds	r2, r3, #4
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6032      	str	r2, [r6, #0]
 8003844:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003848:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800384c:	2301      	movs	r3, #1
 800384e:	e09d      	b.n	800398c <_printf_i+0x1e8>
 8003850:	6833      	ldr	r3, [r6, #0]
 8003852:	6820      	ldr	r0, [r4, #0]
 8003854:	1d19      	adds	r1, r3, #4
 8003856:	6031      	str	r1, [r6, #0]
 8003858:	0606      	lsls	r6, r0, #24
 800385a:	d501      	bpl.n	8003860 <_printf_i+0xbc>
 800385c:	681d      	ldr	r5, [r3, #0]
 800385e:	e003      	b.n	8003868 <_printf_i+0xc4>
 8003860:	0645      	lsls	r5, r0, #25
 8003862:	d5fb      	bpl.n	800385c <_printf_i+0xb8>
 8003864:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003868:	2d00      	cmp	r5, #0
 800386a:	da03      	bge.n	8003874 <_printf_i+0xd0>
 800386c:	232d      	movs	r3, #45	@ 0x2d
 800386e:	426d      	negs	r5, r5
 8003870:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003874:	4859      	ldr	r0, [pc, #356]	@ (80039dc <_printf_i+0x238>)
 8003876:	230a      	movs	r3, #10
 8003878:	e011      	b.n	800389e <_printf_i+0xfa>
 800387a:	6821      	ldr	r1, [r4, #0]
 800387c:	6833      	ldr	r3, [r6, #0]
 800387e:	0608      	lsls	r0, r1, #24
 8003880:	f853 5b04 	ldr.w	r5, [r3], #4
 8003884:	d402      	bmi.n	800388c <_printf_i+0xe8>
 8003886:	0649      	lsls	r1, r1, #25
 8003888:	bf48      	it	mi
 800388a:	b2ad      	uxthmi	r5, r5
 800388c:	2f6f      	cmp	r7, #111	@ 0x6f
 800388e:	4853      	ldr	r0, [pc, #332]	@ (80039dc <_printf_i+0x238>)
 8003890:	6033      	str	r3, [r6, #0]
 8003892:	bf14      	ite	ne
 8003894:	230a      	movne	r3, #10
 8003896:	2308      	moveq	r3, #8
 8003898:	2100      	movs	r1, #0
 800389a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800389e:	6866      	ldr	r6, [r4, #4]
 80038a0:	60a6      	str	r6, [r4, #8]
 80038a2:	2e00      	cmp	r6, #0
 80038a4:	bfa2      	ittt	ge
 80038a6:	6821      	ldrge	r1, [r4, #0]
 80038a8:	f021 0104 	bicge.w	r1, r1, #4
 80038ac:	6021      	strge	r1, [r4, #0]
 80038ae:	b90d      	cbnz	r5, 80038b4 <_printf_i+0x110>
 80038b0:	2e00      	cmp	r6, #0
 80038b2:	d04b      	beq.n	800394c <_printf_i+0x1a8>
 80038b4:	4616      	mov	r6, r2
 80038b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80038ba:	fb03 5711 	mls	r7, r3, r1, r5
 80038be:	5dc7      	ldrb	r7, [r0, r7]
 80038c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038c4:	462f      	mov	r7, r5
 80038c6:	42bb      	cmp	r3, r7
 80038c8:	460d      	mov	r5, r1
 80038ca:	d9f4      	bls.n	80038b6 <_printf_i+0x112>
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d10b      	bne.n	80038e8 <_printf_i+0x144>
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	07df      	lsls	r7, r3, #31
 80038d4:	d508      	bpl.n	80038e8 <_printf_i+0x144>
 80038d6:	6923      	ldr	r3, [r4, #16]
 80038d8:	6861      	ldr	r1, [r4, #4]
 80038da:	4299      	cmp	r1, r3
 80038dc:	bfde      	ittt	le
 80038de:	2330      	movle	r3, #48	@ 0x30
 80038e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038e4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80038e8:	1b92      	subs	r2, r2, r6
 80038ea:	6122      	str	r2, [r4, #16]
 80038ec:	f8cd a000 	str.w	sl, [sp]
 80038f0:	464b      	mov	r3, r9
 80038f2:	aa03      	add	r2, sp, #12
 80038f4:	4621      	mov	r1, r4
 80038f6:	4640      	mov	r0, r8
 80038f8:	f7ff fee6 	bl	80036c8 <_printf_common>
 80038fc:	3001      	adds	r0, #1
 80038fe:	d14a      	bne.n	8003996 <_printf_i+0x1f2>
 8003900:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003904:	b004      	add	sp, #16
 8003906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	f043 0320 	orr.w	r3, r3, #32
 8003910:	6023      	str	r3, [r4, #0]
 8003912:	4833      	ldr	r0, [pc, #204]	@ (80039e0 <_printf_i+0x23c>)
 8003914:	2778      	movs	r7, #120	@ 0x78
 8003916:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	6831      	ldr	r1, [r6, #0]
 800391e:	061f      	lsls	r7, r3, #24
 8003920:	f851 5b04 	ldr.w	r5, [r1], #4
 8003924:	d402      	bmi.n	800392c <_printf_i+0x188>
 8003926:	065f      	lsls	r7, r3, #25
 8003928:	bf48      	it	mi
 800392a:	b2ad      	uxthmi	r5, r5
 800392c:	6031      	str	r1, [r6, #0]
 800392e:	07d9      	lsls	r1, r3, #31
 8003930:	bf44      	itt	mi
 8003932:	f043 0320 	orrmi.w	r3, r3, #32
 8003936:	6023      	strmi	r3, [r4, #0]
 8003938:	b11d      	cbz	r5, 8003942 <_printf_i+0x19e>
 800393a:	2310      	movs	r3, #16
 800393c:	e7ac      	b.n	8003898 <_printf_i+0xf4>
 800393e:	4827      	ldr	r0, [pc, #156]	@ (80039dc <_printf_i+0x238>)
 8003940:	e7e9      	b.n	8003916 <_printf_i+0x172>
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	f023 0320 	bic.w	r3, r3, #32
 8003948:	6023      	str	r3, [r4, #0]
 800394a:	e7f6      	b.n	800393a <_printf_i+0x196>
 800394c:	4616      	mov	r6, r2
 800394e:	e7bd      	b.n	80038cc <_printf_i+0x128>
 8003950:	6833      	ldr	r3, [r6, #0]
 8003952:	6825      	ldr	r5, [r4, #0]
 8003954:	6961      	ldr	r1, [r4, #20]
 8003956:	1d18      	adds	r0, r3, #4
 8003958:	6030      	str	r0, [r6, #0]
 800395a:	062e      	lsls	r6, r5, #24
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	d501      	bpl.n	8003964 <_printf_i+0x1c0>
 8003960:	6019      	str	r1, [r3, #0]
 8003962:	e002      	b.n	800396a <_printf_i+0x1c6>
 8003964:	0668      	lsls	r0, r5, #25
 8003966:	d5fb      	bpl.n	8003960 <_printf_i+0x1bc>
 8003968:	8019      	strh	r1, [r3, #0]
 800396a:	2300      	movs	r3, #0
 800396c:	6123      	str	r3, [r4, #16]
 800396e:	4616      	mov	r6, r2
 8003970:	e7bc      	b.n	80038ec <_printf_i+0x148>
 8003972:	6833      	ldr	r3, [r6, #0]
 8003974:	1d1a      	adds	r2, r3, #4
 8003976:	6032      	str	r2, [r6, #0]
 8003978:	681e      	ldr	r6, [r3, #0]
 800397a:	6862      	ldr	r2, [r4, #4]
 800397c:	2100      	movs	r1, #0
 800397e:	4630      	mov	r0, r6
 8003980:	f7fc fc3e 	bl	8000200 <memchr>
 8003984:	b108      	cbz	r0, 800398a <_printf_i+0x1e6>
 8003986:	1b80      	subs	r0, r0, r6
 8003988:	6060      	str	r0, [r4, #4]
 800398a:	6863      	ldr	r3, [r4, #4]
 800398c:	6123      	str	r3, [r4, #16]
 800398e:	2300      	movs	r3, #0
 8003990:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003994:	e7aa      	b.n	80038ec <_printf_i+0x148>
 8003996:	6923      	ldr	r3, [r4, #16]
 8003998:	4632      	mov	r2, r6
 800399a:	4649      	mov	r1, r9
 800399c:	4640      	mov	r0, r8
 800399e:	47d0      	blx	sl
 80039a0:	3001      	adds	r0, #1
 80039a2:	d0ad      	beq.n	8003900 <_printf_i+0x15c>
 80039a4:	6823      	ldr	r3, [r4, #0]
 80039a6:	079b      	lsls	r3, r3, #30
 80039a8:	d413      	bmi.n	80039d2 <_printf_i+0x22e>
 80039aa:	68e0      	ldr	r0, [r4, #12]
 80039ac:	9b03      	ldr	r3, [sp, #12]
 80039ae:	4298      	cmp	r0, r3
 80039b0:	bfb8      	it	lt
 80039b2:	4618      	movlt	r0, r3
 80039b4:	e7a6      	b.n	8003904 <_printf_i+0x160>
 80039b6:	2301      	movs	r3, #1
 80039b8:	4632      	mov	r2, r6
 80039ba:	4649      	mov	r1, r9
 80039bc:	4640      	mov	r0, r8
 80039be:	47d0      	blx	sl
 80039c0:	3001      	adds	r0, #1
 80039c2:	d09d      	beq.n	8003900 <_printf_i+0x15c>
 80039c4:	3501      	adds	r5, #1
 80039c6:	68e3      	ldr	r3, [r4, #12]
 80039c8:	9903      	ldr	r1, [sp, #12]
 80039ca:	1a5b      	subs	r3, r3, r1
 80039cc:	42ab      	cmp	r3, r5
 80039ce:	dcf2      	bgt.n	80039b6 <_printf_i+0x212>
 80039d0:	e7eb      	b.n	80039aa <_printf_i+0x206>
 80039d2:	2500      	movs	r5, #0
 80039d4:	f104 0619 	add.w	r6, r4, #25
 80039d8:	e7f5      	b.n	80039c6 <_printf_i+0x222>
 80039da:	bf00      	nop
 80039dc:	08003b1d 	.word	0x08003b1d
 80039e0:	08003b2e 	.word	0x08003b2e

080039e4 <memmove>:
 80039e4:	4288      	cmp	r0, r1
 80039e6:	b510      	push	{r4, lr}
 80039e8:	eb01 0402 	add.w	r4, r1, r2
 80039ec:	d902      	bls.n	80039f4 <memmove+0x10>
 80039ee:	4284      	cmp	r4, r0
 80039f0:	4623      	mov	r3, r4
 80039f2:	d807      	bhi.n	8003a04 <memmove+0x20>
 80039f4:	1e43      	subs	r3, r0, #1
 80039f6:	42a1      	cmp	r1, r4
 80039f8:	d008      	beq.n	8003a0c <memmove+0x28>
 80039fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a02:	e7f8      	b.n	80039f6 <memmove+0x12>
 8003a04:	4402      	add	r2, r0
 8003a06:	4601      	mov	r1, r0
 8003a08:	428a      	cmp	r2, r1
 8003a0a:	d100      	bne.n	8003a0e <memmove+0x2a>
 8003a0c:	bd10      	pop	{r4, pc}
 8003a0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a16:	e7f7      	b.n	8003a08 <memmove+0x24>

08003a18 <_sbrk_r>:
 8003a18:	b538      	push	{r3, r4, r5, lr}
 8003a1a:	4d06      	ldr	r5, [pc, #24]	@ (8003a34 <_sbrk_r+0x1c>)
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	4604      	mov	r4, r0
 8003a20:	4608      	mov	r0, r1
 8003a22:	602b      	str	r3, [r5, #0]
 8003a24:	f7fd f862 	bl	8000aec <_sbrk>
 8003a28:	1c43      	adds	r3, r0, #1
 8003a2a:	d102      	bne.n	8003a32 <_sbrk_r+0x1a>
 8003a2c:	682b      	ldr	r3, [r5, #0]
 8003a2e:	b103      	cbz	r3, 8003a32 <_sbrk_r+0x1a>
 8003a30:	6023      	str	r3, [r4, #0]
 8003a32:	bd38      	pop	{r3, r4, r5, pc}
 8003a34:	20000270 	.word	0x20000270

08003a38 <memcpy>:
 8003a38:	440a      	add	r2, r1
 8003a3a:	4291      	cmp	r1, r2
 8003a3c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003a40:	d100      	bne.n	8003a44 <memcpy+0xc>
 8003a42:	4770      	bx	lr
 8003a44:	b510      	push	{r4, lr}
 8003a46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a4e:	4291      	cmp	r1, r2
 8003a50:	d1f9      	bne.n	8003a46 <memcpy+0xe>
 8003a52:	bd10      	pop	{r4, pc}

08003a54 <_realloc_r>:
 8003a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a58:	4680      	mov	r8, r0
 8003a5a:	4615      	mov	r5, r2
 8003a5c:	460c      	mov	r4, r1
 8003a5e:	b921      	cbnz	r1, 8003a6a <_realloc_r+0x16>
 8003a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a64:	4611      	mov	r1, r2
 8003a66:	f7ff bc4b 	b.w	8003300 <_malloc_r>
 8003a6a:	b92a      	cbnz	r2, 8003a78 <_realloc_r+0x24>
 8003a6c:	f7ff fbdc 	bl	8003228 <_free_r>
 8003a70:	2400      	movs	r4, #0
 8003a72:	4620      	mov	r0, r4
 8003a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a78:	f000 f81a 	bl	8003ab0 <_malloc_usable_size_r>
 8003a7c:	4285      	cmp	r5, r0
 8003a7e:	4606      	mov	r6, r0
 8003a80:	d802      	bhi.n	8003a88 <_realloc_r+0x34>
 8003a82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003a86:	d8f4      	bhi.n	8003a72 <_realloc_r+0x1e>
 8003a88:	4629      	mov	r1, r5
 8003a8a:	4640      	mov	r0, r8
 8003a8c:	f7ff fc38 	bl	8003300 <_malloc_r>
 8003a90:	4607      	mov	r7, r0
 8003a92:	2800      	cmp	r0, #0
 8003a94:	d0ec      	beq.n	8003a70 <_realloc_r+0x1c>
 8003a96:	42b5      	cmp	r5, r6
 8003a98:	462a      	mov	r2, r5
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	bf28      	it	cs
 8003a9e:	4632      	movcs	r2, r6
 8003aa0:	f7ff ffca 	bl	8003a38 <memcpy>
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	4640      	mov	r0, r8
 8003aa8:	f7ff fbbe 	bl	8003228 <_free_r>
 8003aac:	463c      	mov	r4, r7
 8003aae:	e7e0      	b.n	8003a72 <_realloc_r+0x1e>

08003ab0 <_malloc_usable_size_r>:
 8003ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ab4:	1f18      	subs	r0, r3, #4
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	bfbc      	itt	lt
 8003aba:	580b      	ldrlt	r3, [r1, r0]
 8003abc:	18c0      	addlt	r0, r0, r3
 8003abe:	4770      	bx	lr

08003ac0 <_init>:
 8003ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac2:	bf00      	nop
 8003ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ac6:	bc08      	pop	{r3}
 8003ac8:	469e      	mov	lr, r3
 8003aca:	4770      	bx	lr

08003acc <_fini>:
 8003acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ace:	bf00      	nop
 8003ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ad2:	bc08      	pop	{r3}
 8003ad4:	469e      	mov	lr, r3
 8003ad6:	4770      	bx	lr
