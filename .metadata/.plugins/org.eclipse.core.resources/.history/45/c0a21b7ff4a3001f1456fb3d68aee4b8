/* Includes ------------------------------------------------------------------*/
#include "stm32f4xx_hal.h"
#include <stdio.h>
#include "main.h"
#include <string.h>
/* Private variables ---------------------------------------------------------*/
CAN_HandleTypeDef     CanHandle;
CAN_TxHeaderTypeDef   TxHeader;
CAN_RxHeaderTypeDef   RxHeader;
uint8_t               TxData[8];
uint8_t               RxData[8];
uint32_t              TxMailbox;

UART_HandleTypeDef    huart6;

/* Function prototypes -------------------------------------------------------*/
static void SystemClock_Config(void);
static void Error_Handler(void);
static void CAN_Config(void);
static void UART6_Config(void);
static void LED_Init(void);
static void LED_On(uint8_t led);
static void LED_Off(uint8_t led);

/* Main program --------------------------------------------------------------*/
int main(void)
{
  /* HAL library initialization */
  HAL_Init();

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();

  /* Initialize LEDs */
  LED_Init();

  /* Configure CAN */
  CAN_Config();

  /* Configure USART6 */
  UART6_Config();

  /* Transmit CAN message */
  TxHeader.StdId = 0x11;
  TxHeader.RTR = CAN_RTR_DATA;
  TxHeader.IDE = CAN_ID_STD;
  TxHeader.DLC = 2;
  TxHeader.TransmitGlobalTime = DISABLE;
  TxData[0] = 0xCA;
  TxData[1] = 0xFE;

  /* Request transmission */
  if (HAL_CAN_AddTxMessage(&CanHandle, &TxHeader, TxData, &TxMailbox) != HAL_OK)
  {
    Error_Handler();
  }

  /* Wait for transmission to complete */
  while (HAL_CAN_GetTxMailboxesFreeLevel(&CanHandle) != 3) {}

  /* Wait for a message to be received */
  if (HAL_CAN_GetRxFifoFillLevel(&CanHandle, CAN_RX_FIFO0) != 1)
  {
    Error_Handler();
  }

  /* Receive the CAN message */
  if (HAL_CAN_GetRxMessage(&CanHandle, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
  {
    Error_Handler();
  }

  /* Verify the received message */
  if ((RxHeader.StdId == 0x11) &&
      (RxHeader.DLC == 2) &&
      ((RxData[0] << 8 | RxData[1]) == 0xCAFE))
  {
    /* Send the received data over UART6 */
    char message[50];
    snprintf(message, sizeof(message), "CAN Received: 0x%X 0x%X\r\n", RxData[0], RxData[1]);
    HAL_UART_Transmit(&huart6, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);

    /* Turn on LED4 to indicate success */
    LED_On(4);
  }
  else
  {
    /* Turn on LED3 to indicate error */
    LED_On(3);
  }

  /* Infinite loop */
  while (1)
  {
  }
}

/* CAN configuration ---------------------------------------------------------*/
static void CAN_Config(void)
{
  CAN_FilterTypeDef sFilterConfig;

  /* Configure CAN1 */
  CanHandle.Instance = CAN1;
  CanHandle.Init.TimeTriggeredMode = DISABLE;
  CanHandle.Init.AutoBusOff = DISABLE;
  CanHandle.Init.AutoWakeUp = DISABLE;
  CanHandle.Init.AutoRetransmission = ENABLE;
  CanHandle.Init.ReceiveFifoLocked = DISABLE;
  CanHandle.Init.TransmitFifoPriority = DISABLE;
  CanHandle.Init.Mode = CAN_MODE_LOOPBACK;
  CanHandle.Init.SyncJumpWidth = CAN_SJW_1TQ;
  CanHandle.Init.TimeSeg1 = CAN_BS1_6TQ;
  CanHandle.Init.TimeSeg2 = CAN_BS2_2TQ;
  CanHandle.Init.Prescaler = 5;

  if (HAL_CAN_Init(&CanHandle) != HAL_OK)
  {
    Error_Handler();
  }

  /* Configure the CAN filter */
  sFilterConfig.FilterBank = 0;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
  sFilterConfig.FilterIdHigh = 0x0000;
  sFilterConfig.FilterIdLow = 0x0000;
  sFilterConfig.FilterMaskIdHigh = 0x0000;
  sFilterConfig.FilterMaskIdLow = 0x0000;
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
  sFilterConfig.FilterActivation = ENABLE;

  if (HAL_CAN_ConfigFilter(&CanHandle, &sFilterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /* Start the CAN module */
  if (HAL_CAN_Start(&CanHandle) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USART6 configuration ------------------------------------------------------*/
static void UART6_Config(void)
{
  /* Configure USART6 */
  huart6.Instance = USART6;
  huart6.Init.BaudRate = 115200;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;

  if (HAL_UART_Init(&huart6) != HAL_OK)
  {
    Error_Handler();
  }
}

/* LED initialization --------------------------------------------------------*/
static void LED_Init(void)
{
  __HAL_RCC_GPIOD_CLK_ENABLE();

  GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
}

/* Turn on a specific LED */
static void LED_On(uint8_t led)
{
  HAL_GPIO_WritePin(GPIOD, (1 << (12 + led - 1)), GPIO_PIN_SET);
}

/* Turn off a specific LED */
static void LED_Off(uint8_t led)
{
  HAL_GPIO_WritePin(GPIOD, (1 << (12 + led - 1)), GPIO_PIN_RESET);
}

/* Error handler -------------------------------------------------------------*/
static void Error_Handler(void)
{
  /* Blink LED3 to indicate an error */
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
    HAL_Delay(100);
  }
}

/* System clock configuration ------------------------------------------------*/
static void SystemClock_Config(void)
{
  /* Same as in your original code */
}
