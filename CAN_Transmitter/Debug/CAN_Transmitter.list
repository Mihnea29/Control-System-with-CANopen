
CAN_Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038a0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003a50  08003a50  00004a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ac4  08003ac4  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ac4  08003ac4  00004ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003acc  08003acc  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003acc  08003acc  00004acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ad0  08003ad0  00004ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003ad4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          0000027c  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002d8  200002d8  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009c10  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000197d  00000000  00000000  0000ec9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000838  00000000  00000000  00010620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000640  00000000  00000000  00010e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022595  00000000  00000000  00011498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009625  00000000  00000000  00033a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2838  00000000  00000000  0003d052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010f88a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002648  00000000  00000000  0010f8d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00111f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003a38 	.word	0x08003a38

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08003a38 	.word	0x08003a38

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000596:	f000 fba1 	bl	8000cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f883 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f975 	bl	800088c <MX_GPIO_Init>
  MX_CAN1_Init();
 80005a2:	f000 f8f1 	bl	8000788 <MX_CAN1_Init>
  MX_USART6_UART_Init();
 80005a6:	f000 f947 	bl	8000838 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */



 TxHeader.StdId = 0x321;
 80005aa:	4b35      	ldr	r3, [pc, #212]	@ (8000680 <main+0xf0>)
 80005ac:	f240 3221 	movw	r2, #801	@ 0x321
 80005b0:	601a      	str	r2, [r3, #0]
 TxHeader.ExtId = 0x01;
 80005b2:	4b33      	ldr	r3, [pc, #204]	@ (8000680 <main+0xf0>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	605a      	str	r2, [r3, #4]
 TxHeader.RTR = CAN_RTR_DATA;
 80005b8:	4b31      	ldr	r3, [pc, #196]	@ (8000680 <main+0xf0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
 TxHeader.IDE = CAN_ID_STD;
 80005be:	4b30      	ldr	r3, [pc, #192]	@ (8000680 <main+0xf0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
 TxHeader.DLC = 8;
 80005c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000680 <main+0xf0>)
 80005c6:	2208      	movs	r2, #8
 80005c8:	611a      	str	r2, [r3, #16]
 TxHeader.TransmitGlobalTime = DISABLE;
 80005ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000680 <main+0xf0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	751a      	strb	r2, [r3, #20]

 if(HAL_CAN_Start(&hcan1) != HAL_OK)
 80005d0:	482c      	ldr	r0, [pc, #176]	@ (8000684 <main+0xf4>)
 80005d2:	f000 fdf5 	bl	80011c0 <HAL_CAN_Start>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <main+0x50>
 {
	 Error_Handler();
 80005dc:	f000 f9e8 	bl	80009b0 <Error_Handler>
 }
#ifdef RECEIVE
/* Interupere RX */
 if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005e0:	2102      	movs	r1, #2
 80005e2:	4828      	ldr	r0, [pc, #160]	@ (8000684 <main+0xf4>)
 80005e4:	f000 ff52 	bl	800148c <HAL_CAN_ActivateNotification>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <main+0x62>
 {
     Error_Handler();
 80005ee:	f000 f9df 	bl	80009b0 <Error_Handler>

#endif

#ifdef RECEIVE

      if (RxHeader.DLC > 0)
 80005f2:	4b25      	ldr	r3, [pc, #148]	@ (8000688 <main+0xf8>)
 80005f4:	691b      	ldr	r3, [r3, #16]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d03d      	beq.n	8000676 <main+0xe6>
       {
           int length = snprintf(uartBuffer, sizeof(uartBuffer), "ID: 0x%03X DLC: %d Data: ", RxHeader.StdId, RxHeader.DLC);
 80005fa:	4b23      	ldr	r3, [pc, #140]	@ (8000688 <main+0xf8>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	4b22      	ldr	r3, [pc, #136]	@ (8000688 <main+0xf8>)
 8000600:	691b      	ldr	r3, [r3, #16]
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	4613      	mov	r3, r2
 8000606:	4a21      	ldr	r2, [pc, #132]	@ (800068c <main+0xfc>)
 8000608:	2164      	movs	r1, #100	@ 0x64
 800060a:	4821      	ldr	r0, [pc, #132]	@ (8000690 <main+0x100>)
 800060c:	f002 fd4c 	bl	80030a8 <sniprintf>
 8000610:	6078      	str	r0, [r7, #4]

           for (int i = 0; i < RxHeader.DLC; i++)
 8000612:	2300      	movs	r3, #0
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	e013      	b.n	8000640 <main+0xb0>
           {
               length += snprintf(uartBuffer + length, sizeof(uartBuffer) - length, "0x%02X ", RxData[i]);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a1d      	ldr	r2, [pc, #116]	@ (8000690 <main+0x100>)
 800061c:	1898      	adds	r0, r3, r2
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f1c3 0164 	rsb	r1, r3, #100	@ 0x64
 8000624:	4a1b      	ldr	r2, [pc, #108]	@ (8000694 <main+0x104>)
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	4413      	add	r3, r2
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4a1a      	ldr	r2, [pc, #104]	@ (8000698 <main+0x108>)
 800062e:	f002 fd3b 	bl	80030a8 <sniprintf>
 8000632:	4602      	mov	r2, r0
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4413      	add	r3, r2
 8000638:	607b      	str	r3, [r7, #4]
           for (int i = 0; i < RxHeader.DLC; i++)
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <main+0xf8>)
 8000642:	691a      	ldr	r2, [r3, #16]
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	429a      	cmp	r2, r3
 8000648:	d8e6      	bhi.n	8000618 <main+0x88>
           }

           strncat(uartBuffer, "\r\n", sizeof(uartBuffer) - length - 1);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f1c3 0363 	rsb	r3, r3, #99	@ 0x63
 8000650:	461a      	mov	r2, r3
 8000652:	4912      	ldr	r1, [pc, #72]	@ (800069c <main+0x10c>)
 8000654:	480e      	ldr	r0, [pc, #56]	@ (8000690 <main+0x100>)
 8000656:	f002 fd63 	bl	8003120 <strncat>

           HAL_UART_Transmit(&huart6, (uint8_t *)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 800065a:	480d      	ldr	r0, [pc, #52]	@ (8000690 <main+0x100>)
 800065c:	f7ff fdc8 	bl	80001f0 <strlen>
 8000660:	4603      	mov	r3, r0
 8000662:	b29a      	uxth	r2, r3
 8000664:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000668:	4909      	ldr	r1, [pc, #36]	@ (8000690 <main+0x100>)
 800066a:	480d      	ldr	r0, [pc, #52]	@ (80006a0 <main+0x110>)
 800066c:	f002 f960 	bl	8002930 <HAL_UART_Transmit>
           RxHeader.DLC = 0;
 8000670:	4b05      	ldr	r3, [pc, #20]	@ (8000688 <main+0xf8>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
       }

#endif

	  HAL_Delay(1000);
 8000676:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800067a:	f000 fba1 	bl	8000dc0 <HAL_Delay>
      if (RxHeader.DLC > 0)
 800067e:	e7b8      	b.n	80005f2 <main+0x62>
 8000680:	200000f0 	.word	0x200000f0
 8000684:	20000078 	.word	0x20000078
 8000688:	20000108 	.word	0x20000108
 800068c:	08003a50 	.word	0x08003a50
 8000690:	20000124 	.word	0x20000124
 8000694:	200000e8 	.word	0x200000e8
 8000698:	08003a6c 	.word	0x08003a6c
 800069c:	08003a74 	.word	0x08003a74
 80006a0:	200000a0 	.word	0x200000a0

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	@ 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	@ 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 fd2c 	bl	8003110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000780 <SystemClock_Config+0xdc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	4a2b      	ldr	r2, [pc, #172]	@ (8000780 <SystemClock_Config+0xdc>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d8:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemClock_Config+0xdc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b26      	ldr	r3, [pc, #152]	@ (8000784 <SystemClock_Config+0xe0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a25      	ldr	r2, [pc, #148]	@ (8000784 <SystemClock_Config+0xe0>)
 80006ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemClock_Config+0xe0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000700:	2301      	movs	r3, #1
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000704:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000708:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000712:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000714:	2308      	movs	r3, #8
 8000716:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000718:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 800071c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071e:	2302      	movs	r3, #2
 8000720:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000722:	2303      	movs	r3, #3
 8000724:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	4618      	mov	r0, r3
 800072c:	f001 fc18 	bl	8001f60 <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000736:	f000 f93b 	bl	80009b0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800073a:	f001 fbc1 	bl	8001ec0 <HAL_PWREx_EnableOverDrive>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000744:	f000 f934 	bl	80009b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	2302      	movs	r3, #2
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000754:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2105      	movs	r1, #5
 8000766:	4618      	mov	r0, r3
 8000768:	f001 fe72 	bl	8002450 <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000772:	f000 f91d 	bl	80009b0 <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	@ 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	@ 0x28
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800078e:	4b28      	ldr	r3, [pc, #160]	@ (8000830 <MX_CAN1_Init+0xa8>)
 8000790:	4a28      	ldr	r2, [pc, #160]	@ (8000834 <MX_CAN1_Init+0xac>)
 8000792:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000794:	4b26      	ldr	r3, [pc, #152]	@ (8000830 <MX_CAN1_Init+0xa8>)
 8000796:	2203      	movs	r2, #3
 8000798:	605a      	str	r2, [r3, #4]
#ifdef TRANSMIT
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
#endif

#ifdef RECEIVE
  hcan1.Init.Mode = CAN_MODE_SILENT;
 800079a:	4b25      	ldr	r3, [pc, #148]	@ (8000830 <MX_CAN1_Init+0xa8>)
 800079c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80007a0:	609a      	str	r2, [r3, #8]
#endif
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007a2:	4b23      	ldr	r3, [pc, #140]	@ (8000830 <MX_CAN1_Init+0xa8>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80007a8:	4b21      	ldr	r3, [pc, #132]	@ (8000830 <MX_CAN1_Init+0xa8>)
 80007aa:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 80007ae:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000830 <MX_CAN1_Init+0xa8>)
 80007b2:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 80007b6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000830 <MX_CAN1_Init+0xa8>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007be:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <MX_CAN1_Init+0xa8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <MX_CAN1_Init+0xa8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007ca:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <MX_CAN1_Init+0xa8>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007d0:	4b17      	ldr	r3, [pc, #92]	@ (8000830 <MX_CAN1_Init+0xa8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007d6:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <MX_CAN1_Init+0xa8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007dc:	4814      	ldr	r0, [pc, #80]	@ (8000830 <MX_CAN1_Init+0xa8>)
 80007de:	f000 fb13 	bl	8000e08 <HAL_CAN_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 80007e8:	f000 f8e2 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterBank = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80007f8:	2300      	movs	r3, #0
 80007fa:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800080c:	2301      	movs	r3, #1
 800080e:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000810:	230e      	movs	r3, #14
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	@ (8000830 <MX_CAN1_Init+0xa8>)
 800081a:	f000 fbf1 	bl	8001000 <HAL_CAN_ConfigFilter>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_CAN1_Init+0xa0>
  {
	  Error_Handler();
 8000824:	f000 f8c4 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	@ 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000078 	.word	0x20000078
 8000834:	40006400 	.word	0x40006400

08000838 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_USART6_UART_Init+0x4c>)
 800083e:	4a12      	ldr	r2, [pc, #72]	@ (8000888 <MX_USART6_UART_Init+0x50>)
 8000840:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000842:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <MX_USART6_UART_Init+0x4c>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_USART6_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_USART6_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <MX_USART6_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_USART6_UART_Init+0x4c>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <MX_USART6_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_USART6_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_USART6_UART_Init+0x4c>)
 8000870:	f002 f80e 	bl	8002890 <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800087a:	f000 f899 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200000a0 	.word	0x200000a0
 8000888:	40011400 	.word	0x40011400

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b27      	ldr	r3, [pc, #156]	@ (8000944 <MX_GPIO_Init+0xb8>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a26      	ldr	r2, [pc, #152]	@ (8000944 <MX_GPIO_Init+0xb8>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b24      	ldr	r3, [pc, #144]	@ (8000944 <MX_GPIO_Init+0xb8>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b20      	ldr	r3, [pc, #128]	@ (8000944 <MX_GPIO_Init+0xb8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a1f      	ldr	r2, [pc, #124]	@ (8000944 <MX_GPIO_Init+0xb8>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000944 <MX_GPIO_Init+0xb8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b19      	ldr	r3, [pc, #100]	@ (8000944 <MX_GPIO_Init+0xb8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a18      	ldr	r2, [pc, #96]	@ (8000944 <MX_GPIO_Init+0xb8>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b16      	ldr	r3, [pc, #88]	@ (8000944 <MX_GPIO_Init+0xb8>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <MX_GPIO_Init+0xb8>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a11      	ldr	r2, [pc, #68]	@ (8000944 <MX_GPIO_Init+0xb8>)
 8000900:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <MX_GPIO_Init+0xb8>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000918:	480b      	ldr	r0, [pc, #44]	@ (8000948 <MX_GPIO_Init+0xbc>)
 800091a:	f001 fab7 	bl	8001e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800091e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4804      	ldr	r0, [pc, #16]	@ (8000948 <MX_GPIO_Init+0xbc>)
 8000938:	f001 f8fc 	bl	8001b34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800093c:	bf00      	nop
 800093e:	3728      	adds	r7, #40	@ 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800
 8000948:	40021800 	.word	0x40021800

0800094c <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE BEGIN 4 */


/* CAN RX Interrupt Callback */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
    /* Read the received CAN message */
	if(RxHeader.DLC == 0)
 8000954:	4b0a      	ldr	r3, [pc, #40]	@ (8000980 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000956:	691b      	ldr	r3, [r3, #16]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d10b      	bne.n	8000974 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
	{
		if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800095c:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800095e:	4a08      	ldr	r2, [pc, #32]	@ (8000980 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000960:	2100      	movs	r1, #0
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 fc70 	bl	8001248 <HAL_CAN_GetRxMessage>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d004      	beq.n	8000978 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
  	 {
			Error_Handler();
 800096e:	f000 f81f 	bl	80009b0 <Error_Handler>
	{
		Error_Handler();
	}
    /* Process the received message */
    // For example, toggle an LED or log the received data
}
 8000972:	e001      	b.n	8000978 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
		Error_Handler();
 8000974:	f000 f81c 	bl	80009b0 <Error_Handler>
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000108 	.word	0x20000108
 8000984:	200000e8 	.word	0x200000e8

08000988 <HAL_CAN_TxMailbox0CompleteCallback>:


#ifdef RECEIVE
/* CAN TX Interrupt Callback */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
    // Transmission completed successfully
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <HAL_CAN_ErrorCallback>:

/* CAN TX Error Callback */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
    // Handle CAN error
    Error_Handler();
 80009a4:	f000 f804 	bl	80009b0 <Error_Handler>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <Error_Handler+0x8>

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e6:	4a08      	ldr	r2, [pc, #32]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800

08000a0c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	@ 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a25      	ldr	r2, [pc, #148]	@ (8000ac0 <HAL_CAN_MspInit+0xb4>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d144      	bne.n	8000ab8 <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b24      	ldr	r3, [pc, #144]	@ (8000ac4 <HAL_CAN_MspInit+0xb8>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a36:	4a23      	ldr	r2, [pc, #140]	@ (8000ac4 <HAL_CAN_MspInit+0xb8>)
 8000a38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ac4 <HAL_CAN_MspInit+0xb8>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac4 <HAL_CAN_MspInit+0xb8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac4 <HAL_CAN_MspInit+0xb8>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac4 <HAL_CAN_MspInit+0xb8>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8000a66:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a78:	2309      	movs	r3, #9
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	4811      	ldr	r0, [pc, #68]	@ (8000ac8 <HAL_CAN_MspInit+0xbc>)
 8000a84:	f001 f856 	bl	8001b34 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2013      	movs	r0, #19
 8000a8e:	f001 f81a 	bl	8001ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000a92:	2013      	movs	r0, #19
 8000a94:	f001 f833 	bl	8001afe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2014      	movs	r0, #20
 8000a9e:	f001 f812 	bl	8001ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000aa2:	2014      	movs	r0, #20
 8000aa4:	f001 f82b 	bl	8001afe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2015      	movs	r0, #21
 8000aae:	f001 f80a 	bl	8001ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000ab2:	2015      	movs	r0, #21
 8000ab4:	f001 f823 	bl	8001afe <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000ab8:	bf00      	nop
 8000aba:	3728      	adds	r7, #40	@ 0x28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40006400 	.word	0x40006400
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020000 	.word	0x40020000

08000acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a19      	ldr	r2, [pc, #100]	@ (8000b50 <HAL_UART_MspInit+0x84>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d12b      	bne.n	8000b46 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af6:	4a17      	ldr	r2, [pc, #92]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000af8:	f043 0320 	orr.w	r3, r3, #32
 8000afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	f003 0320 	and.w	r3, r3, #32
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a10      	ldr	r2, [pc, #64]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b26:	23c0      	movs	r3, #192	@ 0xc0
 8000b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000b36:	2308      	movs	r3, #8
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <HAL_UART_MspInit+0x8c>)
 8000b42:	f000 fff7 	bl	8001b34 <HAL_GPIO_Init>

  /* USER CODE END USART6_MspInit 1 */

  }

}
 8000b46:	bf00      	nop
 8000b48:	3728      	adds	r7, #40	@ 0x28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40011400 	.word	0x40011400
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020800 	.word	0x40020800

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <NMI_Handler+0x4>

08000b64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <MemManage_Handler+0x4>

08000b74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb2:	f000 f8e5 	bl	8000d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bc0:	4802      	ldr	r0, [pc, #8]	@ (8000bcc <CAN1_TX_IRQHandler+0x10>)
 8000bc2:	f000 fc89 	bl	80014d8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000078 	.word	0x20000078

08000bd0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bd4:	4802      	ldr	r0, [pc, #8]	@ (8000be0 <CAN1_RX0_IRQHandler+0x10>)
 8000bd6:	f000 fc7f 	bl	80014d8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000078 	.word	0x20000078

08000be4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000be8:	4802      	ldr	r0, [pc, #8]	@ (8000bf4 <CAN1_RX1_IRQHandler+0x10>)
 8000bea:	f000 fc75 	bl	80014d8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000078 	.word	0x20000078

08000bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c00:	4a14      	ldr	r2, [pc, #80]	@ (8000c54 <_sbrk+0x5c>)
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <_sbrk+0x60>)
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c0c:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c14:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <_sbrk+0x64>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	@ (8000c60 <_sbrk+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1a:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d207      	bcs.n	8000c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c28:	f002 fa8e 	bl	8003148 <__errno>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	220c      	movs	r2, #12
 8000c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c36:	e009      	b.n	8000c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c38:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	@ (8000c5c <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	4a05      	ldr	r2, [pc, #20]	@ (8000c5c <_sbrk+0x64>)
 8000c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20030000 	.word	0x20030000
 8000c58:	00000400 	.word	0x00000400
 8000c5c:	20000188 	.word	0x20000188
 8000c60:	200002d8 	.word	0x200002d8

08000c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <SystemInit+0x20>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c6e:	4a05      	ldr	r2, [pc, #20]	@ (8000c84 <SystemInit+0x20>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c8c:	f7ff ffea 	bl	8000c64 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c90:	480c      	ldr	r0, [pc, #48]	@ (8000cc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c92:	490d      	ldr	r1, [pc, #52]	@ (8000cc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ccc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ca8:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f002 fa4d 	bl	8003154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cba:	f7ff fc69 	bl	8000590 <main>
  bx  lr    
 8000cbe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cc0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ccc:	08003ad4 	.word	0x08003ad4
  ldr r2, =_sbss
 8000cd0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000cd4:	200002d8 	.word	0x200002d8

08000cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC_IRQHandler>
	...

08000cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d1c <HAL_Init+0x40>)
 8000ce6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cec:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <HAL_Init+0x40>)
 8000cf2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf8:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	@ (8000d1c <HAL_Init+0x40>)
 8000cfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f000 fed3 	bl	8001ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0a:	200f      	movs	r0, #15
 8000d0c:	f000 f808 	bl	8000d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d10:	f7ff fe54 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023c00 	.word	0x40023c00

08000d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d28:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <HAL_InitTick+0x54>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <HAL_InitTick+0x58>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 feeb 	bl	8001b1a <HAL_SYSTICK_Config>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00e      	b.n	8000d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	d80a      	bhi.n	8000d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d5c:	f000 feb3 	bl	8001ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d60:	4a06      	ldr	r2, [pc, #24]	@ (8000d7c <HAL_InitTick+0x5c>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	e000      	b.n	8000d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000000 	.word	0x20000000
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000004 	.word	0x20000004

08000d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_IncTick+0x20>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <HAL_IncTick+0x24>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a04      	ldr	r2, [pc, #16]	@ (8000da4 <HAL_IncTick+0x24>)
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008
 8000da4:	2000018c 	.word	0x2000018c

08000da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b03      	ldr	r3, [pc, #12]	@ (8000dbc <HAL_GetTick+0x14>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	2000018c 	.word	0x2000018c

08000dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc8:	f7ff ffee 	bl	8000da8 <HAL_GetTick>
 8000dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000dd8:	d005      	beq.n	8000de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dda:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <HAL_Delay+0x44>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4413      	add	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000de6:	bf00      	nop
 8000de8:	f7ff ffde 	bl	8000da8 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d8f7      	bhi.n	8000de8 <HAL_Delay+0x28>
  {
  }
}
 8000df8:	bf00      	nop
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000008 	.word	0x20000008

08000e08 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d101      	bne.n	8000e1a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e0ed      	b.n	8000ff6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d102      	bne.n	8000e2c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff fdf0 	bl	8000a0c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f042 0201 	orr.w	r2, r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e3c:	f7ff ffb4 	bl	8000da8 <HAL_GetTick>
 8000e40:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e42:	e012      	b.n	8000e6a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e44:	f7ff ffb0 	bl	8000da8 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b0a      	cmp	r3, #10
 8000e50:	d90b      	bls.n	8000e6a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e56:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2205      	movs	r2, #5
 8000e62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e0c5      	b.n	8000ff6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0e5      	beq.n	8000e44 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f022 0202 	bic.w	r2, r2, #2
 8000e86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e88:	f7ff ff8e 	bl	8000da8 <HAL_GetTick>
 8000e8c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e8e:	e012      	b.n	8000eb6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e90:	f7ff ff8a 	bl	8000da8 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b0a      	cmp	r3, #10
 8000e9c:	d90b      	bls.n	8000eb6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2205      	movs	r2, #5
 8000eae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e09f      	b.n	8000ff6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1e5      	bne.n	8000e90 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7e1b      	ldrb	r3, [r3, #24]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d108      	bne.n	8000ede <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	e007      	b.n	8000eee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000eec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	7e5b      	ldrb	r3, [r3, #25]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d108      	bne.n	8000f08 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	e007      	b.n	8000f18 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	7e9b      	ldrb	r3, [r3, #26]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d108      	bne.n	8000f32 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f042 0220 	orr.w	r2, r2, #32
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	e007      	b.n	8000f42 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f022 0220 	bic.w	r2, r2, #32
 8000f40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	7edb      	ldrb	r3, [r3, #27]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d108      	bne.n	8000f5c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 0210 	bic.w	r2, r2, #16
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	e007      	b.n	8000f6c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 0210 	orr.w	r2, r2, #16
 8000f6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	7f1b      	ldrb	r3, [r3, #28]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d108      	bne.n	8000f86 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f042 0208 	orr.w	r2, r2, #8
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	e007      	b.n	8000f96 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f022 0208 	bic.w	r2, r2, #8
 8000f94:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	7f5b      	ldrb	r3, [r3, #29]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d108      	bne.n	8000fb0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f042 0204 	orr.w	r2, r2, #4
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	e007      	b.n	8000fc0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 0204 	bic.w	r2, r2, #4
 8000fbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	691b      	ldr	r3, [r3, #16]
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	ea42 0103 	orr.w	r1, r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	1e5a      	subs	r2, r3, #1
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001016:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001018:	7cfb      	ldrb	r3, [r7, #19]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d003      	beq.n	8001026 <HAL_CAN_ConfigFilter+0x26>
 800101e:	7cfb      	ldrb	r3, [r7, #19]
 8001020:	2b02      	cmp	r3, #2
 8001022:	f040 80be 	bne.w	80011a2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001026:	4b65      	ldr	r3, [pc, #404]	@ (80011bc <HAL_CAN_ConfigFilter+0x1bc>)
 8001028:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001030:	f043 0201 	orr.w	r2, r3, #1
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001040:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	431a      	orrs	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f003 031f 	and.w	r3, r3, #31
 8001066:	2201      	movs	r2, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	43db      	mvns	r3, r3
 8001078:	401a      	ands	r2, r3
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	69db      	ldr	r3, [r3, #28]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d123      	bne.n	80010d0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	43db      	mvns	r3, r3
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010aa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3248      	adds	r2, #72	@ 0x48
 80010b0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010c4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010c6:	6979      	ldr	r1, [r7, #20]
 80010c8:	3348      	adds	r3, #72	@ 0x48
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	440b      	add	r3, r1
 80010ce:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	69db      	ldr	r3, [r3, #28]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d122      	bne.n	800111e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	431a      	orrs	r2, r3
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010f8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3248      	adds	r2, #72	@ 0x48
 80010fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001112:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001114:	6979      	ldr	r1, [r7, #20]
 8001116:	3348      	adds	r3, #72	@ 0x48
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	440b      	add	r3, r1
 800111c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d109      	bne.n	800113a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	43db      	mvns	r3, r3
 8001130:	401a      	ands	r2, r3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001138:	e007      	b.n	800114a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	431a      	orrs	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d109      	bne.n	8001166 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	43db      	mvns	r3, r3
 800115c:	401a      	ands	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001164:	e007      	b.n	8001176 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	431a      	orrs	r2, r3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	6a1b      	ldr	r3, [r3, #32]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d107      	bne.n	800118e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	431a      	orrs	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001194:	f023 0201 	bic.w	r2, r3, #1
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	e006      	b.n	80011b0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
  }
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	371c      	adds	r7, #28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	40006400 	.word	0x40006400

080011c0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d12e      	bne.n	8001232 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2202      	movs	r2, #2
 80011d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0201 	bic.w	r2, r2, #1
 80011ea:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011ec:	f7ff fddc 	bl	8000da8 <HAL_GetTick>
 80011f0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011f2:	e012      	b.n	800121a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011f4:	f7ff fdd8 	bl	8000da8 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b0a      	cmp	r3, #10
 8001200:	d90b      	bls.n	800121a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001206:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2205      	movs	r2, #5
 8001212:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e012      	b.n	8001240 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1e5      	bne.n	80011f4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	e006      	b.n	8001240 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001236:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
  }
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001248:	b480      	push	{r7}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f893 3020 	ldrb.w	r3, [r3, #32]
 800125c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800125e:	7dfb      	ldrb	r3, [r7, #23]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d003      	beq.n	800126c <HAL_CAN_GetRxMessage+0x24>
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	2b02      	cmp	r3, #2
 8001268:	f040 8103 	bne.w	8001472 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10e      	bne.n	8001290 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d116      	bne.n	80012ae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001284:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e0f7      	b.n	8001480 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d107      	bne.n	80012ae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e0e8      	b.n	8001480 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	331b      	adds	r3, #27
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	4413      	add	r3, r2
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0204 	and.w	r2, r3, #4
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10c      	bne.n	80012e6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	331b      	adds	r3, #27
 80012d4:	011b      	lsls	r3, r3, #4
 80012d6:	4413      	add	r3, r2
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	0d5b      	lsrs	r3, r3, #21
 80012dc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	e00b      	b.n	80012fe <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	331b      	adds	r3, #27
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	4413      	add	r3, r2
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	08db      	lsrs	r3, r3, #3
 80012f6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	331b      	adds	r3, #27
 8001306:	011b      	lsls	r3, r3, #4
 8001308:	4413      	add	r3, r2
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0202 	and.w	r2, r3, #2
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	331b      	adds	r3, #27
 800131c:	011b      	lsls	r3, r3, #4
 800131e:	4413      	add	r3, r2
 8001320:	3304      	adds	r3, #4
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2208      	movs	r2, #8
 8001330:	611a      	str	r2, [r3, #16]
 8001332:	e00b      	b.n	800134c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	331b      	adds	r3, #27
 800133c:	011b      	lsls	r3, r3, #4
 800133e:	4413      	add	r3, r2
 8001340:	3304      	adds	r3, #4
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 020f 	and.w	r2, r3, #15
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	331b      	adds	r3, #27
 8001354:	011b      	lsls	r3, r3, #4
 8001356:	4413      	add	r3, r2
 8001358:	3304      	adds	r3, #4
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	b2da      	uxtb	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	331b      	adds	r3, #27
 800136c:	011b      	lsls	r3, r3, #4
 800136e:	4413      	add	r3, r2
 8001370:	3304      	adds	r3, #4
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	0c1b      	lsrs	r3, r3, #16
 8001376:	b29a      	uxth	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	4413      	add	r3, r2
 8001386:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	4413      	add	r3, r2
 800139c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	0a1a      	lsrs	r2, r3, #8
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	3301      	adds	r3, #1
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	4413      	add	r3, r2
 80013b6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	0c1a      	lsrs	r2, r3, #16
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	3302      	adds	r3, #2
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	4413      	add	r3, r2
 80013d0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	0e1a      	lsrs	r2, r3, #24
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	3303      	adds	r3, #3
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	011b      	lsls	r3, r3, #4
 80013e8:	4413      	add	r3, r2
 80013ea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	3304      	adds	r3, #4
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	4413      	add	r3, r2
 8001402:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	0a1a      	lsrs	r2, r3, #8
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	3305      	adds	r3, #5
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	4413      	add	r3, r2
 800141c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	0c1a      	lsrs	r2, r3, #16
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	3306      	adds	r3, #6
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	4413      	add	r3, r2
 8001436:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	0e1a      	lsrs	r2, r3, #24
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	3307      	adds	r3, #7
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d108      	bne.n	800145e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68da      	ldr	r2, [r3, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0220 	orr.w	r2, r2, #32
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	e007      	b.n	800146e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	691a      	ldr	r2, [r3, #16]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f042 0220 	orr.w	r2, r2, #32
 800146c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	e006      	b.n	8001480 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001476:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
  }
}
 8001480:	4618      	mov	r0, r3
 8001482:	371c      	adds	r7, #28
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800149c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d002      	beq.n	80014aa <HAL_CAN_ActivateNotification+0x1e>
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d109      	bne.n	80014be <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6959      	ldr	r1, [r3, #20]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e006      	b.n	80014cc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
  }
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	@ 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d07c      	beq.n	8001618 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b00      	cmp	r3, #0
 8001526:	d023      	beq.n	8001570 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2201      	movs	r2, #1
 800152e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff fa24 	bl	8000988 <HAL_CAN_TxMailbox0CompleteCallback>
 8001540:	e016      	b.n	8001570 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	d004      	beq.n	8001556 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800154c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
 8001554:	e00c      	b.n	8001570 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	2b00      	cmp	r3, #0
 800155e:	d004      	beq.n	800156a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001562:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
 8001568:	e002      	b.n	8001570 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f97f 	bl	800186e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001576:	2b00      	cmp	r3, #0
 8001578:	d024      	beq.n	80015c4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001582:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f959 	bl	8001846 <HAL_CAN_TxMailbox1CompleteCallback>
 8001594:	e016      	b.n	80015c4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800159c:	2b00      	cmp	r3, #0
 800159e:	d004      	beq.n	80015aa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80015a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80015a8:	e00c      	b.n	80015c4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d004      	beq.n	80015be <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80015b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80015bc:	e002      	b.n	80015c4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 f95f 	bl	8001882 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d024      	beq.n	8001618 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f939 	bl	800185a <HAL_CAN_TxMailbox2CompleteCallback>
 80015e8:	e016      	b.n	8001618 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d004      	beq.n	80015fe <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80015f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80015fc:	e00c      	b.n	8001618 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d004      	beq.n	8001612 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800160e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001610:	e002      	b.n	8001618 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f93f 	bl	8001896 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001618:	6a3b      	ldr	r3, [r7, #32]
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00c      	beq.n	800163c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	2b00      	cmp	r3, #0
 800162a:	d007      	beq.n	800163c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800162c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001632:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2210      	movs	r2, #16
 800163a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800163c:	6a3b      	ldr	r3, [r7, #32]
 800163e:	f003 0304 	and.w	r3, r3, #4
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00b      	beq.n	800165e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	2b00      	cmp	r3, #0
 800164e:	d006      	beq.n	800165e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2208      	movs	r2, #8
 8001656:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f926 	bl	80018aa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800165e:	6a3b      	ldr	r3, [r7, #32]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d009      	beq.n	800167c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d002      	beq.n	800167c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff f968 	bl	800094c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00c      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	2b00      	cmp	r3, #0
 800168e:	d007      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001692:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001696:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2210      	movs	r2, #16
 800169e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	f003 0320 	and.w	r3, r3, #32
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00b      	beq.n	80016c2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d006      	beq.n	80016c2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2208      	movs	r2, #8
 80016ba:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f908 	bl	80018d2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80016c2:	6a3b      	ldr	r3, [r7, #32]
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d009      	beq.n	80016e0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d002      	beq.n	80016e0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f8ef 	bl	80018be <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00b      	beq.n	8001702 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	f003 0310 	and.w	r3, r3, #16
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d006      	beq.n	8001702 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2210      	movs	r2, #16
 80016fa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 f8f2 	bl	80018e6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00b      	beq.n	8001724 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d006      	beq.n	8001724 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2208      	movs	r2, #8
 800171c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f8eb 	bl	80018fa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d07b      	beq.n	8001826 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d072      	beq.n	800181e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800173e:	2b00      	cmp	r3, #0
 8001740:	d008      	beq.n	8001754 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800174c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800175a:	2b00      	cmp	r3, #0
 800175c:	d008      	beq.n	8001770 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176a:	f043 0302 	orr.w	r3, r3, #2
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001770:	6a3b      	ldr	r3, [r7, #32]
 8001772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001776:	2b00      	cmp	r3, #0
 8001778:	d008      	beq.n	800178c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001792:	2b00      	cmp	r3, #0
 8001794:	d043      	beq.n	800181e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800179c:	2b00      	cmp	r3, #0
 800179e:	d03e      	beq.n	800181e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80017a6:	2b60      	cmp	r3, #96	@ 0x60
 80017a8:	d02b      	beq.n	8001802 <HAL_CAN_IRQHandler+0x32a>
 80017aa:	2b60      	cmp	r3, #96	@ 0x60
 80017ac:	d82e      	bhi.n	800180c <HAL_CAN_IRQHandler+0x334>
 80017ae:	2b50      	cmp	r3, #80	@ 0x50
 80017b0:	d022      	beq.n	80017f8 <HAL_CAN_IRQHandler+0x320>
 80017b2:	2b50      	cmp	r3, #80	@ 0x50
 80017b4:	d82a      	bhi.n	800180c <HAL_CAN_IRQHandler+0x334>
 80017b6:	2b40      	cmp	r3, #64	@ 0x40
 80017b8:	d019      	beq.n	80017ee <HAL_CAN_IRQHandler+0x316>
 80017ba:	2b40      	cmp	r3, #64	@ 0x40
 80017bc:	d826      	bhi.n	800180c <HAL_CAN_IRQHandler+0x334>
 80017be:	2b30      	cmp	r3, #48	@ 0x30
 80017c0:	d010      	beq.n	80017e4 <HAL_CAN_IRQHandler+0x30c>
 80017c2:	2b30      	cmp	r3, #48	@ 0x30
 80017c4:	d822      	bhi.n	800180c <HAL_CAN_IRQHandler+0x334>
 80017c6:	2b10      	cmp	r3, #16
 80017c8:	d002      	beq.n	80017d0 <HAL_CAN_IRQHandler+0x2f8>
 80017ca:	2b20      	cmp	r3, #32
 80017cc:	d005      	beq.n	80017da <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80017ce:	e01d      	b.n	800180c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80017d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d2:	f043 0308 	orr.w	r3, r3, #8
 80017d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017d8:	e019      	b.n	800180e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017dc:	f043 0310 	orr.w	r3, r3, #16
 80017e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017e2:	e014      	b.n	800180e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80017e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e6:	f043 0320 	orr.w	r3, r3, #32
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017ec:	e00f      	b.n	800180e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80017ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017f6:	e00a      	b.n	800180e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80017f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001800:	e005      	b.n	800180e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800180a:	e000      	b.n	800180e <HAL_CAN_IRQHandler+0x336>
            break;
 800180c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	699a      	ldr	r2, [r3, #24]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800181c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2204      	movs	r2, #4
 8001824:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001828:	2b00      	cmp	r3, #0
 800182a:	d008      	beq.n	800183e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff f8af 	bl	800099c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800183e:	bf00      	nop
 8001840:	3728      	adds	r7, #40	@ 0x28
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800192c:	4013      	ands	r3, r2
 800192e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001938:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800193c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001942:	4a04      	ldr	r2, [pc, #16]	@ (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	60d3      	str	r3, [r2, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800195c:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <__NVIC_GetPriorityGrouping+0x18>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	f003 0307 	and.w	r3, r3, #7
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	2b00      	cmp	r3, #0
 8001984:	db0b      	blt.n	800199e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	f003 021f 	and.w	r2, r3, #31
 800198c:	4907      	ldr	r1, [pc, #28]	@ (80019ac <__NVIC_EnableIRQ+0x38>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	095b      	lsrs	r3, r3, #5
 8001994:	2001      	movs	r0, #1
 8001996:	fa00 f202 	lsl.w	r2, r0, r2
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000e100 	.word	0xe000e100

080019b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	6039      	str	r1, [r7, #0]
 80019ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db0a      	blt.n	80019da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	490c      	ldr	r1, [pc, #48]	@ (80019fc <__NVIC_SetPriority+0x4c>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	0112      	lsls	r2, r2, #4
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	440b      	add	r3, r1
 80019d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d8:	e00a      	b.n	80019f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4908      	ldr	r1, [pc, #32]	@ (8001a00 <__NVIC_SetPriority+0x50>)
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	3b04      	subs	r3, #4
 80019e8:	0112      	lsls	r2, r2, #4
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	440b      	add	r3, r1
 80019ee:	761a      	strb	r2, [r3, #24]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000e100 	.word	0xe000e100
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	@ 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f1c3 0307 	rsb	r3, r3, #7
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	bf28      	it	cs
 8001a22:	2304      	movcs	r3, #4
 8001a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	d902      	bls.n	8001a34 <NVIC_EncodePriority+0x30>
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3b03      	subs	r3, #3
 8001a32:	e000      	b.n	8001a36 <NVIC_EncodePriority+0x32>
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43da      	mvns	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	401a      	ands	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	43d9      	mvns	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	4313      	orrs	r3, r2
         );
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3724      	adds	r7, #36	@ 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a7c:	d301      	bcc.n	8001a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00f      	b.n	8001aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a82:	4a0a      	ldr	r2, [pc, #40]	@ (8001aac <SysTick_Config+0x40>)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8a:	210f      	movs	r1, #15
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a90:	f7ff ff8e 	bl	80019b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a94:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <SysTick_Config+0x40>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9a:	4b04      	ldr	r3, [pc, #16]	@ (8001aac <SysTick_Config+0x40>)
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	e000e010 	.word	0xe000e010

08001ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ff29 	bl	8001910 <__NVIC_SetPriorityGrouping>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4603      	mov	r3, r0
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad8:	f7ff ff3e 	bl	8001958 <__NVIC_GetPriorityGrouping>
 8001adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	6978      	ldr	r0, [r7, #20]
 8001ae4:	f7ff ff8e 	bl	8001a04 <NVIC_EncodePriority>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff5d 	bl	80019b0 <__NVIC_SetPriority>
}
 8001af6:	bf00      	nop
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff31 	bl	8001974 <__NVIC_EnableIRQ>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffa2 	bl	8001a6c <SysTick_Config>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	@ 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	e177      	b.n	8001e40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b50:	2201      	movs	r2, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	f040 8166 	bne.w	8001e3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d005      	beq.n	8001b86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d130      	bne.n	8001be8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	2203      	movs	r2, #3
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 0201 	and.w	r2, r3, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d017      	beq.n	8001c24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d123      	bne.n	8001c78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	08da      	lsrs	r2, r3, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3208      	adds	r2, #8
 8001c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	220f      	movs	r2, #15
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	08da      	lsrs	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3208      	adds	r2, #8
 8001c72:	69b9      	ldr	r1, [r7, #24]
 8001c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0203 	and.w	r2, r3, #3
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80c0 	beq.w	8001e3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b66      	ldr	r3, [pc, #408]	@ (8001e58 <HAL_GPIO_Init+0x324>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	4a65      	ldr	r2, [pc, #404]	@ (8001e58 <HAL_GPIO_Init+0x324>)
 8001cc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cca:	4b63      	ldr	r3, [pc, #396]	@ (8001e58 <HAL_GPIO_Init+0x324>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cd6:	4a61      	ldr	r2, [pc, #388]	@ (8001e5c <HAL_GPIO_Init+0x328>)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a58      	ldr	r2, [pc, #352]	@ (8001e60 <HAL_GPIO_Init+0x32c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d037      	beq.n	8001d72 <HAL_GPIO_Init+0x23e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a57      	ldr	r2, [pc, #348]	@ (8001e64 <HAL_GPIO_Init+0x330>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d031      	beq.n	8001d6e <HAL_GPIO_Init+0x23a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a56      	ldr	r2, [pc, #344]	@ (8001e68 <HAL_GPIO_Init+0x334>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d02b      	beq.n	8001d6a <HAL_GPIO_Init+0x236>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a55      	ldr	r2, [pc, #340]	@ (8001e6c <HAL_GPIO_Init+0x338>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d025      	beq.n	8001d66 <HAL_GPIO_Init+0x232>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a54      	ldr	r2, [pc, #336]	@ (8001e70 <HAL_GPIO_Init+0x33c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d01f      	beq.n	8001d62 <HAL_GPIO_Init+0x22e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a53      	ldr	r2, [pc, #332]	@ (8001e74 <HAL_GPIO_Init+0x340>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d019      	beq.n	8001d5e <HAL_GPIO_Init+0x22a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a52      	ldr	r2, [pc, #328]	@ (8001e78 <HAL_GPIO_Init+0x344>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_GPIO_Init+0x226>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a51      	ldr	r2, [pc, #324]	@ (8001e7c <HAL_GPIO_Init+0x348>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00d      	beq.n	8001d56 <HAL_GPIO_Init+0x222>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a50      	ldr	r2, [pc, #320]	@ (8001e80 <HAL_GPIO_Init+0x34c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d007      	beq.n	8001d52 <HAL_GPIO_Init+0x21e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4f      	ldr	r2, [pc, #316]	@ (8001e84 <HAL_GPIO_Init+0x350>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_GPIO_Init+0x21a>
 8001d4a:	2309      	movs	r3, #9
 8001d4c:	e012      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d4e:	230a      	movs	r3, #10
 8001d50:	e010      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d52:	2308      	movs	r3, #8
 8001d54:	e00e      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d56:	2307      	movs	r3, #7
 8001d58:	e00c      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d5a:	2306      	movs	r3, #6
 8001d5c:	e00a      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d5e:	2305      	movs	r3, #5
 8001d60:	e008      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d62:	2304      	movs	r3, #4
 8001d64:	e006      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d66:	2303      	movs	r3, #3
 8001d68:	e004      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e002      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d72:	2300      	movs	r3, #0
 8001d74:	69fa      	ldr	r2, [r7, #28]
 8001d76:	f002 0203 	and.w	r2, r2, #3
 8001d7a:	0092      	lsls	r2, r2, #2
 8001d7c:	4093      	lsls	r3, r2
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d84:	4935      	ldr	r1, [pc, #212]	@ (8001e5c <HAL_GPIO_Init+0x328>)
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d92:	4b3d      	ldr	r3, [pc, #244]	@ (8001e88 <HAL_GPIO_Init+0x354>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001db6:	4a34      	ldr	r2, [pc, #208]	@ (8001e88 <HAL_GPIO_Init+0x354>)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dbc:	4b32      	ldr	r3, [pc, #200]	@ (8001e88 <HAL_GPIO_Init+0x354>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001de0:	4a29      	ldr	r2, [pc, #164]	@ (8001e88 <HAL_GPIO_Init+0x354>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001de6:	4b28      	ldr	r3, [pc, #160]	@ (8001e88 <HAL_GPIO_Init+0x354>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001e88 <HAL_GPIO_Init+0x354>)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e10:	4b1d      	ldr	r3, [pc, #116]	@ (8001e88 <HAL_GPIO_Init+0x354>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e34:	4a14      	ldr	r2, [pc, #80]	@ (8001e88 <HAL_GPIO_Init+0x354>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	61fb      	str	r3, [r7, #28]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	2b0f      	cmp	r3, #15
 8001e44:	f67f ae84 	bls.w	8001b50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	3724      	adds	r7, #36	@ 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40013800 	.word	0x40013800
 8001e60:	40020000 	.word	0x40020000
 8001e64:	40020400 	.word	0x40020400
 8001e68:	40020800 	.word	0x40020800
 8001e6c:	40020c00 	.word	0x40020c00
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40021400 	.word	0x40021400
 8001e78:	40021800 	.word	0x40021800
 8001e7c:	40021c00 	.word	0x40021c00
 8001e80:	40022000 	.word	0x40022000
 8001e84:	40022400 	.word	0x40022400
 8001e88:	40013c00 	.word	0x40013c00

08001e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e9c:	787b      	ldrb	r3, [r7, #1]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ea2:	887a      	ldrh	r2, [r7, #2]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ea8:	e003      	b.n	8001eb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eaa:	887b      	ldrh	r3, [r7, #2]
 8001eac:	041a      	lsls	r2, r3, #16
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	619a      	str	r2, [r3, #24]
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	4b20      	ldr	r3, [pc, #128]	@ (8001f50 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f50 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eda:	4b1d      	ldr	r3, [pc, #116]	@ (8001f50 <HAL_PWREx_EnableOverDrive+0x90>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f54 <HAL_PWREx_EnableOverDrive+0x94>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eec:	f7fe ff5c 	bl	8000da8 <HAL_GetTick>
 8001ef0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ef2:	e009      	b.n	8001f08 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ef4:	f7fe ff58 	bl	8000da8 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f02:	d901      	bls.n	8001f08 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e01f      	b.n	8001f48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f08:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f14:	d1ee      	bne.n	8001ef4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f16:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f1c:	f7fe ff44 	bl	8000da8 <HAL_GetTick>
 8001f20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f22:	e009      	b.n	8001f38 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f24:	f7fe ff40 	bl	8000da8 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f32:	d901      	bls.n	8001f38 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e007      	b.n	8001f48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f38:	4b07      	ldr	r3, [pc, #28]	@ (8001f58 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001f44:	d1ee      	bne.n	8001f24 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40023800 	.word	0x40023800
 8001f54:	420e0040 	.word	0x420e0040
 8001f58:	40007000 	.word	0x40007000
 8001f5c:	420e0044 	.word	0x420e0044

08001f60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e267      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d075      	beq.n	800206a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f7e:	4b88      	ldr	r3, [pc, #544]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d00c      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f8a:	4b85      	ldr	r3, [pc, #532]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d112      	bne.n	8001fbc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f96:	4b82      	ldr	r3, [pc, #520]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fa2:	d10b      	bne.n	8001fbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	4b7e      	ldr	r3, [pc, #504]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d05b      	beq.n	8002068 <HAL_RCC_OscConfig+0x108>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d157      	bne.n	8002068 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e242      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fc4:	d106      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x74>
 8001fc6:	4b76      	ldr	r3, [pc, #472]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a75      	ldr	r2, [pc, #468]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e01d      	b.n	8002010 <HAL_RCC_OscConfig+0xb0>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x98>
 8001fde:	4b70      	ldr	r3, [pc, #448]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a6f      	ldr	r2, [pc, #444]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4b6d      	ldr	r3, [pc, #436]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a6c      	ldr	r2, [pc, #432]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e00b      	b.n	8002010 <HAL_RCC_OscConfig+0xb0>
 8001ff8:	4b69      	ldr	r3, [pc, #420]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a68      	ldr	r2, [pc, #416]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	4b66      	ldr	r3, [pc, #408]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a65      	ldr	r2, [pc, #404]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 800200a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800200e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d013      	beq.n	8002040 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7fe fec6 	bl	8000da8 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002020:	f7fe fec2 	bl	8000da8 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	@ 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e207      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	4b5b      	ldr	r3, [pc, #364]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0xc0>
 800203e:	e014      	b.n	800206a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7fe feb2 	bl	8000da8 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002048:	f7fe feae 	bl	8000da8 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	@ 0x64
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e1f3      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205a:	4b51      	ldr	r3, [pc, #324]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0xe8>
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d063      	beq.n	800213e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002076:	4b4a      	ldr	r3, [pc, #296]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00b      	beq.n	800209a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002082:	4b47      	ldr	r3, [pc, #284]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800208a:	2b08      	cmp	r3, #8
 800208c:	d11c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800208e:	4b44      	ldr	r3, [pc, #272]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d116      	bne.n	80020c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209a:	4b41      	ldr	r3, [pc, #260]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <HAL_RCC_OscConfig+0x152>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d001      	beq.n	80020b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e1c7      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b2:	4b3b      	ldr	r3, [pc, #236]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4937      	ldr	r1, [pc, #220]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c6:	e03a      	b.n	800213e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d020      	beq.n	8002112 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d0:	4b34      	ldr	r3, [pc, #208]	@ (80021a4 <HAL_RCC_OscConfig+0x244>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d6:	f7fe fe67 	bl	8000da8 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020de:	f7fe fe63 	bl	8000da8 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e1a8      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f0:	4b2b      	ldr	r3, [pc, #172]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fc:	4b28      	ldr	r3, [pc, #160]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4925      	ldr	r1, [pc, #148]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 800210c:	4313      	orrs	r3, r2
 800210e:	600b      	str	r3, [r1, #0]
 8002110:	e015      	b.n	800213e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002112:	4b24      	ldr	r3, [pc, #144]	@ (80021a4 <HAL_RCC_OscConfig+0x244>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002118:	f7fe fe46 	bl	8000da8 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002120:	f7fe fe42 	bl	8000da8 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e187      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002132:	4b1b      	ldr	r3, [pc, #108]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d036      	beq.n	80021b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d016      	beq.n	8002180 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002152:	4b15      	ldr	r3, [pc, #84]	@ (80021a8 <HAL_RCC_OscConfig+0x248>)
 8002154:	2201      	movs	r2, #1
 8002156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002158:	f7fe fe26 	bl	8000da8 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002160:	f7fe fe22 	bl	8000da8 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e167      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002172:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <HAL_RCC_OscConfig+0x240>)
 8002174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0x200>
 800217e:	e01b      	b.n	80021b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002180:	4b09      	ldr	r3, [pc, #36]	@ (80021a8 <HAL_RCC_OscConfig+0x248>)
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002186:	f7fe fe0f 	bl	8000da8 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800218c:	e00e      	b.n	80021ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800218e:	f7fe fe0b 	bl	8000da8 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d907      	bls.n	80021ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e150      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
 80021a0:	40023800 	.word	0x40023800
 80021a4:	42470000 	.word	0x42470000
 80021a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ac:	4b88      	ldr	r3, [pc, #544]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 80021ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1ea      	bne.n	800218e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 8097 	beq.w	80022f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c6:	2300      	movs	r3, #0
 80021c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ca:	4b81      	ldr	r3, [pc, #516]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10f      	bne.n	80021f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	4b7d      	ldr	r3, [pc, #500]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	4a7c      	ldr	r2, [pc, #496]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 80021e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021e6:	4b7a      	ldr	r3, [pc, #488]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f2:	2301      	movs	r3, #1
 80021f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f6:	4b77      	ldr	r3, [pc, #476]	@ (80023d4 <HAL_RCC_OscConfig+0x474>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d118      	bne.n	8002234 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002202:	4b74      	ldr	r3, [pc, #464]	@ (80023d4 <HAL_RCC_OscConfig+0x474>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a73      	ldr	r2, [pc, #460]	@ (80023d4 <HAL_RCC_OscConfig+0x474>)
 8002208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800220c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800220e:	f7fe fdcb 	bl	8000da8 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002216:	f7fe fdc7 	bl	8000da8 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e10c      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002228:	4b6a      	ldr	r3, [pc, #424]	@ (80023d4 <HAL_RCC_OscConfig+0x474>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d106      	bne.n	800224a <HAL_RCC_OscConfig+0x2ea>
 800223c:	4b64      	ldr	r3, [pc, #400]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 800223e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002240:	4a63      	ldr	r2, [pc, #396]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6713      	str	r3, [r2, #112]	@ 0x70
 8002248:	e01c      	b.n	8002284 <HAL_RCC_OscConfig+0x324>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b05      	cmp	r3, #5
 8002250:	d10c      	bne.n	800226c <HAL_RCC_OscConfig+0x30c>
 8002252:	4b5f      	ldr	r3, [pc, #380]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 8002254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002256:	4a5e      	ldr	r2, [pc, #376]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	6713      	str	r3, [r2, #112]	@ 0x70
 800225e:	4b5c      	ldr	r3, [pc, #368]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 8002260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002262:	4a5b      	ldr	r2, [pc, #364]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6713      	str	r3, [r2, #112]	@ 0x70
 800226a:	e00b      	b.n	8002284 <HAL_RCC_OscConfig+0x324>
 800226c:	4b58      	ldr	r3, [pc, #352]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 800226e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002270:	4a57      	ldr	r2, [pc, #348]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 8002272:	f023 0301 	bic.w	r3, r3, #1
 8002276:	6713      	str	r3, [r2, #112]	@ 0x70
 8002278:	4b55      	ldr	r3, [pc, #340]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 800227a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800227c:	4a54      	ldr	r2, [pc, #336]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 800227e:	f023 0304 	bic.w	r3, r3, #4
 8002282:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d015      	beq.n	80022b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228c:	f7fe fd8c 	bl	8000da8 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002292:	e00a      	b.n	80022aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002294:	f7fe fd88 	bl	8000da8 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e0cb      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022aa:	4b49      	ldr	r3, [pc, #292]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 80022ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0ee      	beq.n	8002294 <HAL_RCC_OscConfig+0x334>
 80022b6:	e014      	b.n	80022e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b8:	f7fe fd76 	bl	8000da8 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022be:	e00a      	b.n	80022d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c0:	f7fe fd72 	bl	8000da8 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e0b5      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d6:	4b3e      	ldr	r3, [pc, #248]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 80022d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1ee      	bne.n	80022c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022e2:	7dfb      	ldrb	r3, [r7, #23]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d105      	bne.n	80022f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e8:	4b39      	ldr	r3, [pc, #228]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 80022ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ec:	4a38      	ldr	r2, [pc, #224]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 80022ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 80a1 	beq.w	8002440 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022fe:	4b34      	ldr	r3, [pc, #208]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b08      	cmp	r3, #8
 8002308:	d05c      	beq.n	80023c4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d141      	bne.n	8002396 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002312:	4b31      	ldr	r3, [pc, #196]	@ (80023d8 <HAL_RCC_OscConfig+0x478>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002318:	f7fe fd46 	bl	8000da8 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002320:	f7fe fd42 	bl	8000da8 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e087      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002332:	4b27      	ldr	r3, [pc, #156]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69da      	ldr	r2, [r3, #28]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234c:	019b      	lsls	r3, r3, #6
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002354:	085b      	lsrs	r3, r3, #1
 8002356:	3b01      	subs	r3, #1
 8002358:	041b      	lsls	r3, r3, #16
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002360:	061b      	lsls	r3, r3, #24
 8002362:	491b      	ldr	r1, [pc, #108]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002368:	4b1b      	ldr	r3, [pc, #108]	@ (80023d8 <HAL_RCC_OscConfig+0x478>)
 800236a:	2201      	movs	r2, #1
 800236c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236e:	f7fe fd1b 	bl	8000da8 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002376:	f7fe fd17 	bl	8000da8 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e05c      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002388:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x416>
 8002394:	e054      	b.n	8002440 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002396:	4b10      	ldr	r3, [pc, #64]	@ (80023d8 <HAL_RCC_OscConfig+0x478>)
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7fe fd04 	bl	8000da8 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a4:	f7fe fd00 	bl	8000da8 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e045      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b6:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <HAL_RCC_OscConfig+0x470>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x444>
 80023c2:	e03d      	b.n	8002440 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d107      	bne.n	80023dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e038      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40007000 	.word	0x40007000
 80023d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023dc:	4b1b      	ldr	r3, [pc, #108]	@ (800244c <HAL_RCC_OscConfig+0x4ec>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d028      	beq.n	800243c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d121      	bne.n	800243c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002402:	429a      	cmp	r2, r3
 8002404:	d11a      	bne.n	800243c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800240c:	4013      	ands	r3, r2
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002412:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002414:	4293      	cmp	r3, r2
 8002416:	d111      	bne.n	800243c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002422:	085b      	lsrs	r3, r3, #1
 8002424:	3b01      	subs	r3, #1
 8002426:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002428:	429a      	cmp	r2, r3
 800242a:	d107      	bne.n	800243c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002436:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002438:	429a      	cmp	r2, r3
 800243a:	d001      	beq.n	8002440 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800

08002450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0cc      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002464:	4b68      	ldr	r3, [pc, #416]	@ (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d90c      	bls.n	800248c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4b65      	ldr	r3, [pc, #404]	@ (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	4b63      	ldr	r3, [pc, #396]	@ (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0b8      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d020      	beq.n	80024da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a4:	4b59      	ldr	r3, [pc, #356]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	4a58      	ldr	r2, [pc, #352]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024bc:	4b53      	ldr	r3, [pc, #332]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	4a52      	ldr	r2, [pc, #328]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c8:	4b50      	ldr	r3, [pc, #320]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	494d      	ldr	r1, [pc, #308]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d044      	beq.n	8002570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d107      	bne.n	80024fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	4b47      	ldr	r3, [pc, #284]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d119      	bne.n	800252e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e07f      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d003      	beq.n	800250e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800250a:	2b03      	cmp	r3, #3
 800250c:	d107      	bne.n	800251e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250e:	4b3f      	ldr	r3, [pc, #252]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d109      	bne.n	800252e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e06f      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251e:	4b3b      	ldr	r3, [pc, #236]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e067      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800252e:	4b37      	ldr	r3, [pc, #220]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f023 0203 	bic.w	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	4934      	ldr	r1, [pc, #208]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	4313      	orrs	r3, r2
 800253e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002540:	f7fe fc32 	bl	8000da8 <HAL_GetTick>
 8002544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002546:	e00a      	b.n	800255e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002548:	f7fe fc2e 	bl	8000da8 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e04f      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255e:	4b2b      	ldr	r3, [pc, #172]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 020c 	and.w	r2, r3, #12
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	429a      	cmp	r2, r3
 800256e:	d1eb      	bne.n	8002548 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002570:	4b25      	ldr	r3, [pc, #148]	@ (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d20c      	bcs.n	8002598 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b22      	ldr	r3, [pc, #136]	@ (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	4b20      	ldr	r3, [pc, #128]	@ (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e032      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a4:	4b19      	ldr	r3, [pc, #100]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	4916      	ldr	r1, [pc, #88]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025c2:	4b12      	ldr	r3, [pc, #72]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	490e      	ldr	r1, [pc, #56]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025d6:	f000 f821 	bl	800261c <HAL_RCC_GetSysClockFreq>
 80025da:	4602      	mov	r2, r0
 80025dc:	4b0b      	ldr	r3, [pc, #44]	@ (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	490a      	ldr	r1, [pc, #40]	@ (8002610 <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	5ccb      	ldrb	r3, [r1, r3]
 80025ea:	fa22 f303 	lsr.w	r3, r2, r3
 80025ee:	4a09      	ldr	r2, [pc, #36]	@ (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80025f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80025f2:	4b09      	ldr	r3, [pc, #36]	@ (8002618 <HAL_RCC_ClockConfig+0x1c8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe fb92 	bl	8000d20 <HAL_InitTick>

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40023c00 	.word	0x40023c00
 800260c:	40023800 	.word	0x40023800
 8002610:	08003a78 	.word	0x08003a78
 8002614:	20000000 	.word	0x20000000
 8002618:	20000004 	.word	0x20000004

0800261c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800261c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002620:	b094      	sub	sp, #80	@ 0x50
 8002622:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002634:	4b79      	ldr	r3, [pc, #484]	@ (800281c <HAL_RCC_GetSysClockFreq+0x200>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 030c 	and.w	r3, r3, #12
 800263c:	2b08      	cmp	r3, #8
 800263e:	d00d      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0x40>
 8002640:	2b08      	cmp	r3, #8
 8002642:	f200 80e1 	bhi.w	8002808 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002646:	2b00      	cmp	r3, #0
 8002648:	d002      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0x34>
 800264a:	2b04      	cmp	r3, #4
 800264c:	d003      	beq.n	8002656 <HAL_RCC_GetSysClockFreq+0x3a>
 800264e:	e0db      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002650:	4b73      	ldr	r3, [pc, #460]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x204>)
 8002652:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002654:	e0db      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002656:	4b73      	ldr	r3, [pc, #460]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x208>)
 8002658:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800265a:	e0d8      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800265c:	4b6f      	ldr	r3, [pc, #444]	@ (800281c <HAL_RCC_GetSysClockFreq+0x200>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002664:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002666:	4b6d      	ldr	r3, [pc, #436]	@ (800281c <HAL_RCC_GetSysClockFreq+0x200>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d063      	beq.n	800273a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002672:	4b6a      	ldr	r3, [pc, #424]	@ (800281c <HAL_RCC_GetSysClockFreq+0x200>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	099b      	lsrs	r3, r3, #6
 8002678:	2200      	movs	r2, #0
 800267a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800267c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800267e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002684:	633b      	str	r3, [r7, #48]	@ 0x30
 8002686:	2300      	movs	r3, #0
 8002688:	637b      	str	r3, [r7, #52]	@ 0x34
 800268a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800268e:	4622      	mov	r2, r4
 8002690:	462b      	mov	r3, r5
 8002692:	f04f 0000 	mov.w	r0, #0
 8002696:	f04f 0100 	mov.w	r1, #0
 800269a:	0159      	lsls	r1, r3, #5
 800269c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a0:	0150      	lsls	r0, r2, #5
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4621      	mov	r1, r4
 80026a8:	1a51      	subs	r1, r2, r1
 80026aa:	6139      	str	r1, [r7, #16]
 80026ac:	4629      	mov	r1, r5
 80026ae:	eb63 0301 	sbc.w	r3, r3, r1
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026c0:	4659      	mov	r1, fp
 80026c2:	018b      	lsls	r3, r1, #6
 80026c4:	4651      	mov	r1, sl
 80026c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ca:	4651      	mov	r1, sl
 80026cc:	018a      	lsls	r2, r1, #6
 80026ce:	4651      	mov	r1, sl
 80026d0:	ebb2 0801 	subs.w	r8, r2, r1
 80026d4:	4659      	mov	r1, fp
 80026d6:	eb63 0901 	sbc.w	r9, r3, r1
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ee:	4690      	mov	r8, r2
 80026f0:	4699      	mov	r9, r3
 80026f2:	4623      	mov	r3, r4
 80026f4:	eb18 0303 	adds.w	r3, r8, r3
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	462b      	mov	r3, r5
 80026fc:	eb49 0303 	adc.w	r3, r9, r3
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800270e:	4629      	mov	r1, r5
 8002710:	024b      	lsls	r3, r1, #9
 8002712:	4621      	mov	r1, r4
 8002714:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002718:	4621      	mov	r1, r4
 800271a:	024a      	lsls	r2, r1, #9
 800271c:	4610      	mov	r0, r2
 800271e:	4619      	mov	r1, r3
 8002720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002722:	2200      	movs	r2, #0
 8002724:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002726:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002728:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800272c:	f7fd fdb8 	bl	80002a0 <__aeabi_uldivmod>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4613      	mov	r3, r2
 8002736:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002738:	e058      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800273a:	4b38      	ldr	r3, [pc, #224]	@ (800281c <HAL_RCC_GetSysClockFreq+0x200>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	099b      	lsrs	r3, r3, #6
 8002740:	2200      	movs	r2, #0
 8002742:	4618      	mov	r0, r3
 8002744:	4611      	mov	r1, r2
 8002746:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800274a:	623b      	str	r3, [r7, #32]
 800274c:	2300      	movs	r3, #0
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002750:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002754:	4642      	mov	r2, r8
 8002756:	464b      	mov	r3, r9
 8002758:	f04f 0000 	mov.w	r0, #0
 800275c:	f04f 0100 	mov.w	r1, #0
 8002760:	0159      	lsls	r1, r3, #5
 8002762:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002766:	0150      	lsls	r0, r2, #5
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4641      	mov	r1, r8
 800276e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002772:	4649      	mov	r1, r9
 8002774:	eb63 0b01 	sbc.w	fp, r3, r1
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002784:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002788:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800278c:	ebb2 040a 	subs.w	r4, r2, sl
 8002790:	eb63 050b 	sbc.w	r5, r3, fp
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	00eb      	lsls	r3, r5, #3
 800279e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027a2:	00e2      	lsls	r2, r4, #3
 80027a4:	4614      	mov	r4, r2
 80027a6:	461d      	mov	r5, r3
 80027a8:	4643      	mov	r3, r8
 80027aa:	18e3      	adds	r3, r4, r3
 80027ac:	603b      	str	r3, [r7, #0]
 80027ae:	464b      	mov	r3, r9
 80027b0:	eb45 0303 	adc.w	r3, r5, r3
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027c2:	4629      	mov	r1, r5
 80027c4:	028b      	lsls	r3, r1, #10
 80027c6:	4621      	mov	r1, r4
 80027c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027cc:	4621      	mov	r1, r4
 80027ce:	028a      	lsls	r2, r1, #10
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027d6:	2200      	movs	r2, #0
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	61fa      	str	r2, [r7, #28]
 80027dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027e0:	f7fd fd5e 	bl	80002a0 <__aeabi_uldivmod>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4613      	mov	r3, r2
 80027ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80027ec:	4b0b      	ldr	r3, [pc, #44]	@ (800281c <HAL_RCC_GetSysClockFreq+0x200>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	0c1b      	lsrs	r3, r3, #16
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	3301      	adds	r3, #1
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80027fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002800:	fbb2 f3f3 	udiv	r3, r2, r3
 8002804:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002806:	e002      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002808:	4b05      	ldr	r3, [pc, #20]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x204>)
 800280a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800280c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800280e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002810:	4618      	mov	r0, r3
 8002812:	3750      	adds	r7, #80	@ 0x50
 8002814:	46bd      	mov	sp, r7
 8002816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800
 8002820:	00f42400 	.word	0x00f42400
 8002824:	007a1200 	.word	0x007a1200

08002828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800282c:	4b03      	ldr	r3, [pc, #12]	@ (800283c <HAL_RCC_GetHCLKFreq+0x14>)
 800282e:	681b      	ldr	r3, [r3, #0]
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000000 	.word	0x20000000

08002840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002844:	f7ff fff0 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 8002848:	4602      	mov	r2, r0
 800284a:	4b05      	ldr	r3, [pc, #20]	@ (8002860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	0a9b      	lsrs	r3, r3, #10
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	4903      	ldr	r1, [pc, #12]	@ (8002864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002856:	5ccb      	ldrb	r3, [r1, r3]
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800285c:	4618      	mov	r0, r3
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40023800 	.word	0x40023800
 8002864:	08003a88 	.word	0x08003a88

08002868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800286c:	f7ff ffdc 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 8002870:	4602      	mov	r2, r0
 8002872:	4b05      	ldr	r3, [pc, #20]	@ (8002888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	0b5b      	lsrs	r3, r3, #13
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	4903      	ldr	r1, [pc, #12]	@ (800288c <HAL_RCC_GetPCLK2Freq+0x24>)
 800287e:	5ccb      	ldrb	r3, [r1, r3]
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002884:	4618      	mov	r0, r3
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40023800 	.word	0x40023800
 800288c:	08003a88 	.word	0x08003a88

08002890 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e042      	b.n	8002928 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7fe f908 	bl	8000acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2224      	movs	r2, #36	@ 0x24
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f973 	bl	8002bc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695a      	ldr	r2, [r3, #20]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002908:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08a      	sub	sp, #40	@ 0x28
 8002934:	af02      	add	r7, sp, #8
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	603b      	str	r3, [r7, #0]
 800293c:	4613      	mov	r3, r2
 800293e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b20      	cmp	r3, #32
 800294e:	d175      	bne.n	8002a3c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <HAL_UART_Transmit+0x2c>
 8002956:	88fb      	ldrh	r3, [r7, #6]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e06e      	b.n	8002a3e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2221      	movs	r2, #33	@ 0x21
 800296a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800296e:	f7fe fa1b 	bl	8000da8 <HAL_GetTick>
 8002972:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	88fa      	ldrh	r2, [r7, #6]
 8002978:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	88fa      	ldrh	r2, [r7, #6]
 800297e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002988:	d108      	bne.n	800299c <HAL_UART_Transmit+0x6c>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d104      	bne.n	800299c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	e003      	b.n	80029a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029a4:	e02e      	b.n	8002a04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2200      	movs	r2, #0
 80029ae:	2180      	movs	r1, #128	@ 0x80
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f848 	bl	8002a46 <UART_WaitOnFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e03a      	b.n	8002a3e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10b      	bne.n	80029e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	3302      	adds	r3, #2
 80029e2:	61bb      	str	r3, [r7, #24]
 80029e4:	e007      	b.n	80029f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	781a      	ldrb	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	3301      	adds	r3, #1
 80029f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1cb      	bne.n	80029a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2200      	movs	r2, #0
 8002a16:	2140      	movs	r1, #64	@ 0x40
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 f814 	bl	8002a46 <UART_WaitOnFlagUntilTimeout>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e006      	b.n	8002a3e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e000      	b.n	8002a3e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a3c:	2302      	movs	r3, #2
  }
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3720      	adds	r7, #32
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b086      	sub	sp, #24
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	603b      	str	r3, [r7, #0]
 8002a52:	4613      	mov	r3, r2
 8002a54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a56:	e03b      	b.n	8002ad0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a5e:	d037      	beq.n	8002ad0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a60:	f7fe f9a2 	bl	8000da8 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	6a3a      	ldr	r2, [r7, #32]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d302      	bcc.n	8002a76 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e03a      	b.n	8002af0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d023      	beq.n	8002ad0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b80      	cmp	r3, #128	@ 0x80
 8002a8c:	d020      	beq.n	8002ad0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b40      	cmp	r3, #64	@ 0x40
 8002a92:	d01d      	beq.n	8002ad0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d116      	bne.n	8002ad0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 f81d 	bl	8002af8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2208      	movs	r2, #8
 8002ac2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e00f      	b.n	8002af0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d0b4      	beq.n	8002a58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b095      	sub	sp, #84	@ 0x54
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b0a:	e853 3f00 	ldrex	r3, [r3]
 8002b0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b20:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b28:	e841 2300 	strex	r3, r2, [r1]
 8002b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e5      	bne.n	8002b00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3314      	adds	r3, #20
 8002b3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	e853 3f00 	ldrex	r3, [r3]
 8002b42:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f023 0301 	bic.w	r3, r3, #1
 8002b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	3314      	adds	r3, #20
 8002b52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b5c:	e841 2300 	strex	r3, r2, [r1]
 8002b60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1e5      	bne.n	8002b34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d119      	bne.n	8002ba4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	330c      	adds	r3, #12
 8002b76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	e853 3f00 	ldrex	r3, [r3]
 8002b7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f023 0310 	bic.w	r3, r3, #16
 8002b86:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	330c      	adds	r3, #12
 8002b8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b90:	61ba      	str	r2, [r7, #24]
 8002b92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b94:	6979      	ldr	r1, [r7, #20]
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	e841 2300 	strex	r3, r2, [r1]
 8002b9c:	613b      	str	r3, [r7, #16]
   return(result);
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1e5      	bne.n	8002b70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002bb2:	bf00      	nop
 8002bb4:	3754      	adds	r7, #84	@ 0x54
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bc4:	b0c0      	sub	sp, #256	@ 0x100
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bdc:	68d9      	ldr	r1, [r3, #12]
 8002bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	ea40 0301 	orr.w	r3, r0, r1
 8002be8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002c18:	f021 010c 	bic.w	r1, r1, #12
 8002c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002c26:	430b      	orrs	r3, r1
 8002c28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c3a:	6999      	ldr	r1, [r3, #24]
 8002c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	ea40 0301 	orr.w	r3, r0, r1
 8002c46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	4b8f      	ldr	r3, [pc, #572]	@ (8002e8c <UART_SetConfig+0x2cc>)
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d005      	beq.n	8002c60 <UART_SetConfig+0xa0>
 8002c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4b8d      	ldr	r3, [pc, #564]	@ (8002e90 <UART_SetConfig+0x2d0>)
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d104      	bne.n	8002c6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c60:	f7ff fe02 	bl	8002868 <HAL_RCC_GetPCLK2Freq>
 8002c64:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002c68:	e003      	b.n	8002c72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c6a:	f7ff fde9 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 8002c6e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c7c:	f040 810c 	bne.w	8002e98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c84:	2200      	movs	r2, #0
 8002c86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002c8a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002c8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002c92:	4622      	mov	r2, r4
 8002c94:	462b      	mov	r3, r5
 8002c96:	1891      	adds	r1, r2, r2
 8002c98:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002c9a:	415b      	adcs	r3, r3
 8002c9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ca2:	4621      	mov	r1, r4
 8002ca4:	eb12 0801 	adds.w	r8, r2, r1
 8002ca8:	4629      	mov	r1, r5
 8002caa:	eb43 0901 	adc.w	r9, r3, r1
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cc2:	4690      	mov	r8, r2
 8002cc4:	4699      	mov	r9, r3
 8002cc6:	4623      	mov	r3, r4
 8002cc8:	eb18 0303 	adds.w	r3, r8, r3
 8002ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002cd0:	462b      	mov	r3, r5
 8002cd2:	eb49 0303 	adc.w	r3, r9, r3
 8002cd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002ce6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002cea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002cee:	460b      	mov	r3, r1
 8002cf0:	18db      	adds	r3, r3, r3
 8002cf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	eb42 0303 	adc.w	r3, r2, r3
 8002cfa:	657b      	str	r3, [r7, #84]	@ 0x54
 8002cfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002d00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002d04:	f7fd facc 	bl	80002a0 <__aeabi_uldivmod>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4b61      	ldr	r3, [pc, #388]	@ (8002e94 <UART_SetConfig+0x2d4>)
 8002d0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	011c      	lsls	r4, r3, #4
 8002d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d20:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002d24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002d28:	4642      	mov	r2, r8
 8002d2a:	464b      	mov	r3, r9
 8002d2c:	1891      	adds	r1, r2, r2
 8002d2e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002d30:	415b      	adcs	r3, r3
 8002d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d38:	4641      	mov	r1, r8
 8002d3a:	eb12 0a01 	adds.w	sl, r2, r1
 8002d3e:	4649      	mov	r1, r9
 8002d40:	eb43 0b01 	adc.w	fp, r3, r1
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d58:	4692      	mov	sl, r2
 8002d5a:	469b      	mov	fp, r3
 8002d5c:	4643      	mov	r3, r8
 8002d5e:	eb1a 0303 	adds.w	r3, sl, r3
 8002d62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d66:	464b      	mov	r3, r9
 8002d68:	eb4b 0303 	adc.w	r3, fp, r3
 8002d6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d7c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002d80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002d84:	460b      	mov	r3, r1
 8002d86:	18db      	adds	r3, r3, r3
 8002d88:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	eb42 0303 	adc.w	r3, r2, r3
 8002d90:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002d9a:	f7fd fa81 	bl	80002a0 <__aeabi_uldivmod>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4611      	mov	r1, r2
 8002da4:	4b3b      	ldr	r3, [pc, #236]	@ (8002e94 <UART_SetConfig+0x2d4>)
 8002da6:	fba3 2301 	umull	r2, r3, r3, r1
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	2264      	movs	r2, #100	@ 0x64
 8002dae:	fb02 f303 	mul.w	r3, r2, r3
 8002db2:	1acb      	subs	r3, r1, r3
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002dba:	4b36      	ldr	r3, [pc, #216]	@ (8002e94 <UART_SetConfig+0x2d4>)
 8002dbc:	fba3 2302 	umull	r2, r3, r3, r2
 8002dc0:	095b      	lsrs	r3, r3, #5
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002dc8:	441c      	add	r4, r3
 8002dca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002dd4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002dd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ddc:	4642      	mov	r2, r8
 8002dde:	464b      	mov	r3, r9
 8002de0:	1891      	adds	r1, r2, r2
 8002de2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002de4:	415b      	adcs	r3, r3
 8002de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002de8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002dec:	4641      	mov	r1, r8
 8002dee:	1851      	adds	r1, r2, r1
 8002df0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002df2:	4649      	mov	r1, r9
 8002df4:	414b      	adcs	r3, r1
 8002df6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002e04:	4659      	mov	r1, fp
 8002e06:	00cb      	lsls	r3, r1, #3
 8002e08:	4651      	mov	r1, sl
 8002e0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e0e:	4651      	mov	r1, sl
 8002e10:	00ca      	lsls	r2, r1, #3
 8002e12:	4610      	mov	r0, r2
 8002e14:	4619      	mov	r1, r3
 8002e16:	4603      	mov	r3, r0
 8002e18:	4642      	mov	r2, r8
 8002e1a:	189b      	adds	r3, r3, r2
 8002e1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e20:	464b      	mov	r3, r9
 8002e22:	460a      	mov	r2, r1
 8002e24:	eb42 0303 	adc.w	r3, r2, r3
 8002e28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002e3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e40:	460b      	mov	r3, r1
 8002e42:	18db      	adds	r3, r3, r3
 8002e44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e46:	4613      	mov	r3, r2
 8002e48:	eb42 0303 	adc.w	r3, r2, r3
 8002e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002e56:	f7fd fa23 	bl	80002a0 <__aeabi_uldivmod>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e94 <UART_SetConfig+0x2d4>)
 8002e60:	fba3 1302 	umull	r1, r3, r3, r2
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	2164      	movs	r1, #100	@ 0x64
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	3332      	adds	r3, #50	@ 0x32
 8002e72:	4a08      	ldr	r2, [pc, #32]	@ (8002e94 <UART_SetConfig+0x2d4>)
 8002e74:	fba2 2303 	umull	r2, r3, r2, r3
 8002e78:	095b      	lsrs	r3, r3, #5
 8002e7a:	f003 0207 	and.w	r2, r3, #7
 8002e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4422      	add	r2, r4
 8002e86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e88:	e106      	b.n	8003098 <UART_SetConfig+0x4d8>
 8002e8a:	bf00      	nop
 8002e8c:	40011000 	.word	0x40011000
 8002e90:	40011400 	.word	0x40011400
 8002e94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ea2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002ea6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002eaa:	4642      	mov	r2, r8
 8002eac:	464b      	mov	r3, r9
 8002eae:	1891      	adds	r1, r2, r2
 8002eb0:	6239      	str	r1, [r7, #32]
 8002eb2:	415b      	adcs	r3, r3
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002eba:	4641      	mov	r1, r8
 8002ebc:	1854      	adds	r4, r2, r1
 8002ebe:	4649      	mov	r1, r9
 8002ec0:	eb43 0501 	adc.w	r5, r3, r1
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	00eb      	lsls	r3, r5, #3
 8002ece:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ed2:	00e2      	lsls	r2, r4, #3
 8002ed4:	4614      	mov	r4, r2
 8002ed6:	461d      	mov	r5, r3
 8002ed8:	4643      	mov	r3, r8
 8002eda:	18e3      	adds	r3, r4, r3
 8002edc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ee0:	464b      	mov	r3, r9
 8002ee2:	eb45 0303 	adc.w	r3, r5, r3
 8002ee6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ef6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f06:	4629      	mov	r1, r5
 8002f08:	008b      	lsls	r3, r1, #2
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f10:	4621      	mov	r1, r4
 8002f12:	008a      	lsls	r2, r1, #2
 8002f14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002f18:	f7fd f9c2 	bl	80002a0 <__aeabi_uldivmod>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4b60      	ldr	r3, [pc, #384]	@ (80030a4 <UART_SetConfig+0x4e4>)
 8002f22:	fba3 2302 	umull	r2, r3, r3, r2
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	011c      	lsls	r4, r3, #4
 8002f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002f3c:	4642      	mov	r2, r8
 8002f3e:	464b      	mov	r3, r9
 8002f40:	1891      	adds	r1, r2, r2
 8002f42:	61b9      	str	r1, [r7, #24]
 8002f44:	415b      	adcs	r3, r3
 8002f46:	61fb      	str	r3, [r7, #28]
 8002f48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f4c:	4641      	mov	r1, r8
 8002f4e:	1851      	adds	r1, r2, r1
 8002f50:	6139      	str	r1, [r7, #16]
 8002f52:	4649      	mov	r1, r9
 8002f54:	414b      	adcs	r3, r1
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f64:	4659      	mov	r1, fp
 8002f66:	00cb      	lsls	r3, r1, #3
 8002f68:	4651      	mov	r1, sl
 8002f6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f6e:	4651      	mov	r1, sl
 8002f70:	00ca      	lsls	r2, r1, #3
 8002f72:	4610      	mov	r0, r2
 8002f74:	4619      	mov	r1, r3
 8002f76:	4603      	mov	r3, r0
 8002f78:	4642      	mov	r2, r8
 8002f7a:	189b      	adds	r3, r3, r2
 8002f7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f80:	464b      	mov	r3, r9
 8002f82:	460a      	mov	r2, r1
 8002f84:	eb42 0303 	adc.w	r3, r2, r3
 8002f88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002fa4:	4649      	mov	r1, r9
 8002fa6:	008b      	lsls	r3, r1, #2
 8002fa8:	4641      	mov	r1, r8
 8002faa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fae:	4641      	mov	r1, r8
 8002fb0:	008a      	lsls	r2, r1, #2
 8002fb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002fb6:	f7fd f973 	bl	80002a0 <__aeabi_uldivmod>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4b38      	ldr	r3, [pc, #224]	@ (80030a4 <UART_SetConfig+0x4e4>)
 8002fc2:	fba3 2301 	umull	r2, r3, r3, r1
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	2264      	movs	r2, #100	@ 0x64
 8002fca:	fb02 f303 	mul.w	r3, r2, r3
 8002fce:	1acb      	subs	r3, r1, r3
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	3332      	adds	r3, #50	@ 0x32
 8002fd4:	4a33      	ldr	r2, [pc, #204]	@ (80030a4 <UART_SetConfig+0x4e4>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fe0:	441c      	add	r4, r3
 8002fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	673b      	str	r3, [r7, #112]	@ 0x70
 8002fea:	677a      	str	r2, [r7, #116]	@ 0x74
 8002fec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ff0:	4642      	mov	r2, r8
 8002ff2:	464b      	mov	r3, r9
 8002ff4:	1891      	adds	r1, r2, r2
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	415b      	adcs	r3, r3
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003000:	4641      	mov	r1, r8
 8003002:	1851      	adds	r1, r2, r1
 8003004:	6039      	str	r1, [r7, #0]
 8003006:	4649      	mov	r1, r9
 8003008:	414b      	adcs	r3, r1
 800300a:	607b      	str	r3, [r7, #4]
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003018:	4659      	mov	r1, fp
 800301a:	00cb      	lsls	r3, r1, #3
 800301c:	4651      	mov	r1, sl
 800301e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003022:	4651      	mov	r1, sl
 8003024:	00ca      	lsls	r2, r1, #3
 8003026:	4610      	mov	r0, r2
 8003028:	4619      	mov	r1, r3
 800302a:	4603      	mov	r3, r0
 800302c:	4642      	mov	r2, r8
 800302e:	189b      	adds	r3, r3, r2
 8003030:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003032:	464b      	mov	r3, r9
 8003034:	460a      	mov	r2, r1
 8003036:	eb42 0303 	adc.w	r3, r2, r3
 800303a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800303c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	663b      	str	r3, [r7, #96]	@ 0x60
 8003046:	667a      	str	r2, [r7, #100]	@ 0x64
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003054:	4649      	mov	r1, r9
 8003056:	008b      	lsls	r3, r1, #2
 8003058:	4641      	mov	r1, r8
 800305a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800305e:	4641      	mov	r1, r8
 8003060:	008a      	lsls	r2, r1, #2
 8003062:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003066:	f7fd f91b 	bl	80002a0 <__aeabi_uldivmod>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4b0d      	ldr	r3, [pc, #52]	@ (80030a4 <UART_SetConfig+0x4e4>)
 8003070:	fba3 1302 	umull	r1, r3, r3, r2
 8003074:	095b      	lsrs	r3, r3, #5
 8003076:	2164      	movs	r1, #100	@ 0x64
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	3332      	adds	r3, #50	@ 0x32
 8003082:	4a08      	ldr	r2, [pc, #32]	@ (80030a4 <UART_SetConfig+0x4e4>)
 8003084:	fba2 2303 	umull	r2, r3, r2, r3
 8003088:	095b      	lsrs	r3, r3, #5
 800308a:	f003 020f 	and.w	r2, r3, #15
 800308e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4422      	add	r2, r4
 8003096:	609a      	str	r2, [r3, #8]
}
 8003098:	bf00      	nop
 800309a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800309e:	46bd      	mov	sp, r7
 80030a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030a4:	51eb851f 	.word	0x51eb851f

080030a8 <sniprintf>:
 80030a8:	b40c      	push	{r2, r3}
 80030aa:	b530      	push	{r4, r5, lr}
 80030ac:	4b17      	ldr	r3, [pc, #92]	@ (800310c <sniprintf+0x64>)
 80030ae:	1e0c      	subs	r4, r1, #0
 80030b0:	681d      	ldr	r5, [r3, #0]
 80030b2:	b09d      	sub	sp, #116	@ 0x74
 80030b4:	da08      	bge.n	80030c8 <sniprintf+0x20>
 80030b6:	238b      	movs	r3, #139	@ 0x8b
 80030b8:	602b      	str	r3, [r5, #0]
 80030ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030be:	b01d      	add	sp, #116	@ 0x74
 80030c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80030c4:	b002      	add	sp, #8
 80030c6:	4770      	bx	lr
 80030c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80030cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80030d0:	bf14      	ite	ne
 80030d2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80030d6:	4623      	moveq	r3, r4
 80030d8:	9304      	str	r3, [sp, #16]
 80030da:	9307      	str	r3, [sp, #28]
 80030dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030e0:	9002      	str	r0, [sp, #8]
 80030e2:	9006      	str	r0, [sp, #24]
 80030e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80030e8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80030ea:	ab21      	add	r3, sp, #132	@ 0x84
 80030ec:	a902      	add	r1, sp, #8
 80030ee:	4628      	mov	r0, r5
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	f000 f9a9 	bl	8003448 <_svfiprintf_r>
 80030f6:	1c43      	adds	r3, r0, #1
 80030f8:	bfbc      	itt	lt
 80030fa:	238b      	movlt	r3, #139	@ 0x8b
 80030fc:	602b      	strlt	r3, [r5, #0]
 80030fe:	2c00      	cmp	r4, #0
 8003100:	d0dd      	beq.n	80030be <sniprintf+0x16>
 8003102:	9b02      	ldr	r3, [sp, #8]
 8003104:	2200      	movs	r2, #0
 8003106:	701a      	strb	r2, [r3, #0]
 8003108:	e7d9      	b.n	80030be <sniprintf+0x16>
 800310a:	bf00      	nop
 800310c:	2000000c 	.word	0x2000000c

08003110 <memset>:
 8003110:	4402      	add	r2, r0
 8003112:	4603      	mov	r3, r0
 8003114:	4293      	cmp	r3, r2
 8003116:	d100      	bne.n	800311a <memset+0xa>
 8003118:	4770      	bx	lr
 800311a:	f803 1b01 	strb.w	r1, [r3], #1
 800311e:	e7f9      	b.n	8003114 <memset+0x4>

08003120 <strncat>:
 8003120:	b530      	push	{r4, r5, lr}
 8003122:	4604      	mov	r4, r0
 8003124:	7825      	ldrb	r5, [r4, #0]
 8003126:	4623      	mov	r3, r4
 8003128:	3401      	adds	r4, #1
 800312a:	2d00      	cmp	r5, #0
 800312c:	d1fa      	bne.n	8003124 <strncat+0x4>
 800312e:	3a01      	subs	r2, #1
 8003130:	d304      	bcc.n	800313c <strncat+0x1c>
 8003132:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003136:	f803 4b01 	strb.w	r4, [r3], #1
 800313a:	b904      	cbnz	r4, 800313e <strncat+0x1e>
 800313c:	bd30      	pop	{r4, r5, pc}
 800313e:	2a00      	cmp	r2, #0
 8003140:	d1f5      	bne.n	800312e <strncat+0xe>
 8003142:	701a      	strb	r2, [r3, #0]
 8003144:	e7f3      	b.n	800312e <strncat+0xe>
	...

08003148 <__errno>:
 8003148:	4b01      	ldr	r3, [pc, #4]	@ (8003150 <__errno+0x8>)
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	2000000c 	.word	0x2000000c

08003154 <__libc_init_array>:
 8003154:	b570      	push	{r4, r5, r6, lr}
 8003156:	4d0d      	ldr	r5, [pc, #52]	@ (800318c <__libc_init_array+0x38>)
 8003158:	4c0d      	ldr	r4, [pc, #52]	@ (8003190 <__libc_init_array+0x3c>)
 800315a:	1b64      	subs	r4, r4, r5
 800315c:	10a4      	asrs	r4, r4, #2
 800315e:	2600      	movs	r6, #0
 8003160:	42a6      	cmp	r6, r4
 8003162:	d109      	bne.n	8003178 <__libc_init_array+0x24>
 8003164:	4d0b      	ldr	r5, [pc, #44]	@ (8003194 <__libc_init_array+0x40>)
 8003166:	4c0c      	ldr	r4, [pc, #48]	@ (8003198 <__libc_init_array+0x44>)
 8003168:	f000 fc66 	bl	8003a38 <_init>
 800316c:	1b64      	subs	r4, r4, r5
 800316e:	10a4      	asrs	r4, r4, #2
 8003170:	2600      	movs	r6, #0
 8003172:	42a6      	cmp	r6, r4
 8003174:	d105      	bne.n	8003182 <__libc_init_array+0x2e>
 8003176:	bd70      	pop	{r4, r5, r6, pc}
 8003178:	f855 3b04 	ldr.w	r3, [r5], #4
 800317c:	4798      	blx	r3
 800317e:	3601      	adds	r6, #1
 8003180:	e7ee      	b.n	8003160 <__libc_init_array+0xc>
 8003182:	f855 3b04 	ldr.w	r3, [r5], #4
 8003186:	4798      	blx	r3
 8003188:	3601      	adds	r6, #1
 800318a:	e7f2      	b.n	8003172 <__libc_init_array+0x1e>
 800318c:	08003acc 	.word	0x08003acc
 8003190:	08003acc 	.word	0x08003acc
 8003194:	08003acc 	.word	0x08003acc
 8003198:	08003ad0 	.word	0x08003ad0

0800319c <__retarget_lock_acquire_recursive>:
 800319c:	4770      	bx	lr

0800319e <__retarget_lock_release_recursive>:
 800319e:	4770      	bx	lr

080031a0 <_free_r>:
 80031a0:	b538      	push	{r3, r4, r5, lr}
 80031a2:	4605      	mov	r5, r0
 80031a4:	2900      	cmp	r1, #0
 80031a6:	d041      	beq.n	800322c <_free_r+0x8c>
 80031a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031ac:	1f0c      	subs	r4, r1, #4
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bfb8      	it	lt
 80031b2:	18e4      	addlt	r4, r4, r3
 80031b4:	f000 f8e0 	bl	8003378 <__malloc_lock>
 80031b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003230 <_free_r+0x90>)
 80031ba:	6813      	ldr	r3, [r2, #0]
 80031bc:	b933      	cbnz	r3, 80031cc <_free_r+0x2c>
 80031be:	6063      	str	r3, [r4, #4]
 80031c0:	6014      	str	r4, [r2, #0]
 80031c2:	4628      	mov	r0, r5
 80031c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031c8:	f000 b8dc 	b.w	8003384 <__malloc_unlock>
 80031cc:	42a3      	cmp	r3, r4
 80031ce:	d908      	bls.n	80031e2 <_free_r+0x42>
 80031d0:	6820      	ldr	r0, [r4, #0]
 80031d2:	1821      	adds	r1, r4, r0
 80031d4:	428b      	cmp	r3, r1
 80031d6:	bf01      	itttt	eq
 80031d8:	6819      	ldreq	r1, [r3, #0]
 80031da:	685b      	ldreq	r3, [r3, #4]
 80031dc:	1809      	addeq	r1, r1, r0
 80031de:	6021      	streq	r1, [r4, #0]
 80031e0:	e7ed      	b.n	80031be <_free_r+0x1e>
 80031e2:	461a      	mov	r2, r3
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	b10b      	cbz	r3, 80031ec <_free_r+0x4c>
 80031e8:	42a3      	cmp	r3, r4
 80031ea:	d9fa      	bls.n	80031e2 <_free_r+0x42>
 80031ec:	6811      	ldr	r1, [r2, #0]
 80031ee:	1850      	adds	r0, r2, r1
 80031f0:	42a0      	cmp	r0, r4
 80031f2:	d10b      	bne.n	800320c <_free_r+0x6c>
 80031f4:	6820      	ldr	r0, [r4, #0]
 80031f6:	4401      	add	r1, r0
 80031f8:	1850      	adds	r0, r2, r1
 80031fa:	4283      	cmp	r3, r0
 80031fc:	6011      	str	r1, [r2, #0]
 80031fe:	d1e0      	bne.n	80031c2 <_free_r+0x22>
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	6053      	str	r3, [r2, #4]
 8003206:	4408      	add	r0, r1
 8003208:	6010      	str	r0, [r2, #0]
 800320a:	e7da      	b.n	80031c2 <_free_r+0x22>
 800320c:	d902      	bls.n	8003214 <_free_r+0x74>
 800320e:	230c      	movs	r3, #12
 8003210:	602b      	str	r3, [r5, #0]
 8003212:	e7d6      	b.n	80031c2 <_free_r+0x22>
 8003214:	6820      	ldr	r0, [r4, #0]
 8003216:	1821      	adds	r1, r4, r0
 8003218:	428b      	cmp	r3, r1
 800321a:	bf04      	itt	eq
 800321c:	6819      	ldreq	r1, [r3, #0]
 800321e:	685b      	ldreq	r3, [r3, #4]
 8003220:	6063      	str	r3, [r4, #4]
 8003222:	bf04      	itt	eq
 8003224:	1809      	addeq	r1, r1, r0
 8003226:	6021      	streq	r1, [r4, #0]
 8003228:	6054      	str	r4, [r2, #4]
 800322a:	e7ca      	b.n	80031c2 <_free_r+0x22>
 800322c:	bd38      	pop	{r3, r4, r5, pc}
 800322e:	bf00      	nop
 8003230:	200002d4 	.word	0x200002d4

08003234 <sbrk_aligned>:
 8003234:	b570      	push	{r4, r5, r6, lr}
 8003236:	4e0f      	ldr	r6, [pc, #60]	@ (8003274 <sbrk_aligned+0x40>)
 8003238:	460c      	mov	r4, r1
 800323a:	6831      	ldr	r1, [r6, #0]
 800323c:	4605      	mov	r5, r0
 800323e:	b911      	cbnz	r1, 8003246 <sbrk_aligned+0x12>
 8003240:	f000 fba6 	bl	8003990 <_sbrk_r>
 8003244:	6030      	str	r0, [r6, #0]
 8003246:	4621      	mov	r1, r4
 8003248:	4628      	mov	r0, r5
 800324a:	f000 fba1 	bl	8003990 <_sbrk_r>
 800324e:	1c43      	adds	r3, r0, #1
 8003250:	d103      	bne.n	800325a <sbrk_aligned+0x26>
 8003252:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003256:	4620      	mov	r0, r4
 8003258:	bd70      	pop	{r4, r5, r6, pc}
 800325a:	1cc4      	adds	r4, r0, #3
 800325c:	f024 0403 	bic.w	r4, r4, #3
 8003260:	42a0      	cmp	r0, r4
 8003262:	d0f8      	beq.n	8003256 <sbrk_aligned+0x22>
 8003264:	1a21      	subs	r1, r4, r0
 8003266:	4628      	mov	r0, r5
 8003268:	f000 fb92 	bl	8003990 <_sbrk_r>
 800326c:	3001      	adds	r0, #1
 800326e:	d1f2      	bne.n	8003256 <sbrk_aligned+0x22>
 8003270:	e7ef      	b.n	8003252 <sbrk_aligned+0x1e>
 8003272:	bf00      	nop
 8003274:	200002d0 	.word	0x200002d0

08003278 <_malloc_r>:
 8003278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800327c:	1ccd      	adds	r5, r1, #3
 800327e:	f025 0503 	bic.w	r5, r5, #3
 8003282:	3508      	adds	r5, #8
 8003284:	2d0c      	cmp	r5, #12
 8003286:	bf38      	it	cc
 8003288:	250c      	movcc	r5, #12
 800328a:	2d00      	cmp	r5, #0
 800328c:	4606      	mov	r6, r0
 800328e:	db01      	blt.n	8003294 <_malloc_r+0x1c>
 8003290:	42a9      	cmp	r1, r5
 8003292:	d904      	bls.n	800329e <_malloc_r+0x26>
 8003294:	230c      	movs	r3, #12
 8003296:	6033      	str	r3, [r6, #0]
 8003298:	2000      	movs	r0, #0
 800329a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800329e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003374 <_malloc_r+0xfc>
 80032a2:	f000 f869 	bl	8003378 <__malloc_lock>
 80032a6:	f8d8 3000 	ldr.w	r3, [r8]
 80032aa:	461c      	mov	r4, r3
 80032ac:	bb44      	cbnz	r4, 8003300 <_malloc_r+0x88>
 80032ae:	4629      	mov	r1, r5
 80032b0:	4630      	mov	r0, r6
 80032b2:	f7ff ffbf 	bl	8003234 <sbrk_aligned>
 80032b6:	1c43      	adds	r3, r0, #1
 80032b8:	4604      	mov	r4, r0
 80032ba:	d158      	bne.n	800336e <_malloc_r+0xf6>
 80032bc:	f8d8 4000 	ldr.w	r4, [r8]
 80032c0:	4627      	mov	r7, r4
 80032c2:	2f00      	cmp	r7, #0
 80032c4:	d143      	bne.n	800334e <_malloc_r+0xd6>
 80032c6:	2c00      	cmp	r4, #0
 80032c8:	d04b      	beq.n	8003362 <_malloc_r+0xea>
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	4639      	mov	r1, r7
 80032ce:	4630      	mov	r0, r6
 80032d0:	eb04 0903 	add.w	r9, r4, r3
 80032d4:	f000 fb5c 	bl	8003990 <_sbrk_r>
 80032d8:	4581      	cmp	r9, r0
 80032da:	d142      	bne.n	8003362 <_malloc_r+0xea>
 80032dc:	6821      	ldr	r1, [r4, #0]
 80032de:	1a6d      	subs	r5, r5, r1
 80032e0:	4629      	mov	r1, r5
 80032e2:	4630      	mov	r0, r6
 80032e4:	f7ff ffa6 	bl	8003234 <sbrk_aligned>
 80032e8:	3001      	adds	r0, #1
 80032ea:	d03a      	beq.n	8003362 <_malloc_r+0xea>
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	442b      	add	r3, r5
 80032f0:	6023      	str	r3, [r4, #0]
 80032f2:	f8d8 3000 	ldr.w	r3, [r8]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	bb62      	cbnz	r2, 8003354 <_malloc_r+0xdc>
 80032fa:	f8c8 7000 	str.w	r7, [r8]
 80032fe:	e00f      	b.n	8003320 <_malloc_r+0xa8>
 8003300:	6822      	ldr	r2, [r4, #0]
 8003302:	1b52      	subs	r2, r2, r5
 8003304:	d420      	bmi.n	8003348 <_malloc_r+0xd0>
 8003306:	2a0b      	cmp	r2, #11
 8003308:	d917      	bls.n	800333a <_malloc_r+0xc2>
 800330a:	1961      	adds	r1, r4, r5
 800330c:	42a3      	cmp	r3, r4
 800330e:	6025      	str	r5, [r4, #0]
 8003310:	bf18      	it	ne
 8003312:	6059      	strne	r1, [r3, #4]
 8003314:	6863      	ldr	r3, [r4, #4]
 8003316:	bf08      	it	eq
 8003318:	f8c8 1000 	streq.w	r1, [r8]
 800331c:	5162      	str	r2, [r4, r5]
 800331e:	604b      	str	r3, [r1, #4]
 8003320:	4630      	mov	r0, r6
 8003322:	f000 f82f 	bl	8003384 <__malloc_unlock>
 8003326:	f104 000b 	add.w	r0, r4, #11
 800332a:	1d23      	adds	r3, r4, #4
 800332c:	f020 0007 	bic.w	r0, r0, #7
 8003330:	1ac2      	subs	r2, r0, r3
 8003332:	bf1c      	itt	ne
 8003334:	1a1b      	subne	r3, r3, r0
 8003336:	50a3      	strne	r3, [r4, r2]
 8003338:	e7af      	b.n	800329a <_malloc_r+0x22>
 800333a:	6862      	ldr	r2, [r4, #4]
 800333c:	42a3      	cmp	r3, r4
 800333e:	bf0c      	ite	eq
 8003340:	f8c8 2000 	streq.w	r2, [r8]
 8003344:	605a      	strne	r2, [r3, #4]
 8003346:	e7eb      	b.n	8003320 <_malloc_r+0xa8>
 8003348:	4623      	mov	r3, r4
 800334a:	6864      	ldr	r4, [r4, #4]
 800334c:	e7ae      	b.n	80032ac <_malloc_r+0x34>
 800334e:	463c      	mov	r4, r7
 8003350:	687f      	ldr	r7, [r7, #4]
 8003352:	e7b6      	b.n	80032c2 <_malloc_r+0x4a>
 8003354:	461a      	mov	r2, r3
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	42a3      	cmp	r3, r4
 800335a:	d1fb      	bne.n	8003354 <_malloc_r+0xdc>
 800335c:	2300      	movs	r3, #0
 800335e:	6053      	str	r3, [r2, #4]
 8003360:	e7de      	b.n	8003320 <_malloc_r+0xa8>
 8003362:	230c      	movs	r3, #12
 8003364:	6033      	str	r3, [r6, #0]
 8003366:	4630      	mov	r0, r6
 8003368:	f000 f80c 	bl	8003384 <__malloc_unlock>
 800336c:	e794      	b.n	8003298 <_malloc_r+0x20>
 800336e:	6005      	str	r5, [r0, #0]
 8003370:	e7d6      	b.n	8003320 <_malloc_r+0xa8>
 8003372:	bf00      	nop
 8003374:	200002d4 	.word	0x200002d4

08003378 <__malloc_lock>:
 8003378:	4801      	ldr	r0, [pc, #4]	@ (8003380 <__malloc_lock+0x8>)
 800337a:	f7ff bf0f 	b.w	800319c <__retarget_lock_acquire_recursive>
 800337e:	bf00      	nop
 8003380:	200002cc 	.word	0x200002cc

08003384 <__malloc_unlock>:
 8003384:	4801      	ldr	r0, [pc, #4]	@ (800338c <__malloc_unlock+0x8>)
 8003386:	f7ff bf0a 	b.w	800319e <__retarget_lock_release_recursive>
 800338a:	bf00      	nop
 800338c:	200002cc 	.word	0x200002cc

08003390 <__ssputs_r>:
 8003390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003394:	688e      	ldr	r6, [r1, #8]
 8003396:	461f      	mov	r7, r3
 8003398:	42be      	cmp	r6, r7
 800339a:	680b      	ldr	r3, [r1, #0]
 800339c:	4682      	mov	sl, r0
 800339e:	460c      	mov	r4, r1
 80033a0:	4690      	mov	r8, r2
 80033a2:	d82d      	bhi.n	8003400 <__ssputs_r+0x70>
 80033a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80033a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80033ac:	d026      	beq.n	80033fc <__ssputs_r+0x6c>
 80033ae:	6965      	ldr	r5, [r4, #20]
 80033b0:	6909      	ldr	r1, [r1, #16]
 80033b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033b6:	eba3 0901 	sub.w	r9, r3, r1
 80033ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033be:	1c7b      	adds	r3, r7, #1
 80033c0:	444b      	add	r3, r9
 80033c2:	106d      	asrs	r5, r5, #1
 80033c4:	429d      	cmp	r5, r3
 80033c6:	bf38      	it	cc
 80033c8:	461d      	movcc	r5, r3
 80033ca:	0553      	lsls	r3, r2, #21
 80033cc:	d527      	bpl.n	800341e <__ssputs_r+0x8e>
 80033ce:	4629      	mov	r1, r5
 80033d0:	f7ff ff52 	bl	8003278 <_malloc_r>
 80033d4:	4606      	mov	r6, r0
 80033d6:	b360      	cbz	r0, 8003432 <__ssputs_r+0xa2>
 80033d8:	6921      	ldr	r1, [r4, #16]
 80033da:	464a      	mov	r2, r9
 80033dc:	f000 fae8 	bl	80039b0 <memcpy>
 80033e0:	89a3      	ldrh	r3, [r4, #12]
 80033e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80033e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033ea:	81a3      	strh	r3, [r4, #12]
 80033ec:	6126      	str	r6, [r4, #16]
 80033ee:	6165      	str	r5, [r4, #20]
 80033f0:	444e      	add	r6, r9
 80033f2:	eba5 0509 	sub.w	r5, r5, r9
 80033f6:	6026      	str	r6, [r4, #0]
 80033f8:	60a5      	str	r5, [r4, #8]
 80033fa:	463e      	mov	r6, r7
 80033fc:	42be      	cmp	r6, r7
 80033fe:	d900      	bls.n	8003402 <__ssputs_r+0x72>
 8003400:	463e      	mov	r6, r7
 8003402:	6820      	ldr	r0, [r4, #0]
 8003404:	4632      	mov	r2, r6
 8003406:	4641      	mov	r1, r8
 8003408:	f000 faa8 	bl	800395c <memmove>
 800340c:	68a3      	ldr	r3, [r4, #8]
 800340e:	1b9b      	subs	r3, r3, r6
 8003410:	60a3      	str	r3, [r4, #8]
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	4433      	add	r3, r6
 8003416:	6023      	str	r3, [r4, #0]
 8003418:	2000      	movs	r0, #0
 800341a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800341e:	462a      	mov	r2, r5
 8003420:	f000 fad4 	bl	80039cc <_realloc_r>
 8003424:	4606      	mov	r6, r0
 8003426:	2800      	cmp	r0, #0
 8003428:	d1e0      	bne.n	80033ec <__ssputs_r+0x5c>
 800342a:	6921      	ldr	r1, [r4, #16]
 800342c:	4650      	mov	r0, sl
 800342e:	f7ff feb7 	bl	80031a0 <_free_r>
 8003432:	230c      	movs	r3, #12
 8003434:	f8ca 3000 	str.w	r3, [sl]
 8003438:	89a3      	ldrh	r3, [r4, #12]
 800343a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800343e:	81a3      	strh	r3, [r4, #12]
 8003440:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003444:	e7e9      	b.n	800341a <__ssputs_r+0x8a>
	...

08003448 <_svfiprintf_r>:
 8003448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800344c:	4698      	mov	r8, r3
 800344e:	898b      	ldrh	r3, [r1, #12]
 8003450:	061b      	lsls	r3, r3, #24
 8003452:	b09d      	sub	sp, #116	@ 0x74
 8003454:	4607      	mov	r7, r0
 8003456:	460d      	mov	r5, r1
 8003458:	4614      	mov	r4, r2
 800345a:	d510      	bpl.n	800347e <_svfiprintf_r+0x36>
 800345c:	690b      	ldr	r3, [r1, #16]
 800345e:	b973      	cbnz	r3, 800347e <_svfiprintf_r+0x36>
 8003460:	2140      	movs	r1, #64	@ 0x40
 8003462:	f7ff ff09 	bl	8003278 <_malloc_r>
 8003466:	6028      	str	r0, [r5, #0]
 8003468:	6128      	str	r0, [r5, #16]
 800346a:	b930      	cbnz	r0, 800347a <_svfiprintf_r+0x32>
 800346c:	230c      	movs	r3, #12
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003474:	b01d      	add	sp, #116	@ 0x74
 8003476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800347a:	2340      	movs	r3, #64	@ 0x40
 800347c:	616b      	str	r3, [r5, #20]
 800347e:	2300      	movs	r3, #0
 8003480:	9309      	str	r3, [sp, #36]	@ 0x24
 8003482:	2320      	movs	r3, #32
 8003484:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003488:	f8cd 800c 	str.w	r8, [sp, #12]
 800348c:	2330      	movs	r3, #48	@ 0x30
 800348e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800362c <_svfiprintf_r+0x1e4>
 8003492:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003496:	f04f 0901 	mov.w	r9, #1
 800349a:	4623      	mov	r3, r4
 800349c:	469a      	mov	sl, r3
 800349e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034a2:	b10a      	cbz	r2, 80034a8 <_svfiprintf_r+0x60>
 80034a4:	2a25      	cmp	r2, #37	@ 0x25
 80034a6:	d1f9      	bne.n	800349c <_svfiprintf_r+0x54>
 80034a8:	ebba 0b04 	subs.w	fp, sl, r4
 80034ac:	d00b      	beq.n	80034c6 <_svfiprintf_r+0x7e>
 80034ae:	465b      	mov	r3, fp
 80034b0:	4622      	mov	r2, r4
 80034b2:	4629      	mov	r1, r5
 80034b4:	4638      	mov	r0, r7
 80034b6:	f7ff ff6b 	bl	8003390 <__ssputs_r>
 80034ba:	3001      	adds	r0, #1
 80034bc:	f000 80a7 	beq.w	800360e <_svfiprintf_r+0x1c6>
 80034c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80034c2:	445a      	add	r2, fp
 80034c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80034c6:	f89a 3000 	ldrb.w	r3, [sl]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 809f 	beq.w	800360e <_svfiprintf_r+0x1c6>
 80034d0:	2300      	movs	r3, #0
 80034d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80034d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034da:	f10a 0a01 	add.w	sl, sl, #1
 80034de:	9304      	str	r3, [sp, #16]
 80034e0:	9307      	str	r3, [sp, #28]
 80034e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80034e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80034e8:	4654      	mov	r4, sl
 80034ea:	2205      	movs	r2, #5
 80034ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034f0:	484e      	ldr	r0, [pc, #312]	@ (800362c <_svfiprintf_r+0x1e4>)
 80034f2:	f7fc fe85 	bl	8000200 <memchr>
 80034f6:	9a04      	ldr	r2, [sp, #16]
 80034f8:	b9d8      	cbnz	r0, 8003532 <_svfiprintf_r+0xea>
 80034fa:	06d0      	lsls	r0, r2, #27
 80034fc:	bf44      	itt	mi
 80034fe:	2320      	movmi	r3, #32
 8003500:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003504:	0711      	lsls	r1, r2, #28
 8003506:	bf44      	itt	mi
 8003508:	232b      	movmi	r3, #43	@ 0x2b
 800350a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800350e:	f89a 3000 	ldrb.w	r3, [sl]
 8003512:	2b2a      	cmp	r3, #42	@ 0x2a
 8003514:	d015      	beq.n	8003542 <_svfiprintf_r+0xfa>
 8003516:	9a07      	ldr	r2, [sp, #28]
 8003518:	4654      	mov	r4, sl
 800351a:	2000      	movs	r0, #0
 800351c:	f04f 0c0a 	mov.w	ip, #10
 8003520:	4621      	mov	r1, r4
 8003522:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003526:	3b30      	subs	r3, #48	@ 0x30
 8003528:	2b09      	cmp	r3, #9
 800352a:	d94b      	bls.n	80035c4 <_svfiprintf_r+0x17c>
 800352c:	b1b0      	cbz	r0, 800355c <_svfiprintf_r+0x114>
 800352e:	9207      	str	r2, [sp, #28]
 8003530:	e014      	b.n	800355c <_svfiprintf_r+0x114>
 8003532:	eba0 0308 	sub.w	r3, r0, r8
 8003536:	fa09 f303 	lsl.w	r3, r9, r3
 800353a:	4313      	orrs	r3, r2
 800353c:	9304      	str	r3, [sp, #16]
 800353e:	46a2      	mov	sl, r4
 8003540:	e7d2      	b.n	80034e8 <_svfiprintf_r+0xa0>
 8003542:	9b03      	ldr	r3, [sp, #12]
 8003544:	1d19      	adds	r1, r3, #4
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	9103      	str	r1, [sp, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	bfbb      	ittet	lt
 800354e:	425b      	neglt	r3, r3
 8003550:	f042 0202 	orrlt.w	r2, r2, #2
 8003554:	9307      	strge	r3, [sp, #28]
 8003556:	9307      	strlt	r3, [sp, #28]
 8003558:	bfb8      	it	lt
 800355a:	9204      	strlt	r2, [sp, #16]
 800355c:	7823      	ldrb	r3, [r4, #0]
 800355e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003560:	d10a      	bne.n	8003578 <_svfiprintf_r+0x130>
 8003562:	7863      	ldrb	r3, [r4, #1]
 8003564:	2b2a      	cmp	r3, #42	@ 0x2a
 8003566:	d132      	bne.n	80035ce <_svfiprintf_r+0x186>
 8003568:	9b03      	ldr	r3, [sp, #12]
 800356a:	1d1a      	adds	r2, r3, #4
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	9203      	str	r2, [sp, #12]
 8003570:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003574:	3402      	adds	r4, #2
 8003576:	9305      	str	r3, [sp, #20]
 8003578:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800363c <_svfiprintf_r+0x1f4>
 800357c:	7821      	ldrb	r1, [r4, #0]
 800357e:	2203      	movs	r2, #3
 8003580:	4650      	mov	r0, sl
 8003582:	f7fc fe3d 	bl	8000200 <memchr>
 8003586:	b138      	cbz	r0, 8003598 <_svfiprintf_r+0x150>
 8003588:	9b04      	ldr	r3, [sp, #16]
 800358a:	eba0 000a 	sub.w	r0, r0, sl
 800358e:	2240      	movs	r2, #64	@ 0x40
 8003590:	4082      	lsls	r2, r0
 8003592:	4313      	orrs	r3, r2
 8003594:	3401      	adds	r4, #1
 8003596:	9304      	str	r3, [sp, #16]
 8003598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800359c:	4824      	ldr	r0, [pc, #144]	@ (8003630 <_svfiprintf_r+0x1e8>)
 800359e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80035a2:	2206      	movs	r2, #6
 80035a4:	f7fc fe2c 	bl	8000200 <memchr>
 80035a8:	2800      	cmp	r0, #0
 80035aa:	d036      	beq.n	800361a <_svfiprintf_r+0x1d2>
 80035ac:	4b21      	ldr	r3, [pc, #132]	@ (8003634 <_svfiprintf_r+0x1ec>)
 80035ae:	bb1b      	cbnz	r3, 80035f8 <_svfiprintf_r+0x1b0>
 80035b0:	9b03      	ldr	r3, [sp, #12]
 80035b2:	3307      	adds	r3, #7
 80035b4:	f023 0307 	bic.w	r3, r3, #7
 80035b8:	3308      	adds	r3, #8
 80035ba:	9303      	str	r3, [sp, #12]
 80035bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035be:	4433      	add	r3, r6
 80035c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80035c2:	e76a      	b.n	800349a <_svfiprintf_r+0x52>
 80035c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80035c8:	460c      	mov	r4, r1
 80035ca:	2001      	movs	r0, #1
 80035cc:	e7a8      	b.n	8003520 <_svfiprintf_r+0xd8>
 80035ce:	2300      	movs	r3, #0
 80035d0:	3401      	adds	r4, #1
 80035d2:	9305      	str	r3, [sp, #20]
 80035d4:	4619      	mov	r1, r3
 80035d6:	f04f 0c0a 	mov.w	ip, #10
 80035da:	4620      	mov	r0, r4
 80035dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035e0:	3a30      	subs	r2, #48	@ 0x30
 80035e2:	2a09      	cmp	r2, #9
 80035e4:	d903      	bls.n	80035ee <_svfiprintf_r+0x1a6>
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0c6      	beq.n	8003578 <_svfiprintf_r+0x130>
 80035ea:	9105      	str	r1, [sp, #20]
 80035ec:	e7c4      	b.n	8003578 <_svfiprintf_r+0x130>
 80035ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80035f2:	4604      	mov	r4, r0
 80035f4:	2301      	movs	r3, #1
 80035f6:	e7f0      	b.n	80035da <_svfiprintf_r+0x192>
 80035f8:	ab03      	add	r3, sp, #12
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	462a      	mov	r2, r5
 80035fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003638 <_svfiprintf_r+0x1f0>)
 8003600:	a904      	add	r1, sp, #16
 8003602:	4638      	mov	r0, r7
 8003604:	f3af 8000 	nop.w
 8003608:	1c42      	adds	r2, r0, #1
 800360a:	4606      	mov	r6, r0
 800360c:	d1d6      	bne.n	80035bc <_svfiprintf_r+0x174>
 800360e:	89ab      	ldrh	r3, [r5, #12]
 8003610:	065b      	lsls	r3, r3, #25
 8003612:	f53f af2d 	bmi.w	8003470 <_svfiprintf_r+0x28>
 8003616:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003618:	e72c      	b.n	8003474 <_svfiprintf_r+0x2c>
 800361a:	ab03      	add	r3, sp, #12
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	462a      	mov	r2, r5
 8003620:	4b05      	ldr	r3, [pc, #20]	@ (8003638 <_svfiprintf_r+0x1f0>)
 8003622:	a904      	add	r1, sp, #16
 8003624:	4638      	mov	r0, r7
 8003626:	f000 f879 	bl	800371c <_printf_i>
 800362a:	e7ed      	b.n	8003608 <_svfiprintf_r+0x1c0>
 800362c:	08003a90 	.word	0x08003a90
 8003630:	08003a9a 	.word	0x08003a9a
 8003634:	00000000 	.word	0x00000000
 8003638:	08003391 	.word	0x08003391
 800363c:	08003a96 	.word	0x08003a96

08003640 <_printf_common>:
 8003640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003644:	4616      	mov	r6, r2
 8003646:	4698      	mov	r8, r3
 8003648:	688a      	ldr	r2, [r1, #8]
 800364a:	690b      	ldr	r3, [r1, #16]
 800364c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003650:	4293      	cmp	r3, r2
 8003652:	bfb8      	it	lt
 8003654:	4613      	movlt	r3, r2
 8003656:	6033      	str	r3, [r6, #0]
 8003658:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800365c:	4607      	mov	r7, r0
 800365e:	460c      	mov	r4, r1
 8003660:	b10a      	cbz	r2, 8003666 <_printf_common+0x26>
 8003662:	3301      	adds	r3, #1
 8003664:	6033      	str	r3, [r6, #0]
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	0699      	lsls	r1, r3, #26
 800366a:	bf42      	ittt	mi
 800366c:	6833      	ldrmi	r3, [r6, #0]
 800366e:	3302      	addmi	r3, #2
 8003670:	6033      	strmi	r3, [r6, #0]
 8003672:	6825      	ldr	r5, [r4, #0]
 8003674:	f015 0506 	ands.w	r5, r5, #6
 8003678:	d106      	bne.n	8003688 <_printf_common+0x48>
 800367a:	f104 0a19 	add.w	sl, r4, #25
 800367e:	68e3      	ldr	r3, [r4, #12]
 8003680:	6832      	ldr	r2, [r6, #0]
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	42ab      	cmp	r3, r5
 8003686:	dc26      	bgt.n	80036d6 <_printf_common+0x96>
 8003688:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800368c:	6822      	ldr	r2, [r4, #0]
 800368e:	3b00      	subs	r3, #0
 8003690:	bf18      	it	ne
 8003692:	2301      	movne	r3, #1
 8003694:	0692      	lsls	r2, r2, #26
 8003696:	d42b      	bmi.n	80036f0 <_printf_common+0xb0>
 8003698:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800369c:	4641      	mov	r1, r8
 800369e:	4638      	mov	r0, r7
 80036a0:	47c8      	blx	r9
 80036a2:	3001      	adds	r0, #1
 80036a4:	d01e      	beq.n	80036e4 <_printf_common+0xa4>
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	6922      	ldr	r2, [r4, #16]
 80036aa:	f003 0306 	and.w	r3, r3, #6
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	bf02      	ittt	eq
 80036b2:	68e5      	ldreq	r5, [r4, #12]
 80036b4:	6833      	ldreq	r3, [r6, #0]
 80036b6:	1aed      	subeq	r5, r5, r3
 80036b8:	68a3      	ldr	r3, [r4, #8]
 80036ba:	bf0c      	ite	eq
 80036bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036c0:	2500      	movne	r5, #0
 80036c2:	4293      	cmp	r3, r2
 80036c4:	bfc4      	itt	gt
 80036c6:	1a9b      	subgt	r3, r3, r2
 80036c8:	18ed      	addgt	r5, r5, r3
 80036ca:	2600      	movs	r6, #0
 80036cc:	341a      	adds	r4, #26
 80036ce:	42b5      	cmp	r5, r6
 80036d0:	d11a      	bne.n	8003708 <_printf_common+0xc8>
 80036d2:	2000      	movs	r0, #0
 80036d4:	e008      	b.n	80036e8 <_printf_common+0xa8>
 80036d6:	2301      	movs	r3, #1
 80036d8:	4652      	mov	r2, sl
 80036da:	4641      	mov	r1, r8
 80036dc:	4638      	mov	r0, r7
 80036de:	47c8      	blx	r9
 80036e0:	3001      	adds	r0, #1
 80036e2:	d103      	bne.n	80036ec <_printf_common+0xac>
 80036e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036ec:	3501      	adds	r5, #1
 80036ee:	e7c6      	b.n	800367e <_printf_common+0x3e>
 80036f0:	18e1      	adds	r1, r4, r3
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	2030      	movs	r0, #48	@ 0x30
 80036f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80036fa:	4422      	add	r2, r4
 80036fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003700:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003704:	3302      	adds	r3, #2
 8003706:	e7c7      	b.n	8003698 <_printf_common+0x58>
 8003708:	2301      	movs	r3, #1
 800370a:	4622      	mov	r2, r4
 800370c:	4641      	mov	r1, r8
 800370e:	4638      	mov	r0, r7
 8003710:	47c8      	blx	r9
 8003712:	3001      	adds	r0, #1
 8003714:	d0e6      	beq.n	80036e4 <_printf_common+0xa4>
 8003716:	3601      	adds	r6, #1
 8003718:	e7d9      	b.n	80036ce <_printf_common+0x8e>
	...

0800371c <_printf_i>:
 800371c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003720:	7e0f      	ldrb	r7, [r1, #24]
 8003722:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003724:	2f78      	cmp	r7, #120	@ 0x78
 8003726:	4691      	mov	r9, r2
 8003728:	4680      	mov	r8, r0
 800372a:	460c      	mov	r4, r1
 800372c:	469a      	mov	sl, r3
 800372e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003732:	d807      	bhi.n	8003744 <_printf_i+0x28>
 8003734:	2f62      	cmp	r7, #98	@ 0x62
 8003736:	d80a      	bhi.n	800374e <_printf_i+0x32>
 8003738:	2f00      	cmp	r7, #0
 800373a:	f000 80d2 	beq.w	80038e2 <_printf_i+0x1c6>
 800373e:	2f58      	cmp	r7, #88	@ 0x58
 8003740:	f000 80b9 	beq.w	80038b6 <_printf_i+0x19a>
 8003744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003748:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800374c:	e03a      	b.n	80037c4 <_printf_i+0xa8>
 800374e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003752:	2b15      	cmp	r3, #21
 8003754:	d8f6      	bhi.n	8003744 <_printf_i+0x28>
 8003756:	a101      	add	r1, pc, #4	@ (adr r1, 800375c <_printf_i+0x40>)
 8003758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800375c:	080037b5 	.word	0x080037b5
 8003760:	080037c9 	.word	0x080037c9
 8003764:	08003745 	.word	0x08003745
 8003768:	08003745 	.word	0x08003745
 800376c:	08003745 	.word	0x08003745
 8003770:	08003745 	.word	0x08003745
 8003774:	080037c9 	.word	0x080037c9
 8003778:	08003745 	.word	0x08003745
 800377c:	08003745 	.word	0x08003745
 8003780:	08003745 	.word	0x08003745
 8003784:	08003745 	.word	0x08003745
 8003788:	080038c9 	.word	0x080038c9
 800378c:	080037f3 	.word	0x080037f3
 8003790:	08003883 	.word	0x08003883
 8003794:	08003745 	.word	0x08003745
 8003798:	08003745 	.word	0x08003745
 800379c:	080038eb 	.word	0x080038eb
 80037a0:	08003745 	.word	0x08003745
 80037a4:	080037f3 	.word	0x080037f3
 80037a8:	08003745 	.word	0x08003745
 80037ac:	08003745 	.word	0x08003745
 80037b0:	0800388b 	.word	0x0800388b
 80037b4:	6833      	ldr	r3, [r6, #0]
 80037b6:	1d1a      	adds	r2, r3, #4
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6032      	str	r2, [r6, #0]
 80037bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80037c4:	2301      	movs	r3, #1
 80037c6:	e09d      	b.n	8003904 <_printf_i+0x1e8>
 80037c8:	6833      	ldr	r3, [r6, #0]
 80037ca:	6820      	ldr	r0, [r4, #0]
 80037cc:	1d19      	adds	r1, r3, #4
 80037ce:	6031      	str	r1, [r6, #0]
 80037d0:	0606      	lsls	r6, r0, #24
 80037d2:	d501      	bpl.n	80037d8 <_printf_i+0xbc>
 80037d4:	681d      	ldr	r5, [r3, #0]
 80037d6:	e003      	b.n	80037e0 <_printf_i+0xc4>
 80037d8:	0645      	lsls	r5, r0, #25
 80037da:	d5fb      	bpl.n	80037d4 <_printf_i+0xb8>
 80037dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80037e0:	2d00      	cmp	r5, #0
 80037e2:	da03      	bge.n	80037ec <_printf_i+0xd0>
 80037e4:	232d      	movs	r3, #45	@ 0x2d
 80037e6:	426d      	negs	r5, r5
 80037e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037ec:	4859      	ldr	r0, [pc, #356]	@ (8003954 <_printf_i+0x238>)
 80037ee:	230a      	movs	r3, #10
 80037f0:	e011      	b.n	8003816 <_printf_i+0xfa>
 80037f2:	6821      	ldr	r1, [r4, #0]
 80037f4:	6833      	ldr	r3, [r6, #0]
 80037f6:	0608      	lsls	r0, r1, #24
 80037f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80037fc:	d402      	bmi.n	8003804 <_printf_i+0xe8>
 80037fe:	0649      	lsls	r1, r1, #25
 8003800:	bf48      	it	mi
 8003802:	b2ad      	uxthmi	r5, r5
 8003804:	2f6f      	cmp	r7, #111	@ 0x6f
 8003806:	4853      	ldr	r0, [pc, #332]	@ (8003954 <_printf_i+0x238>)
 8003808:	6033      	str	r3, [r6, #0]
 800380a:	bf14      	ite	ne
 800380c:	230a      	movne	r3, #10
 800380e:	2308      	moveq	r3, #8
 8003810:	2100      	movs	r1, #0
 8003812:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003816:	6866      	ldr	r6, [r4, #4]
 8003818:	60a6      	str	r6, [r4, #8]
 800381a:	2e00      	cmp	r6, #0
 800381c:	bfa2      	ittt	ge
 800381e:	6821      	ldrge	r1, [r4, #0]
 8003820:	f021 0104 	bicge.w	r1, r1, #4
 8003824:	6021      	strge	r1, [r4, #0]
 8003826:	b90d      	cbnz	r5, 800382c <_printf_i+0x110>
 8003828:	2e00      	cmp	r6, #0
 800382a:	d04b      	beq.n	80038c4 <_printf_i+0x1a8>
 800382c:	4616      	mov	r6, r2
 800382e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003832:	fb03 5711 	mls	r7, r3, r1, r5
 8003836:	5dc7      	ldrb	r7, [r0, r7]
 8003838:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800383c:	462f      	mov	r7, r5
 800383e:	42bb      	cmp	r3, r7
 8003840:	460d      	mov	r5, r1
 8003842:	d9f4      	bls.n	800382e <_printf_i+0x112>
 8003844:	2b08      	cmp	r3, #8
 8003846:	d10b      	bne.n	8003860 <_printf_i+0x144>
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	07df      	lsls	r7, r3, #31
 800384c:	d508      	bpl.n	8003860 <_printf_i+0x144>
 800384e:	6923      	ldr	r3, [r4, #16]
 8003850:	6861      	ldr	r1, [r4, #4]
 8003852:	4299      	cmp	r1, r3
 8003854:	bfde      	ittt	le
 8003856:	2330      	movle	r3, #48	@ 0x30
 8003858:	f806 3c01 	strble.w	r3, [r6, #-1]
 800385c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003860:	1b92      	subs	r2, r2, r6
 8003862:	6122      	str	r2, [r4, #16]
 8003864:	f8cd a000 	str.w	sl, [sp]
 8003868:	464b      	mov	r3, r9
 800386a:	aa03      	add	r2, sp, #12
 800386c:	4621      	mov	r1, r4
 800386e:	4640      	mov	r0, r8
 8003870:	f7ff fee6 	bl	8003640 <_printf_common>
 8003874:	3001      	adds	r0, #1
 8003876:	d14a      	bne.n	800390e <_printf_i+0x1f2>
 8003878:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800387c:	b004      	add	sp, #16
 800387e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	f043 0320 	orr.w	r3, r3, #32
 8003888:	6023      	str	r3, [r4, #0]
 800388a:	4833      	ldr	r0, [pc, #204]	@ (8003958 <_printf_i+0x23c>)
 800388c:	2778      	movs	r7, #120	@ 0x78
 800388e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	6831      	ldr	r1, [r6, #0]
 8003896:	061f      	lsls	r7, r3, #24
 8003898:	f851 5b04 	ldr.w	r5, [r1], #4
 800389c:	d402      	bmi.n	80038a4 <_printf_i+0x188>
 800389e:	065f      	lsls	r7, r3, #25
 80038a0:	bf48      	it	mi
 80038a2:	b2ad      	uxthmi	r5, r5
 80038a4:	6031      	str	r1, [r6, #0]
 80038a6:	07d9      	lsls	r1, r3, #31
 80038a8:	bf44      	itt	mi
 80038aa:	f043 0320 	orrmi.w	r3, r3, #32
 80038ae:	6023      	strmi	r3, [r4, #0]
 80038b0:	b11d      	cbz	r5, 80038ba <_printf_i+0x19e>
 80038b2:	2310      	movs	r3, #16
 80038b4:	e7ac      	b.n	8003810 <_printf_i+0xf4>
 80038b6:	4827      	ldr	r0, [pc, #156]	@ (8003954 <_printf_i+0x238>)
 80038b8:	e7e9      	b.n	800388e <_printf_i+0x172>
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	f023 0320 	bic.w	r3, r3, #32
 80038c0:	6023      	str	r3, [r4, #0]
 80038c2:	e7f6      	b.n	80038b2 <_printf_i+0x196>
 80038c4:	4616      	mov	r6, r2
 80038c6:	e7bd      	b.n	8003844 <_printf_i+0x128>
 80038c8:	6833      	ldr	r3, [r6, #0]
 80038ca:	6825      	ldr	r5, [r4, #0]
 80038cc:	6961      	ldr	r1, [r4, #20]
 80038ce:	1d18      	adds	r0, r3, #4
 80038d0:	6030      	str	r0, [r6, #0]
 80038d2:	062e      	lsls	r6, r5, #24
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	d501      	bpl.n	80038dc <_printf_i+0x1c0>
 80038d8:	6019      	str	r1, [r3, #0]
 80038da:	e002      	b.n	80038e2 <_printf_i+0x1c6>
 80038dc:	0668      	lsls	r0, r5, #25
 80038de:	d5fb      	bpl.n	80038d8 <_printf_i+0x1bc>
 80038e0:	8019      	strh	r1, [r3, #0]
 80038e2:	2300      	movs	r3, #0
 80038e4:	6123      	str	r3, [r4, #16]
 80038e6:	4616      	mov	r6, r2
 80038e8:	e7bc      	b.n	8003864 <_printf_i+0x148>
 80038ea:	6833      	ldr	r3, [r6, #0]
 80038ec:	1d1a      	adds	r2, r3, #4
 80038ee:	6032      	str	r2, [r6, #0]
 80038f0:	681e      	ldr	r6, [r3, #0]
 80038f2:	6862      	ldr	r2, [r4, #4]
 80038f4:	2100      	movs	r1, #0
 80038f6:	4630      	mov	r0, r6
 80038f8:	f7fc fc82 	bl	8000200 <memchr>
 80038fc:	b108      	cbz	r0, 8003902 <_printf_i+0x1e6>
 80038fe:	1b80      	subs	r0, r0, r6
 8003900:	6060      	str	r0, [r4, #4]
 8003902:	6863      	ldr	r3, [r4, #4]
 8003904:	6123      	str	r3, [r4, #16]
 8003906:	2300      	movs	r3, #0
 8003908:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800390c:	e7aa      	b.n	8003864 <_printf_i+0x148>
 800390e:	6923      	ldr	r3, [r4, #16]
 8003910:	4632      	mov	r2, r6
 8003912:	4649      	mov	r1, r9
 8003914:	4640      	mov	r0, r8
 8003916:	47d0      	blx	sl
 8003918:	3001      	adds	r0, #1
 800391a:	d0ad      	beq.n	8003878 <_printf_i+0x15c>
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	079b      	lsls	r3, r3, #30
 8003920:	d413      	bmi.n	800394a <_printf_i+0x22e>
 8003922:	68e0      	ldr	r0, [r4, #12]
 8003924:	9b03      	ldr	r3, [sp, #12]
 8003926:	4298      	cmp	r0, r3
 8003928:	bfb8      	it	lt
 800392a:	4618      	movlt	r0, r3
 800392c:	e7a6      	b.n	800387c <_printf_i+0x160>
 800392e:	2301      	movs	r3, #1
 8003930:	4632      	mov	r2, r6
 8003932:	4649      	mov	r1, r9
 8003934:	4640      	mov	r0, r8
 8003936:	47d0      	blx	sl
 8003938:	3001      	adds	r0, #1
 800393a:	d09d      	beq.n	8003878 <_printf_i+0x15c>
 800393c:	3501      	adds	r5, #1
 800393e:	68e3      	ldr	r3, [r4, #12]
 8003940:	9903      	ldr	r1, [sp, #12]
 8003942:	1a5b      	subs	r3, r3, r1
 8003944:	42ab      	cmp	r3, r5
 8003946:	dcf2      	bgt.n	800392e <_printf_i+0x212>
 8003948:	e7eb      	b.n	8003922 <_printf_i+0x206>
 800394a:	2500      	movs	r5, #0
 800394c:	f104 0619 	add.w	r6, r4, #25
 8003950:	e7f5      	b.n	800393e <_printf_i+0x222>
 8003952:	bf00      	nop
 8003954:	08003aa1 	.word	0x08003aa1
 8003958:	08003ab2 	.word	0x08003ab2

0800395c <memmove>:
 800395c:	4288      	cmp	r0, r1
 800395e:	b510      	push	{r4, lr}
 8003960:	eb01 0402 	add.w	r4, r1, r2
 8003964:	d902      	bls.n	800396c <memmove+0x10>
 8003966:	4284      	cmp	r4, r0
 8003968:	4623      	mov	r3, r4
 800396a:	d807      	bhi.n	800397c <memmove+0x20>
 800396c:	1e43      	subs	r3, r0, #1
 800396e:	42a1      	cmp	r1, r4
 8003970:	d008      	beq.n	8003984 <memmove+0x28>
 8003972:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003976:	f803 2f01 	strb.w	r2, [r3, #1]!
 800397a:	e7f8      	b.n	800396e <memmove+0x12>
 800397c:	4402      	add	r2, r0
 800397e:	4601      	mov	r1, r0
 8003980:	428a      	cmp	r2, r1
 8003982:	d100      	bne.n	8003986 <memmove+0x2a>
 8003984:	bd10      	pop	{r4, pc}
 8003986:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800398a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800398e:	e7f7      	b.n	8003980 <memmove+0x24>

08003990 <_sbrk_r>:
 8003990:	b538      	push	{r3, r4, r5, lr}
 8003992:	4d06      	ldr	r5, [pc, #24]	@ (80039ac <_sbrk_r+0x1c>)
 8003994:	2300      	movs	r3, #0
 8003996:	4604      	mov	r4, r0
 8003998:	4608      	mov	r0, r1
 800399a:	602b      	str	r3, [r5, #0]
 800399c:	f7fd f92c 	bl	8000bf8 <_sbrk>
 80039a0:	1c43      	adds	r3, r0, #1
 80039a2:	d102      	bne.n	80039aa <_sbrk_r+0x1a>
 80039a4:	682b      	ldr	r3, [r5, #0]
 80039a6:	b103      	cbz	r3, 80039aa <_sbrk_r+0x1a>
 80039a8:	6023      	str	r3, [r4, #0]
 80039aa:	bd38      	pop	{r3, r4, r5, pc}
 80039ac:	200002c8 	.word	0x200002c8

080039b0 <memcpy>:
 80039b0:	440a      	add	r2, r1
 80039b2:	4291      	cmp	r1, r2
 80039b4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80039b8:	d100      	bne.n	80039bc <memcpy+0xc>
 80039ba:	4770      	bx	lr
 80039bc:	b510      	push	{r4, lr}
 80039be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039c6:	4291      	cmp	r1, r2
 80039c8:	d1f9      	bne.n	80039be <memcpy+0xe>
 80039ca:	bd10      	pop	{r4, pc}

080039cc <_realloc_r>:
 80039cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039d0:	4680      	mov	r8, r0
 80039d2:	4615      	mov	r5, r2
 80039d4:	460c      	mov	r4, r1
 80039d6:	b921      	cbnz	r1, 80039e2 <_realloc_r+0x16>
 80039d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039dc:	4611      	mov	r1, r2
 80039de:	f7ff bc4b 	b.w	8003278 <_malloc_r>
 80039e2:	b92a      	cbnz	r2, 80039f0 <_realloc_r+0x24>
 80039e4:	f7ff fbdc 	bl	80031a0 <_free_r>
 80039e8:	2400      	movs	r4, #0
 80039ea:	4620      	mov	r0, r4
 80039ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039f0:	f000 f81a 	bl	8003a28 <_malloc_usable_size_r>
 80039f4:	4285      	cmp	r5, r0
 80039f6:	4606      	mov	r6, r0
 80039f8:	d802      	bhi.n	8003a00 <_realloc_r+0x34>
 80039fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80039fe:	d8f4      	bhi.n	80039ea <_realloc_r+0x1e>
 8003a00:	4629      	mov	r1, r5
 8003a02:	4640      	mov	r0, r8
 8003a04:	f7ff fc38 	bl	8003278 <_malloc_r>
 8003a08:	4607      	mov	r7, r0
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	d0ec      	beq.n	80039e8 <_realloc_r+0x1c>
 8003a0e:	42b5      	cmp	r5, r6
 8003a10:	462a      	mov	r2, r5
 8003a12:	4621      	mov	r1, r4
 8003a14:	bf28      	it	cs
 8003a16:	4632      	movcs	r2, r6
 8003a18:	f7ff ffca 	bl	80039b0 <memcpy>
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	4640      	mov	r0, r8
 8003a20:	f7ff fbbe 	bl	80031a0 <_free_r>
 8003a24:	463c      	mov	r4, r7
 8003a26:	e7e0      	b.n	80039ea <_realloc_r+0x1e>

08003a28 <_malloc_usable_size_r>:
 8003a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a2c:	1f18      	subs	r0, r3, #4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bfbc      	itt	lt
 8003a32:	580b      	ldrlt	r3, [r1, r0]
 8003a34:	18c0      	addlt	r0, r0, r3
 8003a36:	4770      	bx	lr

08003a38 <_init>:
 8003a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3a:	bf00      	nop
 8003a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3e:	bc08      	pop	{r3}
 8003a40:	469e      	mov	lr, r3
 8003a42:	4770      	bx	lr

08003a44 <_fini>:
 8003a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a46:	bf00      	nop
 8003a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4a:	bc08      	pop	{r3}
 8003a4c:	469e      	mov	lr, r3
 8003a4e:	4770      	bx	lr
