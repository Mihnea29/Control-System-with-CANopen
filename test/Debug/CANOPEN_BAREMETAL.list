
CANOPEN_BAREMETAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b750  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e4  0800b950  0800b950  0000c950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c234  0800c234  0000e430  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c234  0800c234  0000d234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c23c  0800c23c  0000e430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c23c  0800c23c  0000d23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c240  0800c240  0000d240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000430  20000000  0800c244  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000430  0800c674  0000e430  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000660  0800c674  0000e660  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e430  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021157  00000000  00000000  0000e45e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004960  00000000  00000000  0002f5b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00033f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef3  00000000  00000000  000351d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000323d7  00000000  00000000  000360cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be90  00000000  00000000  000684a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ffc9  00000000  00000000  00084332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a42fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000551c  00000000  00000000  001a4340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003c  00000000  00000000  001a985c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000430 	.word	0x20000430
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b938 	.word	0x0800b938

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000434 	.word	0x20000434
 800023c:	0800b938 	.word	0x0800b938

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <CO_getUint8>:
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t
CO_getUint8(const void* buf) {
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
    uint8_t value;
    (void)memmove((void*)&value, buf, sizeof(value));
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	73fb      	strb	r3, [r7, #15]
    return value;
 800062a:	7bfb      	ldrb	r3, [r7, #15]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <CO_setUint8>:
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t
CO_setUint8(void* buf, uint8_t value) {
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	460b      	mov	r3, r1
 8000642:	70fb      	strb	r3, [r7, #3]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8000644:	78fa      	ldrb	r2, [r7, #3]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	701a      	strb	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 800064a:	2301      	movs	r3, #1
}
 800064c:	4618      	mov	r0, r3
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <CO_setUint32>:
    return (uint8_t)(sizeof(value));
}

/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t
CO_setUint32(void* buf, uint32_t value) {
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8000668:	2304      	movs	r3, #4
}
 800066a:	4618      	mov	r0, r3
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <OD_getIndex>:
 * @param entry Object Dictionary entry.
 *
 * @return OD index
 */
static inline uint16_t
OD_getIndex(const OD_entry_t* entry) {
 8000676:	b480      	push	{r7}
 8000678:	b083      	sub	sp, #12
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d002      	beq.n	800068a <OD_getIndex+0x14>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	e000      	b.n	800068c <OD_getIndex+0x16>
 800068a:	2300      	movs	r3, #0
}
 800068c:	4618      	mov	r0, r3
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <OD_extension_init>:
 * NULL, extension will be removed.
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d101      	bne.n	80006ac <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 80006a8:	2305      	movs	r3, #5
 80006aa:	e003      	b.n	80006b4 <OD_extension_init+0x1c>
    }
    entry->extension = extension;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80006b2:	2300      	movs	r3, #0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <OD_get_u32>:
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	607a      	str	r2, [r7, #4]
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	460b      	mov	r3, r1
 80006ce:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80006d0:	7af9      	ldrb	r1, [r7, #11]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2304      	movs	r3, #4
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	68f8      	ldr	r0, [r7, #12]
 80006dc:	f001 fbdc 	bl	8001e98 <OD_get_value>
 80006e0:	4603      	mov	r3, r0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <OD_read_1014_default>:
 * Custom functions for read/write OD object "COB-ID EMCY"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1014_default(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b086      	sub	sp, #24
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	60f8      	str	r0, [r7, #12]
 80006f2:	60b9      	str	r1, [r7, #8]
 80006f4:	607a      	str	r2, [r7, #4]
 80006f6:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count < sizeof(uint32_t))
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d00c      	beq.n	8000718 <OD_read_1014_default+0x2e>
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	7d1b      	ldrb	r3, [r3, #20]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d108      	bne.n	8000718 <OD_read_1014_default+0x2e>
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d005      	beq.n	8000718 <OD_read_1014_default+0x2e>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b03      	cmp	r3, #3
 8000710:	d902      	bls.n	8000718 <OD_read_1014_default+0x2e>
        || (countRead == NULL)) {
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d101      	bne.n	800071c <OD_read_1014_default+0x32>
        return ODR_DEV_INCOMPAT;
 8000718:	2309      	movs	r3, #9
 800071a:	e01a      	b.n	8000752 <OD_read_1014_default+0x68>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0U : 0x80000000U;
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <OD_read_1014_default+0x44>
 800072a:	2300      	movs	r3, #0
 800072c:	e001      	b.n	8000732 <OD_read_1014_default+0x48>
 800072e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000732:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + (uint32_t)em->nodeId;
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800073a:	3380      	adds	r3, #128	@ 0x80
 800073c:	693a      	ldr	r2, [r7, #16]
 800073e:	4313      	orrs	r3, r2
 8000740:	613b      	str	r3, [r7, #16]
    (void)CO_setUint32(buf, COB_IDEmergency32);
 8000742:	6939      	ldr	r1, [r7, #16]
 8000744:	68b8      	ldr	r0, [r7, #8]
 8000746:	f7ff ff87 	bl	8000658 <CO_setUint32>

    *countRead = sizeof(uint32_t);
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	2204      	movs	r2, #4
 800074e:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <OD_read_1003>:
 * Custom functions for read/write OD object _OD_statusBits_, optional
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1003(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 800075a:	b580      	push	{r7, lr}
 800075c:	b086      	sub	sp, #24
 800075e:	af00      	add	r7, sp, #0
 8000760:	60f8      	str	r0, [r7, #12]
 8000762:	60b9      	str	r1, [r7, #8]
 8000764:	607a      	str	r2, [r7, #4]
 8000766:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL) || ((count < 4U) && (stream->subIndex > 0U))
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d00f      	beq.n	800078e <OD_read_1003+0x34>
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d00c      	beq.n	800078e <OD_read_1003+0x34>
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d009      	beq.n	800078e <OD_read_1003+0x34>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2b03      	cmp	r3, #3
 800077e:	d803      	bhi.n	8000788 <OD_read_1003+0x2e>
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	7d1b      	ldrb	r3, [r3, #20]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d102      	bne.n	800078e <OD_read_1003+0x34>
        || (count < 1U)) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d101      	bne.n	8000792 <OD_read_1003+0x38>
        return ODR_DEV_INCOMPAT;
 800078e:	2309      	movs	r3, #9
 8000790:	e04c      	b.n	800082c <OD_read_1003+0xd2>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2U) {
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	7f1b      	ldrb	r3, [r3, #28]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d801      	bhi.n	80007a4 <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 80007a0:	2309      	movs	r3, #9
 80007a2:	e043      	b.n	800082c <OD_read_1003+0xd2>
    }
    if (stream->subIndex == 0U) {
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	7d1b      	ldrb	r3, [r3, #20]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d10b      	bne.n	80007c4 <OD_read_1003+0x6a>
        (void)CO_setUint8(buf, em->fifoCount);
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007b2:	4619      	mov	r1, r3
 80007b4:	68b8      	ldr	r0, [r7, #8]
 80007b6:	f7ff ff3f 	bl	8000638 <CO_setUint8>

        *countRead = sizeof(uint8_t);
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	2201      	movs	r2, #1
 80007be:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 80007c0:	2300      	movs	r3, #0
 80007c2:	e033      	b.n	800082c <OD_read_1003+0xd2>
    } else if (stream->subIndex <= em->fifoCount) {
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	7d1a      	ldrb	r2, [r3, #20]
 80007c8:	693b      	ldr	r3, [r7, #16]
 80007ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d82b      	bhi.n	800082a <OD_read_1003+0xd0>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - (int16_t)stream->subIndex;
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	7f5b      	ldrb	r3, [r3, #29]
 80007d6:	461a      	mov	r2, r3
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	7d1b      	ldrb	r3, [r3, #20]
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	b29b      	uxth	r3, r3
 80007e0:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 80007e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	da07      	bge.n	80007fa <OD_read_1003+0xa0>
            index += (int16_t)em->fifoSize;
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	7f1b      	ldrb	r3, [r3, #28]
 80007ee:	461a      	mov	r2, r3
 80007f0:	8afb      	ldrh	r3, [r7, #22]
 80007f2:	4413      	add	r3, r2
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	82fb      	strh	r3, [r7, #22]
 80007f8:	e007      	b.n	800080a <OD_read_1003+0xb0>
        } else if (index >= (int16_t)(em->fifoSize)) {
 80007fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	7f12      	ldrb	r2, [r2, #28]
 8000802:	4293      	cmp	r3, r2
 8000804:	db01      	blt.n	800080a <OD_read_1003+0xb0>
            return ODR_DEV_INCOMPAT;
 8000806:	2309      	movs	r3, #9
 8000808:	e010      	b.n	800082c <OD_read_1003+0xd2>
        } else { /* MISRA C 2004 14.10 */
        }
        (void)CO_setUint32(buf, em->fifo[index].msg);
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	699a      	ldr	r2, [r3, #24]
 800080e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	4413      	add	r3, r2
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4619      	mov	r1, r3
 800081a:	68b8      	ldr	r0, [r7, #8]
 800081c:	f7ff ff1c 	bl	8000658 <CO_setUint32>

        *countRead = sizeof(uint32_t);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	2204      	movs	r2, #4
 8000824:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8000826:	2300      	movs	r3, #0
 8000828:	e000      	b.n	800082c <OD_read_1003+0xd2>
    } else {
        return ODR_NO_DATA;
 800082a:	2319      	movs	r3, #25
    }
}
 800082c:	4618      	mov	r0, r3
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <OD_write_1003>:

static ODR_t
OD_write_1003(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
 8000840:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != 1U) || (countWritten == NULL)) {
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00c      	beq.n	8000862 <OD_write_1003+0x2e>
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	7d1b      	ldrb	r3, [r3, #20]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d108      	bne.n	8000862 <OD_write_1003+0x2e>
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d005      	beq.n	8000862 <OD_write_1003+0x2e>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d102      	bne.n	8000862 <OD_write_1003+0x2e>
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d101      	bne.n	8000866 <OD_write_1003+0x32>
        return ODR_DEV_INCOMPAT;
 8000862:	2309      	movs	r3, #9
 8000864:	e012      	b.n	800088c <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0U) {
 8000866:	68b8      	ldr	r0, [r7, #8]
 8000868:	f7ff fed8 	bl	800061c <CO_getUint8>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 8000872:	230f      	movs	r3, #15
 8000874:	e00a      	b.n	800088c <OD_write_1003+0x58>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	2200      	movs	r2, #0
 8000880:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	2201      	movs	r2, #1
 8000888:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 800088a:	2300      	movs	r3, #0
}
 800088c:	4618      	mov	r0, r3
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <CO_EM_init>:
           OD_entry_t* OD_statusBits,
#endif
#if (((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0) || defined CO_DOXYGEN
           CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#endif
           const uint8_t nodeId, uint32_t* errInfo) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af02      	add	r7, sp, #8
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
 80008a0:	603b      	str	r3, [r7, #0]
    (void)nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 80008a2:	2300      	movs	r3, #0
 80008a4:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((em == NULL) || (OD_1001_errReg == NULL)
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d01a      	beq.n	80008e2 <CO_EM_init+0x4e>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d017      	beq.n	80008e2 <CO_EM_init+0x4e>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
        || ((fifo == NULL) && (fifoSize >= 2U))
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d103      	bne.n	80008c0 <CO_EM_init+0x2c>
 80008b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d810      	bhi.n	80008e2 <CO_EM_init+0x4e>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
        || (OD_1014_cobIdEm == NULL) || (CANdevTx == NULL) || (nodeId < 1U) || (nodeId > 127U)
 80008c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d00d      	beq.n	80008e2 <CO_EM_init+0x4e>
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d00a      	beq.n	80008e2 <CO_EM_init+0x4e>
 80008cc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d006      	beq.n	80008e2 <CO_EM_init+0x4e>
 80008d4:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 80008d8:	2b00      	cmp	r3, #0
 80008da:	db02      	blt.n	80008e2 <CO_EM_init+0x4e>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
        || (OD_1003_preDefErr == NULL)
 80008dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d102      	bne.n	80008e8 <CO_EM_init+0x54>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
        || (CANdevRx == NULL)
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80008e2:	f04f 33ff 	mov.w	r3, #4294967295
 80008e6:	e0a7      	b.n	8000a38 <CO_EM_init+0x1a4>
    }

    /* clear the object */
    (void)memset(em, 0, sizeof(CO_EM_t));
 80008e8:	2258      	movs	r2, #88	@ 0x58
 80008ea:	2100      	movs	r1, #0
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	f00a fbed 	bl	800b0cc <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	68ba      	ldr	r2, [r7, #8]
 80008f6:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 80008f8:	2300      	movs	r3, #0
 80008fa:	2201      	movs	r2, #1
 80008fc:	2100      	movs	r1, #0
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f001 fb44 	bl	8001f8c <OD_getPtr>
 8000904:	4602      	mov	r2, r0
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	68db      	ldr	r3, [r3, #12]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d10c      	bne.n	800092c <CO_EM_init+0x98>
        if (errInfo != NULL) {
 8000912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000914:	2b00      	cmp	r3, #0
 8000916:	d006      	beq.n	8000926 <CO_EM_init+0x92>
            *errInfo = OD_getIndex(OD_1001_errReg);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff feac 	bl	8000676 <OD_getIndex>
 800091e:	4603      	mov	r3, r0
 8000920:	461a      	mov	r2, r3
 8000922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000924:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8000926:	f06f 030b 	mvn.w	r3, #11
 800092a:	e085      	b.n	8000a38 <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    em->fifo = fifo;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	683a      	ldr	r2, [r7, #0]
 8000938:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000940:	771a      	strb	r2, [r3, #28]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    ODR_t odRet;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 8000942:	f107 0210 	add.w	r2, r7, #16
 8000946:	2301      	movs	r3, #1
 8000948:	2100      	movs	r1, #0
 800094a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800094c:	f7ff feb8 	bl	80006c0 <OD_get_u32>
 8000950:	4603      	mov	r3, r0
 8000952:	75bb      	strb	r3, [r7, #22]
    if ((odRet != ODR_OK) || ((COB_IDEmergency32 & 0x7FFFF800U) != 0U)) {
 8000954:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d104      	bne.n	8000966 <CO_EM_init+0xd2>
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	4b38      	ldr	r3, [pc, #224]	@ (8000a40 <CO_EM_init+0x1ac>)
 8000960:	4013      	ands	r3, r2
 8000962:	2b00      	cmp	r3, #0
 8000964:	d010      	beq.n	8000988 <CO_EM_init+0xf4>
        if (errInfo != NULL) {
 8000966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000968:	2b00      	cmp	r3, #0
 800096a:	d006      	beq.n	800097a <CO_EM_init+0xe6>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 800096c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800096e:	f7ff fe82 	bl	8000676 <OD_getIndex>
 8000972:	4603      	mov	r3, r0
 8000974:	461a      	mov	r2, r3
 8000976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000978:	601a      	str	r2, [r3, #0]
        }
        /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK) {
 800097a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d002      	beq.n	8000988 <CO_EM_init+0xf4>
            return CO_ERROR_OD_PARAMETERS;
 8000982:	f06f 030b 	mvn.w	r3, #11
 8000986:	e057      	b.n	8000a38 <CO_EM_init+0x1a4>
     * memory. In that case it is necessary to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) {
        producerCanId += nodeId;
    }
#else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + (uint16_t)nodeId;
 8000988:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800098c:	b29b      	uxth	r3, r3
 800098e:	3380      	adds	r3, #128	@ 0x80
 8000990:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000U) == 0U;
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	43db      	mvns	r3, r3
 8000996:	0fdb      	lsrs	r3, r3, #31
 8000998:	b2db      	uxtb	r3, r3
 800099a:	461a      	mov	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	625a      	str	r2, [r3, #36]	@ 0x24

    em->OD_1014_extension.object = em;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	631a      	str	r2, [r3, #48]	@ 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	4a26      	ldr	r2, [pc, #152]	@ (8000a44 <CO_EM_init+0x1b0>)
 80009aa:	635a      	str	r2, [r3, #52]	@ 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4a26      	ldr	r2, [pc, #152]	@ (8000a48 <CO_EM_init+0x1b4>)
 80009b0:	639a      	str	r2, [r3, #56]	@ 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	3330      	adds	r3, #48	@ 0x30
 80009b6:	4619      	mov	r1, r3
 80009b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80009ba:	f7ff fe6d 	bl	8000698 <OD_extension_init>
 80009be:	4603      	mov	r3, r0
 80009c0:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 80009c2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d00c      	beq.n	80009e4 <CO_EM_init+0x150>
        if (errInfo != NULL) {
 80009ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d006      	beq.n	80009de <CO_EM_init+0x14a>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 80009d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80009d2:	f7ff fe50 	bl	8000676 <OD_getIndex>
 80009d6:	4603      	mov	r3, r0
 80009d8:	461a      	mov	r2, r3
 80009da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009dc:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80009de:	f06f 030b 	mvn.w	r3, #11
 80009e2:	e029      	b.n	8000a38 <CO_EM_init+0x1a4>
    }
#endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80009ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    em->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, producerCanId, false, 8U, false);
 80009ee:	8aba      	ldrh	r2, [r7, #20]
 80009f0:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 80009f2:	2300      	movs	r3, #0
 80009f4:	9301      	str	r3, [sp, #4]
 80009f6:	2308      	movs	r3, #8
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	2300      	movs	r3, #0
 80009fc:	68b8      	ldr	r0, [r7, #8]
 80009fe:	f007 f859 	bl	8007ab4 <CO_CANtxBufferInit>
 8000a02:	4602      	mov	r2, r0
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (em->CANtxBuff == NULL) {
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d102      	bne.n	8000a16 <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295
 8000a14:	e010      	b.n	8000a38 <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT */
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	641a      	str	r2, [r3, #64]	@ 0x40
    em->OD_1003_extension.read = OD_read_1003;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a4c <CO_EM_init+0x1b8>)
 8000a20:	645a      	str	r2, [r3, #68]	@ 0x44
    em->OD_1003_extension.write = OD_write_1003;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	@ (8000a50 <CO_EM_init+0x1bc>)
 8000a26:	649a      	str	r2, [r3, #72]	@ 0x48
    (void)OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	3340      	adds	r3, #64	@ 0x40
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000a30:	f7ff fe32 	bl	8000698 <OD_extension_init>
    em->pFunctSignalRx = NULL;
    /* configure SDO server CAN reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CO_CAN_ID_EMERGENCY, 0x780, false, (void*)em, CO_EM_receive);
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 8000a34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	7ffff800 	.word	0x7ffff800
 8000a44:	080006eb 	.word	0x080006eb
 8000a48:	08001a83 	.word	0x08001a83
 8000a4c:	0800075b 	.word	0x0800075b
 8000a50:	08000835 	.word	0x08000835

08000a54 <CO_EM_process>:
    }
}
#endif

void
CO_EM_process(CO_EM_t* em, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af02      	add	r7, sp, #8
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
 8000a60:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PROD_INHIBIT) == 0
    (void)timeDifference_us; /* may be unused */
#endif

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	8a5b      	ldrh	r3, [r3, #18]
 8000a68:	82bb      	strh	r3, [r7, #20]
    if (CANerrSt != em->CANerrorStatusOld) {
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	8a1b      	ldrh	r3, [r3, #16]
 8000a6e:	8aba      	ldrh	r2, [r7, #20]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	f000 80a3 	beq.w	8000bbc <CO_EM_process+0x168>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	8a1a      	ldrh	r2, [r3, #16]
 8000a7a:	8abb      	ldrh	r3, [r7, #20]
 8000a7c:	4053      	eors	r3, r2
 8000a7e:	827b      	strh	r3, [r7, #18]
        em->CANerrorStatusOld = CANerrSt;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	8aba      	ldrh	r2, [r7, #20]
 8000a84:	821a      	strh	r2, [r3, #16]

        if ((CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U) {
 8000a86:	8a7a      	ldrh	r2, [r7, #18]
 8000a88:	f240 1301 	movw	r3, #257	@ 0x101
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d010      	beq.n	8000ab4 <CO_EM_process+0x60>
            CO_error(em, (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U, CO_EM_CAN_BUS_WARNING,
 8000a92:	8aba      	ldrh	r2, [r7, #20]
 8000a94:	f240 1301 	movw	r3, #257	@ 0x101
 8000a98:	4013      	ands	r3, r2
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	bf14      	ite	ne
 8000a9e:	2301      	movne	r3, #1
 8000aa0:	2300      	moveq	r3, #0
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	2300      	movs	r3, #0
 8000aac:	2201      	movs	r2, #1
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f000 f91b 	bl	8000cea <CO_error>
                     CO_EMC_NO_ERROR, 0);
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PASSIVE) != 0U) {
 8000ab4:	8a7b      	ldrh	r3, [r7, #18]
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d010      	beq.n	8000ae0 <CO_EM_process+0x8c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0U, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 8000abe:	8abb      	ldrh	r3, [r7, #20]
 8000ac0:	f003 0302 	and.w	r3, r3, #2
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	bf14      	ite	ne
 8000ac8:	2301      	movne	r3, #1
 8000aca:	2300      	moveq	r3, #0
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	4619      	mov	r1, r3
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	f248 1320 	movw	r3, #33056	@ 0x8120
 8000ad8:	2207      	movs	r2, #7
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f000 f905 	bl	8000cea <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_BUS_OFF) != 0U) {
 8000ae0:	8a7b      	ldrh	r3, [r7, #18]
 8000ae2:	f003 0304 	and.w	r3, r3, #4
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d010      	beq.n	8000b0c <CO_EM_process+0xb8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0U, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);
 8000aea:	8abb      	ldrh	r3, [r7, #20]
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	bf14      	ite	ne
 8000af4:	2301      	movne	r3, #1
 8000af6:	2300      	moveq	r3, #0
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	4619      	mov	r1, r3
 8000afc:	2300      	movs	r3, #0
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	f248 1340 	movw	r3, #33088	@ 0x8140
 8000b04:	2212      	movs	r2, #18
 8000b06:	68f8      	ldr	r0, [r7, #12]
 8000b08:	f000 f8ef 	bl	8000cea <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_OVERFLOW) != 0U) {
 8000b0c:	8a7b      	ldrh	r3, [r7, #18]
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d010      	beq.n	8000b38 <CO_EM_process+0xe4>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0U, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 8000b16:	8abb      	ldrh	r3, [r7, #20]
 8000b18:	f003 0308 	and.w	r3, r3, #8
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	bf14      	ite	ne
 8000b20:	2301      	movne	r3, #1
 8000b22:	2300      	moveq	r3, #0
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	4619      	mov	r1, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	f248 1310 	movw	r3, #33040	@ 0x8110
 8000b30:	2214      	movs	r2, #20
 8000b32:	68f8      	ldr	r0, [r7, #12]
 8000b34:	f000 f8d9 	bl	8000cea <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PDO_LATE) != 0U) {
 8000b38:	8a7b      	ldrh	r3, [r7, #18]
 8000b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d010      	beq.n	8000b64 <CO_EM_process+0x110>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0U, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);
 8000b42:	8abb      	ldrh	r3, [r7, #20]
 8000b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	bf14      	ite	ne
 8000b4c:	2301      	movne	r3, #1
 8000b4e:	2300      	moveq	r3, #0
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	4619      	mov	r1, r3
 8000b54:	2300      	movs	r3, #0
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000b5c:	2215      	movs	r2, #21
 8000b5e:	68f8      	ldr	r0, [r7, #12]
 8000b60:	f000 f8c3 	bl	8000cea <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_PASSIVE) != 0U) {
 8000b64:	8a7b      	ldrh	r3, [r7, #18]
 8000b66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d010      	beq.n	8000b90 <CO_EM_process+0x13c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0U, CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 8000b6e:	8abb      	ldrh	r3, [r7, #20]
 8000b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	bf14      	ite	ne
 8000b78:	2301      	movne	r3, #1
 8000b7a:	2300      	moveq	r3, #0
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4619      	mov	r1, r3
 8000b80:	2300      	movs	r3, #0
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	f248 1320 	movw	r3, #33056	@ 0x8120
 8000b88:	2206      	movs	r2, #6
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f000 f8ad 	bl	8000cea <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_OVERFLOW) != 0U) {
 8000b90:	8a7b      	ldrh	r3, [r7, #18]
 8000b92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d010      	beq.n	8000bbc <CO_EM_process+0x168>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0U, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 8000b9a:	8abb      	ldrh	r3, [r7, #20]
 8000b9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	bf14      	ite	ne
 8000ba4:	2301      	movne	r3, #1
 8000ba6:	2300      	moveq	r3, #0
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	4619      	mov	r1, r3
 8000bac:	2300      	movs	r3, #0
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	f248 1310 	movw	r3, #33040	@ 0x8110
 8000bb4:	2213      	movs	r2, #19
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f000 f897 	bl	8000cea <CO_error>
        }
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	75fb      	strb	r3, [r7, #23]
    if (CO_CONFIG_ERR_CONDITION_GENERIC) {
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	795b      	ldrb	r3, [r3, #5]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d003      	beq.n	8000bd0 <CO_EM_process+0x17c>
        errorRegister |= (uint8_t)CO_ERR_REG_GENERIC_ERR;
 8000bc8:	7dfb      	ldrb	r3, [r7, #23]
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE) {
        errorRegister |= (uint8_t)CO_ERR_REG_TEMPERATURE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION) {
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	789b      	ldrb	r3, [r3, #2]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d103      	bne.n	8000be0 <CO_EM_process+0x18c>
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	78db      	ldrb	r3, [r3, #3]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d003      	beq.n	8000be8 <CO_EM_process+0x194>
        errorRegister |= (uint8_t)CO_ERR_REG_COMMUNICATION;
 8000be0:	7dfb      	ldrb	r3, [r7, #23]
 8000be2:	f043 0310 	orr.w	r3, r3, #16
 8000be6:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE) {
        errorRegister |= (uint8_t)CO_ERR_REG_DEV_PROFILE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER) {
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	7a1b      	ldrb	r3, [r3, #8]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d103      	bne.n	8000bf8 <CO_EM_process+0x1a4>
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	7a5b      	ldrb	r3, [r3, #9]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d003      	beq.n	8000c00 <CO_EM_process+0x1ac>
        errorRegister |= (uint8_t)CO_ERR_REG_MANUFACTURER;
 8000bf8:	7dfb      	ldrb	r3, [r7, #23]
 8000bfa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bfe:	75fb      	strb	r3, [r7, #23]
    }
    *em->errorRegister = errorRegister;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	7dfa      	ldrb	r2, [r7, #23]
 8000c06:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d067      	beq.n	8000cde <CO_EM_process+0x28a>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    if (em->fifoSize >= 2U) {
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	7f1b      	ldrb	r3, [r3, #28]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d965      	bls.n	8000ce2 <CO_EM_process+0x28e>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	7f9b      	ldrb	r3, [r3, #30]
 8000c1a:	747b      	strb	r3, [r7, #17]

        if (!em->CANtxBuff->bufferFull && (fifoPpPtr != em->fifoWrPtr)
            && (em->inhibitEmTimer >= em->inhibitEmTime_us)) {
            em->inhibitEmTimer = 0;
#else
        if ((!em->CANtxBuff->bufferFull) && (fifoPpPtr != em->fifoWrPtr)) {
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d15d      	bne.n	8000ce2 <CO_EM_process+0x28e>
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	7f5b      	ldrb	r3, [r3, #29]
 8000c2a:	7c7a      	ldrb	r2, [r7, #17]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d058      	beq.n	8000ce2 <CO_EM_process+0x28e>
#endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t)errorRegister << 16;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	699a      	ldr	r2, [r3, #24]
 8000c34:	7c7b      	ldrb	r3, [r7, #17]
 8000c36:	00db      	lsls	r3, r3, #3
 8000c38:	4413      	add	r3, r2
 8000c3a:	6819      	ldr	r1, [r3, #0]
 8000c3c:	7dfb      	ldrb	r3, [r7, #23]
 8000c3e:	041a      	lsls	r2, r3, #16
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	6998      	ldr	r0, [r3, #24]
 8000c44:	7c7b      	ldrb	r3, [r7, #17]
 8000c46:	00db      	lsls	r3, r3, #3
 8000c48:	4403      	add	r3, r0
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            (void)memcpy((void*)em->CANtxBuff->data, (void*)&em->fifo[fifoPpPtr].msg, sizeof(em->CANtxBuff->data));
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c52:	1d58      	adds	r0, r3, #5
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	699a      	ldr	r2, [r3, #24]
 8000c58:	7c7b      	ldrb	r3, [r7, #17]
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	4413      	add	r3, r2
 8000c5e:	2208      	movs	r2, #8
 8000c60:	4619      	mov	r1, r3
 8000c62:	f00a fabe 	bl	800b1e2 <memcpy>
            (void)CO_CANsend(em->CANdevTx, em->CANtxBuff);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	695a      	ldr	r2, [r3, #20]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4610      	mov	r0, r2
 8000c72:	f006 ff99 	bl	8007ba8 <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
#endif

            /* increment pointer */
            fifoPpPtr++;
 8000c76:	7c7b      	ldrb	r3, [r7, #17]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	747b      	strb	r3, [r7, #17]
            em->fifoPpPtr = (fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0U;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	7f1b      	ldrb	r3, [r3, #28]
 8000c80:	7c7a      	ldrb	r2, [r7, #17]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d201      	bcs.n	8000c8a <CO_EM_process+0x236>
 8000c86:	7c7a      	ldrb	r2, [r7, #17]
 8000c88:	e000      	b.n	8000c8c <CO_EM_process+0x238>
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all messages from fifo buffer are processed */
            if (em->fifoOverflow == 1U) {
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	7fdb      	ldrb	r3, [r3, #31]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d10c      	bne.n	8000cb2 <CO_EM_process+0x25e>
                em->fifoOverflow = 2;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0);
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca6:	2220      	movs	r2, #32
 8000ca8:	2101      	movs	r1, #1
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f000 f81d 	bl	8000cea <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 8000cb0:	e017      	b.n	8000ce2 <CO_EM_process+0x28e>
            } else if ((em->fifoOverflow == 2U) && (em->fifoPpPtr == em->fifoWrPtr)) {
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	7fdb      	ldrb	r3, [r3, #31]
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d113      	bne.n	8000ce2 <CO_EM_process+0x28e>
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	7f9a      	ldrb	r2, [r3, #30]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	7f5b      	ldrb	r3, [r3, #29]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d10d      	bne.n	8000ce2 <CO_EM_process+0x28e>
                em->fifoOverflow = 0;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 8000ccc:	2300      	movs	r3, #0
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	2220      	movs	r2, #32
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f000 f807 	bl	8000cea <CO_error>
    return;
 8000cdc:	e001      	b.n	8000ce2 <CO_EM_process+0x28e>
        return;
 8000cde:	bf00      	nop
 8000ce0:	e000      	b.n	8000ce4 <CO_EM_process+0x290>
    return;
 8000ce2:	bf00      	nop
}
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <CO_error>:

void
CO_error(CO_EM_t* em, bool_t setError, const uint8_t errorBit, uint16_t errorCode, uint32_t infoCode) {
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b08c      	sub	sp, #48	@ 0x30
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	71fb      	strb	r3, [r7, #7]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) {
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f000 80b6 	beq.w	8000e74 <CO_error+0x18a>
        return;
    }

    uint8_t index = errorBit >> 3;
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	08db      	lsrs	r3, r3, #3
 8000d0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t bitmask = 1U << (errorBit & 0x7U);
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	2201      	movs	r2, #1
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)) {
 8000d20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d24:	2b09      	cmp	r3, #9
 8000d26:	d90a      	bls.n	8000d3e <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 8000d28:	2305      	movs	r3, #5
 8000d2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        bitmask = 1U << (CO_EM_WRONG_ERROR_REPORT & 0x7U);
 8000d2e:	2301      	movs	r3, #1
 8000d30:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 8000d34:	f44f 43c2 	mov.w	r3, #24832	@ 0x6100
 8000d38:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    uint8_t* errorStatusBits = &em->errorStatusBits[index];
 8000d3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	4413      	add	r3, r2
 8000d46:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 8000d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d4a:	781a      	ldrb	r2, [r3, #0]
 8000d4c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000d50:	4013      	ands	r3, r2
 8000d52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d004      	beq.n	8000d66 <CO_error+0x7c>
        if (errorStatusBitMasked != 0U) {
 8000d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d007      	beq.n	8000d74 <CO_error+0x8a>
            return;
 8000d64:	e089      	b.n	8000e7a <CO_error+0x190>
        }
    } else {
        if (errorStatusBitMasked == 0U) {
 8000d66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 8084 	beq.w	8000e78 <CO_error+0x18e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 8000d70:	2300      	movs	r3, #0
 8000d72:	80bb      	strh	r3, [r7, #4]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    /* prepare emergency message. Error register will be added in post-process */
    uint32_t errMsg = ((uint32_t)errorBit << 24) | CO_SWAP_16(errorCode);
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	061a      	lsls	r2, r3, #24
 8000d78:	88bb      	ldrh	r3, [r7, #4]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	623b      	str	r3, [r7, #32]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 8000d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d80:	61fb      	str	r3, [r7, #28]
#endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d86:	f3ef 8210 	mrs	r2, PRIMASK
 8000d8a:	617a      	str	r2, [r7, #20]
  return(result);
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	bf00      	nop
    if (setError) {
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d008      	beq.n	8000dac <CO_error+0xc2>
        *errorStatusBits |= bitmask;
 8000d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d9c:	781a      	ldrb	r2, [r3, #0]
 8000d9e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000da2:	4313      	orrs	r3, r2
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000da8:	701a      	strb	r2, [r3, #0]
 8000daa:	e00b      	b.n	8000dc4 <CO_error+0xda>
    } else {
        *errorStatusBits &= ~bitmask;
 8000dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b25a      	sxtb	r2, r3
 8000db2:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8000db6:	43db      	mvns	r3, r3
 8000db8:	b25b      	sxtb	r3, r3
 8000dba:	4013      	ands	r3, r2
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dc2:	701a      	strb	r2, [r3, #0]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    if (em->fifoSize >= 2U) {
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	7f1b      	ldrb	r3, [r3, #28]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d93c      	bls.n	8000e46 <CO_error+0x15c>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	7f5b      	ldrb	r3, [r3, #29]
 8000dd0:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1U;
 8000dd2:	7efb      	ldrb	r3, [r7, #27]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	7f1b      	ldrb	r3, [r3, #28]
 8000dde:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d302      	bcc.n	8000dec <CO_error+0x102>
            fifoWrPtrNext = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	7f9b      	ldrb	r3, [r3, #30]
 8000df0:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d103      	bne.n	8000e00 <CO_error+0x116>
            em->fifoOverflow = 1;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	77da      	strb	r2, [r3, #31]
 8000dfe:	e022      	b.n	8000e46 <CO_error+0x15c>
        } else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	699a      	ldr	r2, [r3, #24]
 8000e04:	7efb      	ldrb	r3, [r7, #27]
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	4413      	add	r3, r2
 8000e0a:	6a3a      	ldr	r2, [r7, #32]
 8000e0c:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	699a      	ldr	r2, [r3, #24]
 8000e12:	7efb      	ldrb	r3, [r7, #27]
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	4413      	add	r3, r2
 8000e18:	69fa      	ldr	r2, [r7, #28]
 8000e1a:	605a      	str	r2, [r3, #4]
#endif
            em->fifoWrPtr = fifoWrPtrNext;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000e22:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1U)) {
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	7f1b      	ldrb	r3, [r3, #28]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d207      	bcs.n	8000e46 <CO_error+0x15c>
                em->fifoCount++;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	f383 8810 	msr	PRIMASK, r3
}
 8000e54:	bf00      	nop

#if ((CO_CONFIG_EM)&CO_CONFIG_FLAG_CALLBACK_PRE) != 0
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    /* Optional signal to RTOS, which can resume task, which handles CO_EM_process */
    if ((em->pFunctSignalPre != NULL) && em->producerEnabled) {
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d00d      	beq.n	8000e7a <CO_error+0x190>
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d009      	beq.n	8000e7a <CO_error+0x190>
        em->pFunctSignalPre(em->functSignalObjectPre);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8000e6e:	4610      	mov	r0, r2
 8000e70:	4798      	blx	r3
 8000e72:	e002      	b.n	8000e7a <CO_error+0x190>
        return;
 8000e74:	bf00      	nop
 8000e76:	e000      	b.n	8000e7a <CO_error+0x190>
            return;
 8000e78:	bf00      	nop
    }
#endif
#endif
}
 8000e7a:	3730      	adds	r7, #48	@ 0x30
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	60fb      	str	r3, [r7, #12]
    return value;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d002      	beq.n	8000eb0 <OD_getIndex+0x14>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	e000      	b.n	8000eb2 <OD_getIndex+0x16>
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8000ece:	2305      	movs	r3, #5
 8000ed0:	e003      	b.n	8000eda <OD_extension_init+0x1c>
    entry->extension = extension;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af02      	add	r7, sp, #8
 8000eec:	60f8      	str	r0, [r7, #12]
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000ef6:	7af9      	ldrb	r1, [r7, #11]
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2304      	movs	r3, #4
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f000 ffc9 	bl	8001e98 <OD_get_value>
 8000f06:	4603      	mov	r3, r0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_HBcons_receive(void* object, void* msg) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t* HBconsNode = object;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	791b      	ldrb	r3, [r3, #4]
 8000f22:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	3305      	adds	r3, #5
 8000f28:	60fb      	str	r3, [r7, #12]

    if (DLC == 1U) {
 8000f2a:	7cfb      	ldrb	r3, [r7, #19]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d111      	bne.n	8000f54 <CO_HBcons_receive+0x44>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	b25a      	sxtb	r2, r3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	60da      	str	r2, [r3, #12]
#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_FLAG_CALLBACK_PRE) != 0
        /* Optional signal to RTOS, which can resume task, which handles HBcons. */
        if (HBconsNode->pFunctSignalPre != NULL) {
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d005      	beq.n	8000f54 <CO_HBcons_receive+0x44>
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	6952      	ldr	r2, [r2, #20]
 8000f50:	4610      	mov	r0, r2
 8000f52:	4798      	blx	r3
        }
#endif
    }
}
 8000f54:	bf00      	nop
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <OD_write_1016>:
 * Custom function for writing OD object "Consumer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1016(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
 8000f68:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t* HBcons = stream->object;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	61fb      	str	r3, [r7, #28]

    if ((stream == NULL) || (buf == NULL) || (stream->subIndex < 1U)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d012      	beq.n	8000f9c <OD_write_1016+0x40>
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00f      	beq.n	8000f9c <OD_write_1016+0x40>
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	7d1b      	ldrb	r3, [r3, #20]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d00b      	beq.n	8000f9c <OD_write_1016+0x40>
        || (stream->subIndex > HBcons->numberOfMonitoredNodes) || (count != sizeof(uint32_t))
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	7d1a      	ldrb	r2, [r3, #20]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	7a1b      	ldrb	r3, [r3, #8]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d805      	bhi.n	8000f9c <OD_write_1016+0x40>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	d102      	bne.n	8000f9c <OD_write_1016+0x40>
        || (countWritten == NULL)) {
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <OD_write_1016+0x44>
        return ODR_DEV_INCOMPAT;
 8000f9c:	2309      	movs	r3, #9
 8000f9e:	e020      	b.n	8000fe2 <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 8000fa0:	68b8      	ldr	r0, [r7, #8]
 8000fa2:	f7ff ff6d 	bl	8000e80 <CO_getUint32>
 8000fa6:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	0c1b      	lsrs	r3, r3, #16
 8000fac:	75fb      	strb	r3, [r7, #23]
    uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1U, nodeId, consumer_time);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	7d1b      	ldrb	r3, [r3, #20]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	b2d9      	uxtb	r1, r3
 8000fba:	8abb      	ldrh	r3, [r7, #20]
 8000fbc:	7dfa      	ldrb	r2, [r7, #23]
 8000fbe:	69f8      	ldr	r0, [r7, #28]
 8000fc0:	f000 f8be 	bl	8001140 <CO_HBconsumer_initEntry>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	74fb      	strb	r3, [r7, #19]
    if (ret != CO_ERROR_NO) {
 8000fc8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	e006      	b.n	8000fe2 <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f000 fd51 	bl	8001a82 <OD_writeOriginal>
 8000fe0:	4603      	mov	r3, r0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3720      	adds	r7, #32
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <CO_HBconsumer_init>:
#endif

CO_ReturnError_t
CO_HBconsumer_init(CO_HBconsumer_t* HBcons, CO_EM_t* em, CO_HBconsNode_t* monitoredNodes, uint8_t monitoredNodesCount,
                   OD_entry_t* OD_1016_HBcons, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdxStart, uint32_t* errInfo) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if ((HBcons == NULL) || (em == NULL) || (monitoredNodes == NULL) || (OD_1016_HBcons == NULL)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00b      	beq.n	8001018 <CO_HBconsumer_init+0x2c>
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d008      	beq.n	8001018 <CO_HBconsumer_init+0x2c>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d005      	beq.n	8001018 <CO_HBconsumer_init+0x2c>
 800100c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800100e:	2b00      	cmp	r3, #0
 8001010:	d002      	beq.n	8001018 <CO_HBconsumer_init+0x2c>
        || (CANdevRx == NULL)) {
 8001012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001014:	2b00      	cmp	r3, #0
 8001016:	d102      	bne.n	800101e <CO_HBconsumer_init+0x32>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
 800101c:	e087      	b.n	800112e <CO_HBconsumer_init+0x142>
    }

    /* Configure object variables */
    (void)memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 800101e:	2230      	movs	r2, #48	@ 0x30
 8001020:	2100      	movs	r1, #0
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f00a f852 	bl	800b0cc <memset>
    HBcons->em = em;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001038:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800103e:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
                                         ? (OD_1016_HBcons->subEntriesCount - 1U)
                                         : monitoredNodesCount;
 8001040:	78fa      	ldrb	r2, [r7, #3]
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 8001042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001044:	789b      	ldrb	r3, [r3, #2]
 8001046:	3b01      	subs	r3, #1
                                         : monitoredNodesCount;
 8001048:	4293      	cmp	r3, r2
 800104a:	bf28      	it	cs
 800104c:	4613      	movcs	r3, r2
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 800104e:	b2da      	uxtb	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	721a      	strb	r2, [r3, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001054:	2300      	movs	r3, #0
 8001056:	77fb      	strb	r3, [r7, #31]
 8001058:	e041      	b.n	80010de <CO_HBconsumer_init+0xf2>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1U, &val, true);
 800105a:	7ffb      	ldrb	r3, [r7, #31]
 800105c:	3301      	adds	r3, #1
 800105e:	b2d9      	uxtb	r1, r3
 8001060:	f107 0214 	add.w	r2, r7, #20
 8001064:	2301      	movs	r3, #1
 8001066:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001068:	f7ff ff3d 	bl	8000ee6 <OD_get_u32>
 800106c:	4603      	mov	r3, r0
 800106e:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 8001070:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00c      	beq.n	8001092 <CO_HBconsumer_init+0xa6>
            if (errInfo != NULL) {
 8001078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800107a:	2b00      	cmp	r3, #0
 800107c:	d006      	beq.n	800108c <CO_HBconsumer_init+0xa0>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 800107e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001080:	f7ff ff0c 	bl	8000e9c <OD_getIndex>
 8001084:	4603      	mov	r3, r0
 8001086:	461a      	mov	r2, r3
 8001088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800108a:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 800108c:	f06f 030b 	mvn.w	r3, #11
 8001090:	e04d      	b.n	800112e <CO_HBconsumer_init+0x142>
        }

        uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	0c1b      	lsrs	r3, r3, #16
 8001096:	777b      	strb	r3, [r7, #29]
        uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, consumer_time);
 800109c:	8b7b      	ldrh	r3, [r7, #26]
 800109e:	7f7a      	ldrb	r2, [r7, #29]
 80010a0:	7ff9      	ldrb	r1, [r7, #31]
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f000 f84c 	bl	8001140 <CO_HBconsumer_initEntry>
 80010a8:	4603      	mov	r3, r0
 80010aa:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 80010ac:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d011      	beq.n	80010d8 <CO_HBconsumer_init+0xec>
            if (errInfo != NULL) {
 80010b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d006      	beq.n	80010c8 <CO_HBconsumer_init+0xdc>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 80010ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80010bc:	f7ff feee 	bl	8000e9c <OD_getIndex>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010c6:	601a      	str	r2, [r3, #0]
            }
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS) {
 80010c8:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80010cc:	f113 0f0c 	cmn.w	r3, #12
 80010d0:	d002      	beq.n	80010d8 <CO_HBconsumer_init+0xec>
                return ret;
 80010d2:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80010d6:	e02a      	b.n	800112e <CO_HBconsumer_init+0x142>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80010d8:	7ffb      	ldrb	r3, [r7, #31]
 80010da:	3301      	adds	r3, #1
 80010dc:	77fb      	strb	r3, [r7, #31]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	7a1b      	ldrb	r3, [r3, #8]
 80010e2:	7ffa      	ldrb	r2, [r7, #31]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d3b8      	bcc.n	800105a <CO_HBconsumer_init+0x6e>
        }
    }

    /* configure extension for OD */
#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    HBcons->OD_1016_extension.object = HBcons;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4a11      	ldr	r2, [pc, #68]	@ (8001138 <CO_HBconsumer_init+0x14c>)
 80010f2:	625a      	str	r2, [r3, #36]	@ 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4a11      	ldr	r2, [pc, #68]	@ (800113c <CO_HBconsumer_init+0x150>)
 80010f8:	629a      	str	r2, [r3, #40]	@ 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	3320      	adds	r3, #32
 80010fe:	4619      	mov	r1, r3
 8001100:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001102:	f7ff fedc 	bl	8000ebe <OD_extension_init>
 8001106:	4603      	mov	r3, r0
 8001108:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 800110a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00c      	beq.n	800112c <CO_HBconsumer_init+0x140>
        if (errInfo != NULL) {
 8001112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001114:	2b00      	cmp	r3, #0
 8001116:	d006      	beq.n	8001126 <CO_HBconsumer_init+0x13a>
            *errInfo = OD_getIndex(OD_1016_HBcons);
 8001118:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800111a:	f7ff febf 	bl	8000e9c <OD_getIndex>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001124:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8001126:	f06f 030b 	mvn.w	r3, #11
 800112a:	e000      	b.n	800112e <CO_HBconsumer_init+0x142>
    }
#endif

    return CO_ERROR_NO;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3720      	adds	r7, #32
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	080019d3 	.word	0x080019d3
 800113c:	08000f5d 	.word	0x08000f5d

08001140 <CO_HBconsumer_initEntry>:

static CO_ReturnError_t
CO_HBconsumer_initEntry(CO_HBconsumer_t* HBcons, uint8_t idx, uint8_t nodeId, uint16_t consumerTime_ms) {
 8001140:	b5b0      	push	{r4, r5, r7, lr}
 8001142:	b08e      	sub	sp, #56	@ 0x38
 8001144:	af04      	add	r7, sp, #16
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	4608      	mov	r0, r1
 800114a:	4611      	mov	r1, r2
 800114c:	461a      	mov	r2, r3
 800114e:	4603      	mov	r3, r0
 8001150:	70fb      	strb	r3, [r7, #3]
 8001152:	460b      	mov	r3, r1
 8001154:	70bb      	strb	r3, [r7, #2]
 8001156:	4613      	mov	r3, r2
 8001158:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800115a:	2300      	movs	r3, #0
 800115c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* verify arguments */
    if ((HBcons == NULL) || (idx >= HBcons->numberOfMonitoredNodes)) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d004      	beq.n	8001170 <CO_HBconsumer_initEntry+0x30>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7a1b      	ldrb	r3, [r3, #8]
 800116a:	78fa      	ldrb	r2, [r7, #3]
 800116c:	429a      	cmp	r2, r3
 800116e:	d302      	bcc.n	8001176 <CO_HBconsumer_initEntry+0x36>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	e08b      	b.n	800128e <CO_HBconsumer_initEntry+0x14e>
    }

    /* verify for duplicate entries */
    if ((consumerTime_ms != 0U) && (nodeId != 0U)) {
 8001176:	883b      	ldrh	r3, [r7, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d032      	beq.n	80011e2 <CO_HBconsumer_initEntry+0xa2>
 800117c:	78bb      	ldrb	r3, [r7, #2]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d02f      	beq.n	80011e2 <CO_HBconsumer_initEntry+0xa2>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001182:	2300      	movs	r3, #0
 8001184:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001188:	e025      	b.n	80011d6 <CO_HBconsumer_initEntry+0x96>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6859      	ldr	r1, [r3, #4]
 800118e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	440b      	add	r3, r1
 800119c:	f107 0408 	add.w	r4, r7, #8
 80011a0:	461d      	mov	r5, r3
 80011a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011aa:	e884 0003 	stmia.w	r4, {r0, r1}
            if ((idx != i) && (node.time_us != 0U) && (node.nodeId == nodeId)) {
 80011ae:	78fa      	ldrb	r2, [r7, #3]
 80011b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d009      	beq.n	80011cc <CO_HBconsumer_initEntry+0x8c>
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d006      	beq.n	80011cc <CO_HBconsumer_initEntry+0x8c>
 80011be:	7a3b      	ldrb	r3, [r7, #8]
 80011c0:	78ba      	ldrb	r2, [r7, #2]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d102      	bne.n	80011cc <CO_HBconsumer_initEntry+0x8c>
                ret = CO_ERROR_OD_PARAMETERS;
 80011c6:	23f4      	movs	r3, #244	@ 0xf4
 80011c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80011cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80011d0:	3301      	adds	r3, #1
 80011d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7a1b      	ldrb	r3, [r3, #8]
 80011da:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80011de:	429a      	cmp	r2, r3
 80011e0:	d3d3      	bcc.n	800118a <CO_HBconsumer_initEntry+0x4a>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 80011e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d14f      	bne.n	800128a <CO_HBconsumer_initEntry+0x14a>
        uint16_t COB_ID;

        CO_HBconsNode_t* monitoredNode = &HBcons->monitoredNodes[idx];
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6859      	ldr	r1, [r3, #4]
 80011ee:	78fa      	ldrb	r2, [r7, #3]
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	440b      	add	r3, r1
 80011fa:	623b      	str	r3, [r7, #32]
        monitoredNode->nodeId = nodeId;
 80011fc:	6a3b      	ldr	r3, [r7, #32]
 80011fe:	78ba      	ldrb	r2, [r7, #2]
 8001200:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (uint32_t)consumerTime_ms * 1000U;
 8001202:	883b      	ldrh	r3, [r7, #0]
 8001204:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001208:	fb03 f202 	mul.w	r2, r3, r2
 800120c:	6a3b      	ldr	r3, [r7, #32]
 800120e:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	22ff      	movs	r2, #255	@ 0xff
 8001214:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	2200      	movs	r2, #0
 800121a:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if ((monitoredNode->nodeId != 0U) && (monitoredNode->time_us != 0U)) {
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00c      	beq.n	800123e <CO_HBconsumer_initEntry+0xfe>
 8001224:	6a3b      	ldr	r3, [r7, #32]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d008      	beq.n	800123e <CO_HBconsumer_initEntry+0xfe>
            COB_ID = monitoredNode->nodeId + (uint16_t)CO_CAN_ID_HEARTBEAT;
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8001234:	84bb      	strh	r3, [r7, #36]	@ 0x24
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	2201      	movs	r2, #1
 800123a:	709a      	strb	r2, [r3, #2]
 800123c:	e007      	b.n	800124e <CO_HBconsumer_initEntry+0x10e>
        } else {
            COB_ID = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	84bb      	strh	r3, [r7, #36]	@ 0x24
            monitoredNode->time_us = 0;
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	2200      	movs	r2, #0
 800124c:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6998      	ldr	r0, [r3, #24]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	8b9a      	ldrh	r2, [r3, #28]
 8001256:	78fb      	ldrb	r3, [r7, #3]
 8001258:	b29b      	uxth	r3, r3
 800125a:	4413      	add	r3, r2
 800125c:	b29c      	uxth	r4, r3
                                 (void*)&HBcons->monitoredNodes[idx], CO_HBcons_receive);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6859      	ldr	r1, [r3, #4]
 8001262:	78fa      	ldrb	r2, [r7, #3]
 8001264:	4613      	mov	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4413      	add	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	440b      	add	r3, r1
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 800126e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001270:	4909      	ldr	r1, [pc, #36]	@ (8001298 <CO_HBconsumer_initEntry+0x158>)
 8001272:	9102      	str	r1, [sp, #8]
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	2300      	movs	r3, #0
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800127e:	4621      	mov	r1, r4
 8001280:	f006 fbbc 	bl	80079fc <CO_CANrxBufferInit>
 8001284:	4603      	mov	r3, r0
 8001286:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    return ret;
 800128a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800128e:	4618      	mov	r0, r3
 8001290:	3728      	adds	r7, #40	@ 0x28
 8001292:	46bd      	mov	sp, r7
 8001294:	bdb0      	pop	{r4, r5, r7, pc}
 8001296:	bf00      	nop
 8001298:	08000f11 	.word	0x08000f11

0800129c <CO_HBconsumer_process>:
}
#endif /* (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI */

void
CO_HBconsumer_process(CO_HBconsumer_t* HBcons, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                      uint32_t* timerNext_us) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b08e      	sub	sp, #56	@ 0x38
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
 80012a8:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 80012aa:	2301      	movs	r3, #1
 80012ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 80012ae:	2301      	movs	r3, #1
 80012b0:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d07a      	beq.n	80013ae <CO_HBconsumer_process+0x112>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d076      	beq.n	80013ae <CO_HBconsumer_process+0x112>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80012c0:	2300      	movs	r3, #0
 80012c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80012c6:	e06b      	b.n	80013a0 <CO_HBconsumer_process+0x104>
            uint32_t timeDifference_us_copy = timeDifference_us;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6859      	ldr	r1, [r3, #4]
 80012d0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80012d4:	4613      	mov	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4413      	add	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	440b      	add	r3, r1
 80012de:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	789b      	ldrb	r3, [r3, #2]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d055      	beq.n	8001394 <CO_HBconsumer_process+0xf8>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d022      	beq.n	8001336 <CO_HBconsumer_process+0x9a>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d112      	bne.n	8001320 <CO_HBconsumer_process+0x84>
                    if (monitoredNode->pFunctSignalRemoteReset != NULL) {
                        monitoredNode->pFunctSignalRemoteReset(monitoredNode->nodeId, i,
                                                               monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	789b      	ldrb	r3, [r3, #2]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d10a      	bne.n	8001318 <CO_HBconsumer_process+0x7c>
                        CO_errorReport(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, CO_EMC_HEARTBEAT, i);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6818      	ldr	r0, [r3, #0]
 8001306:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	f248 1330 	movw	r3, #33072	@ 0x8130
 8001310:	221c      	movs	r2, #28
 8001312:	2101      	movs	r1, #1
 8001314:	f7ff fce9 	bl	8000cea <CO_error>
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	2201      	movs	r2, #1
 800131c:	709a      	strb	r2, [r3, #2]
 800131e:	e007      	b.n	8001330 <CO_HBconsumer_process+0x94>
                        && monitoredNode->pFunctSignalHbStarted != NULL) {
                        monitoredNode->pFunctSignalHbStarted(monitoredNode->nodeId, i,
                                                             monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	2202      	movs	r2, #2
 8001324:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	789b      	ldrb	r3, [r3, #2]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d11c      	bne.n	8001378 <CO_HBconsumer_process+0xdc>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	441a      	add	r2, r3
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	429a      	cmp	r2, r3
 8001354:	d310      	bcc.n	8001378 <CO_HBconsumer_process+0xdc>
                    if (monitoredNode->pFunctSignalTimeout != NULL) {
                        monitoredNode->pFunctSignalTimeout(monitoredNode->nodeId, i,
                                                           monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, CO_EMC_HEARTBEAT, i);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6818      	ldr	r0, [r3, #0]
 800135a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	f248 1330 	movw	r3, #33072	@ 0x8130
 8001364:	221b      	movs	r2, #27
 8001366:	2101      	movs	r1, #1
 8001368:	f7ff fcbf 	bl	8000cea <CO_error>
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	22ff      	movs	r2, #255	@ 0xff
 8001370:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	2203      	movs	r2, #3
 8001376:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if (monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	789b      	ldrb	r3, [r3, #2]
 800137c:	2b02      	cmp	r3, #2
 800137e:	d001      	beq.n	8001384 <CO_HBconsumer_process+0xe8>
                allMonitoredActiveCurrent = false;
 8001380:	2300      	movs	r3, #0
 8001382:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800138a:	2b05      	cmp	r3, #5
 800138c:	d003      	beq.n	8001396 <CO_HBconsumer_process+0xfa>
                allMonitoredOperationalCurrent = false;
 800138e:	2300      	movs	r3, #0
 8001390:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001392:	e000      	b.n	8001396 <CO_HBconsumer_process+0xfa>
                continue;
 8001394:	bf00      	nop
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001396:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800139a:	3301      	adds	r3, #1
 800139c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	7a1b      	ldrb	r3, [r3, #8]
 80013a4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d38d      	bcc.n	80012c8 <CO_HBconsumer_process+0x2c>
 80013ac:	e02b      	b.n	8001406 <CO_HBconsumer_process+0x16a>
                }
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    } else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d103      	bne.n	80013bc <CO_HBconsumer_process+0x120>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	695b      	ldr	r3, [r3, #20]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d024      	beq.n	8001406 <CO_HBconsumer_process+0x16a>
        /* (pre)operational state changed, clear variables */
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80013bc:	2300      	movs	r3, #0
 80013be:	77fb      	strb	r3, [r7, #31]
 80013c0:	e018      	b.n	80013f4 <CO_HBconsumer_process+0x158>
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6859      	ldr	r1, [r3, #4]
 80013c6:	7ffa      	ldrb	r2, [r7, #31]
 80013c8:	4613      	mov	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	440b      	add	r3, r1
 80013d2:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	22ff      	movs	r2, #255	@ 0xff
 80013d8:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	789b      	ldrb	r3, [r3, #2]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d002      	beq.n	80013ee <CO_HBconsumer_process+0x152>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	2201      	movs	r2, #1
 80013ec:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80013ee:	7ffb      	ldrb	r3, [r7, #31]
 80013f0:	3301      	adds	r3, #1
 80013f2:	77fb      	strb	r3, [r7, #31]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	7a1b      	ldrb	r3, [r3, #8]
 80013f8:	7ffa      	ldrb	r2, [r7, #31]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d3e1      	bcc.n	80013c2 <CO_HBconsumer_process+0x126>
            }
        }
        allMonitoredActiveCurrent = false;
 80013fe:	2300      	movs	r3, #0
 8001400:	62fb      	str	r3, [r7, #44]	@ 0x2c
        allMonitoredOperationalCurrent = false;
 8001402:	2300      	movs	r3, #0
 8001404:	62bb      	str	r3, [r7, #40]	@ 0x28
    } else { /* MISRA C 2004 14.10 */
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d114      	bne.n	8001438 <CO_HBconsumer_process+0x19c>
 800140e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001410:	2b00      	cmp	r3, #0
 8001412:	d011      	beq.n	8001438 <CO_HBconsumer_process+0x19c>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6818      	ldr	r0, [r3, #0]
 8001418:	2300      	movs	r3, #0
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2300      	movs	r3, #0
 800141e:	221b      	movs	r2, #27
 8001420:	2100      	movs	r1, #0
 8001422:	f7ff fc62 	bl	8000cea <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	2300      	movs	r3, #0
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	2300      	movs	r3, #0
 8001430:	221c      	movs	r2, #28
 8001432:	2100      	movs	r1, #0
 8001434:	f7ff fc59 	bl	8000cea <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800143c:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001442:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	615a      	str	r2, [r3, #20]
}
 800144a:	bf00      	nop
 800144c:	3730      	adds	r7, #48	@ 0x30
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <CO_getUint16>:
CO_getUint16(const void* buf) {
 8001452:	b480      	push	{r7}
 8001454:	b085      	sub	sp, #20
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	b29b      	uxth	r3, r3
 8001460:	81fb      	strh	r3, [r7, #14]
    return value;
 8001462:	89fb      	ldrh	r3, [r7, #14]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d002      	beq.n	8001484 <OD_getIndex+0x14>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	e000      	b.n	8001486 <OD_getIndex+0x16>
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 80014a2:	2305      	movs	r3, #5
 80014a4:	e003      	b.n	80014ae <OD_extension_init+0x1c>
    entry->extension = extension;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <OD_get_u16>:
OD_get_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t* val, bool_t odOrig) {
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af02      	add	r7, sp, #8
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	460b      	mov	r3, r1
 80014c8:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80014ca:	7af9      	ldrb	r1, [r7, #11]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2302      	movs	r3, #2
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f000 fcdf 	bl	8001e98 <OD_get_value>
 80014da:	4603      	mov	r3, r0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <CO_isError>:
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	08db      	lsrs	r3, r3, #3
 80014f4:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	2201      	movs	r2, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
            || (em->errorStatusBits[index] & bitmask) != 0)
               ? true
               : false;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00a      	beq.n	8001520 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	2b09      	cmp	r3, #9
 800150e:	d807      	bhi.n	8001520 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0)
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	5cd2      	ldrb	r2, [r2, r3]
 8001516:	7bbb      	ldrb	r3, [r7, #14]
 8001518:	4013      	ands	r3, r2
 800151a:	b2db      	uxtb	r3, r3
               : false;
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <CO_isError+0x40>
 8001520:	2301      	movs	r3, #1
 8001522:	e000      	b.n	8001526 <CO_isError+0x42>
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <CO_getErrorRegister>:
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t
CO_getErrorRegister(CO_EM_t* em) {
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d007      	beq.n	8001550 <CO_getErrorRegister+0x1e>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <CO_getErrorRegister+0x1e>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	e000      	b.n	8001552 <CO_getErrorRegister+0x20>
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_NMT_receive(void* object, void* msg) {
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	791b      	ldrb	r3, [r3, #4]
 800156c:	75fb      	strb	r3, [r7, #23]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	3305      	adds	r3, #5
 8001572:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	3301      	adds	r3, #1
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t* NMT = (CO_NMT_t*)object;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	60bb      	str	r3, [r7, #8]

    if ((DLC == 2U) && ((nodeId == 0U) || (nodeId == NMT->nodeId))) {
 8001586:	7dfb      	ldrb	r3, [r7, #23]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d114      	bne.n	80015b6 <CO_NMT_receive+0x58>
 800158c:	7bbb      	ldrb	r3, [r7, #14]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d004      	beq.n	800159c <CO_NMT_receive+0x3e>
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	78db      	ldrb	r3, [r3, #3]
 8001596:	7bba      	ldrb	r2, [r7, #14]
 8001598:	429a      	cmp	r2, r3
 800159a:	d10c      	bne.n	80015b6 <CO_NMT_receive+0x58>
        NMT->internalCommand = command;
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	709a      	strb	r2, [r3, #2]

#if ((CO_CONFIG_NMT)&CO_CONFIG_FLAG_CALLBACK_PRE) != 0
        /* Optional signal to RTOS, which can resume task, which handles NMT. */
        if (NMT->pFunctSignalPre != NULL) {
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d005      	beq.n	80015b6 <CO_NMT_receive+0x58>
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80015b2:	4610      	mov	r0, r2
 80015b4:	4798      	blx	r3
        }
#endif
    }
}
 80015b6:	bf00      	nop
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <OD_write_1017>:
 * Custom function for writing OD object "Producer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1017(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	60f8      	str	r0, [r7, #12]
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint16_t))
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00c      	beq.n	80015ec <OD_write_1017+0x2e>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	7d1b      	ldrb	r3, [r3, #20]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d108      	bne.n	80015ec <OD_write_1017+0x2e>
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <OD_write_1017+0x2e>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d102      	bne.n	80015ec <OD_write_1017+0x2e>
        || (countWritten == NULL)) {
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <OD_write_1017+0x32>
        return ODR_DEV_INCOMPAT;
 80015ec:	2309      	movs	r3, #9
 80015ee:	e017      	b.n	8001620 <OD_write_1017+0x62>
    }

    CO_NMT_t* NMT = (CO_NMT_t*)stream->object;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000U;
 80015f6:	68b8      	ldr	r0, [r7, #8]
 80015f8:	f7ff ff2b 	bl	8001452 <CO_getUint16>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001604:	fb03 f202 	mul.w	r2, r3, r2
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	68b9      	ldr	r1, [r7, #8]
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f000 fa32 	bl	8001a82 <OD_writeOriginal>
 800161e:	4603      	mov	r3, r0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <CO_NMT_init>:
CO_NMT_init(CO_NMT_t* NMT, OD_entry_t* OD_1017_ProducerHbTime, CO_EM_t* em, uint8_t nodeId, uint16_t NMTcontrol,
            uint16_t firstHBTime_ms, CO_CANmodule_t* NMT_CANdevRx, uint16_t NMT_rxIdx, uint16_t CANidRxNMT,
#if (((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0) || defined CO_DOXYGEN
            CO_CANmodule_t* NMT_CANdevTx, uint16_t NMT_txIdx, uint16_t CANidTxNMT,
#endif
            CO_CANmodule_t* HB_CANdevTx, uint16_t HB_txIdx, uint16_t CANidTxHB, uint32_t* errInfo) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	@ 0x28
 800162c:	af04      	add	r7, sp, #16
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001636:	2300      	movs	r3, #0
 8001638:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((NMT == NULL) || (OD_1017_ProducerHbTime == NULL) || (em == NULL) || (NMT_CANdevRx == NULL)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00b      	beq.n	8001658 <CO_NMT_init+0x30>
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d008      	beq.n	8001658 <CO_NMT_init+0x30>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <CO_NMT_init+0x30>
 800164c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800164e:	2b00      	cmp	r3, #0
 8001650:	d002      	beq.n	8001658 <CO_NMT_init+0x30>
        || (HB_CANdevTx == NULL)
 8001652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <CO_NMT_init+0x36>
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
        || (NMT_CANdevTx == NULL)
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001658:	f04f 33ff 	mov.w	r3, #4294967295
 800165c:	e097      	b.n	800178e <CO_NMT_init+0x166>
    }

    /* clear the object */
    (void)memset(NMT, 0, sizeof(CO_NMT_t));
 800165e:	2234      	movs	r2, #52	@ 0x34
 8001660:	2100      	movs	r1, #0
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f009 fd32 	bl	800b0cc <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	78fa      	ldrb	r2, [r7, #3]
 8001678:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8c3a      	ldrh	r2, [r7, #32]
 800167e:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (uint32_t)firstHBTime_ms * 1000U;
 8001686:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001688:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800168c:	fb03 f202 	mul.w	r2, r3, r2
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 8001694:	f107 0214 	add.w	r2, r7, #20
 8001698:	2301      	movs	r3, #1
 800169a:	2100      	movs	r1, #0
 800169c:	68b8      	ldr	r0, [r7, #8]
 800169e:	f7ff ff0c 	bl	80014ba <OD_get_u16>
 80016a2:	4603      	mov	r3, r0
 80016a4:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 80016a6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00c      	beq.n	80016c8 <CO_NMT_init+0xa0>
        if (errInfo != NULL) {
 80016ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d006      	beq.n	80016c2 <CO_NMT_init+0x9a>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 80016b4:	68b8      	ldr	r0, [r7, #8]
 80016b6:	f7ff fedb 	bl	8001470 <OD_getIndex>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016c0:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80016c2:	f06f 030b 	mvn.w	r3, #11
 80016c6:	e062      	b.n	800178e <CO_NMT_init+0x166>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000U;
 80016c8:	8abb      	ldrh	r3, [r7, #20]
 80016ca:	461a      	mov	r2, r3
 80016cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016d0:	fb03 f202 	mul.w	r2, r3, r2
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4a2d      	ldr	r2, [pc, #180]	@ (8001798 <CO_NMT_init+0x170>)
 80016e2:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4a2d      	ldr	r2, [pc, #180]	@ (800179c <CO_NMT_init+0x174>)
 80016e8:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	3310      	adds	r3, #16
 80016ee:	4619      	mov	r1, r3
 80016f0:	68b8      	ldr	r0, [r7, #8]
 80016f2:	f7ff fece 	bl	8001492 <OD_extension_init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 80016fa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00c      	beq.n	800171c <CO_NMT_init+0xf4>
        if (errInfo != NULL) {
 8001702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001704:	2b00      	cmp	r3, #0
 8001706:	d006      	beq.n	8001716 <CO_NMT_init+0xee>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8001708:	68b8      	ldr	r0, [r7, #8]
 800170a:	f7ff feb1 	bl	8001470 <OD_getIndex>
 800170e:	4603      	mov	r3, r0
 8001710:	461a      	mov	r2, r3
 8001712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001714:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8001716:	f06f 030b 	mvn.w	r3, #11
 800171a:	e038      	b.n	800178e <CO_NMT_init+0x166>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	429a      	cmp	r2, r3
 8001726:	d903      	bls.n	8001730 <CO_NMT_init+0x108>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(NMT_CANdevRx, NMT_rxIdx, CANidRxNMT, 0x7FF, false, (void*)NMT, CO_NMT_receive);
 8001730:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001732:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8001734:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <CO_NMT_init+0x178>)
 8001736:	9302      	str	r3, [sp, #8]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	9301      	str	r3, [sp, #4]
 800173c:	2300      	movs	r3, #0
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001744:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001746:	f006 f959 	bl	80079fc <CO_CANrxBufferInit>
 800174a:	4603      	mov	r3, r0
 800174c:	75fb      	strb	r3, [r7, #23]
    if (ret != CO_ERROR_NO) {
 800174e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d002      	beq.n	800175c <CO_NMT_init+0x134>
        return ret;
 8001756:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800175a:	e018      	b.n	800178e <CO_NMT_init+0x166>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001760:	625a      	str	r2, [r3, #36]	@ 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(HB_CANdevTx, HB_txIdx, CANidTxHB, false, 1, false);
 8001762:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001764:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8001766:	2300      	movs	r3, #0
 8001768:	9301      	str	r3, [sp, #4]
 800176a:	2301      	movs	r3, #1
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2300      	movs	r3, #0
 8001770:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001772:	f006 f99f 	bl	8007ab4 <CO_CANtxBufferInit>
 8001776:	4602      	mov	r2, r0
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (NMT->HB_TXbuff == NULL) {
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <CO_NMT_init+0x162>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
 8001788:	e001      	b.n	800178e <CO_NMT_init+0x166>
    }

    return ret;
 800178a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	080019d3 	.word	0x080019d3
 800179c:	080015bf 	.word	0x080015bf
 80017a0:	0800155f 	.word	0x0800155f

080017a4 <CO_NMT_process>:
    }
}
#endif

CO_NMT_reset_cmd_t
CO_NMT_process(CO_NMT_t* NMT, CO_NMT_internalState_t* NMTstate, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08e      	sub	sp, #56	@ 0x38
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
 80017b0:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 80017c0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	bf0c      	ite	eq
 80017c8:	2301      	moveq	r3, #1
 80017ca:	2300      	movne	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	633b      	str	r3, [r7, #48]	@ 0x30

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us) ? (NMT->HBproducerTimer - timeDifference_us) : 0U;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d204      	bcs.n	80017e4 <CO_NMT_process+0x40>
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	68da      	ldr	r2, [r3, #12]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	e000      	b.n	80017e6 <CO_NMT_process+0x42>
 80017e4:	2300      	movs	r3, #0
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	60d3      	str	r3, [r2, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed */
    if (NNTinit
 80017ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10e      	bne.n	800180e <CO_NMT_process+0x6a>
        || ((NMT->HBproducerTime_us != 0U)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d02b      	beq.n	8001850 <CO_NMT_process+0xac>
            && ((NMT->HBproducerTimer == 0U) || (NMTstateCpy != NMT->operatingStatePrev)))) {
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d006      	beq.n	800180e <CO_NMT_process+0x6a>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001806:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 800180a:	429a      	cmp	r2, r3
 800180c:	d020      	beq.n	8001850 <CO_NMT_process+0xac>
        NMT->HB_TXbuff->data[0] = (uint8_t)NMTstateCpy;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001812:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001816:	715a      	strb	r2, [r3, #5]
        (void)CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001820:	4619      	mov	r1, r3
 8001822:	4610      	mov	r0, r2
 8001824:	f006 f9c0 	bl	8007ba8 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 8001828:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10b      	bne.n	8001848 <CO_NMT_process+0xa4>
            /* NMT slave self starting */
            NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_STARTUP_TO_OPERATIONAL) != 0U)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	889b      	ldrh	r3, [r3, #4]
 8001834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
                              ? CO_NMT_OPERATIONAL
                              : CO_NMT_PRE_OPERATIONAL;
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <CO_NMT_process+0x9c>
 800183c:	2305      	movs	r3, #5
 800183e:	e000      	b.n	8001842 <CO_NMT_process+0x9e>
 8001840:	237f      	movs	r3, #127	@ 0x7f
            NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_STARTUP_TO_OPERATIONAL) != 0U)
 8001842:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001846:	e003      	b.n	8001850 <CO_NMT_process+0xac>
        } else {
            /* Start timer from the beginning. If OS is slow, time sliding may occur. However,
             * heartbeat is not for synchronization, it is for health report. In case of
             * initializing, timer is set in the CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001856:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	789b      	ldrb	r3, [r3, #2]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d02a      	beq.n	80018b6 <CO_NMT_process+0x112>
        switch (NMT->internalCommand) {
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	789b      	ldrb	r3, [r3, #2]
 8001864:	2b82      	cmp	r3, #130	@ 0x82
 8001866:	d01e      	beq.n	80018a6 <CO_NMT_process+0x102>
 8001868:	2b82      	cmp	r3, #130	@ 0x82
 800186a:	dc20      	bgt.n	80018ae <CO_NMT_process+0x10a>
 800186c:	2b81      	cmp	r3, #129	@ 0x81
 800186e:	d016      	beq.n	800189e <CO_NMT_process+0xfa>
 8001870:	2b81      	cmp	r3, #129	@ 0x81
 8001872:	dc1c      	bgt.n	80018ae <CO_NMT_process+0x10a>
 8001874:	2b80      	cmp	r3, #128	@ 0x80
 8001876:	d00e      	beq.n	8001896 <CO_NMT_process+0xf2>
 8001878:	2b80      	cmp	r3, #128	@ 0x80
 800187a:	dc18      	bgt.n	80018ae <CO_NMT_process+0x10a>
 800187c:	2b01      	cmp	r3, #1
 800187e:	d002      	beq.n	8001886 <CO_NMT_process+0xe2>
 8001880:	2b02      	cmp	r3, #2
 8001882:	d004      	beq.n	800188e <CO_NMT_process+0xea>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
            case CO_NMT_NO_COMMAND:
            default:
                /* done */
                break;
 8001884:	e013      	b.n	80018ae <CO_NMT_process+0x10a>
            case CO_NMT_ENTER_OPERATIONAL: NMTstateCpy = CO_NMT_OPERATIONAL; break;
 8001886:	2305      	movs	r3, #5
 8001888:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800188c:	e010      	b.n	80018b0 <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_STOPPED: NMTstateCpy = CO_NMT_STOPPED; break;
 800188e:	2304      	movs	r3, #4
 8001890:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001894:	e00c      	b.n	80018b0 <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_PRE_OPERATIONAL: NMTstateCpy = CO_NMT_PRE_OPERATIONAL; break;
 8001896:	237f      	movs	r3, #127	@ 0x7f
 8001898:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800189c:	e008      	b.n	80018b0 <CO_NMT_process+0x10c>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
 800189e:	2302      	movs	r3, #2
 80018a0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80018a4:	e004      	b.n	80018b0 <CO_NMT_process+0x10c>
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
 80018a6:	2301      	movs	r3, #1
 80018a8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80018ac:	e000      	b.n	80018b0 <CO_NMT_process+0x10c>
                break;
 80018ae:	bf00      	nop
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2200      	movs	r2, #0
 80018b4:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t ErrOnBusOffHB = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_BUSOFF_HB) != 0U);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	889b      	ldrh	r3, [r3, #4]
 80018ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	bf14      	ite	ne
 80018c2:	2301      	movne	r3, #1
 80018c4:	2300      	moveq	r3, #0
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool_t ErrBusOff = CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	2112      	movs	r1, #18
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fe07 	bl	80014e4 <CO_isError>
 80018d6:	62b8      	str	r0, [r7, #40]	@ 0x28
    bool_t ErrHbCons = CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	211b      	movs	r1, #27
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fe00 	bl	80014e4 <CO_isError>
 80018e4:	6278      	str	r0, [r7, #36]	@ 0x24
    bool_t ErrHbConsRemote = CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	211c      	movs	r1, #28
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fdf9 	bl	80014e4 <CO_isError>
 80018f2:	6238      	str	r0, [r7, #32]
    bool_t busOff_HB = ErrOnBusOffHB && (ErrBusOff || ErrHbCons || ErrHbConsRemote);
 80018f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00a      	beq.n	8001910 <CO_NMT_process+0x16c>
 80018fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d105      	bne.n	800190c <CO_NMT_process+0x168>
 8001900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001902:	2b00      	cmp	r3, #0
 8001904:	d102      	bne.n	800190c <CO_NMT_process+0x168>
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <CO_NMT_process+0x16c>
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <CO_NMT_process+0x16e>
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]

    bool_t ErrNMTErrReg = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_ERR_REG) != 0U);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	889b      	ldrh	r3, [r3, #4]
 8001918:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800191c:	2b00      	cmp	r3, #0
 800191e:	bf14      	ite	ne
 8001920:	2301      	movne	r3, #1
 8001922:	2300      	moveq	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	61bb      	str	r3, [r7, #24]
    bool_t ErrNMTcontrol = ((CO_getErrorRegister(NMT->em) & (uint8_t)NMT->NMTcontrol) != 0U);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fe00 	bl	8001532 <CO_getErrorRegister>
 8001932:	4603      	mov	r3, r0
 8001934:	461a      	mov	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	889b      	ldrh	r3, [r3, #4]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	4013      	ands	r3, r2
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	bf14      	ite	ne
 8001944:	2301      	movne	r3, #1
 8001946:	2300      	moveq	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = ErrNMTErrReg && ErrNMTcontrol;
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d004      	beq.n	800195c <CO_NMT_process+0x1b8>
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <CO_NMT_process+0x1b8>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <CO_NMT_process+0x1ba>
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]

    if ((NMTstateCpy == CO_NMT_OPERATIONAL) && (busOff_HB || errRegMasked)) {
 8001960:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001964:	2b05      	cmp	r3, #5
 8001966:	d111      	bne.n	800198c <CO_NMT_process+0x1e8>
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d102      	bne.n	8001974 <CO_NMT_process+0x1d0>
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d00b      	beq.n	800198c <CO_NMT_process+0x1e8>
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	889b      	ldrh	r3, [r3, #4]
 8001978:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
                                                                                            : CO_NMT_PRE_OPERATIONAL;
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <CO_NMT_process+0x1e0>
 8001980:	2304      	movs	r3, #4
 8001982:	e000      	b.n	8001986 <CO_NMT_process+0x1e2>
 8001984:	237f      	movs	r3, #127	@ 0x7f
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 8001986:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800198a:	e011      	b.n	80019b0 <CO_NMT_process+0x20c>
    } else if ((((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0U)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	889b      	ldrh	r3, [r3, #4]
 8001990:	b21b      	sxth	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	da0c      	bge.n	80019b0 <CO_NMT_process+0x20c>
               && (NMTstateCpy == CO_NMT_PRE_OPERATIONAL) && (!busOff_HB && !errRegMasked)) {
 8001996:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800199a:	2b7f      	cmp	r3, #127	@ 0x7f
 800199c:	d108      	bne.n	80019b0 <CO_NMT_process+0x20c>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d105      	bne.n	80019b0 <CO_NMT_process+0x20c>
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d102      	bne.n	80019b0 <CO_NMT_process+0x20c>
        NMTstateCpy = CO_NMT_OPERATIONAL;
 80019aa:	2305      	movs	r3, #5
 80019ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        } else { /* MISRA C 2004 14.10 */
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80019b6:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) {
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <CO_NMT_process+0x222>
        *NMTstate = NMTstateCpy;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80019c4:	701a      	strb	r2, [r3, #0]
    }

    return resetCommand;
 80019c6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3738      	adds	r7, #56	@ 0x38
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <OD_readOriginal>:
#include <string.h>
#define OD_DEFINITION
#include "301/CO_ODinterface.h"

ODR_t
OD_readOriginal(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b088      	sub	sp, #32
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL)) {
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <OD_readOriginal+0x20>
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d002      	beq.n	80019f2 <OD_readOriginal+0x20>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 80019f2:	2309      	movs	r3, #9
 80019f4:	e041      	b.n	8001a7a <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	61fb      	str	r3, [r7, #28]
    const uint8_t* dataOrig = stream->dataOrig;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 8001a08:	230e      	movs	r3, #14
 8001a0a:	e036      	b.n	8001a7a <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d103      	bne.n	8001a20 <OD_readOriginal+0x4e>
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d922      	bls.n	8001a66 <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	69fa      	ldr	r2, [r7, #28]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d801      	bhi.n	8001a2e <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 8001a2a:	2309      	movs	r3, #9
 8001a2c:	e025      	b.n	8001a7a <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	69fa      	ldr	r2, [r7, #28]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4413      	add	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d90a      	bls.n	8001a60 <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	441a      	add	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8001a5a:	23ff      	movs	r3, #255	@ 0xff
 8001a5c:	75fb      	strb	r3, [r7, #23]
 8001a5e:	e002      	b.n	8001a66 <OD_readOriginal+0x94>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
        }
    }

    (void)memcpy((void*)buf, (const void*)dataOrig, dataLenToCopy);
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	69b9      	ldr	r1, [r7, #24]
 8001a6a:	68b8      	ldr	r0, [r7, #8]
 8001a6c:	f009 fbb9 	bl	800b1e2 <memcpy>

    *countRead = dataLenToCopy;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001a76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3720      	adds	r7, #32
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <OD_writeOriginal>:

ODR_t
OD_writeOriginal(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b088      	sub	sp, #32
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d005      	beq.n	8001aa2 <OD_writeOriginal+0x20>
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d002      	beq.n	8001aa2 <OD_writeOriginal+0x20>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8001aa2:	2309      	movs	r3, #9
 8001aa4:	e056      	b.n	8001b54 <OD_writeOriginal+0xd2>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	61fb      	str	r3, [r7, #28]
    OD_size_t dataLenRemain = dataLenToCopy;      /* remaining length of dataOrig buffer */
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	61bb      	str	r3, [r7, #24]
    uint8_t* dataOrig = stream->dataOrig;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	617b      	str	r3, [r7, #20]

    if (dataOrig == NULL) {
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <OD_writeOriginal+0x3e>
        return ODR_SUB_NOT_EXIST;
 8001abc:	230e      	movs	r3, #14
 8001abe:	e049      	b.n	8001b54 <OD_writeOriginal+0xd2>
    }

    ODR_t returnCode = ODR_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	74fb      	strb	r3, [r7, #19]

    /* If previous write was partial or OD variable length is larger than current buffer size,
     * then data was (will be) written in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d103      	bne.n	8001ad4 <OD_writeOriginal+0x52>
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d924      	bls.n	8001b1e <OD_writeOriginal+0x9c>
        if (stream->dataOffset >= dataLenToCopy) {
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	69fa      	ldr	r2, [r7, #28]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d801      	bhi.n	8001ae2 <OD_writeOriginal+0x60>
            return ODR_DEV_INCOMPAT;
 8001ade:	2309      	movs	r3, #9
 8001ae0:	e038      	b.n	8001b54 <OD_writeOriginal+0xd2>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	61fb      	str	r3, [r7, #28]
        dataLenRemain = dataLenToCopy;
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	61bb      	str	r3, [r7, #24]
        dataOrig += stream->dataOffset;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	4413      	add	r3, r2
 8001af8:	617b      	str	r3, [r7, #20]

        if (dataLenToCopy > count) {
 8001afa:	69fa      	ldr	r2, [r7, #28]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d90a      	bls.n	8001b18 <OD_writeOriginal+0x96>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	441a      	add	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8001b12:	23ff      	movs	r3, #255	@ 0xff
 8001b14:	74fb      	strb	r3, [r7, #19]
 8001b16:	e002      	b.n	8001b1e <OD_writeOriginal+0x9c>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d201      	bcs.n	8001b2a <OD_writeOriginal+0xa8>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 8001b26:	230c      	movs	r3, #12
 8001b28:	e014      	b.n	8001b54 <OD_writeOriginal+0xd2>
    }

    /* additional check for Misra c compliance */
    if ((dataLenToCopy <= dataLenRemain) && (dataLenToCopy <= count)) {
 8001b2a:	69fa      	ldr	r2, [r7, #28]
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d80f      	bhi.n	8001b52 <OD_writeOriginal+0xd0>
 8001b32:	69fa      	ldr	r2, [r7, #28]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d80b      	bhi.n	8001b52 <OD_writeOriginal+0xd0>
        (void)memcpy((void*)dataOrig, (const void*)buf, dataLenToCopy);
 8001b3a:	69fa      	ldr	r2, [r7, #28]
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	6978      	ldr	r0, [r7, #20]
 8001b40:	f009 fb4f 	bl	800b1e2 <memcpy>
 8001b44:	bf00      	nop
    } else {
        return ODR_DEV_INCOMPAT;
    }

    *countWritten = dataLenToCopy;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	69fa      	ldr	r2, [r7, #28]
 8001b4a:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001b4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b50:	e000      	b.n	8001b54 <OD_writeOriginal+0xd2>
        return ODR_DEV_INCOMPAT;
 8001b52:	2309      	movs	r3, #9
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_readDisabled(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countRead;
    return ODR_UNSUPP_ACCESS;
 8001b6a:	2302      	movs	r3, #2
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_writeDisabled(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
 8001b84:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countWritten;
    return ODR_UNSUPP_ACCESS;
 8001b86:	2302      	movs	r3, #2
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <OD_find>:

OD_entry_t*
OD_find(OD_t* od, uint16_t index) {
 8001b94:	b480      	push	{r7}
 8001b96:	b087      	sub	sp, #28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
    if ((od == NULL) || (od->size == 0U)) {
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <OD_find+0x1a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <OD_find+0x1e>
        return NULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e046      	b.n	8001c40 <OD_find+0xac>
    }

    uint16_t min = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1U;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. If Object
     * Dictionary has up to N entries, then the max number of loop passes is log2(N) */
    while (min < max) {
 8001bbe:	e026      	b.n	8001c0e <OD_find+0x7a>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 8001bc0:	8afa      	ldrh	r2, [r7, #22]
 8001bc2:	8abb      	ldrh	r3, [r7, #20]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	105b      	asrs	r3, r3, #1
 8001bc8:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6859      	ldr	r1, [r3, #4]
 8001bce:	89fa      	ldrh	r2, [r7, #14]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	440b      	add	r3, r1
 8001bda:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) {
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	887a      	ldrh	r2, [r7, #2]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d101      	bne.n	8001bea <OD_find+0x56>
            return entry;
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	e02a      	b.n	8001c40 <OD_find+0xac>
        }

        if (index < entry->index) {
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	887a      	ldrh	r2, [r7, #2]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d209      	bcs.n	8001c08 <OD_find+0x74>
            max = (cur > 0U) ? (cur - 1U) : cur;
 8001bf4:	89fb      	ldrh	r3, [r7, #14]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <OD_find+0x6e>
 8001bfa:	89fb      	ldrh	r3, [r7, #14]
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	e000      	b.n	8001c04 <OD_find+0x70>
 8001c02:	89fb      	ldrh	r3, [r7, #14]
 8001c04:	82bb      	strh	r3, [r7, #20]
 8001c06:	e002      	b.n	8001c0e <OD_find+0x7a>
        } else {
            min = cur + 1U;
 8001c08:	89fb      	ldrh	r3, [r7, #14]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	82fb      	strh	r3, [r7, #22]
    while (min < max) {
 8001c0e:	8afa      	ldrh	r2, [r7, #22]
 8001c10:	8abb      	ldrh	r3, [r7, #20]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d3d4      	bcc.n	8001bc0 <OD_find+0x2c>
        }
    }

    if (min == max) {
 8001c16:	8afa      	ldrh	r2, [r7, #22]
 8001c18:	8abb      	ldrh	r3, [r7, #20]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d10f      	bne.n	8001c3e <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6859      	ldr	r1, [r3, #4]
 8001c22:	8afa      	ldrh	r2, [r7, #22]
 8001c24:	4613      	mov	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	887a      	ldrh	r2, [r7, #2]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d101      	bne.n	8001c3e <OD_find+0xaa>
            return entry;
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	e000      	b.n	8001c40 <OD_find+0xac>
        }
    }

    return NULL; /* entry does not exist in OD */
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <OD_getSub>:

ODR_t
OD_getSub(const OD_entry_t* entry, uint8_t subIndex, OD_IO_t* io, bool_t odOrig) {
 8001c4c:	b480      	push	{r7}
 8001c4e:	b08d      	sub	sp, #52	@ 0x34
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	72fb      	strb	r3, [r7, #11]
    if ((entry == NULL) || (entry->odObject == NULL)) {
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <OD_getSub+0x1e>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <OD_getSub+0x22>
        return ODR_IDX_NOT_EXIST;
 8001c6a:	2305      	movs	r3, #5
 8001c6c:	e0e7      	b.n	8001e3e <OD_getSub+0x1f2>
    }
    if (io == NULL) {
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <OD_getSub+0x2c>
        return ODR_DEV_INCOMPAT;
 8001c74:	2309      	movs	r3, #9
 8001c76:	e0e2      	b.n	8001e3e <OD_getSub+0x1f2>
    }

    ODR_t ret = ODR_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    OD_stream_t* stream = &io->stream;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	623b      	str	r3, [r7, #32]

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & (uint8_t)ODT_TYPE_MASK) {
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	78db      	ldrb	r3, [r3, #3]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d055      	beq.n	8001d3a <OD_getSub+0xee>
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	f300 8093 	bgt.w	8001dba <OD_getSub+0x16e>
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d002      	beq.n	8001c9e <OD_getSub+0x52>
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d017      	beq.n	8001ccc <OD_getSub+0x80>
 8001c9c:	e08d      	b.n	8001dba <OD_getSub+0x16e>
        case ODT_VAR: {
            if (subIndex > 0U) {
 8001c9e:	7afb      	ldrb	r3, [r7, #11]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <OD_getSub+0x60>
                ret = ODR_SUB_NOT_EXIST;
 8001ca4:	230e      	movs	r3, #14
 8001ca6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                break;
 8001caa:	e08a      	b.n	8001dc2 <OD_getSub+0x176>
            }
            CO_PROGMEM OD_obj_var_t* odo = entry->odObject;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	613b      	str	r3, [r7, #16]

            stream->attribute = odo->attribute;
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	791a      	ldrb	r2, [r3, #4]
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig;
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	601a      	str	r2, [r3, #0]
            stream->dataLength = odo->dataLength;
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	609a      	str	r2, [r3, #8]
            break;
 8001cca:	e07a      	b.n	8001dc2 <OD_getSub+0x176>
        }
        case ODT_ARR: {
            if (subIndex >= entry->subEntriesCount) {
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	789b      	ldrb	r3, [r3, #2]
 8001cd0:	7afa      	ldrb	r2, [r7, #11]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d303      	bcc.n	8001cde <OD_getSub+0x92>
                ret = ODR_SUB_NOT_EXIST;
 8001cd6:	230e      	movs	r3, #14
 8001cd8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                break;
 8001cdc:	e071      	b.n	8001dc2 <OD_getSub+0x176>
            }
            CO_PROGMEM OD_obj_array_t* odo = entry->odObject;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	61bb      	str	r3, [r7, #24]

            if (subIndex == 0U) {
 8001ce4:	7afb      	ldrb	r3, [r7, #11]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10b      	bne.n	8001d02 <OD_getSub+0xb6>
                stream->attribute = odo->attribute0;
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	7a1a      	ldrb	r2, [r3, #8]
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	741a      	strb	r2, [r3, #16]
                stream->dataOrig = odo->dataOrig0;
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	601a      	str	r2, [r3, #0]
                stream->dataLength = 1;
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	609a      	str	r2, [r3, #8]
                stream->attribute = odo->attribute;
                uint8_t* ptr = odo->dataOrig;
                stream->dataOrig = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
                stream->dataLength = odo->dataElementLength;
            }
            break;
 8001d00:	e05f      	b.n	8001dc2 <OD_getSub+0x176>
                stream->attribute = odo->attribute;
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	7a5a      	ldrb	r2, [r3, #9]
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	741a      	strb	r2, [r3, #16]
                uint8_t* ptr = odo->dataOrig;
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	617b      	str	r3, [r7, #20]
                stream->dataOrig = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d009      	beq.n	8001d2a <OD_getSub+0xde>
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	7afa      	ldrb	r2, [r7, #11]
 8001d1c:	3a01      	subs	r2, #1
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	fb02 f303 	mul.w	r3, r2, r3
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	4413      	add	r3, r2
 8001d28:	e000      	b.n	8001d2c <OD_getSub+0xe0>
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	6a3a      	ldr	r2, [r7, #32]
 8001d2e:	6013      	str	r3, [r2, #0]
                stream->dataLength = odo->dataElementLength;
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	609a      	str	r2, [r3, #8]
            break;
 8001d38:	e043      	b.n	8001dc2 <OD_getSub+0x176>
        }
        case ODT_REC: {
            CO_PROGMEM OD_obj_record_t* odoArr = entry->odObject;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61fb      	str	r3, [r7, #28]
            CO_PROGMEM OD_obj_record_t* odo = NULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62bb      	str	r3, [r7, #40]	@ 0x28
            for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001d44:	2300      	movs	r3, #0
 8001d46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001d4a:	e01c      	b.n	8001d86 <OD_getSub+0x13a>
                if (odoArr[i].subIndex == subIndex) {
 8001d4c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001d50:	4613      	mov	r3, r2
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	461a      	mov	r2, r3
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	791b      	ldrb	r3, [r3, #4]
 8001d60:	7afa      	ldrb	r2, [r7, #11]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d10a      	bne.n	8001d7c <OD_getSub+0x130>
                    odo = &odoArr[i];
 8001d66:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	461a      	mov	r2, r3
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	4413      	add	r3, r2
 8001d78:	62bb      	str	r3, [r7, #40]	@ 0x28
                    break;
 8001d7a:	e00a      	b.n	8001d92 <OD_getSub+0x146>
            for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d80:	3301      	adds	r3, #1
 8001d82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	789b      	ldrb	r3, [r3, #2]
 8001d8a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d3dc      	bcc.n	8001d4c <OD_getSub+0x100>
                }
            }
            if (odo == NULL) {
 8001d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d103      	bne.n	8001da0 <OD_getSub+0x154>
                ret = ODR_SUB_NOT_EXIST;
 8001d98:	230e      	movs	r3, #14
 8001d9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                break;
 8001d9e:	e010      	b.n	8001dc2 <OD_getSub+0x176>
            }

            stream->attribute = odo->attribute;
 8001da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001da2:	795a      	ldrb	r2, [r3, #5]
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig;
 8001da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	601a      	str	r2, [r3, #0]
            stream->dataLength = odo->dataLength;
 8001db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	609a      	str	r2, [r3, #8]
            break;
 8001db8:	e003      	b.n	8001dc2 <OD_getSub+0x176>
        }
        default: {
            ret = ODR_DEV_INCOMPAT;
 8001dba:	2309      	movs	r3, #9
 8001dbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 8001dc0:	bf00      	nop
        }
    }

    if (ret == ODR_OK) {
 8001dc2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d137      	bne.n	8001e3a <OD_getSub+0x1ee>
        /* Access data from the original OD location */
        if ((entry->extension == NULL) || odOrig) {
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <OD_getSub+0x18c>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d009      	beq.n	8001dec <OD_getSub+0x1a0>
            io->read = OD_readOriginal;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a1c      	ldr	r2, [pc, #112]	@ (8001e4c <OD_getSub+0x200>)
 8001ddc:	619a      	str	r2, [r3, #24]
            io->write = OD_writeOriginal;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e50 <OD_getSub+0x204>)
 8001de2:	61da      	str	r2, [r3, #28]
            stream->object = NULL;
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	2200      	movs	r2, #0
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	e01c      	b.n	8001e26 <OD_getSub+0x1da>
        }
        /* Access data from extension specified by application */
        else {
            io->read = (entry->extension->read != NULL) ? entry->extension->read : OD_readDisabled;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <OD_getSub+0x1b2>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	e000      	b.n	8001e00 <OD_getSub+0x1b4>
 8001dfe:	4b15      	ldr	r3, [pc, #84]	@ (8001e54 <OD_getSub+0x208>)
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6193      	str	r3, [r2, #24]
            io->write = (entry->extension->write != NULL) ? entry->extension->write : OD_writeDisabled;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <OD_getSub+0x1ca>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	e000      	b.n	8001e18 <OD_getSub+0x1cc>
 8001e16:	4b10      	ldr	r3, [pc, #64]	@ (8001e58 <OD_getSub+0x20c>)
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	61d3      	str	r3, [r2, #28]
            stream->object = entry->extension->object;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	605a      	str	r2, [r3, #4]
        }

        /* Reset stream data offset */
        stream->dataOffset = 0;
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	60da      	str	r2, [r3, #12]

        /* Add informative data */
        stream->index = entry->index;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	881a      	ldrh	r2, [r3, #0]
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	825a      	strh	r2, [r3, #18]
        stream->subIndex = subIndex;
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	7afa      	ldrb	r2, [r7, #11]
 8001e38:	751a      	strb	r2, [r3, #20]
    }

    return ret;
 8001e3a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3734      	adds	r7, #52	@ 0x34
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	080019d3 	.word	0x080019d3
 8001e50:	08001a83 	.word	0x08001a83
 8001e54:	08001b5d 	.word	0x08001b5d
 8001e58:	08001b79 	.word	0x08001b79

08001e5c <OD_getSDOabCode>:

uint32_t
OD_getSDOabCode(ODR_t returnCode) {
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
        0x08000022UL, /* Data cannot be tran. because of present device state */
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return ((returnCode < ODR_OK) || (returnCode >= ODR_COUNT)) ? abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	db03      	blt.n	8001e76 <OD_getSDOabCode+0x1a>
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	2b19      	cmp	r3, #25
 8001e74:	dd02      	ble.n	8001e7c <OD_getSDOabCode+0x20>
 8001e76:	4b07      	ldr	r3, [pc, #28]	@ (8001e94 <OD_getSDOabCode+0x38>)
 8001e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7a:	e004      	b.n	8001e86 <OD_getSDOabCode+0x2a>
 8001e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e80:	4a04      	ldr	r2, [pc, #16]	@ (8001e94 <OD_getSDOabCode+0x38>)
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	0800bb18 	.word	0x0800bb18

08001e98 <OD_get_value>:

ODR_t
OD_get_value(const OD_entry_t* entry, uint8_t subIndex, void* val, OD_size_t len, bool_t odOrig) {
 8001e98:	b590      	push	{r4, r7, lr}
 8001e9a:	b091      	sub	sp, #68	@ 0x44
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	603b      	str	r3, [r7, #0]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) {
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <OD_get_value+0x1a>
        return ODR_DEV_INCOMPAT;
 8001eae:	2309      	movs	r3, #9
 8001eb0:	e02b      	b.n	8001f0a <OD_get_value+0x72>
    }

    OD_IO_t io = {NULL};
 8001eb2:	f107 0318 	add.w	r3, r7, #24
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f009 f906 	bl	800b0cc <memset>
    OD_stream_t* stream = &io.stream;
 8001ec0:	f107 0318 	add.w	r3, r7, #24
 8001ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    OD_size_t countRd = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001eca:	f107 0218 	add.w	r2, r7, #24
 8001ece:	7af9      	ldrb	r1, [r7, #11]
 8001ed0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f7ff feba 	bl	8001c4c <OD_getSub>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    if (ret != ODR_OK) {
 8001ede:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d002      	beq.n	8001eec <OD_get_value+0x54>
        return ret;
 8001ee6:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8001eea:	e00e      	b.n	8001f0a <OD_get_value+0x72>
    }
    if (stream->dataLength != len) {
 8001eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d001      	beq.n	8001efa <OD_get_value+0x62>
        return ODR_TYPE_MISMATCH;
 8001ef6:	230b      	movs	r3, #11
 8001ef8:	e007      	b.n	8001f0a <OD_get_value+0x72>
    }

    return io.read(stream, val, len, &countRd);
 8001efa:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001f06:	47a0      	blx	r4
 8001f08:	4603      	mov	r3, r0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3744      	adds	r7, #68	@ 0x44
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd90      	pop	{r4, r7, pc}

08001f12 <OD_set_value>:

ODR_t
OD_set_value(const OD_entry_t* entry, uint8_t subIndex, void* val, OD_size_t len, bool_t odOrig) {
 8001f12:	b590      	push	{r4, r7, lr}
 8001f14:	b091      	sub	sp, #68	@ 0x44
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) {
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <OD_set_value+0x1a>
        return ODR_DEV_INCOMPAT;
 8001f28:	2309      	movs	r3, #9
 8001f2a:	e02b      	b.n	8001f84 <OD_set_value+0x72>
    }

    OD_IO_t io = {NULL};
 8001f2c:	f107 0318 	add.w	r3, r7, #24
 8001f30:	2220      	movs	r2, #32
 8001f32:	2100      	movs	r1, #0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f009 f8c9 	bl	800b0cc <memset>
    OD_stream_t* stream = &io.stream;
 8001f3a:	f107 0318 	add.w	r3, r7, #24
 8001f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    OD_size_t countWritten = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001f44:	f107 0218 	add.w	r2, r7, #24
 8001f48:	7af9      	ldrb	r1, [r7, #11]
 8001f4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f7ff fe7d 	bl	8001c4c <OD_getSub>
 8001f52:	4603      	mov	r3, r0
 8001f54:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    if (ret != ODR_OK) {
 8001f58:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <OD_set_value+0x54>
        return ret;
 8001f60:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8001f64:	e00e      	b.n	8001f84 <OD_set_value+0x72>
    }
    if (stream->dataLength != len) {
 8001f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <OD_set_value+0x62>
        return ODR_TYPE_MISMATCH;
 8001f70:	230b      	movs	r3, #11
 8001f72:	e007      	b.n	8001f84 <OD_set_value+0x72>
    }

    return io.write(stream, val, len, &countWritten);
 8001f74:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001f80:	47a0      	blx	r4
 8001f82:	4603      	mov	r3, r0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3744      	adds	r7, #68	@ 0x44
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd90      	pop	{r4, r7, pc}

08001f8c <OD_getPtr>:

void*
OD_getPtr(const OD_entry_t* entry, uint8_t subIndex, OD_size_t len, ODR_t* err) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08e      	sub	sp, #56	@ 0x38
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t* stream = &io.stream;
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	633b      	str	r3, [r7, #48]	@ 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8001fa2:	f107 0210 	add.w	r2, r7, #16
 8001fa6:	7af9      	ldrb	r1, [r7, #11]
 8001fa8:	2301      	movs	r3, #1
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f7ff fe4e 	bl	8001c4c <OD_getSub>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (errCopy == ODR_OK) {
 8001fb6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d116      	bne.n	8001fec <OD_getPtr+0x60>
        if ((stream->dataOrig == NULL) || (stream->dataLength == 0U)) {
 8001fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <OD_getPtr+0x42>
 8001fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d103      	bne.n	8001fd6 <OD_getPtr+0x4a>
            errCopy = ODR_DEV_INCOMPAT;
 8001fce:	2309      	movs	r3, #9
 8001fd0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001fd4:	e00a      	b.n	8001fec <OD_getPtr+0x60>
        } else if ((len != 0U) && (len != stream->dataLength)) {
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d007      	beq.n	8001fec <OD_getPtr+0x60>
 8001fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d002      	beq.n	8001fec <OD_getPtr+0x60>
            errCopy = ODR_TYPE_MISMATCH;
 8001fe6:	230b      	movs	r3, #11
 8001fe8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        } else { /* MISRA C 2004 14.10 */
        }
    }

    if (err != NULL) {
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <OD_getPtr+0x6e>
        *err = errCopy;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001ff8:	701a      	strb	r2, [r3, #0]
    }

    return (errCopy == ODR_OK) ? stream->dataOrig : NULL;
 8001ffa:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d102      	bne.n	8002008 <OD_getPtr+0x7c>
 8002002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	e000      	b.n	800200a <OD_getPtr+0x7e>
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3738      	adds	r7, #56	@ 0x38
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <CO_getUint8>:
CO_getUint8(const void* buf) {
 8002012:	b480      	push	{r7}
 8002014:	b085      	sub	sp, #20
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	73fb      	strb	r3, [r7, #15]
    return value;
 8002020:	7bfb      	ldrb	r3, [r7, #15]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <CO_getUint16>:
CO_getUint16(const void* buf) {
 800202e:	b480      	push	{r7}
 8002030:	b085      	sub	sp, #20
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	81fb      	strh	r3, [r7, #14]
    return value;
 800203e:	89fb      	ldrh	r3, [r7, #14]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <CO_getUint32>:
CO_getUint32(const void* buf) {
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]
    return value;
 800205a:	68fb      	ldr	r3, [r7, #12]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <CO_setUint32>:
CO_setUint32(void* buf, uint32_t value) {
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8002078:	2304      	movs	r3, #4
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <OD_getIndex+0x14>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	e000      	b.n	800209c <OD_getIndex+0x16>
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 80020b8:	2305      	movs	r3, #5
 80020ba:	e003      	b.n	80020c4 <OD_extension_init+0x1c>
    entry->extension = extension;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	460b      	mov	r3, r1
 80020de:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80020e0:	7af9      	ldrb	r1, [r7, #11]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	2301      	movs	r3, #1
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f7ff fed4 	bl	8001e98 <OD_get_value>
 80020f0:	4603      	mov	r3, r0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <OD_get_u16>:
OD_get_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t* val, bool_t odOrig) {
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af02      	add	r7, sp, #8
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	603b      	str	r3, [r7, #0]
 8002106:	460b      	mov	r3, r1
 8002108:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800210a:	7af9      	ldrb	r1, [r7, #11]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	2302      	movs	r3, #2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f7ff febf 	bl	8001e98 <OD_get_value>
 800211a:	4603      	mov	r3, r0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af02      	add	r7, sp, #8
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	460b      	mov	r3, r1
 8002132:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002134:	7af9      	ldrb	r1, [r7, #11]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	2304      	movs	r3, #4
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f7ff feaa 	bl	8001e98 <OD_get_value>
 8002144:	4603      	mov	r3, r0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <OD_write_dummy>:
 * Custom function for write dummy OD object. Will be used only from RPDO.
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_dummy(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800214e:	b480      	push	{r7}
 8002150:	b085      	sub	sp, #20
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    if (countWritten != NULL) {
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <OD_write_dummy+0x1a>
        *countWritten = count;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	601a      	str	r2, [r3, #0]
    }
    return ODR_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <OD_read_dummy>:
 * Custom function for read dummy OD object. Will be used only from TPDO.
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_dummy(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8002176:	b580      	push	{r7, lr}
 8002178:	b084      	sub	sp, #16
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
 8002182:	603b      	str	r3, [r7, #0]
    if ((buf == NULL) || (stream == NULL) || (countRead == NULL)) {
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d005      	beq.n	8002196 <OD_read_dummy+0x20>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d002      	beq.n	8002196 <OD_read_dummy+0x20>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8002196:	2309      	movs	r3, #9
 8002198:	e010      	b.n	80021bc <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d902      	bls.n	80021aa <OD_read_dummy+0x34>
        count = stream->dataLength;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	607b      	str	r3, [r7, #4]
    }

    (void)memset(buf, 0, count);
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	2100      	movs	r1, #0
 80021ae:	68b8      	ldr	r0, [r7, #8]
 80021b0:	f008 ff8c 	bl	800b0cc <memset>

    *countRead = count;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <PDOconfigMap>:
 * @param OD Object Dictionary.
 *
 * @return ODR_OK on success, otherwise error reason.
 */
static ODR_t
PDOconfigMap(CO_PDO_common_t* PDO, uint32_t map, uint8_t mapIndex, bool_t isRPDO, OD_t* OD) {
 80021c4:	b5b0      	push	{r4, r5, r7, lr}
 80021c6:	b092      	sub	sp, #72	@ 0x48
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	4613      	mov	r3, r2
 80021d2:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t)(map >> 16);
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	0c1b      	lsrs	r3, r3, #16
 80021d8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint8_t subIndex = (uint8_t)(map >> 8);
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t mappedLengthBits = (uint8_t)map;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t mappedLength = mappedLengthBits >> 3;
 80021ea:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80021ee:	08db      	lsrs	r3, r3, #3
 80021f0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    OD_IO_t* OD_IO = &PDO->OD_IO[mapIndex];
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	015b      	lsls	r3, r3, #5
 80021f8:	3310      	adds	r3, #16
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4413      	add	r3, r2
 80021fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 8002200:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002204:	2b08      	cmp	r3, #8
 8002206:	d901      	bls.n	800220c <PDOconfigMap+0x48>
        return ODR_MAP_LEN; /* PDO length exceeded */
 8002208:	2307      	movs	r3, #7
 800220a:	e090      	b.n	800232e <PDOconfigMap+0x16a>
    }

    /* is there a reference to the dummy entry */
    if ((index < 0x20U) && (subIndex == 0U)) {
 800220c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002210:	2b1f      	cmp	r3, #31
 8002212:	d81a      	bhi.n	800224a <PDOconfigMap+0x86>
 8002214:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002218:	2b00      	cmp	r3, #0
 800221a:	d116      	bne.n	800224a <PDOconfigMap+0x86>
        OD_stream_t* stream = &OD_IO->stream;
 800221c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800221e:	63bb      	str	r3, [r7, #56]	@ 0x38
        (void)memset(stream, 0, sizeof(OD_stream_t));
 8002220:	2218      	movs	r2, #24
 8002222:	2100      	movs	r1, #0
 8002224:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002226:	f008 ff51 	bl	800b0cc <memset>
        stream->dataLength = mappedLength;
 800222a:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800222e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002230:	609a      	str	r2, [r3, #8]
        stream->dataOffset = mappedLength;
 8002232:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8002236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002238:	60da      	str	r2, [r3, #12]
        OD_IO->read = OD_read_dummy;
 800223a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800223c:	4a3e      	ldr	r2, [pc, #248]	@ (8002338 <PDOconfigMap+0x174>)
 800223e:	619a      	str	r2, [r3, #24]
        OD_IO->write = OD_write_dummy;
 8002240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002242:	4a3e      	ldr	r2, [pc, #248]	@ (800233c <PDOconfigMap+0x178>)
 8002244:	61da      	str	r2, [r3, #28]
        return ODR_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	e071      	b.n	800232e <PDOconfigMap+0x16a>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t* entry = OD_find(OD, index);
 800224a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800224e:	4619      	mov	r1, r3
 8002250:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002252:	f7ff fc9f 	bl	8001b94 <OD_find>
 8002256:	6378      	str	r0, [r7, #52]	@ 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 8002258:	f107 0210 	add.w	r2, r7, #16
 800225c:	f897 1045 	ldrb.w	r1, [r7, #69]	@ 0x45
 8002260:	2300      	movs	r3, #0
 8002262:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002264:	f7ff fcf2 	bl	8001c4c <OD_getSub>
 8002268:	4603      	mov	r3, r0
 800226a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (odRet != ODR_OK) {
 800226e:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <PDOconfigMap+0xb8>
        return odRet;
 8002276:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800227a:	e058      	b.n	800232e <PDOconfigMap+0x16a>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? (OD_attr_t)(ODA_RPDO) : (OD_attr_t)(ODA_TPDO);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <PDOconfigMap+0xc2>
 8002282:	2308      	movs	r3, #8
 8002284:	e000      	b.n	8002288 <PDOconfigMap+0xc4>
 8002286:	2304      	movs	r3, #4
 8002288:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    if (((OD_IOcopy.stream.attribute & testAttribute) == 0U) || ((mappedLengthBits & 0x07U) != 0U)
 800228c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002290:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002294:	4013      	ands	r3, r2
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <PDOconfigMap+0xee>
 800229c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d104      	bne.n	80022b2 <PDOconfigMap+0xee>
        || (OD_IOcopy.stream.dataLength < mappedLength)) {
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d201      	bcs.n	80022b6 <PDOconfigMap+0xf2>
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 80022b2:	2306      	movs	r3, #6
 80022b4:	e03b      	b.n	800232e <PDOconfigMap+0x16a>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 80022b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022b8:	461d      	mov	r5, r3
 80022ba:	f107 0410 	add.w	r4, r7, #16
 80022be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022c6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    OD_IO->stream.dataOffset = mappedLength;
 80022ca:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80022ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022d0:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d129      	bne.n	800232c <PDOconfigMap+0x168>
        if ((subIndex < (OD_FLAGS_PDO_SIZE * 8U)) && (entry->extension != NULL)) {
 80022d8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80022dc:	2b1f      	cmp	r3, #31
 80022de:	d81f      	bhi.n	8002320 <PDOconfigMap+0x15c>
 80022e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01b      	beq.n	8002320 <PDOconfigMap+0x15c>
            PDO->flagPDObyte[mapIndex] = &entry->extension->flagsPDO[subIndex >> 3];
 80022e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ea:	6899      	ldr	r1, [r3, #8]
 80022ec:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80022f0:	08db      	lsrs	r3, r3, #3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	79fa      	ldrb	r2, [r7, #7]
 80022f6:	3308      	adds	r3, #8
 80022f8:	440b      	add	r3, r1
 80022fa:	1d19      	adds	r1, r3, #4
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3244      	adds	r2, #68	@ 0x44
 8002300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1U << (subIndex & 0x07U);
 8002304:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	2201      	movs	r2, #1
 800230e:	409a      	lsls	r2, r3
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	b2d1      	uxtb	r1, r2
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4413      	add	r3, r2
 8002318:	460a      	mov	r2, r1
 800231a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 800231e:	e005      	b.n	800232c <PDOconfigMap+0x168>
        } else {
            PDO->flagPDObyte[mapIndex] = NULL;
 8002320:	79fa      	ldrb	r2, [r7, #7]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	3244      	adds	r2, #68	@ 0x44
 8002326:	2100      	movs	r1, #0
 8002328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3748      	adds	r7, #72	@ 0x48
 8002332:	46bd      	mov	sp, r7
 8002334:	bdb0      	pop	{r4, r5, r7, pc}
 8002336:	bf00      	nop
 8002338:	08002177 	.word	0x08002177
 800233c:	0800214f 	.word	0x0800214f

08002340 <PDO_initMapping>:
 *
 * @return #CO_ReturnError_t CO_ERROR_NO on success.
 */
static CO_ReturnError_t
PDO_initMapping(CO_PDO_common_t* PDO, OD_t* OD, OD_entry_t* OD_PDOMapPar, bool_t isRPDO, uint32_t* errInfo,
                uint32_t* erroneousMap) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b08c      	sub	sp, #48	@ 0x30
 8002344:	af02      	add	r7, sp, #8
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t mappedObjectsCount = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 8002356:	f107 021b 	add.w	r2, r7, #27
 800235a:	2301      	movs	r3, #1
 800235c:	2100      	movs	r1, #0
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff feb6 	bl	80020d0 <OD_get_u8>
 8002364:	4603      	mov	r3, r0
 8002366:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 800236a:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00c      	beq.n	800238c <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 8002372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002374:	2b00      	cmp	r3, #0
 8002376:	d006      	beq.n	8002386 <PDO_initMapping+0x46>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff fe84 	bl	8002086 <OD_getIndex>
 800237e:	4603      	mov	r3, r0
 8002380:	021a      	lsls	r2, r3, #8
 8002382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002384:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002386:	f06f 030b 	mvn.w	r3, #11
 800238a:	e07f      	b.n	800248c <PDO_initMapping+0x14c>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 800238c:	2300      	movs	r3, #0
 800238e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002392:	e05b      	b.n	800244c <PDO_initMapping+0x10c>
        OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8002394:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002398:	015b      	lsls	r3, r3, #5
 800239a:	3310      	adds	r3, #16
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4413      	add	r3, r2
 80023a0:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1U, &map, true);
 80023a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80023aa:	3301      	adds	r3, #1
 80023ac:	b2d9      	uxtb	r1, r3
 80023ae:	f107 0214 	add.w	r2, r7, #20
 80023b2:	2301      	movs	r3, #1
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff feb5 	bl	8002124 <OD_get_u32>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 80023c0:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80023c4:	2b0e      	cmp	r3, #14
 80023c6:	d03b      	beq.n	8002440 <PDO_initMapping+0x100>
            continue;
        }
        if (odRet != ODR_OK) {
 80023c8:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00f      	beq.n	80023f0 <PDO_initMapping+0xb0>
            if (errInfo != NULL) {
 80023d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d009      	beq.n	80023ea <PDO_initMapping+0xaa>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8) | i;
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff fe55 	bl	8002086 <OD_getIndex>
 80023dc:	4603      	mov	r3, r0
 80023de:	021a      	lsls	r2, r3, #8
 80023e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80023e4:	431a      	orrs	r2, r3
 80023e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e8:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 80023ea:	f06f 030b 	mvn.w	r3, #11
 80023ee:	e04d      	b.n	800248c <PDO_initMapping+0x14c>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 80023f0:	6979      	ldr	r1, [r7, #20]
 80023f2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f7ff fee1 	bl	80021c4 <PDOconfigMap>
 8002402:	4603      	mov	r3, r0
 8002404:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (odRet != ODR_OK) {
 8002408:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00c      	beq.n	800242a <PDO_initMapping+0xea>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	22ff      	movs	r2, #255	@ 0xff
 800241a:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0U) {
 800241c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <PDO_initMapping+0xea>
                *erroneousMap = map;
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002428:	601a      	str	r2, [r3, #0]
            }
        }

        if (i < mappedObjectsCount) {
 800242a:	7efb      	ldrb	r3, [r7, #27]
 800242c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002430:	429a      	cmp	r2, r3
 8002432:	d206      	bcs.n	8002442 <PDO_initMapping+0x102>
            pdoDataLength += OD_IO->stream.dataOffset;
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800243a:	4413      	add	r3, r2
 800243c:	627b      	str	r3, [r7, #36]	@ 0x24
 800243e:	e000      	b.n	8002442 <PDO_initMapping+0x102>
            continue;
 8002440:	bf00      	nop
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8002442:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002446:	3301      	adds	r3, #1
 8002448:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800244c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002450:	2b07      	cmp	r3, #7
 8002452:	d99f      	bls.n	8002394 <PDO_initMapping+0x54>
        }
    }
    if ((pdoDataLength > CO_PDO_MAX_SIZE) || ((pdoDataLength == 0U) && (mappedObjectsCount > 0U))) {
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	2b08      	cmp	r3, #8
 8002458:	d805      	bhi.n	8002466 <PDO_initMapping+0x126>
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	2b00      	cmp	r3, #0
 800245e:	d109      	bne.n	8002474 <PDO_initMapping+0x134>
 8002460:	7efb      	ldrb	r3, [r7, #27]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d006      	beq.n	8002474 <PDO_initMapping+0x134>
        if (*erroneousMap == 0U) {
 8002466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d102      	bne.n	8002474 <PDO_initMapping+0x134>
            *erroneousMap = 1;
 800246e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002470:	2201      	movs	r2, #1
 8002472:	601a      	str	r2, [r3, #0]
        }
    }

    if (*erroneousMap == 0U) {
 8002474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d106      	bne.n	800248a <PDO_initMapping+0x14a>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 800247c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247e:	b2da      	uxtb	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8002484:	7efa      	ldrb	r2, [r7, #27]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3728      	adds	r7, #40	@ 0x28
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <OD_write_PDO_mapping>:
 * Custom function for writing OD object "PDO mapping parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_PDO_mapping(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b08e      	sub	sp, #56	@ 0x38
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
 80024a0:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES)) {
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d009      	beq.n	80024bc <OD_write_PDO_mapping+0x28>
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d006      	beq.n	80024bc <OD_write_PDO_mapping+0x28>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <OD_write_PDO_mapping+0x28>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	7d1b      	ldrb	r3, [r3, #20]
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d901      	bls.n	80024c0 <OD_write_PDO_mapping+0x2c>
        return ODR_DEV_INCOMPAT;
 80024bc:	2309      	movs	r3, #9
 80024be:	e07e      	b.n	80025be <OD_write_PDO_mapping+0x12a>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t* PDO = stream->object;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* PDO must be disabled before mapping configuration */
    if ((PDO->valid) || ((PDO->mappedObjectsCount != 0U) && (stream->subIndex > 0U))) {
 80024c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d107      	bne.n	80024de <OD_write_PDO_mapping+0x4a>
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	7b5b      	ldrb	r3, [r3, #13]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d005      	beq.n	80024e2 <OD_write_PDO_mapping+0x4e>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	7d1b      	ldrb	r3, [r3, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 80024de:	2302      	movs	r3, #2
 80024e0:	e06d      	b.n	80025be <OD_write_PDO_mapping+0x12a>
    }

    if (stream->subIndex == 0U) {
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	7d1b      	ldrb	r3, [r3, #20]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d145      	bne.n	8002576 <OD_write_PDO_mapping+0xe2>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 80024ea:	68b8      	ldr	r0, [r7, #8]
 80024ec:	f7ff fd91 	bl	8002012 <CO_getUint8>
 80024f0:	4603      	mov	r3, r0
 80024f2:	77bb      	strb	r3, [r7, #30]
        size_t pdoDataLength = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 80024f8:	7fbb      	ldrb	r3, [r7, #30]
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d901      	bls.n	8002502 <OD_write_PDO_mapping+0x6e>
            return ODR_MAP_LEN;
 80024fe:	2307      	movs	r3, #7
 8002500:	e05d      	b.n	80025be <OD_write_PDO_mapping+0x12a>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8002502:	2300      	movs	r3, #0
 8002504:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002508:	e01b      	b.n	8002542 <OD_write_PDO_mapping+0xae>
            OD_IO_t* OD_IO = &PDO->OD_IO[i];
 800250a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800250e:	015b      	lsls	r3, r3, #5
 8002510:	3310      	adds	r3, #16
 8002512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002514:	4413      	add	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
            size_t dataLength = (size_t)OD_IO->stream.dataLength;
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	617b      	str	r3, [r7, #20]
            size_t mappedLength = (size_t)OD_IO->stream.dataOffset;
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	613b      	str	r3, [r7, #16]

            if (mappedLength > dataLength) {
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	429a      	cmp	r2, r3
 800252a:	d901      	bls.n	8002530 <OD_write_PDO_mapping+0x9c>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 800252c:	2306      	movs	r3, #6
 800252e:	e046      	b.n	80025be <OD_write_PDO_mapping+0x12a>
            }
            pdoDataLength += mappedLength;
 8002530:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4413      	add	r3, r2
 8002536:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8002538:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800253c:	3301      	adds	r3, #1
 800253e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002542:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8002546:	7fbb      	ldrb	r3, [r7, #30]
 8002548:	429a      	cmp	r2, r3
 800254a:	d3de      	bcc.n	800250a <OD_write_PDO_mapping+0x76>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 800254c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800254e:	2b08      	cmp	r3, #8
 8002550:	d901      	bls.n	8002556 <OD_write_PDO_mapping+0xc2>
            return ODR_MAP_LEN;
 8002552:	2307      	movs	r3, #7
 8002554:	e033      	b.n	80025be <OD_write_PDO_mapping+0x12a>
        }
        if ((pdoDataLength == 0U) && (mappedObjectsCount > 0U)) {
 8002556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002558:	2b00      	cmp	r3, #0
 800255a:	d104      	bne.n	8002566 <OD_write_PDO_mapping+0xd2>
 800255c:	7fbb      	ldrb	r3, [r7, #30]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <OD_write_PDO_mapping+0xd2>
            return ODR_INVALID_VALUE;
 8002562:	230f      	movs	r3, #15
 8002564:	e02b      	b.n	80025be <OD_write_PDO_mapping+0x12a>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8002566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002568:	b2da      	uxtb	r2, r3
 800256a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256c:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	7fba      	ldrb	r2, [r7, #30]
 8002572:	735a      	strb	r2, [r3, #13]
 8002574:	e01c      	b.n	80025b0 <OD_write_PDO_mapping+0x11c>
    } else {
        uint32_t val = CO_getUint32(buf);
 8002576:	68b8      	ldr	r0, [r7, #8]
 8002578:	f7ff fd68 	bl	800204c <CO_getUint32>
 800257c:	6238      	str	r0, [r7, #32]
        ODR_t odRet = PDOconfigMap(PDO, val, stream->subIndex - 1U, PDO->isRPDO, PDO->OD);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	7d1b      	ldrb	r3, [r3, #20]
 8002582:	3b01      	subs	r3, #1
 8002584:	b2da      	uxtb	r2, r3
 8002586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002588:	f8d3 1138 	ldr.w	r1, [r3, #312]	@ 0x138
 800258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258e:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	460b      	mov	r3, r1
 8002596:	6a39      	ldr	r1, [r7, #32]
 8002598:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800259a:	f7ff fe13 	bl	80021c4 <PDOconfigMap>
 800259e:	4603      	mov	r3, r0
 80025a0:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 80025a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <OD_write_PDO_mapping+0x11c>
            return odRet;
 80025aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80025ae:	e006      	b.n	80025be <OD_write_PDO_mapping+0x12a>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f7ff fa63 	bl	8001a82 <OD_writeOriginal>
 80025bc:	4603      	mov	r3, r0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3730      	adds	r7, #48	@ 0x30
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <OD_read_PDO_commParam>:
 * Custom function for reading OD object "PDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_PDO_commParam(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	68b9      	ldr	r1, [r7, #8]
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f7ff f9f8 	bl	80019d2 <OD_readOriginal>
 80025e2:	4603      	mov	r3, r0
 80025e4:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if ((returnCode == ODR_OK) && (stream->subIndex == 1U) && (*countRead == 4U)) {
 80025e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d134      	bne.n	8002658 <OD_read_PDO_commParam+0x90>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	7d1b      	ldrb	r3, [r3, #20]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d130      	bne.n	8002658 <OD_read_PDO_commParam+0x90>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d12c      	bne.n	8002658 <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t* PDO = stream->object;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 8002604:	68b8      	ldr	r0, [r7, #8]
 8002606:	f7ff fd21 	bl	800204c <CO_getUint32>
 800260a:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	b29b      	uxth	r3, r3
 8002610:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002614:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if ((CAN_ID != 0U) && (CAN_ID == (PDO->preDefinedCanId & 0xFF80U))) {
 8002616:	8a7b      	ldrh	r3, [r7, #18]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d011      	beq.n	8002640 <OD_read_PDO_commParam+0x78>
 800261c:	8a7a      	ldrh	r2, [r7, #18]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8002624:	4619      	mov	r1, r3
 8002626:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800262a:	400b      	ands	r3, r1
 800262c:	429a      	cmp	r2, r3
 800262e:	d107      	bne.n	8002640 <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000U) | PDO->preDefinedCanId;
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	4b0c      	ldr	r3, [pc, #48]	@ (8002664 <OD_read_PDO_commParam+0x9c>)
 8002634:	4013      	ands	r3, r2
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	f8b2 2142 	ldrh.w	r2, [r2, #322]	@ 0x142
 800263c:	4313      	orrs	r3, r2
 800263e:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) {
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d103      	bne.n	8002650 <OD_read_PDO_commParam+0x88>
            COB_ID |= 0x80000000U;
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800264e:	61fb      	str	r3, [r7, #28]
        }

        (void)CO_setUint32(buf, COB_ID);
 8002650:	69f9      	ldr	r1, [r7, #28]
 8002652:	68b8      	ldr	r0, [r7, #8]
 8002654:	f7ff fd08 	bl	8002068 <CO_setUint32>
    }

    return returnCode;
 8002658:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3720      	adds	r7, #32
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	ffff0000 	.word	0xffff0000

08002668 <CO_PDO_receive>:
 * will be received. For more information and description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by the new message.
 */
static void
CO_PDO_receive(void* object, void* msg) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
    CO_RPDO_t* RPDO = object;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	61bb      	str	r3, [r7, #24]
    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	791b      	ldrb	r3, [r3, #4]
 800267e:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	3305      	adds	r3, #5
 8002684:	60fb      	str	r3, [r7, #12]
    uint8_t err = RPDO->receiveError;
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 800268c:	77fb      	strb	r3, [r7, #31]

    if (PDO->valid) {
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d03e      	beq.n	8002714 <CO_PDO_receive+0xac>
        if (DLC >= PDO->dataLength) {
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	7b1b      	ldrb	r3, [r3, #12]
 800269a:	7cfa      	ldrb	r2, [r7, #19]
 800269c:	429a      	cmp	r2, r3
 800269e:	d334      	bcc.n	800270a <CO_PDO_receive+0xa2>
            /* indicate errors in PDO length */
            if (DLC == PDO->dataLength) {
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	7b1b      	ldrb	r3, [r3, #12]
 80026a4:	7cfa      	ldrb	r2, [r7, #19]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d105      	bne.n	80026b6 <CO_PDO_receive+0x4e>
                if (err == CO_RPDO_RX_ACK_ERROR) {
 80026aa:	7ffb      	ldrb	r3, [r7, #31]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d107      	bne.n	80026c0 <CO_PDO_receive+0x58>
                    err = CO_RPDO_RX_OK;
 80026b0:	230b      	movs	r3, #11
 80026b2:	77fb      	strb	r3, [r7, #31]
 80026b4:	e004      	b.n	80026c0 <CO_PDO_receive+0x58>
                }
            } else {
                if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 80026b6:	7ffb      	ldrb	r3, [r7, #31]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <CO_PDO_receive+0x58>
                    err = CO_RPDO_RX_LONG;
 80026bc:	230d      	movs	r3, #13
 80026be:	77fb      	strb	r3, [r7, #31]
                }
            }

            /* Determine, to which of the two rx buffers copy the message. */
            uint8_t bufNo = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	77bb      	strb	r3, [r7, #30]
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
            if (RPDO->synchronous && (RPDO->SYNC != NULL) && RPDO->SYNC->CANrxToggle) {
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00c      	beq.n	80026e8 <CO_PDO_receive+0x80>
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d007      	beq.n	80026e8 <CO_PDO_receive+0x80>
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <CO_PDO_receive+0x80>
                bufNo = 1;
 80026e4:	2301      	movs	r3, #1
 80026e6:	77bb      	strb	r3, [r7, #30]
            }
#endif

            /* copy data into appropriate buffer and set 'new message' flag */
            (void)memcpy(RPDO->CANrxData[bufNo], data, CO_PDO_MAX_SIZE);
 80026e8:	7fbb      	ldrb	r3, [r7, #30]
 80026ea:	332e      	adds	r3, #46	@ 0x2e
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4413      	add	r3, r2
 80026f2:	2208      	movs	r2, #8
 80026f4:	68f9      	ldr	r1, [r7, #12]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f008 fd73 	bl	800b1e2 <memcpy>
            CO_FLAG_SET(RPDO->CANrxNew[bufNo]);
 80026fc:	7fba      	ldrb	r2, [r7, #30]
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	325a      	adds	r2, #90	@ 0x5a
 8002702:	2101      	movs	r1, #1
 8002704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002708:	e004      	b.n	8002714 <CO_PDO_receive+0xac>
            /* Optional signal to RTOS, which can resume task, which handles the RPDO. */
            if (RPDO->pFunctSignalPre != NULL) {
                RPDO->pFunctSignalPre(RPDO->functSignalObjectPre);
            }
#endif
        } else if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 800270a:	7ffb      	ldrb	r3, [r7, #31]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <CO_PDO_receive+0xac>
            err = CO_RPDO_RX_SHORT;
 8002710:	230c      	movs	r3, #12
 8002712:	77fb      	strb	r3, [r7, #31]
        } else { /* MISRA C 2004 14.10 */
        }
    }

    RPDO->receiveError = err;
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	7ffa      	ldrb	r2, [r7, #31]
 8002718:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
}
 800271c:	bf00      	nop
 800271e:	3720      	adds	r7, #32
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <OD_write_14xx>:
 * Custom function for writing OD object "RPDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_14xx(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b092      	sub	sp, #72	@ 0x48
 8002728:	af04      	add	r7, sp, #16
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (count > 4U)) {
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <OD_write_14xx+0x26>
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d005      	beq.n	800274a <OD_write_14xx+0x26>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <OD_write_14xx+0x26>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b04      	cmp	r3, #4
 8002748:	d901      	bls.n	800274e <OD_write_14xx+0x2a>
        return ODR_DEV_INCOMPAT;
 800274a:	2309      	movs	r3, #9
 800274c:	e102      	b.n	8002954 <OD_write_14xx+0x230>
    }

    CO_RPDO_t* RPDO = stream->object;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	633b      	str	r3, [r7, #48]	@ 0x30
    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 8002754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002756:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t bufCopy[4];
    (void)memcpy((void*)bufCopy, (const void*)buf, count);
 8002758:	f107 0310 	add.w	r3, r7, #16
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	4618      	mov	r0, r3
 8002762:	f008 fd3e 	bl	800b1e2 <memcpy>

    switch (stream->subIndex) {
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	7d1b      	ldrb	r3, [r3, #20]
 800276a:	2b05      	cmp	r3, #5
 800276c:	f000 80d5 	beq.w	800291a <OD_write_14xx+0x1f6>
 8002770:	2b05      	cmp	r3, #5
 8002772:	f300 80e4 	bgt.w	800293e <OD_write_14xx+0x21a>
 8002776:	2b01      	cmp	r3, #1
 8002778:	d003      	beq.n	8002782 <OD_write_14xx+0x5e>
 800277a:	2b02      	cmp	r3, #2
 800277c:	f000 80a6 	beq.w	80028cc <OD_write_14xx+0x1a8>
            break;
        }
#endif
        default:
            /* MISRA C 2004 15.3 */
            break;
 8002780:	e0dd      	b.n	800293e <OD_write_14xx+0x21a>
            uint32_t COB_ID = CO_getUint32(buf);
 8002782:	68b8      	ldr	r0, [r7, #8]
 8002784:	f7ff fc62 	bl	800204c <CO_getUint32>
 8002788:	61f8      	str	r0, [r7, #28]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	b29b      	uxth	r3, r3
 800278e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002792:	86fb      	strh	r3, [r7, #54]	@ 0x36
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	43db      	mvns	r3, r3
 8002798:	0fdb      	lsrs	r3, r3, #31
 800279a:	b2db      	uxtb	r3, r3
 800279c:	61bb      	str	r3, [r7, #24]
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && PDO->valid && (CAN_ID != PDO->configuredCanId))
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	4b6e      	ldr	r3, [pc, #440]	@ (800295c <OD_write_14xx+0x238>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d13d      	bne.n	8002824 <OD_write_14xx+0x100>
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d009      	beq.n	80027c2 <OD_write_14xx+0x9e>
 80027ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <OD_write_14xx+0x9e>
 80027b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b8:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 80027bc:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80027be:	429a      	cmp	r2, r3
 80027c0:	d130      	bne.n	8002824 <OD_write_14xx+0x100>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID)) || (valid && (PDO->mappedObjectsCount == 0U))) {
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d026      	beq.n	8002816 <OD_write_14xx+0xf2>
 80027c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80027ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80027cc:	d92a      	bls.n	8002824 <OD_write_14xx+0x100>
 80027ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80027d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027d4:	d903      	bls.n	80027de <OD_write_14xx+0xba>
 80027d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80027d8:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 80027dc:	d922      	bls.n	8002824 <OD_write_14xx+0x100>
 80027de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80027e0:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 80027e4:	d903      	bls.n	80027ee <OD_write_14xx+0xca>
 80027e6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80027e8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80027ec:	d31a      	bcc.n	8002824 <OD_write_14xx+0x100>
 80027ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80027f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80027f4:	d903      	bls.n	80027fe <OD_write_14xx+0xda>
 80027f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80027f8:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 80027fc:	d312      	bcc.n	8002824 <OD_write_14xx+0x100>
 80027fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002800:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8002804:	d303      	bcc.n	800280e <OD_write_14xx+0xea>
 8002806:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002808:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800280c:	d30a      	bcc.n	8002824 <OD_write_14xx+0x100>
 800280e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002810:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002814:	d806      	bhi.n	8002824 <OD_write_14xx+0x100>
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <OD_write_14xx+0x104>
 800281c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800281e:	7b5b      	ldrb	r3, [r3, #13]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <OD_write_14xx+0x104>
                return ODR_INVALID_VALUE;
 8002824:	230f      	movs	r3, #15
 8002826:	e095      	b.n	8002954 <OD_write_14xx+0x230>
            if ((valid != PDO->valid) || (CAN_ID != PDO->configuredCanId)) {
 8002828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	429a      	cmp	r2, r3
 8002830:	d106      	bne.n	8002840 <OD_write_14xx+0x11c>
 8002832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002834:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8002838:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800283a:	429a      	cmp	r2, r3
 800283c:	f000 8081 	beq.w	8002942 <OD_write_14xx+0x21e>
                if (CAN_ID == PDO->preDefinedCanId) {
 8002840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002842:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8002846:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002848:	429a      	cmp	r2, r3
 800284a:	d108      	bne.n	800285e <OD_write_14xx+0x13a>
                    (void)CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80U);
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8002852:	f107 0310 	add.w	r3, r7, #16
 8002856:	4611      	mov	r1, r2
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff fc05 	bl	8002068 <CO_setUint32>
                if (!valid) {
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <OD_write_14xx+0x144>
                    CAN_ID = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	86fb      	strh	r3, [r7, #54]	@ 0x36
                CO_ReturnError_t ret = CO_CANrxBufferInit(PDO->CANdev, PDO->CANdevIdx, CAN_ID, 0x7FF, false,
 8002868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800286a:	6858      	ldr	r0, [r3, #4]
 800286c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800286e:	f8b3 1140 	ldrh.w	r1, [r3, #320]	@ 0x140
 8002872:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002874:	4b3a      	ldr	r3, [pc, #232]	@ (8002960 <OD_write_14xx+0x23c>)
 8002876:	9302      	str	r3, [sp, #8]
 8002878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287a:	9301      	str	r3, [sp, #4]
 800287c:	2300      	movs	r3, #0
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002884:	f005 f8ba 	bl	80079fc <CO_CANrxBufferInit>
 8002888:	4603      	mov	r3, r0
 800288a:	75fb      	strb	r3, [r7, #23]
                if (valid && (ret == CO_ERROR_NO)) {
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <OD_write_14xx+0x186>
 8002892:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d107      	bne.n	80028aa <OD_write_14xx+0x186>
                    PDO->valid = true;
 800289a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800289c:	2201      	movs	r2, #1
 800289e:	609a      	str	r2, [r3, #8]
                    PDO->configuredCanId = CAN_ID;
 80028a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80028a4:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
            break;
 80028a8:	e04b      	b.n	8002942 <OD_write_14xx+0x21e>
                    PDO->valid = false;
 80028aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
                    CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 80028b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b2:	2200      	movs	r2, #0
 80028b4:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
                    CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 80028b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ba:	2200      	movs	r2, #0
 80028bc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
                    if (ret != CO_ERROR_NO) {
 80028c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d03c      	beq.n	8002942 <OD_write_14xx+0x21e>
                        return ODR_DEV_INCOMPAT;
 80028c8:	2309      	movs	r3, #9
 80028ca:	e043      	b.n	8002954 <OD_write_14xx+0x230>
        case 2: { /* transmission type */ uint8_t transmissionType = CO_getUint8(buf);
 80028cc:	68b8      	ldr	r0, [r7, #8]
 80028ce:	f7ff fba0 	bl	8002012 <CO_getUint8>
 80028d2:	4603      	mov	r3, r0
 80028d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if ((transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 80028d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028dc:	2bf0      	cmp	r3, #240	@ 0xf0
 80028de:	d905      	bls.n	80028ec <OD_write_14xx+0x1c8>
                && (transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 80028e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028e4:	2bfd      	cmp	r3, #253	@ 0xfd
 80028e6:	d801      	bhi.n	80028ec <OD_write_14xx+0x1c8>
                return ODR_INVALID_VALUE;
 80028e8:	230f      	movs	r3, #15
 80028ea:	e033      	b.n	8002954 <OD_write_14xx+0x230>
            bool_t synchronous = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 80028ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028f0:	2bf0      	cmp	r3, #240	@ 0xf0
 80028f2:	bf94      	ite	ls
 80028f4:	2301      	movls	r3, #1
 80028f6:	2300      	movhi	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	623b      	str	r3, [r7, #32]
            if (RPDO->synchronous != synchronous) {
 80028fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028fe:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8002902:	6a3a      	ldr	r2, [r7, #32]
 8002904:	429a      	cmp	r2, r3
 8002906:	d003      	beq.n	8002910 <OD_write_14xx+0x1ec>
                CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290a:	2200      	movs	r2, #0
 800290c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
            RPDO->synchronous = synchronous;
 8002910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002912:	6a3a      	ldr	r2, [r7, #32]
 8002914:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            break;
 8002918:	e014      	b.n	8002944 <OD_write_14xx+0x220>
            uint32_t eventTime = CO_getUint16(buf);
 800291a:	68b8      	ldr	r0, [r7, #8]
 800291c:	f7ff fb87 	bl	800202e <CO_getUint16>
 8002920:	4603      	mov	r3, r0
 8002922:	62bb      	str	r3, [r7, #40]	@ 0x28
            RPDO->timeoutTime_us = eventTime * 1000U;
 8002924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002926:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800292a:	fb03 f202 	mul.w	r2, r3, r2
 800292e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002930:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
            RPDO->timeoutTimer = 0;
 8002934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002936:	2200      	movs	r2, #0
 8002938:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
            break;
 800293c:	e002      	b.n	8002944 <OD_write_14xx+0x220>
            break;
 800293e:	bf00      	nop
 8002940:	e000      	b.n	8002944 <OD_write_14xx+0x220>
            break;
 8002942:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8002944:	f107 0110 	add.w	r1, r7, #16
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f7ff f898 	bl	8001a82 <OD_writeOriginal>
 8002952:	4603      	mov	r3, r0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3738      	adds	r7, #56	@ 0x38
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	3ffff800 	.word	0x3ffff800
 8002960:	08002669 	.word	0x08002669

08002964 <CO_RPDO_init>:
CO_RPDO_init(CO_RPDO_t* RPDO, OD_t* OD, CO_EM_t* em,
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
             CO_SYNC_t* SYNC,
#endif
             uint16_t preDefinedCanId, OD_entry_t* OD_14xx_RPDOCommPar, OD_entry_t* OD_16xx_RPDOMapPar,
             CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint32_t* errInfo) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b090      	sub	sp, #64	@ 0x40
 8002968:	af04      	add	r7, sp, #16
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	627b      	str	r3, [r7, #36]	@ 0x24
    CO_ReturnError_t ret;
    ODR_t odRet;

    /* verify arguments */
    if ((RPDO == NULL) || (OD == NULL) || (em == NULL) || (OD_14xx_RPDOCommPar == NULL) || (OD_16xx_RPDOMapPar == NULL)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00e      	beq.n	800299a <CO_RPDO_init+0x36>
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00b      	beq.n	800299a <CO_RPDO_init+0x36>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <CO_RPDO_init+0x36>
 8002988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <CO_RPDO_init+0x36>
 800298e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <CO_RPDO_init+0x36>
        || (CANdevRx == NULL)) {
 8002994:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002996:	2b00      	cmp	r3, #0
 8002998:	d102      	bne.n	80029a0 <CO_RPDO_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800299a:	f04f 33ff 	mov.w	r3, #4294967295
 800299e:	e115      	b.n	8002bcc <CO_RPDO_init+0x268>
    }

    /* clear object */
    (void)memset(RPDO, 0, sizeof(CO_RPDO_t));
 80029a0:	f44f 72ca 	mov.w	r2, #404	@ 0x194
 80029a4:	2100      	movs	r1, #0
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f008 fb90 	bl	800b0cc <memset>

    /* Configure object variables */
    PDO->em = em;
 80029ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevRx;
 80029b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029b6:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61fb      	str	r3, [r7, #28]
    ret = PDO_initMapping(PDO, OD, OD_16xx_RPDOMapPar, true, errInfo, &erroneousMap);
 80029bc:	f107 031c 	add.w	r3, r7, #28
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	2301      	movs	r3, #1
 80029c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80029ce:	f7ff fcb7 	bl	8002340 <PDO_initMapping>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (ret != CO_ERROR_NO) {
 80029d8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <CO_RPDO_init+0x82>
        return ret;
 80029e0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80029e4:	e0f2      	b.n	8002bcc <CO_RPDO_init+0x268>
    }

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]
    odRet = OD_get_u32(OD_14xx_RPDOCommPar, 1, &COB_ID, true);
 80029ea:	f107 0218 	add.w	r2, r7, #24
 80029ee:	2301      	movs	r3, #1
 80029f0:	2101      	movs	r1, #1
 80029f2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80029f4:	f7ff fb96 	bl	8002124 <OD_get_u32>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 80029fe:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00e      	beq.n	8002a24 <CO_RPDO_init+0xc0>
        if (errInfo != NULL) {
 8002a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <CO_RPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 1U;
 8002a0c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002a0e:	f7ff fb3a 	bl	8002086 <OD_getIndex>
 8002a12:	4603      	mov	r3, r0
 8002a14:	021b      	lsls	r3, r3, #8
 8002a16:	f043 0201 	orr.w	r2, r3, #1
 8002a1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a1c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002a1e:	f06f 030b 	mvn.w	r3, #11
 8002a22:	e0d3      	b.n	8002bcc <CO_RPDO_init+0x268>
    }

    bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	0fdb      	lsrs	r3, r3, #31
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a36:	857b      	strh	r3, [r7, #42]	@ 0x2a
    if (valid && ((PDO->mappedObjectsCount == 0U) || (CAN_ID == 0U))) {
 8002a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00d      	beq.n	8002a5a <CO_RPDO_init+0xf6>
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	7b5b      	ldrb	r3, [r3, #13]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d002      	beq.n	8002a4c <CO_RPDO_init+0xe8>
 8002a46:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d106      	bne.n	8002a5a <CO_RPDO_init+0xf6>
        valid = false;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (erroneousMap == 0U) {
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <CO_RPDO_init+0xf6>
            erroneousMap = 1;
 8002a56:	2301      	movs	r3, #1
 8002a58:	61fb      	str	r3, [r7, #28]
        }
    }

    if (erroneousMap != 0U) {
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00e      	beq.n	8002a7e <CO_RPDO_init+0x11a>
        CO_errorReport(PDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
 8002a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d001      	beq.n	8002a6e <CO_RPDO_init+0x10a>
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	e000      	b.n	8002a70 <CO_RPDO_init+0x10c>
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 8002a76:	221a      	movs	r2, #26
 8002a78:	2101      	movs	r1, #1
 8002a7a:	f7fe f936 	bl	8000cea <CO_error>
                       (erroneousMap != 1U) ? erroneousMap : COB_ID);
    }
    if (!valid) {
 8002a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <CO_RPDO_init+0x124>
        CAN_ID = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if ((CAN_ID != 0U) && (CAN_ID == (preDefinedCanId & 0xFF80U))) {
 8002a88:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d008      	beq.n	8002aa0 <CO_RPDO_init+0x13c>
 8002a8e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002a90:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8002a92:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8002a96:	400b      	ands	r3, r1
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d101      	bne.n	8002aa0 <CO_RPDO_init+0x13c>
        CAN_ID = preDefinedCanId;
 8002a9c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002a9e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CAN_ID, 0x7FF, false, (void*)RPDO, CO_PDO_receive);
 8002aa0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002aa2:	f8b7 1048 	ldrh.w	r1, [r7, #72]	@ 0x48
 8002aa6:	4b4b      	ldr	r3, [pc, #300]	@ (8002bd4 <CO_RPDO_init+0x270>)
 8002aa8:	9302      	str	r3, [sp, #8]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	9301      	str	r3, [sp, #4]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002ab6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002ab8:	f004 ffa0 	bl	80079fc <CO_CANrxBufferInit>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (ret != CO_ERROR_NO) {
 8002ac2:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <CO_RPDO_init+0x16c>
        return ret;
 8002aca:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002ace:	e07d      	b.n	8002bcc <CO_RPDO_init+0x268>
    }

    PDO->valid = valid;
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ad4:	609a      	str	r2, [r3, #8]

    /* Configure communication parameter - transmission type */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
    uint8_t transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 8002ad6:	23fe      	movs	r3, #254	@ 0xfe
 8002ad8:	75fb      	strb	r3, [r7, #23]
    odRet = OD_get_u8(OD_14xx_RPDOCommPar, 2, &transmissionType, true);
 8002ada:	f107 0217 	add.w	r2, r7, #23
 8002ade:	2301      	movs	r3, #1
 8002ae0:	2102      	movs	r1, #2
 8002ae2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002ae4:	f7ff faf4 	bl	80020d0 <OD_get_u8>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 8002aee:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00e      	beq.n	8002b14 <CO_RPDO_init+0x1b0>
        if (errInfo != NULL) {
 8002af6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <CO_RPDO_init+0x1aa>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 2U;
 8002afc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002afe:	f7ff fac2 	bl	8002086 <OD_getIndex>
 8002b02:	4603      	mov	r3, r0
 8002b04:	021b      	lsls	r3, r3, #8
 8002b06:	f043 0202 	orr.w	r2, r3, #2
 8002b0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b0c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002b0e:	f06f 030b 	mvn.w	r3, #11
 8002b12:	e05b      	b.n	8002bcc <CO_RPDO_init+0x268>
    }

    RPDO->SYNC = SYNC;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
    RPDO->synchronous = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 8002b1c:	7dfb      	ldrb	r3, [r7, #23]
 8002b1e:	2bf0      	cmp	r3, #240	@ 0xf0
 8002b20:	bf94      	ite	ls
 8002b22:	2301      	movls	r3, #1
 8002b24:	2300      	movhi	r3, #0
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
#endif

    /* Configure communication parameter - event-timer (optional) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
    uint16_t eventTime = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	82bb      	strh	r3, [r7, #20]
    (void)OD_get_u16(OD_14xx_RPDOCommPar, 5, &eventTime, true);
 8002b34:	f107 0214 	add.w	r2, r7, #20
 8002b38:	2301      	movs	r3, #1
 8002b3a:	2105      	movs	r1, #5
 8002b3c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002b3e:	f7ff fadc 	bl	80020fa <OD_get_u16>
    RPDO->timeoutTime_us = (uint32_t)eventTime * 1000U;
 8002b42:	8abb      	ldrh	r3, [r7, #20]
 8002b44:	461a      	mov	r2, r3
 8002b46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b4a:	fb03 f202 	mul.w	r2, r3, r2
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
#endif

    /* Configure OD extensions */
#if ((CO_CONFIG_PDO)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    PDO->isRPDO = true;
 8002b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b56:	2201      	movs	r2, #1
 8002b58:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    PDO->OD = OD;
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    PDO->CANdevIdx = CANdevRxIdx;
 8002b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b66:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002b6a:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    PDO->preDefinedCanId = preDefinedCanId;
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b70:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002b72:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142
    PDO->configuredCanId = CAN_ID;
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002b7a:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
    PDO->OD_communicationParam_ext.object = RPDO;
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	4a13      	ldr	r2, [pc, #76]	@ (8002bd8 <CO_RPDO_init+0x274>)
 8002b8a:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
    PDO->OD_communicationParam_ext.write = OD_write_14xx;
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	4a12      	ldr	r2, [pc, #72]	@ (8002bdc <CO_RPDO_init+0x278>)
 8002b92:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
    PDO->OD_mappingParam_extension.object = RPDO;
 8002b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	4a0f      	ldr	r2, [pc, #60]	@ (8002be0 <CO_RPDO_init+0x27c>)
 8002ba2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba8:	4a0e      	ldr	r2, [pc, #56]	@ (8002be4 <CO_RPDO_init+0x280>)
 8002baa:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    (void)OD_extension_init(OD_14xx_RPDOCommPar, &PDO->OD_communicationParam_ext);
 8002bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb0:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002bb8:	f7ff fa76 	bl	80020a8 <OD_extension_init>
    (void)OD_extension_init(OD_16xx_RPDOMapPar, &PDO->OD_mappingParam_extension);
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbe:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002bc6:	f7ff fa6f 	bl	80020a8 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3730      	adds	r7, #48	@ 0x30
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	08002669 	.word	0x08002669
 8002bd8:	080025c9 	.word	0x080025c9
 8002bdc:	08002725 	.word	0x08002725
 8002be0:	080019d3 	.word	0x080019d3
 8002be4:	08002495 	.word	0x08002495

08002be8 <CO_RPDO_process>:
void
CO_RPDO_process(CO_RPDO_t* RPDO,
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
                uint32_t timeDifference_us, uint32_t* timerNext_us,
#endif
                bool_t NMTisOperational, bool_t syncWas) {
 8002be8:	b590      	push	{r4, r7, lr}
 8002bea:	b097      	sub	sp, #92	@ 0x5c
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
    (void)syncWas;
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
    (void)timerNext_us;
#endif

    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (PDO->valid && NMTisOperational
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 8124 	beq.w	8002e4c <CO_RPDO_process+0x264>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 8120 	beq.w	8002e4c <CO_RPDO_process+0x264>
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        && (syncWas || !RPDO->synchronous)
 8002c0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d105      	bne.n	8002c1e <CO_RPDO_process+0x36>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f040 8117 	bne.w	8002e4c <CO_RPDO_process+0x264>
#endif
    ) {
        /* Verify errors in length of received RPDO CAN message */
        if (RPDO->receiveError > CO_RPDO_RX_ACK) {
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8002c24:	2b0a      	cmp	r3, #10
 8002c26:	d927      	bls.n	8002c78 <CO_RPDO_process+0x90>
            bool_t setError = RPDO->receiveError != CO_RPDO_RX_OK;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8002c2e:	2b0b      	cmp	r3, #11
 8002c30:	bf14      	ite	ne
 8002c32:	2301      	movne	r3, #1
 8002c34:	2300      	moveq	r3, #0
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint16_t code = (RPDO->receiveError == CO_RPDO_RX_SHORT) ? CO_EMC_PDO_LENGTH : CO_EMC_PDO_LENGTH_EXC;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8002c40:	2b0c      	cmp	r3, #12
 8002c42:	d102      	bne.n	8002c4a <CO_RPDO_process+0x62>
 8002c44:	f248 2310 	movw	r3, #33296	@ 0x8210
 8002c48:	e001      	b.n	8002c4e <CO_RPDO_process+0x66>
 8002c4a:	f248 2320 	movw	r3, #33312	@ 0x8220
 8002c4e:	857b      	strh	r3, [r7, #42]	@ 0x2a
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH, code, PDO->dataLength);
 8002c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c56:	7b1b      	ldrb	r3, [r3, #12]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002c5c:	9200      	str	r2, [sp, #0]
 8002c5e:	2204      	movs	r2, #4
 8002c60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c62:	f7fe f842 	bl	8000cea <CO_error>
            RPDO->receiveError = setError ? CO_RPDO_RX_ACK_ERROR : CO_RPDO_RX_ACK_NO_ERROR;
 8002c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <CO_RPDO_process+0x88>
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	e000      	b.n	8002c72 <CO_RPDO_process+0x8a>
 8002c70:	2200      	movs	r2, #0
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
        }

        /* Determine, which of the two rx buffers contains relevant message. */
        uint8_t bufNo = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        if (RPDO->synchronous && (RPDO->SYNC != NULL) && !RPDO->SYNC->CANrxToggle) {
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00d      	beq.n	8002ca4 <CO_RPDO_process+0xbc>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d008      	beq.n	8002ca4 <CO_RPDO_process+0xbc>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d102      	bne.n	8002ca4 <CO_RPDO_process+0xbc>
            bufNo = 1;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        }
#endif

        /* copy RPDO into OD variables according to mappings */
        bool_t rpdoReceived = false;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8002ca8:	e07d      	b.n	8002da6 <CO_RPDO_process+0x1be>
            rpdoReceived = true;
 8002caa:	2301      	movs	r3, #1
 8002cac:	64bb      	str	r3, [r7, #72]	@ 0x48
            uint8_t* dataRPDO = RPDO->CANrxData[bufNo];
 8002cae:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002cb2:	332e      	adds	r3, #46	@ 0x2e
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4413      	add	r3, r2
 8002cba:	647b      	str	r3, [r7, #68]	@ 0x44
            OD_size_t verifyLength = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	643b      	str	r3, [r7, #64]	@ 0x40

            /* Clear the flag. If between the copy operation CANrxNew is set
             * by receive thread, then copy the latest data again. */
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 8002cc0:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	325a      	adds	r2, #90	@ 0x5a
 8002cc8:	2100      	movs	r1, #0
 8002cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_OD_IO_ACCESS) != 0
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002cd4:	e04a      	b.n	8002d6c <CO_RPDO_process+0x184>
                OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8002cd6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002cda:	015b      	lsls	r3, r3, #5
 8002cdc:	3310      	adds	r3, #16
 8002cde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ce0:	4413      	add	r3, r2
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24

                /* get mappedLength from temporary storage */
                OD_size_t* dataOffset = &OD_IO->stream.dataOffset;
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce6:	330c      	adds	r3, #12
 8002ce8:	623b      	str	r3, [r7, #32]
                uint8_t mappedLength = (uint8_t)(*dataOffset);
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	77fb      	strb	r3, [r7, #31]

                /* additional safety check. */
                verifyLength += (OD_size_t)mappedLength;
 8002cf0:	7ffb      	ldrb	r3, [r7, #31]
 8002cf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002cf4:	4413      	add	r3, r2
 8002cf6:	643b      	str	r3, [r7, #64]	@ 0x40
                if (verifyLength > CO_PDO_MAX_SIZE) {
 8002cf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d83d      	bhi.n	8002d7a <CO_RPDO_process+0x192>
                    break;
                }

                /* length of OD variable may be larger than mappedLength */
                OD_size_t ODdataLength = OD_IO->stream.dataLength;
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	63bb      	str	r3, [r7, #56]	@ 0x38
                if (ODdataLength > CO_PDO_MAX_SIZE) {
 8002d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d901      	bls.n	8002d0e <CO_RPDO_process+0x126>
                    ODdataLength = CO_PDO_MAX_SIZE;
 8002d0a:	2308      	movs	r3, #8
 8002d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
                }
                /* Prepare data for writing into OD variable. If mappedLength
                 * is smaller than ODdataLength, then use auxiliary buffer */
                uint8_t buf[CO_PDO_MAX_SIZE];
                uint8_t* dataOD;
                if (ODdataLength > mappedLength) {
 8002d0e:	7ffb      	ldrb	r3, [r7, #31]
 8002d10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d911      	bls.n	8002d3a <CO_RPDO_process+0x152>
                    (void)memset(buf, 0, sizeof(buf));
 8002d16:	f107 0314 	add.w	r3, r7, #20
 8002d1a:	2208      	movs	r2, #8
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f008 f9d4 	bl	800b0cc <memset>
                    (void)memcpy(buf, dataRPDO, mappedLength);
 8002d24:	7ffa      	ldrb	r2, [r7, #31]
 8002d26:	f107 0314 	add.w	r3, r7, #20
 8002d2a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f008 fa58 	bl	800b1e2 <memcpy>
                    dataOD = buf;
 8002d32:	f107 0314 	add.w	r3, r7, #20
 8002d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d38:	e001      	b.n	8002d3e <CO_RPDO_process+0x156>
                } else {
                    dataOD = dataRPDO;
 8002d3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d3c:	637b      	str	r3, [r7, #52]	@ 0x34
                }
#endif

                /* Set stream.dataOffset to zero, perform OD_IO.write()
                 * and store mappedLength back to stream.dataOffset */
                *dataOffset = 0;
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
                OD_size_t countWritten;
                OD_IO->write(&OD_IO->stream, dataOD, ODdataLength, &countWritten);
 8002d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d46:	69dc      	ldr	r4, [r3, #28]
 8002d48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002d4a:	f107 0310 	add.w	r3, r7, #16
 8002d4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d50:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002d52:	47a0      	blx	r4
                *dataOffset = mappedLength;
 8002d54:	7ffa      	ldrb	r2, [r7, #31]
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	601a      	str	r2, [r3, #0]

                dataRPDO += mappedLength;
 8002d5a:	7ffb      	ldrb	r3, [r7, #31]
 8002d5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d5e:	4413      	add	r3, r2
 8002d60:	647b      	str	r3, [r7, #68]	@ 0x44
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002d62:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002d66:	3301      	adds	r3, #1
 8002d68:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6e:	7b5b      	ldrb	r3, [r3, #13]
 8002d70:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d3ae      	bcc.n	8002cd6 <CO_RPDO_process+0xee>
 8002d78:	e000      	b.n	8002d7c <CO_RPDO_process+0x194>
                    break;
 8002d7a:	bf00      	nop
            for (uint8_t i = 0; i < PDO->dataLength; i++) {
                *PDO->mapPointer[i] = dataRPDO[i];
            }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

            if ((verifyLength > CO_PDO_MAX_SIZE) || (verifyLength != (OD_size_t)PDO->dataLength)) {
 8002d7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d805      	bhi.n	8002d8e <CO_RPDO_process+0x1a6>
 8002d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d84:	7b1b      	ldrb	r3, [r3, #12]
 8002d86:	461a      	mov	r2, r3
 8002d88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00b      	beq.n	8002da6 <CO_RPDO_process+0x1be>
                /* bug in software, should not happen */
                CO_errorReport(PDO->em, CO_EM_GENERIC_SOFTWARE_ERROR, CO_EMC_SOFTWARE_INTERNAL,
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	f44f 43c2 	mov.w	r3, #24832	@ 0x6100
 8002d9e:	222c      	movs	r2, #44	@ 0x2c
 8002da0:	2101      	movs	r1, #1
 8002da2:	f7fd ffa2 	bl	8000cea <CO_error>
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8002da6:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	325a      	adds	r2, #90	@ 0x5a
 8002dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f47f af79 	bne.w	8002caa <CO_RPDO_process+0xc2>
        } /* while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) */

        /* verify RPDO timeout */
        (void)rpdoReceived;
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
        if (RPDO->timeoutTime_us > 0U) {
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d058      	beq.n	8002e74 <CO_RPDO_process+0x28c>
            if (rpdoReceived) {
 8002dc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d017      	beq.n	8002df8 <CO_RPDO_process+0x210>
                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d90a      	bls.n	8002dee <CO_RPDO_process+0x206>
                    CO_errorReset(PDO->em, CO_EM_RPDO_TIME_OUT, RPDO->timeoutTimer);
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	2300      	movs	r3, #0
 8002de6:	2217      	movs	r2, #23
 8002de8:	2100      	movs	r1, #0
 8002dea:	f7fd ff7e 	bl	8000cea <CO_error>
                }
                /* enable monitoring */
                RPDO->timeoutTimer = 1;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
    ) {
 8002df6:	e03d      	b.n	8002e74 <CO_RPDO_process+0x28c>
            } else if ((RPDO->timeoutTimer > 0U) && (RPDO->timeoutTimer < RPDO->timeoutTime_us)) {
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d038      	beq.n	8002e74 <CO_RPDO_process+0x28c>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d230      	bcs.n	8002e74 <CO_RPDO_process+0x28c>
                RPDO->timeoutTimer += timeDifference_us;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	441a      	add	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190

                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d920      	bls.n	8002e74 <CO_RPDO_process+0x28c>
                    CO_errorReport(PDO->em, CO_EM_RPDO_TIME_OUT, CO_EMC_RPDO_TIMEOUT, RPDO->timeoutTimer);
 8002e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	f248 2350 	movw	r3, #33360	@ 0x8250
 8002e42:	2217      	movs	r2, #23
 8002e44:	2101      	movs	r1, #1
 8002e46:	f7fd ff50 	bl	8000cea <CO_error>
    ) {
 8002e4a:	e013      	b.n	8002e74 <CO_RPDO_process+0x28c>
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE */
    }  /* if (PDO->valid && NMTisOperational) */
    else {
        /* not valid and operational, clear CAN receive flags and timeoutTimer */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        if (!PDO->valid || !NMTisOperational) {
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <CO_RPDO_process+0x272>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10d      	bne.n	8002e76 <CO_RPDO_process+0x28e>
            CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
            RPDO->timeoutTimer = 0;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
        RPDO->timeoutTimer = 0;
#endif
#endif
    }
}
 8002e72:	e000      	b.n	8002e76 <CO_RPDO_process+0x28e>
    ) {
 8002e74:	bf00      	nop
}
 8002e76:	bf00      	nop
 8002e78:	3754      	adds	r7, #84	@ 0x54
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd90      	pop	{r4, r7, pc}
	...

08002e80 <OD_write_18xx>:
 * Custom function for writing OD object "TPDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_18xx(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002e80:	b590      	push	{r4, r7, lr}
 8002e82:	b093      	sub	sp, #76	@ 0x4c
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (count > 4U)) {
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <OD_write_18xx+0x26>
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d005      	beq.n	8002ea6 <OD_write_18xx+0x26>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <OD_write_18xx+0x26>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d901      	bls.n	8002eaa <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8002ea6:	2309      	movs	r3, #9
 8002ea8:	e136      	b.n	8003118 <OD_write_18xx+0x298>
    }

    CO_TPDO_t* TPDO = stream->object;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	63bb      	str	r3, [r7, #56]	@ 0x38
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 8002eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb2:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t bufCopy[4];
    (void)memcpy((void*)bufCopy, (const void*)buf, count);
 8002eb4:	f107 0314 	add.w	r3, r7, #20
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	68b9      	ldr	r1, [r7, #8]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f008 f990 	bl	800b1e2 <memcpy>

    switch (stream->subIndex) {
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	7d1b      	ldrb	r3, [r3, #20]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	2b05      	cmp	r3, #5
 8002eca:	f200 811a 	bhi.w	8003102 <OD_write_18xx+0x282>
 8002ece:	a201      	add	r2, pc, #4	@ (adr r2, 8002ed4 <OD_write_18xx+0x54>)
 8002ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed4:	08002eed 	.word	0x08002eed
 8002ed8:	08003023 	.word	0x08003023
 8002edc:	08003085 	.word	0x08003085
 8002ee0:	08003103 	.word	0x08003103
 8002ee4:	080030b3 	.word	0x080030b3
 8002ee8:	080030d7 	.word	0x080030d7
        case 1: { /* COB-ID used by PDO */
            uint32_t COB_ID = CO_getUint32(buf);
 8002eec:	68b8      	ldr	r0, [r7, #8]
 8002eee:	f7ff f8ad 	bl	800204c <CO_getUint32>
 8002ef2:	6238      	str	r0, [r7, #32]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002efc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	0fdb      	lsrs	r3, r3, #31
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	61fb      	str	r3, [r7, #28]

            /* bits 11...29 must be zero, PDO must be disabled on change, CAN_ID == 0 is
             * not allowed, mapping must be configured before enabling the PDO */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && (PDO->valid && (CAN_ID != PDO->configuredCanId)))
 8002f08:	6a3a      	ldr	r2, [r7, #32]
 8002f0a:	4b85      	ldr	r3, [pc, #532]	@ (8003120 <OD_write_18xx+0x2a0>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d13d      	bne.n	8002f8e <OD_write_18xx+0x10e>
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <OD_write_18xx+0xac>
 8002f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <OD_write_18xx+0xac>
 8002f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f22:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8002f26:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d130      	bne.n	8002f8e <OD_write_18xx+0x10e>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID)) || (valid && (PDO->mappedObjectsCount == 0U))) {
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d026      	beq.n	8002f80 <OD_write_18xx+0x100>
 8002f32:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002f34:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f36:	d92a      	bls.n	8002f8e <OD_write_18xx+0x10e>
 8002f38:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002f3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f3e:	d903      	bls.n	8002f48 <OD_write_18xx+0xc8>
 8002f40:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002f42:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8002f46:	d922      	bls.n	8002f8e <OD_write_18xx+0x10e>
 8002f48:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002f4a:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8002f4e:	d903      	bls.n	8002f58 <OD_write_18xx+0xd8>
 8002f50:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002f52:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002f56:	d31a      	bcc.n	8002f8e <OD_write_18xx+0x10e>
 8002f58:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002f5a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002f5e:	d903      	bls.n	8002f68 <OD_write_18xx+0xe8>
 8002f60:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002f62:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8002f66:	d312      	bcc.n	8002f8e <OD_write_18xx+0x10e>
 8002f68:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002f6a:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8002f6e:	d303      	bcc.n	8002f78 <OD_write_18xx+0xf8>
 8002f70:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002f72:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f76:	d30a      	bcc.n	8002f8e <OD_write_18xx+0x10e>
 8002f78:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002f7a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f7e:	d806      	bhi.n	8002f8e <OD_write_18xx+0x10e>
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <OD_write_18xx+0x112>
 8002f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f88:	7b5b      	ldrb	r3, [r3, #13]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <OD_write_18xx+0x112>
                return ODR_INVALID_VALUE;
 8002f8e:	230f      	movs	r3, #15
 8002f90:	e0c2      	b.n	8003118 <OD_write_18xx+0x298>
            }

            /* parameter changed? */
            if ((valid != PDO->valid) || (CAN_ID != PDO->configuredCanId)) {
 8002f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	69fa      	ldr	r2, [r7, #28]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d106      	bne.n	8002faa <OD_write_18xx+0x12a>
 8002f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f9e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8002fa2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	f000 80ae 	beq.w	8003106 <OD_write_18xx+0x286>
                /* if default CAN-ID is written, store to OD without Node-ID */
                if (CAN_ID == PDO->preDefinedCanId) {
 8002faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fac:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8002fb0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d108      	bne.n	8002fc8 <OD_write_18xx+0x148>
                    (void)CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80U);
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff f850 	bl	8002068 <CO_setUint32>
                }
                if (!valid) {
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <OD_write_18xx+0x152>
                    CAN_ID = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                }

                CO_CANtx_t* CANtxBuff = CO_CANtxBufferInit(
 8002fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd4:	6858      	ldr	r0, [r3, #4]
 8002fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd8:	f8b3 1140 	ldrh.w	r1, [r3, #320]	@ 0x140
 8002fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fde:	7b1b      	ldrb	r3, [r3, #12]
                    PDO->CANdev, PDO->CANdevIdx, CAN_ID, false, PDO->dataLength,
                    TPDO->transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240);
 8002fe0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002fe2:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
                CO_CANtx_t* CANtxBuff = CO_CANtxBufferInit(
 8002fe6:	2af0      	cmp	r2, #240	@ 0xf0
 8002fe8:	bf94      	ite	ls
 8002fea:	2201      	movls	r2, #1
 8002fec:	2200      	movhi	r2, #0
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	4614      	mov	r4, r2
 8002ff2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002ff4:	9401      	str	r4, [sp, #4]
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f004 fd5b 	bl	8007ab4 <CO_CANtxBufferInit>
 8002ffe:	61b8      	str	r0, [r7, #24]

                if (CANtxBuff == NULL) {
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <OD_write_18xx+0x18a>
                    return ODR_DEV_INCOMPAT;
 8003006:	2309      	movs	r3, #9
 8003008:	e086      	b.n	8003118 <OD_write_18xx+0x298>
                }

                TPDO->CANtxBuff = CANtxBuff;
 800300a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
                PDO->valid = valid;
 8003012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003014:	69fa      	ldr	r2, [r7, #28]
 8003016:	609a      	str	r2, [r3, #8]
                PDO->configuredCanId = CAN_ID;
 8003018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800301a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800301c:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
            }
            break;
 8003020:	e071      	b.n	8003106 <OD_write_18xx+0x286>
        }

        case 2: { /* transmission type */ uint8_t transmissionType = CO_getUint8(buf);
 8003022:	68b8      	ldr	r0, [r7, #8]
 8003024:	f7fe fff5 	bl	8002012 <CO_getUint8>
 8003028:	4603      	mov	r3, r0
 800302a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
            if ((transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 800302e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003032:	2bf0      	cmp	r3, #240	@ 0xf0
 8003034:	d905      	bls.n	8003042 <OD_write_18xx+0x1c2>
                && (transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 8003036:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800303a:	2bfd      	cmp	r3, #253	@ 0xfd
 800303c:	d801      	bhi.n	8003042 <OD_write_18xx+0x1c2>
                return ODR_INVALID_VALUE;
 800303e:	230f      	movs	r3, #15
 8003040:	e06a      	b.n	8003118 <OD_write_18xx+0x298>
            }
            TPDO->CANtxBuff->syncFlag = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 8003042:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003046:	2bf0      	cmp	r3, #240	@ 0xf0
 8003048:	bf94      	ite	ls
 800304a:	2301      	movls	r3, #1
 800304c:	2300      	movhi	r3, #0
 800304e:	b2da      	uxtb	r2, r3
 8003050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003052:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8003056:	615a      	str	r2, [r3, #20]
            TPDO->syncCounter = 255;
 8003058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800305a:	22ff      	movs	r2, #255	@ 0xff
 800305c:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
#else
            if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
                return ODR_INVALID_VALUE;
            }
#endif
            TPDO->transmissionType = transmissionType;
 8003060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003062:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003066:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
            TPDO->sendRequest = true;
 800306a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800306c:	2201      	movs	r2, #1
 800306e:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            TPDO->inhibitTimer = 0;
 8003072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003074:	2200      	movs	r2, #0
 8003076:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
            TPDO->eventTimer = 0;
 800307a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800307c:	2200      	movs	r2, #0
 800307e:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
#endif
            break;
 8003082:	e041      	b.n	8003108 <OD_write_18xx+0x288>
        }

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
        case 3: { /* inhibit time */
            if (PDO->valid) {
 8003084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <OD_write_18xx+0x210>
                return ODR_INVALID_VALUE;
 800308c:	230f      	movs	r3, #15
 800308e:	e043      	b.n	8003118 <OD_write_18xx+0x298>
            }
            uint32_t inhibitTime = CO_getUint16(buf);
 8003090:	68b8      	ldr	r0, [r7, #8]
 8003092:	f7fe ffcc 	bl	800202e <CO_getUint16>
 8003096:	4603      	mov	r3, r0
 8003098:	62bb      	str	r3, [r7, #40]	@ 0x28
            TPDO->inhibitTime_us = inhibitTime * 100U;
 800309a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800309c:	2264      	movs	r2, #100	@ 0x64
 800309e:	fb03 f202 	mul.w	r2, r3, r2
 80030a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030a4:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
            TPDO->inhibitTimer = 0;
 80030a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030aa:	2200      	movs	r2, #0
 80030ac:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
            break;
 80030b0:	e02a      	b.n	8003108 <OD_write_18xx+0x288>
        }

        case 5: { /* event-timer */
            uint32_t eventTime = CO_getUint16(buf);
 80030b2:	68b8      	ldr	r0, [r7, #8]
 80030b4:	f7fe ffbb 	bl	800202e <CO_getUint16>
 80030b8:	4603      	mov	r3, r0
 80030ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            TPDO->eventTime_us = eventTime * 1000U;
 80030bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80030c2:	fb03 f202 	mul.w	r2, r3, r2
 80030c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c8:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
            TPDO->eventTimer = 0;
 80030cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ce:	2200      	movs	r2, #0
 80030d0:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            break;
 80030d4:	e018      	b.n	8003108 <OD_write_18xx+0x288>
        }
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        case 6: { /* SYNC start value */
            uint8_t syncStartValue = CO_getUint8(buf);
 80030d6:	68b8      	ldr	r0, [r7, #8]
 80030d8:	f7fe ff9b 	bl	8002012 <CO_getUint8>
 80030dc:	4603      	mov	r3, r0
 80030de:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            if (PDO->valid || (syncStartValue > 240U)) {
 80030e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <OD_write_18xx+0x272>
 80030ea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80030ee:	2bf0      	cmp	r3, #240	@ 0xf0
 80030f0:	d901      	bls.n	80030f6 <OD_write_18xx+0x276>
                return ODR_INVALID_VALUE;
 80030f2:	230f      	movs	r3, #15
 80030f4:	e010      	b.n	8003118 <OD_write_18xx+0x298>
            }
            TPDO->syncStartValue = syncStartValue;
 80030f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f8:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80030fc:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
            break;
 8003100:	e002      	b.n	8003108 <OD_write_18xx+0x288>
        }
#endif
        default:
            /* MISRA C 2004 15.3 */
            break;
 8003102:	bf00      	nop
 8003104:	e000      	b.n	8003108 <OD_write_18xx+0x288>
            break;
 8003106:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8003108:	f107 0114 	add.w	r1, r7, #20
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f7fe fcb6 	bl	8001a82 <OD_writeOriginal>
 8003116:	4603      	mov	r3, r0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3744      	adds	r7, #68	@ 0x44
 800311c:	46bd      	mov	sp, r7
 800311e:	bd90      	pop	{r4, r7, pc}
 8003120:	3ffff800 	.word	0x3ffff800

08003124 <CO_TPDO_init>:
CO_TPDO_init(CO_TPDO_t* TPDO, OD_t* OD, CO_EM_t* em,
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
             CO_SYNC_t* SYNC,
#endif
             uint16_t preDefinedCanId, OD_entry_t* OD_18xx_TPDOCommPar, OD_entry_t* OD_1Axx_TPDOMapPar,
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx, uint32_t* errInfo) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b08e      	sub	sp, #56	@ 0x38
 8003128:	af02      	add	r7, sp, #8
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	627b      	str	r3, [r7, #36]	@ 0x24
    ODR_t odRet;

    /* verify arguments */
    if ((TPDO == NULL) || (OD == NULL) || (em == NULL) || (OD_18xx_TPDOCommPar == NULL) || (OD_1Axx_TPDOMapPar == NULL)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00e      	beq.n	800315a <CO_TPDO_init+0x36>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00b      	beq.n	800315a <CO_TPDO_init+0x36>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <CO_TPDO_init+0x36>
 8003148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800314a:	2b00      	cmp	r3, #0
 800314c:	d005      	beq.n	800315a <CO_TPDO_init+0x36>
 800314e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <CO_TPDO_init+0x36>
        || (CANdevTx == NULL)) {
 8003154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003156:	2b00      	cmp	r3, #0
 8003158:	d102      	bne.n	8003160 <CO_TPDO_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800315a:	f04f 33ff 	mov.w	r3, #4294967295
 800315e:	e144      	b.n	80033ea <CO_TPDO_init+0x2c6>
    }

    /* clear object */
    (void)memset(TPDO, 0, sizeof(CO_TPDO_t));
 8003160:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 8003164:	2100      	movs	r1, #0
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f007 ffb0 	bl	800b0cc <memset>

    /* Configure object variables */
    PDO->em = em;
 800316c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 8003172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003174:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003176:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO, OD, OD_1Axx_TPDOMapPar, false, errInfo, &erroneousMap);
 800317c:	f107 031c 	add.w	r3, r7, #28
 8003180:	9301      	str	r3, [sp, #4]
 8003182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	2300      	movs	r3, #0
 8003188:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800318a:	68b9      	ldr	r1, [r7, #8]
 800318c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800318e:	f7ff f8d7 	bl	8002340 <PDO_initMapping>
 8003192:	4603      	mov	r3, r0
 8003194:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (ret != CO_ERROR_NO) {
 8003198:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <CO_TPDO_init+0x82>
        return ret;
 80031a0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80031a4:	e121      	b.n	80033ea <CO_TPDO_init+0x2c6>
    }

    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 80031a6:	23fe      	movs	r3, #254	@ 0xfe
 80031a8:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 80031aa:	f107 021b 	add.w	r2, r7, #27
 80031ae:	2301      	movs	r3, #1
 80031b0:	2102      	movs	r1, #2
 80031b2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80031b4:	f7fe ff8c 	bl	80020d0 <OD_get_u8>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 80031be:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00e      	beq.n	80031e4 <CO_TPDO_init+0xc0>
        if (errInfo != NULL) {
 80031c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <CO_TPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2U;
 80031cc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80031ce:	f7fe ff5a 	bl	8002086 <OD_getIndex>
 80031d2:	4603      	mov	r3, r0
 80031d4:	021b      	lsls	r3, r3, #8
 80031d6:	f043 0202 	orr.w	r2, r3, #2
 80031da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031dc:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80031de:	f06f 030b 	mvn.w	r3, #11
 80031e2:	e102      	b.n	80033ea <CO_TPDO_init+0x2c6>
    }
    if ((transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)
 80031e4:	7efb      	ldrb	r3, [r7, #27]
 80031e6:	2bfd      	cmp	r3, #253	@ 0xfd
 80031e8:	d804      	bhi.n	80031f4 <CO_TPDO_init+0xd0>
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        && (transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 80031ea:	7efb      	ldrb	r3, [r7, #27]
 80031ec:	2bf0      	cmp	r3, #240	@ 0xf0
 80031ee:	d901      	bls.n	80031f4 <CO_TPDO_init+0xd0>
#endif
    ) {
        transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 80031f0:	23fe      	movs	r3, #254	@ 0xfe
 80031f2:	76fb      	strb	r3, [r7, #27]
    }
    TPDO->transmissionType = transmissionType;
 80031f4:	7efa      	ldrb	r2, [r7, #27]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
    TPDO->sendRequest = true;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2201      	movs	r2, #1
 8003200:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 8003208:	f107 0214 	add.w	r2, r7, #20
 800320c:	2301      	movs	r3, #1
 800320e:	2101      	movs	r1, #1
 8003210:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003212:	f7fe ff87 	bl	8002124 <OD_get_u32>
 8003216:	4603      	mov	r3, r0
 8003218:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 800321c:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00e      	beq.n	8003242 <CO_TPDO_init+0x11e>
        if (errInfo != NULL) {
 8003224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003226:	2b00      	cmp	r3, #0
 8003228:	d008      	beq.n	800323c <CO_TPDO_init+0x118>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1U;
 800322a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800322c:	f7fe ff2b 	bl	8002086 <OD_getIndex>
 8003230:	4603      	mov	r3, r0
 8003232:	021b      	lsls	r3, r3, #8
 8003234:	f043 0201 	orr.w	r2, r3, #1
 8003238:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800323a:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800323c:	f06f 030b 	mvn.w	r3, #11
 8003240:	e0d3      	b.n	80033ea <CO_TPDO_init+0x2c6>
    }

    bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	43db      	mvns	r3, r3
 8003246:	0fdb      	lsrs	r3, r3, #31
 8003248:	b2db      	uxtb	r3, r3
 800324a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	b29b      	uxth	r3, r3
 8003250:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003254:	857b      	strh	r3, [r7, #42]	@ 0x2a
    if (valid && ((PDO->mappedObjectsCount == 0U) || (CAN_ID == 0U))) {
 8003256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00d      	beq.n	8003278 <CO_TPDO_init+0x154>
 800325c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325e:	7b5b      	ldrb	r3, [r3, #13]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <CO_TPDO_init+0x146>
 8003264:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <CO_TPDO_init+0x154>
        valid = false;
 800326a:	2300      	movs	r3, #0
 800326c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (erroneousMap == 0U) {
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <CO_TPDO_init+0x154>
            erroneousMap = 1;
 8003274:	2301      	movs	r3, #1
 8003276:	61fb      	str	r3, [r7, #28]
        }
    }

    if (erroneousMap != 0U) {
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00e      	beq.n	800329c <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d001      	beq.n	800328c <CO_TPDO_init+0x168>
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	e000      	b.n	800328e <CO_TPDO_init+0x16a>
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 8003294:	221a      	movs	r2, #26
 8003296:	2101      	movs	r1, #1
 8003298:	f7fd fd27 	bl	8000cea <CO_error>
                       (erroneousMap != 1U) ? erroneousMap : COB_ID);
    }
    if (!valid) {
 800329c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <CO_TPDO_init+0x182>
        CAN_ID = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if ((CAN_ID != 0U) && (CAN_ID == (preDefinedCanId & 0xFF80U))) {
 80032a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <CO_TPDO_init+0x19a>
 80032ac:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80032ae:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 80032b0:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80032b4:	400b      	ands	r3, r1
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d101      	bne.n	80032be <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 80032ba:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80032bc:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CAN_ID, false, PDO->dataLength,
 80032be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c0:	7b1b      	ldrb	r3, [r3, #12]
                                         TPDO->transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240);
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
    TPDO->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CAN_ID, false, PDO->dataLength,
 80032c8:	2af0      	cmp	r2, #240	@ 0xf0
 80032ca:	bf94      	ite	ls
 80032cc:	2201      	movls	r2, #1
 80032ce:	2200      	movhi	r2, #0
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	4610      	mov	r0, r2
 80032d4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80032d6:	f8b7 1048 	ldrh.w	r1, [r7, #72]	@ 0x48
 80032da:	9001      	str	r0, [sp, #4]
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	2300      	movs	r3, #0
 80032e0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80032e2:	f004 fbe7 	bl	8007ab4 <CO_CANtxBufferInit>
 80032e6:	4602      	mov	r2, r0
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168

    if (TPDO->CANtxBuff == NULL) {
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d102      	bne.n	80032fe <CO_TPDO_init+0x1da>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80032f8:	f04f 33ff 	mov.w	r3, #4294967295
 80032fc:	e075      	b.n	80033ea <CO_TPDO_init+0x2c6>
    }

    PDO->valid = valid;
 80032fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003300:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003302:	609a      	str	r2, [r3, #8]

    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
    uint16_t inhibitTime = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	823b      	strh	r3, [r7, #16]
    (void)OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 800330c:	f107 0212 	add.w	r2, r7, #18
 8003310:	2301      	movs	r3, #1
 8003312:	2103      	movs	r1, #3
 8003314:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003316:	f7fe fef0 	bl	80020fa <OD_get_u16>
    (void)OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 800331a:	f107 0210 	add.w	r2, r7, #16
 800331e:	2301      	movs	r3, #1
 8003320:	2105      	movs	r1, #5
 8003322:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003324:	f7fe fee9 	bl	80020fa <OD_get_u16>
    TPDO->inhibitTime_us = (uint32_t)inhibitTime * 100U;
 8003328:	8a7b      	ldrh	r3, [r7, #18]
 800332a:	461a      	mov	r2, r3
 800332c:	2364      	movs	r3, #100	@ 0x64
 800332e:	fb03 f202 	mul.w	r2, r3, r2
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
    TPDO->eventTime_us = (uint32_t)eventTime * 1000U;
 8003338:	8a3b      	ldrh	r3, [r7, #16]
 800333a:	461a      	mov	r2, r3
 800333c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003340:	fb03 f202 	mul.w	r2, r3, r2
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
#endif

    /* Configure communication parameter - SYNC start value (optional) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
    TPDO->syncStartValue = 0;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
    (void)OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f503 72bc 	add.w	r2, r3, #376	@ 0x178
 8003358:	2301      	movs	r3, #1
 800335a:	2106      	movs	r1, #6
 800335c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800335e:	f7fe feb7 	bl	80020d0 <OD_get_u8>
    TPDO->SYNC = SYNC;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
    TPDO->syncCounter = 255;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	22ff      	movs	r2, #255	@ 0xff
 800336e:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
#endif

    /* Configure OD extensions */
#if ((CO_CONFIG_PDO)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    PDO->isRPDO = false;
 8003372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003374:	2200      	movs	r2, #0
 8003376:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    PDO->OD = OD;
 800337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    PDO->CANdevIdx = CANdevTxIdx;
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003388:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    PDO->preDefinedCanId = preDefinedCanId;
 800338c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8003390:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142
    PDO->configuredCanId = CAN_ID;
 8003394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003396:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8003398:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
    PDO->OD_communicationParam_ext.object = TPDO;
 800339c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 80033a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a6:	4a13      	ldr	r2, [pc, #76]	@ (80033f4 <CO_TPDO_init+0x2d0>)
 80033a8:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	4a12      	ldr	r2, [pc, #72]	@ (80033f8 <CO_TPDO_init+0x2d4>)
 80033b0:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
    PDO->OD_mappingParam_extension.object = TPDO;
 80033b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 80033bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033be:	4a0f      	ldr	r2, [pc, #60]	@ (80033fc <CO_TPDO_init+0x2d8>)
 80033c0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003400 <CO_TPDO_init+0x2dc>)
 80033c8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    (void)OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80033d2:	4619      	mov	r1, r3
 80033d4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80033d6:	f7fe fe67 	bl	80020a8 <OD_extension_init>
    (void)OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 80033da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033dc:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80033e0:	4619      	mov	r1, r3
 80033e2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80033e4:	f7fe fe60 	bl	80020a8 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3730      	adds	r7, #48	@ 0x30
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	080025c9 	.word	0x080025c9
 80033f8:	08002e81 	.word	0x08002e81
 80033fc:	080019d3 	.word	0x080019d3
 8003400:	08002495 	.word	0x08002495

08003404 <CO_TPDOsend>:
 * @param TPDO TPDO object.
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t
CO_TPDOsend(CO_TPDO_t* TPDO) {
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b093      	sub	sp, #76	@ 0x4c
 8003408:	af02      	add	r7, sp, #8
 800340a:	6078      	str	r0, [r7, #4]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t* dataTPDO = &TPDO->CANtxBuff->data[0];
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8003416:	3305      	adds	r3, #5
 8003418:	63fb      	str	r3, [r7, #60]	@ 0x3c
    OD_size_t verifyLength = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	63bb      	str	r3, [r7, #56]	@ 0x38

#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
                          || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO));
 8003424:	2b00      	cmp	r3, #0
 8003426:	d004      	beq.n	8003432 <CO_TPDOsend+0x2e>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 800342e:	2bfd      	cmp	r3, #253	@ 0xfd
 8003430:	d901      	bls.n	8003436 <CO_TPDOsend+0x32>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <CO_TPDOsend+0x34>
 8003436:	2300      	movs	r3, #0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8003438:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_OD_IO_ACCESS) != 0
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 800343a:	2300      	movs	r3, #0
 800343c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003440:	e066      	b.n	8003510 <CO_TPDOsend+0x10c>
        OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8003442:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003446:	015b      	lsls	r3, r3, #5
 8003448:	3310      	adds	r3, #16
 800344a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800344c:	4413      	add	r3, r2
 800344e:	623b      	str	r3, [r7, #32]
        OD_stream_t* stream = &OD_IO->stream;
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	61fb      	str	r3, [r7, #28]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t)stream->dataOffset;
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	76fb      	strb	r3, [r7, #27]

        /* additional safety check */
        verifyLength += (OD_size_t)mappedLength;
 800345a:	7efb      	ldrb	r3, [r7, #27]
 800345c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800345e:	4413      	add	r3, r2
 8003460:	63bb      	str	r3, [r7, #56]	@ 0x38
        if (verifyLength > CO_PDO_MAX_SIZE) {
 8003462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003464:	2b08      	cmp	r3, #8
 8003466:	d85a      	bhi.n	800351e <CO_TPDOsend+0x11a>
            break;
        }

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (ODdataLength > CO_PDO_MAX_SIZE) {
 800346e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003470:	2b08      	cmp	r3, #8
 8003472:	d901      	bls.n	8003478 <CO_TPDOsend+0x74>
            ODdataLength = CO_PDO_MAX_SIZE;
 8003474:	2308      	movs	r3, #8
 8003476:	633b      	str	r3, [r7, #48]	@ 0x30
        }
        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t* dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 8003478:	7efb      	ldrb	r3, [r7, #27]
 800347a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800347c:	429a      	cmp	r2, r3
 800347e:	d90a      	bls.n	8003496 <CO_TPDOsend+0x92>
            (void)memset(buf, 0, sizeof(buf));
 8003480:	f107 030c 	add.w	r3, r7, #12
 8003484:	2208      	movs	r2, #8
 8003486:	2100      	movs	r1, #0
 8003488:	4618      	mov	r0, r3
 800348a:	f007 fe1f 	bl	800b0cc <memset>
            dataTPDOCopy = buf;
 800348e:	f107 030c 	add.w	r3, r7, #12
 8003492:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003494:	e001      	b.n	800349a <CO_TPDOsend+0x96>
        } else {
            dataTPDOCopy = dataTPDO;
 8003496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003498:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read() and store mappedLength back to stream.dataOffset */
        stream->dataOffset = 0;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	2200      	movs	r2, #0
 800349e:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	699c      	ldr	r4, [r3, #24]
 80034a4:	f107 0308 	add.w	r3, r7, #8
 80034a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034ac:	69f8      	ldr	r0, [r7, #28]
 80034ae:	47a0      	blx	r4
        stream->dataOffset = mappedLength;
 80034b0:	7efa      	ldrb	r2, [r7, #27]
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	60da      	str	r2, [r3, #12]
            }
        }
#endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 80034b6:	7efb      	ldrb	r3, [r7, #27]
 80034b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d906      	bls.n	80034cc <CO_TPDOsend+0xc8>
            (void)memcpy(dataTPDO, buf, mappedLength);
 80034be:	7efa      	ldrb	r2, [r7, #27]
 80034c0:	f107 030c 	add.w	r3, r7, #12
 80034c4:	4619      	mov	r1, r3
 80034c6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80034c8:	f007 fe8b 	bl	800b1e2 <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
#if OD_FLAGS_PDO_SIZE > 0
        uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 80034cc:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80034d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d2:	3244      	adds	r2, #68	@ 0x44
 80034d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d8:	617b      	str	r3, [r7, #20]
        if ((flagPDObyte != NULL) && eventDriven) {
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00e      	beq.n	80034fe <CO_TPDOsend+0xfa>
 80034e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <CO_TPDOsend+0xfa>
            *flagPDObyte |= PDO->flagPDObitmask[i];
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	781a      	ldrb	r2, [r3, #0]
 80034ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80034ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034f0:	440b      	add	r3, r1
 80034f2:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80034f6:	4313      	orrs	r3, r2
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	701a      	strb	r2, [r3, #0]
        }
#endif

        dataTPDO += mappedLength;
 80034fe:	7efb      	ldrb	r3, [r7, #27]
 8003500:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003502:	4413      	add	r3, r2
 8003504:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003506:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800350a:	3301      	adds	r3, #1
 800350c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003512:	7b5b      	ldrb	r3, [r3, #13]
 8003514:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8003518:	429a      	cmp	r2, r3
 800351a:	d392      	bcc.n	8003442 <CO_TPDOsend+0x3e>
 800351c:	e000      	b.n	8003520 <CO_TPDOsend+0x11c>
            break;
 800351e:	bf00      	nop
        }
#endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    if ((verifyLength > CO_PDO_MAX_SIZE) || (verifyLength != (OD_size_t)PDO->dataLength)) {
 8003520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003522:	2b08      	cmp	r3, #8
 8003524:	d805      	bhi.n	8003532 <CO_TPDOsend+0x12e>
 8003526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003528:	7b1b      	ldrb	r3, [r3, #12]
 800352a:	461a      	mov	r2, r3
 800352c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800352e:	4293      	cmp	r3, r2
 8003530:	d00e      	beq.n	8003550 <CO_TPDOsend+0x14c>
        /* bug in software, should not happen */
        CO_errorReport(PDO->em, CO_EM_GENERIC_SOFTWARE_ERROR, CO_EMC_SOFTWARE_INTERNAL, (0x200000U | verifyLength));
 8003532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003538:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	f44f 43c2 	mov.w	r3, #24832	@ 0x6100
 8003542:	222c      	movs	r2, #44	@ 0x2c
 8003544:	2101      	movs	r1, #1
 8003546:	f7fd fbd0 	bl	8000cea <CO_error>
        return CO_ERROR_DATA_CORRUPT;
 800354a:	f06f 030c 	mvn.w	r3, #12
 800354e:	e019      	b.n	8003584 <CO_TPDOsend+0x180>
    }

    TPDO->sendRequest = false;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
    TPDO->eventTimer = TPDO->eventTime_us;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 8003570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800357a:	4619      	mov	r1, r3
 800357c:	4610      	mov	r0, r2
 800357e:	f004 fb13 	bl	8007ba8 <CO_CANsend>
 8003582:	4603      	mov	r3, r0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3744      	adds	r7, #68	@ 0x44
 8003588:	46bd      	mov	sp, r7
 800358a:	bd90      	pop	{r4, r7, pc}

0800358c <CO_TPDO_process>:
void
CO_TPDO_process(CO_TPDO_t* TPDO,
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0) || defined CO_DOXYGEN
                uint32_t timeDifference_us, uint32_t* timerNext_us,
#endif
                bool_t NMTisOperational, bool_t syncWas) {
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	61bb      	str	r3, [r7, #24]
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)) != 0
    (void)timerNext_us;
#endif
    (void)syncWas;

    if (PDO->valid && NMTisOperational) {
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 80dc 	beq.w	8003760 <CO_TPDO_process+0x1d4>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 80d8 	beq.w	8003760 <CO_TPDO_process+0x1d4>

        /* check for event timer or application event */
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0) || (OD_FLAGS_PDO_SIZE > 0)
        if ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d004      	beq.n	80035c4 <CO_TPDO_process+0x38>
            || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 80035c0:	2bfd      	cmp	r3, #253	@ 0xfd
 80035c2:	d946      	bls.n	8003652 <CO_TPDO_process+0xc6>
            /* event timer */
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            if (TPDO->eventTime_us != 0U) {
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d018      	beq.n	8003600 <CO_TPDO_process+0x74>
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0U;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d205      	bcs.n	80035e6 <CO_TPDO_process+0x5a>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	e000      	b.n	80035e8 <CO_TPDO_process+0x5c>
 80035e6:	2300      	movs	r3, #0
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
                if (TPDO->eventTimer == 0U) {
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d103      	bne.n	8003600 <CO_TPDO_process+0x74>
                    TPDO->sendRequest = true;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
#endif
            }
#endif
            /* check for any OD_requestTPDO() */
#if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest) {
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8003606:	2b00      	cmp	r3, #0
 8003608:	d123      	bne.n	8003652 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 800360a:	2300      	movs	r3, #0
 800360c:	77fb      	strb	r3, [r7, #31]
 800360e:	e01b      	b.n	8003648 <CO_TPDO_process+0xbc>
                    uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 8003610:	7ffa      	ldrb	r2, [r7, #31]
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	3244      	adds	r2, #68	@ 0x44
 8003616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800361a:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL) {
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00f      	beq.n	8003642 <CO_TPDO_process+0xb6>
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0U) {
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	781a      	ldrb	r2, [r3, #0]
 8003626:	7ffb      	ldrb	r3, [r7, #31]
 8003628:	69b9      	ldr	r1, [r7, #24]
 800362a:	440b      	add	r3, r1
 800362c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8003630:	4013      	ands	r3, r2
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d104      	bne.n	8003642 <CO_TPDO_process+0xb6>
                            TPDO->sendRequest = true;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
                            break;
 8003640:	e007      	b.n	8003652 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003642:	7ffb      	ldrb	r3, [r7, #31]
 8003644:	3301      	adds	r3, #1
 8003646:	77fb      	strb	r3, [r7, #31]
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	7b5b      	ldrb	r3, [r3, #13]
 800364c:	7ffa      	ldrb	r2, [r7, #31]
 800364e:	429a      	cmp	r2, r3
 8003650:	d3de      	bcc.n	8003610 <CO_TPDO_process+0x84>
#endif
        }
#endif /* ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0) */

        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8003658:	2bfd      	cmp	r3, #253	@ 0xfd
 800365a:	d91d      	bls.n	8003698 <CO_TPDO_process+0x10c>
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
                                                                          : 0U;
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	429a      	cmp	r2, r3
 8003666:	d205      	bcs.n	8003674 <CO_TPDO_process+0xe8>
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f8d3 2184 	ldr.w	r2, [r3, #388]	@ 0x184
                                                                          : 0U;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	e000      	b.n	8003676 <CO_TPDO_process+0xea>
 8003674:	2300      	movs	r3, #0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	f8c2 3184 	str.w	r3, [r2, #388]	@ 0x184

            /* send TPDO */
            if (TPDO->sendRequest && (TPDO->inhibitTimer == 0U)) {
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8003682:	2b00      	cmp	r3, #0
 8003684:	d07d      	beq.n	8003782 <CO_TPDO_process+0x1f6>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 800368c:	2b00      	cmp	r3, #0
 800368e:	d178      	bne.n	8003782 <CO_TPDO_process+0x1f6>
                (void)CO_TPDOsend(TPDO);
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f7ff feb7 	bl	8003404 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003696:	e074      	b.n	8003782 <CO_TPDO_process+0x1f6>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        else if ((TPDO->SYNC != NULL) && syncWas) {
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d06f      	beq.n	8003782 <CO_TPDO_process+0x1f6>
 80036a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d06c      	beq.n	8003782 <CO_TPDO_process+0x1f6>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d108      	bne.n	80036c4 <CO_TPDO_process+0x138>
                if (TPDO->sendRequest) {
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d062      	beq.n	8003782 <CO_TPDO_process+0x1f6>
                    (void)CO_TPDOsend(TPDO);
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f7ff fea1 	bl	8003404 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80036c2:	e05e      	b.n	8003782 <CO_TPDO_process+0x1f6>
                }
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255U) {
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 80036ca:	2bff      	cmp	r3, #255	@ 0xff
 80036cc:	d119      	bne.n	8003702 <CO_TPDO_process+0x176>
                    if ((TPDO->SYNC->counterOverflowValue != 0U) && (TPDO->syncStartValue != 0U)) {
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80036d4:	7c5b      	ldrb	r3, [r3, #17]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d009      	beq.n	80036ee <CO_TPDO_process+0x162>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d004      	beq.n	80036ee <CO_TPDO_process+0x162>
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	22fe      	movs	r2, #254	@ 0xfe
 80036e8:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
 80036ec:	e009      	b.n	8003702 <CO_TPDO_process+0x176>
                    } else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = (TPDO->transmissionType / 2U) + 1U;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 80036f4:	085b      	lsrs	r3, r3, #1
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	3301      	adds	r3, #1
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC with matched syncStartValue. */
                if (TPDO->syncCounter == 254U) {
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 8003708:	2bfe      	cmp	r3, #254	@ 0xfe
 800370a:	d112      	bne.n	8003732 <CO_TPDO_process+0x1a6>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8003712:	7c9a      	ldrb	r2, [r3, #18]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800371a:	429a      	cmp	r2, r3
 800371c:	d131      	bne.n	8003782 <CO_TPDO_process+0x1f6>
                        TPDO->syncCounter = TPDO->transmissionType;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 216c 	ldrb.w	r2, [r3, #364]	@ 0x16c
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
                        (void)CO_TPDOsend(TPDO);
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f7ff fe6a 	bl	8003404 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003730:	e027      	b.n	8003782 <CO_TPDO_process+0x1f6>
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0U) {
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 8003738:	3b01      	subs	r3, #1
 800373a:	b2da      	uxtb	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 8003748:	2b00      	cmp	r3, #0
 800374a:	d11a      	bne.n	8003782 <CO_TPDO_process+0x1f6>
                    TPDO->syncCounter = TPDO->transmissionType;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 216c 	ldrb.w	r2, [r3, #364]	@ 0x16c
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
                    (void)CO_TPDOsend(TPDO);
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f7ff fe53 	bl	8003404 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800375e:	e010      	b.n	8003782 <CO_TPDO_process+0x1f6>
        }
#endif

    } else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2201      	movs	r2, #1
 8003764:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
        TPDO->inhibitTimer = 0;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
        TPDO->eventTimer = 0;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
#endif
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        TPDO->syncCounter = 255;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	22ff      	movs	r2, #255	@ 0xff
 800377c:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
#endif
    }
}
 8003780:	e000      	b.n	8003784 <CO_TPDO_process+0x1f8>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003782:	bf00      	nop
}
 8003784:	bf00      	nop
 8003786:	3720      	adds	r7, #32
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <OD_getIndex+0x14>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	e000      	b.n	80037a2 <OD_getIndex+0x16>
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b086      	sub	sp, #24
 80037b2:	af02      	add	r7, sp, #8
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
 80037ba:	460b      	mov	r3, r1
 80037bc:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80037be:	7af9      	ldrb	r1, [r7, #11]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	2301      	movs	r3, #1
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f7fe fb65 	bl	8001e98 <OD_get_value>
 80037ce:	4603      	mov	r3, r0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af02      	add	r7, sp, #8
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	460b      	mov	r3, r1
 80037e6:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80037e8:	7af9      	ldrb	r1, [r7, #11]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	2304      	movs	r3, #4
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f7fe fb50 	bl	8001e98 <OD_get_value>
 80037f8:	4603      	mov	r3, r0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <CO_SDOclient_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SDOclient_receive(void* object, void* msg) {
 8003802:	b580      	push	{r7, lr}
 8003804:	b086      	sub	sp, #24
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
    CO_SDOclient_t* SDO_C = (CO_SDOclient_t*)object;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	791b      	ldrb	r3, [r3, #4]
 8003814:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	3305      	adds	r3, #5
 800381a:	60fb      	str	r3, [r7, #12]

    /* Ignore messages in idle state and messages with wrong length. Ignore
     * message also if previous message was not processed yet and not abort */
    if ((SDO_C->state != CO_SDO_ST_IDLE) && (DLC == 8U) && (!CO_FLAG_READ(SDO_C->CANrxNew) || (data[0] == 0x80U))) {
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d014      	beq.n	8003852 <CO_SDOclient_receive+0x50>
 8003828:	7cfb      	ldrb	r3, [r7, #19]
 800382a:	2b08      	cmp	r3, #8
 800382c:	d111      	bne.n	8003852 <CO_SDOclient_receive+0x50>
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <CO_SDOclient_receive+0x3c>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b80      	cmp	r3, #128	@ 0x80
 800383c:	d109      	bne.n	8003852 <CO_SDOclient_receive+0x50>
        bool_t state_not_upload_blk_sublock_crsp = (SDO_C->state != CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP);
        if ((data[0] == 0x80U) /* abort from server */
            || (state_not_upload_blk_sublock_sreq && state_not_upload_blk_sublock_crsp)) {
#endif
            /* copy data and set 'new message' flag */
            (void)memcpy((void*)&SDO_C->CANrxData[0], (const void*)&data[0], 8);
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	3370      	adds	r3, #112	@ 0x70
 8003842:	2208      	movs	r2, #8
 8003844:	68f9      	ldr	r1, [r7, #12]
 8003846:	4618      	mov	r0, r3
 8003848:	f007 fccb 	bl	800b1e2 <memcpy>
            CO_FLAG_SET(SDO_C->CANrxNew);
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	2201      	movs	r2, #1
 8003850:	66da      	str	r2, [r3, #108]	@ 0x6c
        } else { /* MISRA C 2004 14.10 */
        }

#endif /* (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_BLOCK */
    }
}
 8003852:	bf00      	nop
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <CO_SDOclient_init>:
#endif /* (CO_CONFIG_SDO_CLI) & CO_CONFIG_FLAG_OD_DYNAMIC */

CO_ReturnError_t
CO_SDOclient_init(CO_SDOclient_t* SDO_C, OD_t* OD, OD_entry_t* OD_1280_SDOcliPar, uint8_t nodeId,
                  CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
                  uint32_t* errInfo) {
 800385a:	b580      	push	{r7, lr}
 800385c:	b08a      	sub	sp, #40	@ 0x28
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
 8003866:	70fb      	strb	r3, [r7, #3]
    bool_t index_SDOcliPar_min = (OD_getIndex(OD_1280_SDOcliPar) < (uint16_t)(OD_H1280_SDO_CLIENT_1_PARAM));
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff ff8f 	bl	800378c <OD_getIndex>
 800386e:	4603      	mov	r3, r0
 8003870:	461a      	mov	r2, r3
 8003872:	f241 237f 	movw	r3, #4735	@ 0x127f
 8003876:	429a      	cmp	r2, r3
 8003878:	bf94      	ite	ls
 800387a:	2301      	movls	r3, #1
 800387c:	2300      	movhi	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	627b      	str	r3, [r7, #36]	@ 0x24
    bool_t index_SDOcliPar_max = (OD_getIndex(OD_1280_SDOcliPar) > ((uint16_t)(OD_H1280_SDO_CLIENT_1_PARAM) + 0x7FU));
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff ff82 	bl	800378c <OD_getIndex>
 8003888:	4603      	mov	r3, r0
 800388a:	461a      	mov	r2, r3
 800388c:	f241 23ff 	movw	r3, #4863	@ 0x12ff
 8003890:	429a      	cmp	r2, r3
 8003892:	bf8c      	ite	hi
 8003894:	2301      	movhi	r3, #1
 8003896:	2300      	movls	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	623b      	str	r3, [r7, #32]

    /* verify arguments */
    if ((SDO_C == NULL) || (OD_1280_SDOcliPar == NULL) || index_SDOcliPar_min || index_SDOcliPar_max
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00e      	beq.n	80038c0 <CO_SDOclient_init+0x66>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00b      	beq.n	80038c0 <CO_SDOclient_init+0x66>
 80038a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d108      	bne.n	80038c0 <CO_SDOclient_init+0x66>
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d105      	bne.n	80038c0 <CO_SDOclient_init+0x66>
        || (CANdevRx == NULL) || (CANdevTx == NULL)) {
 80038b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <CO_SDOclient_init+0x66>
 80038ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d102      	bne.n	80038c6 <CO_SDOclient_init+0x6c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80038c0:	f04f 33ff 	mov.w	r3, #4294967295
 80038c4:	e068      	b.n	8003998 <CO_SDOclient_init+0x13e>
    /* Configure object variables */
#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_LOCAL) != 0
    SDO_C->OD = OD;
    SDO_C->nodeId = nodeId;
#endif
    SDO_C->CANdevRx = CANdevRx;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038ca:	601a      	str	r2, [r3, #0]
    SDO_C->CANdevRxIdx = CANdevRxIdx;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80038d0:	809a      	strh	r2, [r3, #4]
    SDO_C->CANdevTx = CANdevTx;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80038d6:	609a      	str	r2, [r3, #8]
    SDO_C->CANdevTxIdx = CANdevTxIdx;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80038dc:	819a      	strh	r2, [r3, #12]
    SDO_C->pFunctSignal = NULL;
    SDO_C->functSignalObject = NULL;
#endif

    /* prepare circular fifo buffer */
    CO_fifo_init(&SDO_C->bufFifo, SDO_C->buf, CO_CONFIG_SDO_CLI_BUFFER_SIZE + 1U);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	3348      	adds	r3, #72	@ 0x48
 80038e8:	2221      	movs	r2, #33	@ 0x21
 80038ea:	4619      	mov	r1, r3
 80038ec:	f002 f954 	bl	8005b98 <CO_fifo_init>

    /* Get parameters from Object Dictionary (initial values) */
    uint8_t maxSubIndex, nodeIDOfTheSDOServer;
    uint32_t COB_IDClientToServer, COB_IDServerToClient;
    ODR_t odRet0 = OD_get_u8(OD_1280_SDOcliPar, 0, &maxSubIndex, true);
 80038f0:	f107 021a 	add.w	r2, r7, #26
 80038f4:	2301      	movs	r3, #1
 80038f6:	2100      	movs	r1, #0
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff ff58 	bl	80037ae <OD_get_u8>
 80038fe:	4603      	mov	r3, r0
 8003900:	77fb      	strb	r3, [r7, #31]
    ODR_t odRet1 = OD_get_u32(OD_1280_SDOcliPar, 1, &COB_IDClientToServer, true);
 8003902:	f107 0214 	add.w	r2, r7, #20
 8003906:	2301      	movs	r3, #1
 8003908:	2101      	movs	r1, #1
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff ff64 	bl	80037d8 <OD_get_u32>
 8003910:	4603      	mov	r3, r0
 8003912:	77bb      	strb	r3, [r7, #30]
    ODR_t odRet2 = OD_get_u32(OD_1280_SDOcliPar, 2, &COB_IDServerToClient, true);
 8003914:	f107 0210 	add.w	r2, r7, #16
 8003918:	2301      	movs	r3, #1
 800391a:	2102      	movs	r1, #2
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff ff5b 	bl	80037d8 <OD_get_u32>
 8003922:	4603      	mov	r3, r0
 8003924:	777b      	strb	r3, [r7, #29]
    ODR_t odRet3 = OD_get_u8(OD_1280_SDOcliPar, 3, &nodeIDOfTheSDOServer, true);
 8003926:	f107 0219 	add.w	r2, r7, #25
 800392a:	2301      	movs	r3, #1
 800392c:	2103      	movs	r1, #3
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff ff3d 	bl	80037ae <OD_get_u8>
 8003934:	4603      	mov	r3, r0
 8003936:	773b      	strb	r3, [r7, #28]

    if ((odRet0 != ODR_OK) || (maxSubIndex != 3U) || (odRet1 != ODR_OK) || (odRet2 != ODR_OK) || (odRet3 != ODR_OK)) {
 8003938:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10e      	bne.n	800395e <CO_SDOclient_init+0x104>
 8003940:	7ebb      	ldrb	r3, [r7, #26]
 8003942:	2b03      	cmp	r3, #3
 8003944:	d10b      	bne.n	800395e <CO_SDOclient_init+0x104>
 8003946:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d107      	bne.n	800395e <CO_SDOclient_init+0x104>
 800394e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d103      	bne.n	800395e <CO_SDOclient_init+0x104>
 8003956:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00c      	beq.n	8003978 <CO_SDOclient_init+0x11e>
        if (errInfo != NULL) {
 800395e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003960:	2b00      	cmp	r3, #0
 8003962:	d006      	beq.n	8003972 <CO_SDOclient_init+0x118>
            *errInfo = OD_getIndex(OD_1280_SDOcliPar);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff ff11 	bl	800378c <OD_getIndex>
 800396a:	4603      	mov	r3, r0
 800396c:	461a      	mov	r2, r3
 800396e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003970:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8003972:	f06f 030b 	mvn.w	r3, #11
 8003976:	e00f      	b.n	8003998 <CO_SDOclient_init+0x13e>
    /* set to zero to make sure CO_SDOclient_setup() will reconfigure CAN */
    SDO_C->COB_IDClientToServer = 0;
    SDO_C->COB_IDServerToClient = 0;
#endif

    CO_SDO_return_t cliSetupRet = CO_SDOclient_setup(SDO_C, COB_IDClientToServer, COB_IDServerToClient,
 8003978:	6979      	ldr	r1, [r7, #20]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	7e7b      	ldrb	r3, [r7, #25]
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f80e 	bl	80039a0 <CO_SDOclient_setup>
 8003984:	4603      	mov	r3, r0
 8003986:	76fb      	strb	r3, [r7, #27]
                                                     nodeIDOfTheSDOServer);

    if (cliSetupRet != CO_SDO_RT_ok_communicationEnd) {
 8003988:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <CO_SDOclient_init+0x13c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003990:	f04f 33ff 	mov.w	r3, #4294967295
 8003994:	e000      	b.n	8003998 <CO_SDOclient_init+0x13e>
    }

    return CO_ERROR_NO;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3728      	adds	r7, #40	@ 0x28
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <CO_SDOclient_setup>:
}
#endif

CO_SDO_return_t
CO_SDOclient_setup(CO_SDOclient_t* SDO_C, uint32_t COB_IDClientToServer, uint32_t COB_IDServerToClient,
                   uint8_t nodeIDOfTheSDOServer) {
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08a      	sub	sp, #40	@ 0x28
 80039a4:	af04      	add	r7, sp, #16
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
 80039ac:	70fb      	strb	r3, [r7, #3]
    /* verify parameters */
    if (SDO_C == NULL) {
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d102      	bne.n	80039ba <CO_SDOclient_setup+0x1a>
        return CO_SDO_RT_wrongArguments;
 80039b4:	f06f 0301 	mvn.w	r3, #1
 80039b8:	e05f      	b.n	8003a7a <CO_SDOclient_setup+0xda>
    }

    /* Configure object variables */
    SDO_C->state = CO_SDO_ST_IDLE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    CO_FLAG_CLEAR(SDO_C->CANrxNew);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	66da      	str	r2, [r3, #108]	@ 0x6c
    SDO_C->nodeIDOfTheSDOServer = nodeIDOfTheSDOServer;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	78fa      	ldrb	r2, [r7, #3]
 80039cc:	751a      	strb	r2, [r3, #20]
    SDO_C->COB_IDClientToServer = COB_IDClientToServer;
    SDO_C->COB_IDServerToClient = COB_IDServerToClient;
#endif

    /* verify valid bit */
    uint16_t CanIdC2S = ((COB_IDClientToServer & 0x80000000UL) == 0U) ? (uint16_t)(COB_IDClientToServer & 0x7FFU) : 0U;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	db05      	blt.n	80039e0 <CO_SDOclient_setup+0x40>
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039dc:	b29b      	uxth	r3, r3
 80039de:	e000      	b.n	80039e2 <CO_SDOclient_setup+0x42>
 80039e0:	2300      	movs	r3, #0
 80039e2:	82fb      	strh	r3, [r7, #22]
    uint16_t CanIdS2C = ((COB_IDServerToClient & 0x80000000UL) == 0U) ? (uint16_t)(COB_IDServerToClient & 0x7FFU) : 0U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	db05      	blt.n	80039f6 <CO_SDOclient_setup+0x56>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	e000      	b.n	80039f8 <CO_SDOclient_setup+0x58>
 80039f6:	2300      	movs	r3, #0
 80039f8:	82bb      	strh	r3, [r7, #20]
    if ((CanIdC2S != 0U) && (CanIdS2C != 0U)) {
 80039fa:	8afb      	ldrh	r3, [r7, #22]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d006      	beq.n	8003a0e <CO_SDOclient_setup+0x6e>
 8003a00:	8abb      	ldrh	r3, [r7, #20]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <CO_SDOclient_setup+0x6e>
        SDO_C->valid = true;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	619a      	str	r2, [r3, #24]
 8003a0c:	e006      	b.n	8003a1c <CO_SDOclient_setup+0x7c>
    } else {
        CanIdC2S = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	82fb      	strh	r3, [r7, #22]
        CanIdS2C = 0;
 8003a12:	2300      	movs	r3, #0
 8003a14:	82bb      	strh	r3, [r7, #20]
        SDO_C->valid = false;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	619a      	str	r2, [r3, #24]
    }

    /* configure SDO client CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(SDO_C->CANdevRx, SDO_C->CANdevRxIdx, CanIdS2C, 0x7FF, false, (void*)SDO_C,
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8899      	ldrh	r1, [r3, #4]
 8003a24:	8aba      	ldrh	r2, [r7, #20]
 8003a26:	4b17      	ldr	r3, [pc, #92]	@ (8003a84 <CO_SDOclient_setup+0xe4>)
 8003a28:	9302      	str	r3, [sp, #8]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003a36:	f003 ffe1 	bl	80079fc <CO_CANrxBufferInit>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	74fb      	strb	r3, [r7, #19]
                                              CO_SDOclient_receive);

    /* configure SDO client CAN transmission */
    SDO_C->CANtxBuff = CO_CANtxBufferInit(SDO_C->CANdevTx, SDO_C->CANdevTxIdx, CanIdC2S, false, 8, false);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6898      	ldr	r0, [r3, #8]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8999      	ldrh	r1, [r3, #12]
 8003a46:	8afa      	ldrh	r2, [r7, #22]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	2308      	movs	r3, #8
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	2300      	movs	r3, #0
 8003a52:	f004 f82f 	bl	8007ab4 <CO_CANtxBufferInit>
 8003a56:	4602      	mov	r2, r0
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	611a      	str	r2, [r3, #16]

    if ((ret != CO_ERROR_NO) || (SDO_C->CANtxBuff == NULL)) {
 8003a5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d103      	bne.n	8003a6c <CO_SDOclient_setup+0xcc>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d105      	bne.n	8003a78 <CO_SDOclient_setup+0xd8>
        SDO_C->valid = false;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	619a      	str	r2, [r3, #24]
        return CO_SDO_RT_wrongArguments;
 8003a72:	f06f 0301 	mvn.w	r3, #1
 8003a76:	e000      	b.n	8003a7a <CO_SDOclient_setup+0xda>
    }

    return CO_SDO_RT_ok_communicationEnd;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	08003803 	.word	0x08003803

08003a88 <CO_getUint8>:
CO_getUint8(const void* buf) {
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	73fb      	strb	r3, [r7, #15]
    return value;
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	60fb      	str	r3, [r7, #12]
    return value;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <OD_getIndex+0x14>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	e000      	b.n	8003ad6 <OD_getIndex+0x16>
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
 8003aea:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8003af2:	2305      	movs	r3, #5
 8003af4:	e003      	b.n	8003afe <OD_extension_init+0x1c>
    entry->extension = extension;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b086      	sub	sp, #24
 8003b0e:	af02      	add	r7, sp, #8
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	603b      	str	r3, [r7, #0]
 8003b16:	460b      	mov	r3, r1
 8003b18:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003b1a:	7af9      	ldrb	r1, [r7, #11]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	2301      	movs	r3, #1
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f7fe f9b7 	bl	8001e98 <OD_get_value>
 8003b2a:	4603      	mov	r3, r0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	607a      	str	r2, [r7, #4]
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	460b      	mov	r3, r1
 8003b42:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003b44:	7af9      	ldrb	r1, [r7, #11]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	2304      	movs	r3, #4
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f7fe f9a2 	bl	8001e98 <OD_get_value>
 8003b54:	4603      	mov	r3, r0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <OD_set_u32>:
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t
OD_set_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t val, bool_t odOrig) {
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b086      	sub	sp, #24
 8003b62:	af02      	add	r7, sp, #8
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	603b      	str	r3, [r7, #0]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 8003b6e:	1d3a      	adds	r2, r7, #4
 8003b70:	7af9      	ldrb	r1, [r7, #11]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	2304      	movs	r3, #4
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f7fe f9ca 	bl	8001f12 <OD_set_value>
 8003b7e:	4603      	mov	r3, r0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SDO_receive(void* object, void* msg) {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t* SDO = (CO_SDOserver_t*)object;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	791b      	ldrb	r3, [r3, #4]
 8003b9a:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	3305      	adds	r3, #5
 8003ba0:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8U) {
 8003ba2:	7cfb      	ldrb	r3, [r7, #19]
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d122      	bne.n	8003bee <CO_SDO_receive+0x66>
        if (data[0] == 0x80U) {
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b80      	cmp	r3, #128	@ 0x80
 8003bae:	d103      	bne.n	8003bb8 <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 8003bb6:	e01a      	b.n	8003bee <CO_SDO_receive+0x66>
        } else if (CO_FLAG_READ(SDO->CANrxNew)) {
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d116      	bne.n	8003bee <CO_SDO_receive+0x66>
            (void)memcpy(SDO->CANrxData, data, DLC);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	3340      	adds	r3, #64	@ 0x40
 8003bc4:	7cfa      	ldrb	r2, [r7, #19]
 8003bc6:	68f9      	ldr	r1, [r7, #12]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f007 fb0a 	bl	800b1e2 <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	63da      	str	r2, [r3, #60]	@ 0x3c
            if (SDO->pFunctSignalPre != NULL) {
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d007      	beq.n	8003bee <CO_SDO_receive+0x66>
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	f8d2 20b0 	ldr.w	r2, [r2, #176]	@ 0xb0
 8003bea:	4610      	mov	r0, r2
 8003bec:	4798      	blx	r3
}
 8003bee:	bf00      	nop
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <CO_SDOserver_init_canRxTx>:

/* helper for configuring CANrx and CANtx */
static CO_ReturnError_t
CO_SDOserver_init_canRxTx(CO_SDOserver_t* SDO, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANdevTxIdx,
                          uint32_t COB_IDClientToServer, uint32_t COB_IDServerToClient) {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08a      	sub	sp, #40	@ 0x28
 8003bfc:	af04      	add	r7, sp, #16
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	4611      	mov	r1, r2
 8003c04:	461a      	mov	r2, r3
 8003c06:	460b      	mov	r3, r1
 8003c08:	80fb      	strh	r3, [r7, #6]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	80bb      	strh	r3, [r7, #4]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    /* proceed only, if parameters change */
    if ((COB_IDClientToServer == SDO->COB_IDClientToServer) && (COB_IDServerToClient == SDO->COB_IDServerToClient)) {
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c12:	6a3a      	ldr	r2, [r7, #32]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d106      	bne.n	8003c26 <CO_SDOserver_init_canRxTx+0x2e>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d101      	bne.n	8003c26 <CO_SDOserver_init_canRxTx+0x2e>
        return CO_ERROR_NO;
 8003c22:	2300      	movs	r3, #0
 8003c24:	e04e      	b.n	8003cc4 <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a3a      	ldr	r2, [r7, #32]
 8003c2a:	651a      	str	r2, [r3, #80]	@ 0x50
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c30:	655a      	str	r2, [r3, #84]	@ 0x54
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000UL) == 0U) ? (uint16_t)COB_IDClientToServer : 0U;
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	db02      	blt.n	8003c3e <CO_SDOserver_init_canRxTx+0x46>
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	e000      	b.n	8003c40 <CO_SDOserver_init_canRxTx+0x48>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	82fb      	strh	r3, [r7, #22]
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000UL) == 0U) ? (uint16_t)COB_IDServerToClient : 0U;
 8003c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	db02      	blt.n	8003c4e <CO_SDOserver_init_canRxTx+0x56>
 8003c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	e000      	b.n	8003c50 <CO_SDOserver_init_canRxTx+0x58>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	82bb      	strh	r3, [r7, #20]
    if ((idC2S != 0U) && (idS2C != 0U)) {
 8003c52:	8afb      	ldrh	r3, [r7, #22]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d006      	beq.n	8003c66 <CO_SDOserver_init_canRxTx+0x6e>
 8003c58:	8abb      	ldrh	r3, [r7, #20]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	611a      	str	r2, [r3, #16]
 8003c64:	e006      	b.n	8003c74 <CO_SDOserver_init_canRxTx+0x7c>
    } else {
        idC2S = 0;
 8003c66:	2300      	movs	r3, #0
 8003c68:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, idC2S, 0x7FF, false, (void*)SDO, CO_SDO_receive);
 8003c74:	8afa      	ldrh	r2, [r7, #22]
 8003c76:	88f9      	ldrh	r1, [r7, #6]
 8003c78:	4b14      	ldr	r3, [pc, #80]	@ (8003ccc <CO_SDOserver_init_canRxTx+0xd4>)
 8003c7a:	9302      	str	r3, [sp, #8]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	2300      	movs	r3, #0
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003c88:	68b8      	ldr	r0, [r7, #8]
 8003c8a:	f003 feb7 	bl	80079fc <CO_CANrxBufferInit>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	74fb      	strb	r3, [r7, #19]

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(SDO->CANdevTx, CANdevTxIdx, idS2C, false, 8, false);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	8aba      	ldrh	r2, [r7, #20]
 8003c98:	88b9      	ldrh	r1, [r7, #4]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	9301      	str	r3, [sp, #4]
 8003c9e:	2308      	movs	r3, #8
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f003 ff06 	bl	8007ab4 <CO_CANtxBufferInit>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	605a      	str	r2, [r3, #4]

    if (SDO->CANtxBuff == NULL) {
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d104      	bne.n	8003cc0 <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8003cb6:	23ff      	movs	r3, #255	@ 0xff
 8003cb8:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	611a      	str	r2, [r3, #16]
    }

    return ret;
 8003cc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	08003b89 	.word	0x08003b89

08003cd0 <OD_write_1201_additional>:
 * Custom function for writing OD object _SDO server parameter_, additional channels
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1201_additional(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8003cd0:	b590      	push	{r4, r7, lr}
 8003cd2:	b08f      	sub	sp, #60	@ 0x3c
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <OD_write_1201_additional+0x20>
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <OD_write_1201_additional+0x20>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 8003cf0:	2309      	movs	r3, #9
 8003cf2:	e0f9      	b.n	8003ee8 <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t* SDO = (CO_SDOserver_t*)stream->object;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    switch (stream->subIndex) {
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	7d1b      	ldrb	r3, [r3, #20]
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	f200 80e8 	bhi.w	8003ed4 <OD_write_1201_additional+0x204>
 8003d04:	a201      	add	r2, pc, #4	@ (adr r2, 8003d0c <OD_write_1201_additional+0x3c>)
 8003d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0a:	bf00      	nop
 8003d0c:	08003d1d 	.word	0x08003d1d
 8003d10:	08003d21 	.word	0x08003d21
 8003d14:	08003de5 	.word	0x08003de5
 8003d18:	08003eab 	.word	0x08003eab
        case 0: /* Highest sub-index supported */ return ODR_READONLY; break;
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	e0e3      	b.n	8003ee8 <OD_write_1201_additional+0x218>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 8003d20:	68b8      	ldr	r0, [r7, #8]
 8003d22:	f7ff febf 	bl	8003aa4 <CO_getUint32>
 8003d26:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d30:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FFU);
 8003d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d3c:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	43db      	mvns	r3, r3
 8003d42:	0fdb      	lsrs	r3, r3, #31
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || ((valid && SDO->valid) && (CAN_ID != CAN_ID_cur))
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4b69      	ldr	r3, [pc, #420]	@ (8003ef0 <OD_write_1201_additional+0x220>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d134      	bne.n	8003dbc <OD_write_1201_additional+0xec>
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d007      	beq.n	8003d68 <OD_write_1201_additional+0x98>
 8003d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <OD_write_1201_additional+0x98>
 8003d60:	8afa      	ldrh	r2, [r7, #22]
 8003d62:	8abb      	ldrh	r3, [r7, #20]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d129      	bne.n	8003dbc <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d028      	beq.n	8003dc0 <OD_write_1201_additional+0xf0>
 8003d6e:	8afb      	ldrh	r3, [r7, #22]
 8003d70:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d72:	d923      	bls.n	8003dbc <OD_write_1201_additional+0xec>
 8003d74:	8afb      	ldrh	r3, [r7, #22]
 8003d76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d7a:	d903      	bls.n	8003d84 <OD_write_1201_additional+0xb4>
 8003d7c:	8afb      	ldrh	r3, [r7, #22]
 8003d7e:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8003d82:	d91b      	bls.n	8003dbc <OD_write_1201_additional+0xec>
 8003d84:	8afb      	ldrh	r3, [r7, #22]
 8003d86:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8003d8a:	d903      	bls.n	8003d94 <OD_write_1201_additional+0xc4>
 8003d8c:	8afb      	ldrh	r3, [r7, #22]
 8003d8e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003d92:	d313      	bcc.n	8003dbc <OD_write_1201_additional+0xec>
 8003d94:	8afb      	ldrh	r3, [r7, #22]
 8003d96:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003d9a:	d903      	bls.n	8003da4 <OD_write_1201_additional+0xd4>
 8003d9c:	8afb      	ldrh	r3, [r7, #22]
 8003d9e:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8003da2:	d30b      	bcc.n	8003dbc <OD_write_1201_additional+0xec>
 8003da4:	8afb      	ldrh	r3, [r7, #22]
 8003da6:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8003daa:	d303      	bcc.n	8003db4 <OD_write_1201_additional+0xe4>
 8003dac:	8afb      	ldrh	r3, [r7, #22]
 8003dae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003db2:	d303      	bcc.n	8003dbc <OD_write_1201_additional+0xec>
 8003db4:	8afb      	ldrh	r3, [r7, #22]
 8003db6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003dba:	d901      	bls.n	8003dc0 <OD_write_1201_additional+0xf0>
                return ODR_INVALID_VALUE;
 8003dbc:	230f      	movs	r3, #15
 8003dbe:	e093      	b.n	8003ee8 <OD_write_1201_additional+0x218>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx, COB_ID,
 8003dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc2:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8003dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dcc:	f8b3 004e 	ldrh.w	r0, [r3, #78]	@ 0x4e
 8003dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd4:	9301      	str	r3, [sp, #4]
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	4603      	mov	r3, r0
 8003ddc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003dde:	f7ff ff0b 	bl	8003bf8 <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDServerToClient);
            break;
 8003de2:	e07a      	b.n	8003eda <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 8003de4:	68b8      	ldr	r0, [r7, #8]
 8003de6:	f7ff fe5d 	bl	8003aa4 <CO_getUint32>
 8003dea:	6278      	str	r0, [r7, #36]	@ 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8003dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003df4:	847b      	strh	r3, [r7, #34]	@ 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FFU);
 8003df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e00:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8003e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e04:	43db      	mvns	r3, r3
 8003e06:	0fdb      	lsrs	r3, r3, #31
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && (SDO->valid && (CAN_ID != CAN_ID_cur)))
 8003e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e0e:	4b38      	ldr	r3, [pc, #224]	@ (8003ef0 <OD_write_1201_additional+0x220>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d134      	bne.n	8003e80 <OD_write_1201_additional+0x1b0>
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d007      	beq.n	8003e2c <OD_write_1201_additional+0x15c>
 8003e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <OD_write_1201_additional+0x15c>
 8003e24:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003e26:	8c3b      	ldrh	r3, [r7, #32]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d129      	bne.n	8003e80 <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d028      	beq.n	8003e84 <OD_write_1201_additional+0x1b4>
 8003e32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003e34:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e36:	d923      	bls.n	8003e80 <OD_write_1201_additional+0x1b0>
 8003e38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003e3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e3e:	d903      	bls.n	8003e48 <OD_write_1201_additional+0x178>
 8003e40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003e42:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8003e46:	d91b      	bls.n	8003e80 <OD_write_1201_additional+0x1b0>
 8003e48:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003e4a:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8003e4e:	d903      	bls.n	8003e58 <OD_write_1201_additional+0x188>
 8003e50:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003e52:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003e56:	d313      	bcc.n	8003e80 <OD_write_1201_additional+0x1b0>
 8003e58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003e5a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003e5e:	d903      	bls.n	8003e68 <OD_write_1201_additional+0x198>
 8003e60:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003e62:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8003e66:	d30b      	bcc.n	8003e80 <OD_write_1201_additional+0x1b0>
 8003e68:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003e6a:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8003e6e:	d303      	bcc.n	8003e78 <OD_write_1201_additional+0x1a8>
 8003e70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003e72:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e76:	d303      	bcc.n	8003e80 <OD_write_1201_additional+0x1b0>
 8003e78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003e7a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e7e:	d901      	bls.n	8003e84 <OD_write_1201_additional+0x1b4>
                return ODR_INVALID_VALUE;
 8003e80:	230f      	movs	r3, #15
 8003e82:	e031      	b.n	8003ee8 <OD_write_1201_additional+0x218>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx,
 8003e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e86:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8a:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8003e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e90:	f8b3 404e 	ldrh.w	r4, [r3, #78]	@ 0x4e
 8003e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e9a:	9201      	str	r2, [sp, #4]
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	4623      	mov	r3, r4
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ea4:	f7ff fea8 	bl	8003bf8 <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDClientToServer, COB_ID);
            break;
 8003ea8:	e017      	b.n	8003eda <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1U) {
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d001      	beq.n	8003eb4 <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 8003eb0:	230b      	movs	r3, #11
 8003eb2:	e019      	b.n	8003ee8 <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 8003eb4:	68b8      	ldr	r0, [r7, #8]
 8003eb6:	f7ff fde7 	bl	8003a88 <CO_getUint8>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            if ((nodeId < 1U) || (nodeId > 127U)) {
 8003ec0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <OD_write_1201_additional+0x200>
 8003ec8:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	da03      	bge.n	8003ed8 <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 8003ed0:	230f      	movs	r3, #15
 8003ed2:	e009      	b.n	8003ee8 <OD_write_1201_additional+0x218>
            }
            break;
        }

        default: return ODR_SUB_NOT_EXIST; break;
 8003ed4:	230e      	movs	r3, #14
 8003ed6:	e007      	b.n	8003ee8 <OD_write_1201_additional+0x218>
            break;
 8003ed8:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f7fd fdce 	bl	8001a82 <OD_writeOriginal>
 8003ee6:	4603      	mov	r3, r0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3734      	adds	r7, #52	@ 0x34
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd90      	pop	{r4, r7, pc}
 8003ef0:	3ffff800 	.word	0x3ffff800

08003ef4 <CO_SDOserver_init>:
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC */

CO_ReturnError_t
CO_SDOserver_init(CO_SDOserver_t* SDO, OD_t* OD, OD_entry_t* OD_1200_SDOsrvPar, uint8_t nodeId,
                  uint16_t SDOtimeoutTime_ms, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, CO_CANmodule_t* CANdevTx,
                  uint16_t CANdevTxIdx, uint32_t* errInfo) {
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08c      	sub	sp, #48	@ 0x30
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if ((SDO == NULL) || (OD == NULL) || (CANdevRx == NULL) || (CANdevTx == NULL)) {
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <CO_SDOserver_init+0x26>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <CO_SDOserver_init+0x26>
 8003f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <CO_SDOserver_init+0x26>
 8003f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d102      	bne.n	8003f20 <CO_SDOserver_init+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f1e:	e0fd      	b.n	800411c <CO_SDOserver_init+0x228>
    }

    /* Configure object variables */
    SDO->OD = OD;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	731a      	strb	r2, [r3, #12]
#if (((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED)) != 0
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000U;
 8003f2c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003f2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f32:	fb03 f202 	mul.w	r2, r3, r2
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	679a      	str	r2, [r3, #120]	@ 0x78
#endif
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) != 0
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	751a      	strb	r2, [r3, #20]

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_CALLBACK_PRE) != 0
    SDO->pFunctSignalPre = NULL;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    SDO->functSignalObjectPre = NULL;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d117      	bne.n	8003f86 <CO_SDOserver_init+0x92>
        /* configure default SDO channel */
        if ((nodeId < 1U) || (nodeId > 127U)) {
 8003f56:	78fb      	ldrb	r3, [r7, #3]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <CO_SDOserver_init+0x70>
 8003f5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	da02      	bge.n	8003f6a <CO_SDOserver_init+0x76>
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8003f64:	f04f 33ff 	mov.w	r3, #4294967295
 8003f68:	e0d8      	b.n	800411c <CO_SDOserver_init+0x228>
        }

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8003f72:	84fb      	strh	r3, [r7, #38]	@ 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8003f74:	78fb      	ldrb	r3, [r7, #3]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 8003f7c:	84bb      	strh	r3, [r7, #36]	@ 0x24
        SDO->valid = true;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	611a      	str	r2, [r3, #16]
 8003f84:	e0a4      	b.n	80040d0 <CO_SDOserver_init+0x1dc>
    } else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7ff fd9a 	bl	8003ac0 <OD_getIndex>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	847b      	strh	r3, [r7, #34]	@ 0x22

        if (OD_SDOsrvParIdx == (uint16_t)OD_H1200_SDO_SERVER_1_PARAM) {
 8003f90:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003f92:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 8003f96:	d123      	bne.n	8003fe0 <CO_SDOserver_init+0xec>
            /* configure default SDO channel and SDO server parameters for it */
            if ((nodeId < 1U) || (nodeId > 127U)) {
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <CO_SDOserver_init+0xb2>
 8003f9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	da02      	bge.n	8003fac <CO_SDOserver_init+0xb8>
                return CO_ERROR_ILLEGAL_ARGUMENT;
 8003fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8003faa:	e0b7      	b.n	800411c <CO_SDOserver_init+0x228>
            }

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8003fb4:	84fb      	strh	r3, [r7, #38]	@ 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8003fb6:	78fb      	ldrb	r3, [r7, #3]
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 8003fbe:	84bb      	strh	r3, [r7, #36]	@ 0x24
            SDO->valid = true;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	611a      	str	r2, [r3, #16]

            (void)OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 8003fc6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003fc8:	2301      	movs	r3, #1
 8003fca:	2101      	movs	r1, #1
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff fdc6 	bl	8003b5e <OD_set_u32>
            (void)OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 8003fd2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	2102      	movs	r1, #2
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff fdc0 	bl	8003b5e <OD_set_u32>
 8003fde:	e077      	b.n	80040d0 <CO_SDOserver_init+0x1dc>
        } else if ((OD_SDOsrvParIdx > (uint16_t)OD_H1200_SDO_SERVER_1_PARAM)
 8003fe0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003fe2:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 8003fe6:	d96f      	bls.n	80040c8 <CO_SDOserver_init+0x1d4>
                   && (OD_SDOsrvParIdx <= ((uint16_t)OD_H1200_SDO_SERVER_1_PARAM + 0x7FU))) {
 8003fe8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003fea:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 8003fee:	d26b      	bcs.n	80040c8 <CO_SDOserver_init+0x1d4>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 8003ff0:	f107 021d 	add.w	r2, r7, #29
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff fd86 	bl	8003b0a <OD_get_u8>
 8003ffe:	4603      	mov	r3, r0
 8004000:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1, &COB_IDClientToServer32, true);
 8004004:	f107 0218 	add.w	r2, r7, #24
 8004008:	2301      	movs	r3, #1
 800400a:	2101      	movs	r1, #1
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff fd91 	bl	8003b34 <OD_get_u32>
 8004012:	4603      	mov	r3, r0
 8004014:	f887 3020 	strb.w	r3, [r7, #32]
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2, &COB_IDServerToClient32, true);
 8004018:	f107 0214 	add.w	r2, r7, #20
 800401c:	2301      	movs	r3, #1
 800401e:	2102      	movs	r1, #2
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff fd87 	bl	8003b34 <OD_get_u32>
 8004026:	4603      	mov	r3, r0
 8004028:	77fb      	strb	r3, [r7, #31]

            if ((odRet0 != ODR_OK) || ((maxSubIndex != 2U) && (maxSubIndex != 3U)) || (odRet1 != ODR_OK)
 800402a:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10d      	bne.n	800404e <CO_SDOserver_init+0x15a>
 8004032:	7f7b      	ldrb	r3, [r7, #29]
 8004034:	2b02      	cmp	r3, #2
 8004036:	d002      	beq.n	800403e <CO_SDOserver_init+0x14a>
 8004038:	7f7b      	ldrb	r3, [r7, #29]
 800403a:	2b03      	cmp	r3, #3
 800403c:	d107      	bne.n	800404e <CO_SDOserver_init+0x15a>
 800403e:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d103      	bne.n	800404e <CO_SDOserver_init+0x15a>
                || (odRet2 != ODR_OK)) {
 8004046:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d008      	beq.n	8004060 <CO_SDOserver_init+0x16c>
                if (errInfo != NULL) {
 800404e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <CO_SDOserver_init+0x166>
                    *errInfo = OD_SDOsrvParIdx;
 8004054:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004056:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004058:	601a      	str	r2, [r3, #0]
                }
                return CO_ERROR_OD_PARAMETERS;
 800405a:	f06f 030b 	mvn.w	r3, #11
 800405e:	e05d      	b.n	800411c <CO_SDOserver_init+0x228>
            }

            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2b00      	cmp	r3, #0
 8004064:	db05      	blt.n	8004072 <CO_SDOserver_init+0x17e>
                                       ? (uint16_t)(COB_IDClientToServer32 & 0x7FFU)
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 800406a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800406e:	b29b      	uxth	r3, r3
 8004070:	e000      	b.n	8004074 <CO_SDOserver_init+0x180>
 8004072:	2300      	movs	r3, #0
 8004074:	84fb      	strh	r3, [r7, #38]	@ 0x26
                                       : 0U;
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b00      	cmp	r3, #0
 800407a:	db05      	blt.n	8004088 <CO_SDOserver_init+0x194>
                                       ? (uint16_t)(COB_IDServerToClient32 & 0x7FFU)
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 8004080:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004084:	b29b      	uxth	r3, r3
 8004086:	e000      	b.n	800408a <CO_SDOserver_init+0x196>
 8004088:	2300      	movs	r3, #0
 800408a:	84bb      	strh	r3, [r7, #36]	@ 0x24
                                       : 0U;

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
            SDO->OD_1200_extension.object = SDO;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	659a      	str	r2, [r3, #88]	@ 0x58
            SDO->OD_1200_extension.read = OD_readOriginal;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4a23      	ldr	r2, [pc, #140]	@ (8004124 <CO_SDOserver_init+0x230>)
 8004096:	65da      	str	r2, [r3, #92]	@ 0x5c
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4a23      	ldr	r2, [pc, #140]	@ (8004128 <CO_SDOserver_init+0x234>)
 800409c:	661a      	str	r2, [r3, #96]	@ 0x60
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar, &SDO->OD_1200_extension);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3358      	adds	r3, #88	@ 0x58
 80040a2:	4619      	mov	r1, r3
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff fd1c 	bl	8003ae2 <OD_extension_init>
 80040aa:	4603      	mov	r3, r0
 80040ac:	77bb      	strb	r3, [r7, #30]
            if (odRetE != ODR_OK) {
 80040ae:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00b      	beq.n	80040ce <CO_SDOserver_init+0x1da>
                if (errInfo != NULL) {
 80040b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <CO_SDOserver_init+0x1ce>
                    *errInfo = OD_SDOsrvParIdx;
 80040bc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80040be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040c0:	601a      	str	r2, [r3, #0]
                }
                return CO_ERROR_OD_PARAMETERS;
 80040c2:	f06f 030b 	mvn.w	r3, #11
 80040c6:	e029      	b.n	800411c <CO_SDOserver_init+0x228>
            }
#endif
        } else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 80040c8:	f04f 33ff 	mov.w	r3, #4294967295
 80040cc:	e026      	b.n	800411c <CO_SDOserver_init+0x228>
                   && (OD_SDOsrvParIdx <= ((uint16_t)OD_H1200_SDO_SERVER_1_PARAM + 0x7FU))) {
 80040ce:	bf00      	nop
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* store the parameters and configure CANrx and CANtx */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SDO->CANdevRx = CANdevRx;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040da:	649a      	str	r2, [r3, #72]	@ 0x48
    SDO->CANdevRxIdx = CANdevRxIdx;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80040e0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    SDO->CANdevTxIdx = CANdevTxIdx;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80040ea:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	651a      	str	r2, [r3, #80]	@ 0x50
    SDO->COB_IDServerToClient = 0;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	655a      	str	r2, [r3, #84]	@ 0x54
#endif
    SDO->CANdevTx = CANdevTx;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040fe:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO, CANdevRx, CANdevRxIdx, CANdevTxIdx, CanId_ClientToServer,
 8004100:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004102:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004104:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 8004108:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 800410a:	9201      	str	r2, [sp, #4]
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	4603      	mov	r3, r0
 8004110:	460a      	mov	r2, r1
 8004112:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f7ff fd6f 	bl	8003bf8 <CO_SDOserver_init_canRxTx>
 800411a:	4603      	mov	r3, r0
                                     CanId_ServerToClient);
}
 800411c:	4618      	mov	r0, r3
 800411e:	3728      	adds	r7, #40	@ 0x28
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	080019d3 	.word	0x080019d3
 8004128:	08003cd1 	.word	0x08003cd1

0800412c <validateAndWriteToOD>:
 * @param crcOperation 0=none, 1=calculate, 2=calculate and compare
 * @parma crcClient crc checksum to campare with
 *
 * Returns true on success, otherwise write also abortCode and sets state to CO_SDO_ST_ABORT */
static bool_t
validateAndWriteToOD(CO_SDOserver_t* SDO, CO_SDO_abortCode_t* abortCode, uint8_t crcOperation, uint16_t crcClient) {
 800412c:	b590      	push	{r4, r7, lr}
 800412e:	b08b      	sub	sp, #44	@ 0x2c
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	4611      	mov	r1, r2
 8004138:	461a      	mov	r2, r3
 800413a:	460b      	mov	r3, r1
 800413c:	71fb      	strb	r3, [r7, #7]
 800413e:	4613      	mov	r3, r2
 8004140:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004148:	627b      	str	r3, [r7, #36]	@ 0x24

    if (SDO->finished) {
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 8082 	beq.w	8004258 <validateAndWriteToOD+0x12c>
        /* Verify if size of data downloaded matches size indicated. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran != SDO->sizeInd)) {
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004158:	2b00      	cmp	r3, #0
 800415a:	d015      	beq.n	8004188 <validateAndWriteToOD+0x5c>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004164:	429a      	cmp	r2, r3
 8004166:	d00f      	beq.n	8004188 <validateAndWriteToOD+0x5c>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004170:	429a      	cmp	r2, r3
 8004172:	d901      	bls.n	8004178 <validateAndWriteToOD+0x4c>
 8004174:	4a73      	ldr	r2, [pc, #460]	@ (8004344 <validateAndWriteToOD+0x218>)
 8004176:	e000      	b.n	800417a <validateAndWriteToOD+0x4e>
 8004178:	4a73      	ldr	r2, [pc, #460]	@ (8004348 <validateAndWriteToOD+0x21c>)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	751a      	strb	r2, [r3, #20]
            return false;
 8004184:	2300      	movs	r3, #0
 8004186:	e0d8      	b.n	800433a <validateAndWriteToOD+0x20e>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	623b      	str	r3, [r7, #32]

        /* If dataType is string, then size of data downloaded may be shorter than size of the
         * OD data buffer. If so, add two zero bytes to terminate (unicode) string. Shorten
         * also OD data size, (temporary, send information about EOF into OD_IO.write) */
        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004194:	b25b      	sxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	da42      	bge.n	8004220 <validateAndWriteToOD+0xf4>
            && ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd))
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d004      	beq.n	80041aa <validateAndWriteToOD+0x7e>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041a4:	6a3a      	ldr	r2, [r7, #32]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d93a      	bls.n	8004220 <validateAndWriteToOD+0xf4>
            && ((SDO->bufOffsetWr + 2U) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE)) {
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041b0:	3302      	adds	r3, #2
 80041b2:	2b20      	cmp	r3, #32
 80041b4:	d834      	bhi.n	8004220 <validateAndWriteToOD+0xf4>
            SDO->buf[SDO->bufOffsetWr] = 0;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4413      	add	r3, r2
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            SDO->bufOffsetWr++;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            SDO->sizeTran++;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	66da      	str	r2, [r3, #108]	@ 0x6c
            if ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd)) {
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d004      	beq.n	80041ee <validateAndWriteToOD+0xc2>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041e8:	6a3a      	ldr	r2, [r7, #32]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d913      	bls.n	8004216 <validateAndWriteToOD+0xea>
                SDO->buf[SDO->bufOffsetWr] = 0;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4413      	add	r3, r2
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                SDO->bufOffsetWr++;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                SDO->sizeTran++;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	66da      	str	r2, [r3, #108]	@ 0x6c
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	621a      	str	r2, [r3, #32]
 800421e:	e02d      	b.n	800427c <validateAndWriteToOD+0x150>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check. */
        else if (sizeInOd == 0U) {
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d104      	bne.n	8004230 <validateAndWriteToOD+0x104>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	621a      	str	r2, [r3, #32]
 800422e:	e025      	b.n	800427c <validateAndWriteToOD+0x150>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004234:	6a3a      	ldr	r2, [r7, #32]
 8004236:	429a      	cmp	r2, r3
 8004238:	d020      	beq.n	800427c <validateAndWriteToOD+0x150>
            *abortCode = (SDO->sizeTran > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800423e:	6a3a      	ldr	r2, [r7, #32]
 8004240:	429a      	cmp	r2, r3
 8004242:	d201      	bcs.n	8004248 <validateAndWriteToOD+0x11c>
 8004244:	4a3f      	ldr	r2, [pc, #252]	@ (8004344 <validateAndWriteToOD+0x218>)
 8004246:	e000      	b.n	800424a <validateAndWriteToOD+0x11e>
 8004248:	4a3f      	ldr	r2, [pc, #252]	@ (8004348 <validateAndWriteToOD+0x21c>)
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	751a      	strb	r2, [r3, #20]
            return false;
 8004254:	2300      	movs	r3, #0
 8004256:	e070      	b.n	800433a <validateAndWriteToOD+0x20e>
        } else { /* MISRA C 2004 14.10 */
        }
    } else {
        /* Verify if size of data downloaded is not too large. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran > SDO->sizeInd)) {
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00d      	beq.n	800427c <validateAndWriteToOD+0x150>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004268:	429a      	cmp	r2, r3
 800426a:	d907      	bls.n	800427c <validateAndWriteToOD+0x150>
            *abortCode = CO_SDO_AB_DATA_LONG;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4a35      	ldr	r2, [pc, #212]	@ (8004344 <validateAndWriteToOD+0x218>)
 8004270:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	751a      	strb	r2, [r3, #20]
            return false;
 8004278:	2300      	movs	r3, #0
 800427a:	e05e      	b.n	800433a <validateAndWriteToOD+0x20e>
    (void)crcOperation;
    (void)crcClient;
    (void)bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 800427c:	2300      	movs	r3, #0
 800427e:	613b      	str	r3, [r7, #16]

    CO_LOCK_OD(SDO->CANdevTx);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004284:	f3ef 8210 	mrs	r2, PRIMASK
 8004288:	617a      	str	r2, [r7, #20]
  return(result);
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 800428e:	b672      	cpsid	i
}
 8004290:	bf00      	nop
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf, SDO->bufOffsetWr, &countWritten);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f103 0018 	add.w	r0, r3, #24
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80042a8:	f107 0310 	add.w	r3, r7, #16
 80042ac:	47a0      	blx	r4
 80042ae:	4603      	mov	r3, r0
 80042b0:	77fb      	strb	r3, [r7, #31]
    CO_UNLOCK_OD(SDO->CANdevTx);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	f383 8810 	msr	PRIMASK, r3
}
 80042c0:	bf00      	nop

    SDO->bufOffsetWr = 0;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* verify write error value */
    if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 80042ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d011      	beq.n	80042f6 <validateAndWriteToOD+0x1ca>
 80042d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80042d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042da:	d00c      	beq.n	80042f6 <validateAndWriteToOD+0x1ca>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80042dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fd fdbb 	bl	8001e5c <OD_getSDOabCode>
 80042e6:	4602      	mov	r2, r0
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2201      	movs	r2, #1
 80042f0:	751a      	strb	r2, [r3, #20]
        return false;
 80042f2:	2300      	movs	r3, #0
 80042f4:	e021      	b.n	800433a <validateAndWriteToOD+0x20e>
    } else if (SDO->finished && (odRet == ODR_PARTIAL)) {
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00c      	beq.n	8004318 <validateAndWriteToOD+0x1ec>
 80042fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004306:	d107      	bne.n	8004318 <validateAndWriteToOD+0x1ec>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4a0f      	ldr	r2, [pc, #60]	@ (8004348 <validateAndWriteToOD+0x21c>)
 800430c:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	751a      	strb	r2, [r3, #20]
        return false;
 8004314:	2300      	movs	r3, #0
 8004316:	e010      	b.n	800433a <validateAndWriteToOD+0x20e>
    } else if (!SDO->finished && (odRet == ODR_OK)) {
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10b      	bne.n	8004338 <validateAndWriteToOD+0x20c>
 8004320:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d107      	bne.n	8004338 <validateAndWriteToOD+0x20c>
        /* OD variable was written completely, but SDO download still has data */
        *abortCode = CO_SDO_AB_DATA_LONG;
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4a06      	ldr	r2, [pc, #24]	@ (8004344 <validateAndWriteToOD+0x218>)
 800432c:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	751a      	strb	r2, [r3, #20]
        return false;
 8004334:	2300      	movs	r3, #0
 8004336:	e000      	b.n	800433a <validateAndWriteToOD+0x20e>
    } else { /* MISRA C 2004 14.10 */
    }

    return true;
 8004338:	2301      	movs	r3, #1
}
 800433a:	4618      	mov	r0, r3
 800433c:	372c      	adds	r7, #44	@ 0x2c
 800433e:	46bd      	mov	sp, r7
 8004340:	bd90      	pop	{r4, r7, pc}
 8004342:	bf00      	nop
 8004344:	06070012 	.word	0x06070012
 8004348:	06070013 	.word	0x06070013

0800434c <readFromOd>:
 * @parma countMinimum if data size in buffer is less than countMinimum, then buffer is refilled from OD variable
 * @param calculateCrc if true, crc is calculated
 *
 * Returns true on success, otherwise write also abortCode and sets state to CO_SDO_ST_ABORT */
static bool_t
readFromOd(CO_SDOserver_t* SDO, CO_SDO_abortCode_t* abortCode, OD_size_t countMinimum, bool_t calculateCrc) {
 800434c:	b590      	push	{r4, r7, lr}
 800434e:	b08d      	sub	sp, #52	@ 0x34
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) == 0
    (void)calculateCrc; /* may be unused */
#endif
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	627b      	str	r3, [r7, #36]	@ 0x24

    if (!SDO->finished && (countRemain < countMinimum)) {
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800436e:	2b00      	cmp	r3, #0
 8004370:	f040 80ab 	bne.w	80044ca <readFromOd+0x17e>
 8004374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	429a      	cmp	r2, r3
 800437a:	f080 80a6 	bcs.w	80044ca <readFromOd+0x17e>
        /* first move remaining data to the start of the buffer */
        (void)memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004390:	4413      	add	r3, r2
 8004392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004394:	4619      	mov	r1, r3
 8004396:	f006 fe7f 	bl	800b098 <memmove>
        SDO->bufOffsetRd = 0;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        SDO->bufOffsetWr = countRemain;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043a6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	f1c3 0320 	rsb	r3, r3, #32
 80043b0:	623b      	str	r3, [r7, #32]

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	613b      	str	r3, [r7, #16]

        CO_LOCK_OD(SDO->CANdevTx);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ba:	f3ef 8210 	mrs	r2, PRIMASK
 80043be:	617a      	str	r2, [r7, #20]
  return(result);
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80043c4:	b672      	cpsid	i
}
 80043c6:	bf00      	nop
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, &SDO->buf[countRemain], countRdRequest, &countRd);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f103 0018 	add.w	r0, r3, #24
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	3380      	adds	r3, #128	@ 0x80
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	18d1      	adds	r1, r2, r3
 80043da:	f107 0310 	add.w	r3, r7, #16
 80043de:	6a3a      	ldr	r2, [r7, #32]
 80043e0:	47a0      	blx	r4
 80043e2:	4603      	mov	r3, r0
 80043e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        CO_UNLOCK_OD(SDO->CANdevTx);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	f383 8810 	msr	PRIMASK, r3
}
 80043f6:	bf00      	nop

        if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 80043f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d011      	beq.n	8004424 <readFromOd+0xd8>
 8004400:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004408:	d00c      	beq.n	8004424 <readFromOd+0xd8>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 800440a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800440e:	4618      	mov	r0, r3
 8004410:	f7fd fd24 	bl	8001e5c <OD_getSDOabCode>
 8004414:	4602      	mov	r2, r0
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2201      	movs	r2, #1
 800441e:	751a      	strb	r2, [r3, #20]
            return false;
 8004420:	2300      	movs	r3, #0
 8004422:	e053      	b.n	80044cc <readFromOd+0x180>
        }

        /* if data is string, send only data up to null termination */
        OD_size_t lastRd = countRd + countRemain;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004428:	4413      	add	r3, r2
 800442a:	61fb      	str	r3, [r7, #28]
        if ((countRd > 0U) && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)) {
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d027      	beq.n	8004482 <readFromOd+0x136>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004438:	b25b      	sxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	da21      	bge.n	8004482 <readFromOd+0x136>
            SDO->buf[lastRd] = 0; /* (SDO->buf is one byte larger) */
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	4413      	add	r3, r2
 8004444:	3380      	adds	r3, #128	@ 0x80
 8004446:	2200      	movs	r2, #0
 8004448:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char*)&SDO->buf[countRemain]);
 800444a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444c:	3380      	adds	r3, #128	@ 0x80
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4413      	add	r3, r2
 8004452:	4618      	mov	r0, r3
 8004454:	f7fb fef4 	bl	8000240 <strlen>
 8004458:	62b8      	str	r0, [r7, #40]	@ 0x28
            if (countStr == 0U) {
 800445a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <readFromOd+0x118>
                countStr = 1;
 8004460:	2301      	movs	r3, #1
 8004462:	62bb      	str	r3, [r7, #40]	@ 0x28
            } /* zero length is not allowed */
            if (countStr < countRd) {
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004468:	429a      	cmp	r2, r3
 800446a:	d20a      	bcs.n	8004482 <readFromOd+0x136>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 800446c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446e:	613b      	str	r3, [r7, #16]
                odRet = ODR_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	441a      	add	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004486:	441a      	add	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        if ((SDO->bufOffsetWr == 0U) || (odRet == ODR_PARTIAL)) {
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d004      	beq.n	80044a2 <readFromOd+0x156>
 8004498:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800449c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a0:	d110      	bne.n	80044c4 <readFromOd+0x178>
            SDO->finished = false;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	675a      	str	r2, [r3, #116]	@ 0x74
            if (SDO->bufOffsetWr < countMinimum) {
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d90a      	bls.n	80044ca <readFromOd+0x17e>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4a07      	ldr	r2, [pc, #28]	@ (80044d4 <readFromOd+0x188>)
 80044b8:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	751a      	strb	r2, [r3, #20]
                return false;
 80044c0:	2300      	movs	r3, #0
 80044c2:	e003      	b.n	80044cc <readFromOd+0x180>
            }
        } else {
            SDO->finished = true;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2201      	movs	r2, #1
 80044c8:	675a      	str	r2, [r3, #116]	@ 0x74
        if (calculateCrc && SDO->block_crcEnabled) {
            SDO->block_crc = crc16_ccitt(&SDO->buf[countRemain], countRd, SDO->block_crc);
        }
#endif
    }
    return true;
 80044ca:	2301      	movs	r3, #1
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3734      	adds	r7, #52	@ 0x34
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd90      	pop	{r4, r7, pc}
 80044d4:	06040047 	.word	0x06040047

080044d8 <CO_SDOserver_process>:
#endif

CO_SDO_return_t
CO_SDOserver_process(CO_SDOserver_t* SDO, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                     uint32_t* timerNext_us) {
 80044d8:	b590      	push	{r4, r7, lr}
 80044da:	b09b      	sub	sp, #108	@ 0x6c
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d103      	bne.n	80044f4 <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 80044ec:	f06f 0301 	mvn.w	r3, #1
 80044f0:	f000 bd04 	b.w	8004efc <CO_SDOserver_process+0xa24>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 80044fa:	2300      	movs	r3, #0
 80044fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004502:	2b00      	cmp	r3, #0
 8004504:	bf14      	ite	ne
 8004506:	2301      	movne	r3, #1
 8004508:	2300      	moveq	r3, #0
 800450a:	b2db      	uxtb	r3, r3
 800450c:	657b      	str	r3, [r7, #84]	@ 0x54

    if ((SDO->state == CO_SDO_ST_IDLE) && SDO->valid && !isNew) {
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	7d1b      	ldrb	r3, [r3, #20]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10a      	bne.n	800452e <CO_SDOserver_process+0x56>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d006      	beq.n	800452e <CO_SDOserver_process+0x56>
 8004520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004522:	2b00      	cmp	r3, #0
 8004524:	d103      	bne.n	800452e <CO_SDOserver_process+0x56>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 8004526:	2300      	movs	r3, #0
 8004528:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800452c:	e2db      	b.n	8004ae6 <CO_SDOserver_process+0x60e>
    } else if (!NMTisPreOrOperational || !SDO->valid) {
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <CO_SDOserver_process+0x64>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d109      	bne.n	8004550 <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	63da      	str	r2, [r3, #60]	@ 0x3c
        ret = CO_SDO_RT_ok_communicationEnd;
 8004548:	2300      	movs	r3, #0
 800454a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800454e:	e2ca      	b.n	8004ae6 <CO_SDOserver_process+0x60e>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 8004550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 82c7 	beq.w	8004ae6 <CO_SDOserver_process+0x60e>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	7d1b      	ldrb	r3, [r3, #20]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	f040 80cd 	bne.w	80046fe <CO_SDOserver_process+0x226>
            bool_t upload = false;
 8004564:	2300      	movs	r3, #0
 8004566:	663b      	str	r3, [r7, #96]	@ 0x60

            if ((SDO->CANrxData[0] & 0xF0U) == 0x20U) {
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800456e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004572:	2b20      	cmp	r3, #32
 8004574:	d103      	bne.n	800457e <CO_SDOserver_process+0xa6>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2211      	movs	r2, #17
 800457a:	751a      	strb	r2, [r3, #20]
 800457c:	e00f      	b.n	800459e <CO_SDOserver_process+0xc6>
            } else if (SDO->CANrxData[0] == 0x40U) {
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004584:	2b40      	cmp	r3, #64	@ 0x40
 8004586:	d105      	bne.n	8004594 <CO_SDOserver_process+0xbc>
                upload = true;
 8004588:	2301      	movs	r3, #1
 800458a:	663b      	str	r3, [r7, #96]	@ 0x60
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2221      	movs	r2, #33	@ 0x21
 8004590:	751a      	strb	r2, [r3, #20]
 8004592:	e004      	b.n	800459e <CO_SDOserver_process+0xc6>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 8004594:	4ba9      	ldr	r3, [pc, #676]	@ (800483c <CO_SDOserver_process+0x364>)
 8004596:	62fb      	str	r3, [r7, #44]	@ 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2201      	movs	r2, #1
 800459c:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 800459e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d163      	bne.n	800466c <CO_SDOserver_process+0x194>
                ODR_t odRet;
                SDO->index = (uint16_t)((((uint16_t)SDO->CANrxData[2]) << 8) | SDO->CANrxData[1]);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045aa:	b21b      	sxth	r3, r3
 80045ac:	021b      	lsls	r3, r3, #8
 80045ae:	b21a      	sxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045b6:	b21b      	sxth	r3, r3
 80045b8:	4313      	orrs	r3, r2
 80045ba:	b21b      	sxth	r3, r3
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	871a      	strh	r2, [r3, #56]	@ 0x38
                SDO->subIndex = SDO->CANrxData[3];
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 2043 	ldrb.w	r2, [r3, #67]	@ 0x43
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex, &SDO->OD_IO, false);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80045d6:	4619      	mov	r1, r3
 80045d8:	4610      	mov	r0, r2
 80045da:	f7fd fadb 	bl	8001b94 <OD_find>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f893 103a 	ldrb.w	r1, [r3, #58]	@ 0x3a
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f103 0218 	add.w	r2, r3, #24
 80045ea:	2300      	movs	r3, #0
 80045ec:	f7fd fb2e 	bl	8001c4c <OD_getSub>
 80045f0:	4603      	mov	r3, r0
 80045f2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
                if (odRet != ODR_OK) {
 80045f6:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <CO_SDOserver_process+0x13c>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80045fe:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8004602:	4618      	mov	r0, r3
 8004604:	f7fd fc2a 	bl	8001e5c <OD_getSDOabCode>
 8004608:	4603      	mov	r3, r0
 800460a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2201      	movs	r2, #1
 8004610:	751a      	strb	r2, [r3, #20]
 8004612:	e02b      	b.n	800466c <CO_SDOserver_process+0x194>
                } else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_RW) == 0U) {
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d105      	bne.n	800462e <CO_SDOserver_process+0x156>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 8004622:	4b87      	ldr	r3, [pc, #540]	@ (8004840 <CO_SDOserver_process+0x368>)
 8004624:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2201      	movs	r2, #1
 800462a:	751a      	strb	r2, [r3, #20]
 800462c:	e01e      	b.n	800466c <CO_SDOserver_process+0x194>
                    } else if (upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_R) == 0U)) {
 800462e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00c      	beq.n	800464e <CO_SDOserver_process+0x176>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d105      	bne.n	800464e <CO_SDOserver_process+0x176>
                        abortCode = CO_SDO_AB_WRITEONLY;
 8004642:	4b80      	ldr	r3, [pc, #512]	@ (8004844 <CO_SDOserver_process+0x36c>)
 8004644:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	751a      	strb	r2, [r3, #20]
 800464c:	e00e      	b.n	800466c <CO_SDOserver_process+0x194>
                    } else if (!upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_W) == 0U)) {
 800464e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10b      	bne.n	800466c <CO_SDOserver_process+0x194>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d104      	bne.n	800466c <CO_SDOserver_process+0x194>
                        abortCode = CO_SDO_AB_READONLY;
 8004662:	4b79      	ldr	r3, [pc, #484]	@ (8004848 <CO_SDOserver_process+0x370>)
 8004664:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2201      	movs	r2, #1
 800466a:	751a      	strb	r2, [r3, #20]
                }
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            /* load data from object dictionary, if upload and no error */
            if (upload && (abortCode == CO_SDO_AB_NONE)) {
 800466c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800466e:	2b00      	cmp	r3, #0
 8004670:	d045      	beq.n	80046fe <CO_SDOserver_process+0x226>
 8004672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004674:	2b00      	cmp	r3, #0
 8004676:	d142      	bne.n	80046fe <CO_SDOserver_process+0x226>
                SDO->bufOffsetRd = 0;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                SDO->bufOffsetWr = 0;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                SDO->sizeTran = 0;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	66da      	str	r2, [r3, #108]	@ 0x6c
                SDO->finished = false;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	675a      	str	r2, [r3, #116]	@ 0x74

                if (readFromOd(SDO, &abortCode, 7, false)) {
 8004694:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8004698:	2300      	movs	r3, #0
 800469a:	2207      	movs	r2, #7
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f7ff fe55 	bl	800434c <readFromOd>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d02a      	beq.n	80046fe <CO_SDOserver_process+0x226>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d01a      	beq.n	80046e6 <CO_SDOserver_process+0x20e>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a1a      	ldr	r2, [r3, #32]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	669a      	str	r2, [r3, #104]	@ 0x68

                        if (SDO->sizeInd == 0U) {
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d105      	bne.n	80046cc <CO_SDOserver_process+0x1f4>
                            SDO->sizeInd = SDO->bufOffsetWr;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	669a      	str	r2, [r3, #104]	@ 0x68
 80046ca:	e018      	b.n	80046fe <CO_SDOserver_process+0x226>
                        } else if (SDO->sizeInd != SDO->bufOffsetWr) {
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d011      	beq.n	80046fe <CO_SDOserver_process+0x226>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 80046da:	4b5c      	ldr	r3, [pc, #368]	@ (800484c <CO_SDOserver_process+0x374>)
 80046dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	751a      	strb	r2, [r3, #20]
 80046e4:	e00b      	b.n	80046fe <CO_SDOserver_process+0x226>
                        } else { /* MISRA C 2004 14.10 */
                        }
                    } else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046ec:	b25b      	sxtb	r3, r3
                                           ? SDO->OD_IO.stream.dataLength
                                           : 0U;
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	db02      	blt.n	80046f8 <CO_SDOserver_process+0x220>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	e000      	b.n	80046fa <CO_SDOserver_process+0x222>
 80046f8:	2300      	movs	r3, #0
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	6693      	str	r3, [r2, #104]	@ 0x68
                }
            }
#endif    /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        bool isOKstate = (SDO->state != CO_SDO_ST_IDLE);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	7d1b      	ldrb	r3, [r3, #20]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	bf14      	ite	ne
 8004708:	2301      	movne	r3, #1
 800470a:	2300      	moveq	r3, #0
 800470c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
        isOKstate = (SDO->state != CO_SDO_ST_ABORT) && isOKstate;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	7d1b      	ldrb	r3, [r3, #20]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b01      	cmp	r3, #1
 8004718:	d005      	beq.n	8004726 <CO_SDOserver_process+0x24e>
 800471a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <CO_SDOserver_process+0x24e>
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <CO_SDOserver_process+0x250>
 8004726:	2300      	movs	r3, #0
 8004728:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800472c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
        if (isOKstate) {
 8004738:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 81ca 	beq.w	8004ad6 <CO_SDOserver_process+0x5fe>
            switch (SDO->state) {
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	7d1b      	ldrb	r3, [r3, #20]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	3b11      	subs	r3, #17
 800474a:	2b12      	cmp	r3, #18
 800474c:	f200 81b4 	bhi.w	8004ab8 <CO_SDOserver_process+0x5e0>
 8004750:	a201      	add	r2, pc, #4	@ (adr r2, 8004758 <CO_SDOserver_process+0x280>)
 8004752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004756:	bf00      	nop
 8004758:	080047a5 	.word	0x080047a5
 800475c:	08004ab9 	.word	0x08004ab9
 8004760:	08004971 	.word	0x08004971
 8004764:	08004ab9 	.word	0x08004ab9
 8004768:	08004ab9 	.word	0x08004ab9
 800476c:	08004ab9 	.word	0x08004ab9
 8004770:	08004ab9 	.word	0x08004ab9
 8004774:	08004ab9 	.word	0x08004ab9
 8004778:	08004ab9 	.word	0x08004ab9
 800477c:	08004ab9 	.word	0x08004ab9
 8004780:	08004ab9 	.word	0x08004ab9
 8004784:	08004ab9 	.word	0x08004ab9
 8004788:	08004ab9 	.word	0x08004ab9
 800478c:	08004ab9 	.word	0x08004ab9
 8004790:	08004ab9 	.word	0x08004ab9
 8004794:	08004ab9 	.word	0x08004ab9
 8004798:	08004a67 	.word	0x08004a67
 800479c:	08004ab9 	.word	0x08004ab9
 80047a0:	08004a6f 	.word	0x08004a6f
                case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
                    if ((SDO->CANrxData[0] & 0x02U) != 0U) {
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 80a4 	beq.w	80048fc <CO_SDOserver_process+0x424>
                        /* Expedited transfer, max 4 bytes of data */

                        /* Size of OD variable (>0 if indicated) */
                        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	647b      	str	r3, [r7, #68]	@ 0x44

                        /* Get SDO data size (indicated by SDO client or get from OD) */
                        OD_size_t dataSizeToWrite = 4;
 80047ba:	2304      	movs	r3, #4
 80047bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <CO_SDOserver_process+0x30a>
                            dataSizeToWrite -= ((OD_size_t)(SDO->CANrxData[0]) >> 2) & 0x03U;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047d2:	089b      	lsrs	r3, r3, #2
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047e0:	e007      	b.n	80047f2 <CO_SDOserver_process+0x31a>
                        } else if ((sizeInOd > 0U) && (sizeInOd < 4U)) {
 80047e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d004      	beq.n	80047f2 <CO_SDOserver_process+0x31a>
 80047e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	d801      	bhi.n	80047f2 <CO_SDOserver_process+0x31a>
                            dataSizeToWrite = sizeInOd;
 80047ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* copy data to the temp buffer, swap data if necessary */
                        uint8_t buf[6] = {0};
 80047f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	809a      	strh	r2, [r3, #4]
                        (void)memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 8004802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004806:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004808:	4618      	mov	r0, r3
 800480a:	f006 fcea 	bl	800b1e2 <memcpy>
#endif

                        /* If dataType is string, then size of data downloaded may be shorter as size of
                         * the OD data buffer. If so, add two zero bytes to terminate (unicode) string.
                         * Shorten also OD data size, (temporary, send information about EOF into OD_IO.write) */
                        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004814:	b25b      	sxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	da22      	bge.n	8004860 <CO_SDOserver_process+0x388>
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 800481a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <CO_SDOserver_process+0x350>
 8004820:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004822:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004824:	429a      	cmp	r2, r3
 8004826:	d21b      	bcs.n	8004860 <CO_SDOserver_process+0x388>
                            OD_size_t delta = sizeInOd - dataSizeToWrite;
 8004828:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800482a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	643b      	str	r3, [r7, #64]	@ 0x40
                            dataSizeToWrite += (delta == 1U) ? 1U : 2U;
 8004830:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004832:	2b01      	cmp	r3, #1
 8004834:	d10c      	bne.n	8004850 <CO_SDOserver_process+0x378>
 8004836:	2301      	movs	r3, #1
 8004838:	e00b      	b.n	8004852 <CO_SDOserver_process+0x37a>
 800483a:	bf00      	nop
 800483c:	05040001 	.word	0x05040001
 8004840:	06010000 	.word	0x06010000
 8004844:	06010001 	.word	0x06010001
 8004848:	06010002 	.word	0x06010002
 800484c:	06040047 	.word	0x06040047
 8004850:	2302      	movs	r3, #2
 8004852:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004854:	4413      	add	r3, r2
 8004856:	65fb      	str	r3, [r7, #92]	@ 0x5c
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800485c:	621a      	str	r2, [r3, #32]
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 800485e:	e016      	b.n	800488e <CO_SDOserver_process+0x3b6>
                        } else if (sizeInOd == 0U) {
 8004860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004862:	2b00      	cmp	r3, #0
 8004864:	d103      	bne.n	800486e <CO_SDOserver_process+0x396>
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800486a:	621a      	str	r2, [r3, #32]
 800486c:	e00f      	b.n	800488e <CO_SDOserver_process+0x3b6>
                        }
                        /* Verify if size of data downloaded matches data size in OD. */
                        else if (dataSizeToWrite != sizeInOd) {
 800486e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004872:	429a      	cmp	r2, r3
 8004874:	d00b      	beq.n	800488e <CO_SDOserver_process+0x3b6>
                            abortCode = (dataSizeToWrite > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8004876:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800487a:	429a      	cmp	r2, r3
 800487c:	d901      	bls.n	8004882 <CO_SDOserver_process+0x3aa>
 800487e:	4b91      	ldr	r3, [pc, #580]	@ (8004ac4 <CO_SDOserver_process+0x5ec>)
 8004880:	e000      	b.n	8004884 <CO_SDOserver_process+0x3ac>
 8004882:	4b91      	ldr	r3, [pc, #580]	@ (8004ac8 <CO_SDOserver_process+0x5f0>)
 8004884:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2201      	movs	r2, #1
 800488a:	751a      	strb	r2, [r3, #20]
                            break;
 800488c:	e123      	b.n	8004ad6 <CO_SDOserver_process+0x5fe>
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* Copy data */
                        OD_size_t countWritten = 0;
 800488e:	2300      	movs	r3, #0
 8004890:	623b      	str	r3, [r7, #32]

                        CO_LOCK_OD(SDO->CANdevTx);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004896:	f3ef 8210 	mrs	r2, PRIMASK
 800489a:	637a      	str	r2, [r7, #52]	@ 0x34
  return(result);
 800489c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800489e:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80048a0:	b672      	cpsid	i
}
 80048a2:	bf00      	nop
                        ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf, dataSizeToWrite, &countWritten);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f103 0018 	add.w	r0, r3, #24
 80048ae:	f107 0320 	add.w	r3, r7, #32
 80048b2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80048b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80048b8:	47a0      	blx	r4
 80048ba:	4603      	mov	r3, r0
 80048bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                        CO_UNLOCK_OD(SDO->CANdevTx);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ca:	f383 8810 	msr	PRIMASK, r3
}
 80048ce:	bf00      	nop

                        if (odRet != ODR_OK) {
 80048d0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <CO_SDOserver_process+0x416>
                            abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80048d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fd fabd 	bl	8001e5c <OD_getSDOabCode>
 80048e2:	4603      	mov	r3, r0
 80048e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2201      	movs	r2, #1
 80048ea:	751a      	strb	r2, [r3, #20]
                            break;
 80048ec:	e0f3      	b.n	8004ad6 <CO_SDOserver_process+0x5fe>
                        } else {
                            SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2212      	movs	r2, #18
 80048f2:	751a      	strb	r2, [r3, #20]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                            SDO->finished = true;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2201      	movs	r2, #1
 80048f8:	675a      	str	r2, [r3, #116]	@ 0x74
#else
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                        SDO->state = CO_SDO_ST_ABORT;
#endif
                    }
                    break;
 80048fa:	e0ec      	b.n	8004ad6 <CO_SDOserver_process+0x5fe>
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d028      	beq.n	800495c <CO_SDOserver_process+0x484>
                            OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	64bb      	str	r3, [r7, #72]	@ 0x48
                            (void)memcpy((void*)(&size), (const void*)(&SDO->CANrxData[4]), sizeof(size));
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3344      	adds	r3, #68	@ 0x44
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	61fb      	str	r3, [r7, #28]
                            SDO->sizeInd = CO_SWAP_32(size);
 8004918:	69fa      	ldr	r2, [r7, #28]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	669a      	str	r2, [r3, #104]	@ 0x68
                            if (sizeInOd > 0U) {
 800491e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01e      	beq.n	8004962 <CO_SDOserver_process+0x48a>
                                if (SDO->sizeInd > sizeInOd) {
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004928:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800492a:	429a      	cmp	r2, r3
 800492c:	d205      	bcs.n	800493a <CO_SDOserver_process+0x462>
                                    abortCode = CO_SDO_AB_DATA_LONG;
 800492e:	4b65      	ldr	r3, [pc, #404]	@ (8004ac4 <CO_SDOserver_process+0x5ec>)
 8004930:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	751a      	strb	r2, [r3, #20]
                                    break;
 8004938:	e0cd      	b.n	8004ad6 <CO_SDOserver_process+0x5fe>
                                else if ((SDO->sizeInd < sizeInOd)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800493e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004940:	429a      	cmp	r2, r3
 8004942:	d90e      	bls.n	8004962 <CO_SDOserver_process+0x48a>
                                         && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)) {
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800494a:	b25b      	sxtb	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	db08      	blt.n	8004962 <CO_SDOserver_process+0x48a>
                                    abortCode = CO_SDO_AB_DATA_SHORT;
 8004950:	4b5d      	ldr	r3, [pc, #372]	@ (8004ac8 <CO_SDOserver_process+0x5f0>)
 8004952:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2201      	movs	r2, #1
 8004958:	751a      	strb	r2, [r3, #20]
                                    break;
 800495a:	e0bc      	b.n	8004ad6 <CO_SDOserver_process+0x5fe>
                            SDO->sizeInd = 0;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	669a      	str	r2, [r3, #104]	@ 0x68
                        SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2212      	movs	r2, #18
 8004966:	751a      	strb	r2, [r3, #20]
                        SDO->finished = false;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	675a      	str	r2, [r3, #116]	@ 0x74
                    break;
 800496e:	e0b2      	b.n	8004ad6 <CO_SDOserver_process+0x5fe>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xE0U) == 0x00U) {
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004976:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d16d      	bne.n	8004a5a <CO_SDOserver_process+0x582>
                        SDO->finished = (SDO->CANrxData[0] & 0x01U) != 0U;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b00      	cmp	r3, #0
 800498a:	bf14      	ite	ne
 800498c:	2301      	movne	r3, #1
 800498e:	2300      	moveq	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	461a      	mov	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	675a      	str	r2, [r3, #116]	@ 0x74

                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                        if (toggle != SDO->toggle) {
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80049ac:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d005      	beq.n	80049c0 <CO_SDOserver_process+0x4e8>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 80049b4:	4b45      	ldr	r3, [pc, #276]	@ (8004acc <CO_SDOserver_process+0x5f4>)
 80049b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2201      	movs	r2, #1
 80049bc:	751a      	strb	r2, [r3, #20]
                            break;
 80049be:	e08a      	b.n	8004ad6 <CO_SDOserver_process+0x5fe>
                        }

                        /* get data size and write data to the buffer */
                        OD_size_t count = (OD_size_t)(7U - (((OD_size_t)(SDO->CANrxData[0]) >> 1) & 0x07U));
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049c6:	085b      	lsrs	r3, r3, #1
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	43db      	mvns	r3, r3
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        (void)memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80049de:	18d0      	adds	r0, r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3341      	adds	r3, #65	@ 0x41
 80049e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049e6:	4619      	mov	r1, r3
 80049e8:	f006 fbfb 	bl	800b1e2 <memcpy>
                        SDO->bufOffsetWr += count;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80049f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049f4:	441a      	add	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        SDO->sizeTran += count;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a02:	441a      	add	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	66da      	str	r2, [r3, #108]	@ 0x6c

                        /* if data size exceeds variable size, abort */
                        if ((SDO->OD_IO.stream.dataLength > 0U) && (SDO->sizeTran > SDO->OD_IO.stream.dataLength)) {
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00b      	beq.n	8004a28 <CO_SDOserver_process+0x550>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d905      	bls.n	8004a28 <CO_SDOserver_process+0x550>
                            abortCode = CO_SDO_AB_DATA_LONG;
 8004a1c:	4b29      	ldr	r3, [pc, #164]	@ (8004ac4 <CO_SDOserver_process+0x5ec>)
 8004a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2201      	movs	r2, #1
 8004a24:	751a      	strb	r2, [r3, #20]
                            break;
 8004a26:	e056      	b.n	8004ad6 <CO_SDOserver_process+0x5fe>
                        }

                        /* if necessary, empty the buffer */
                        if (SDO->finished || ((CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr) < (7U + 2U))) {
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d106      	bne.n	8004a3e <CO_SDOserver_process+0x566>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a36:	f1c3 0320 	rsb	r3, r3, #32
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d809      	bhi.n	8004a52 <CO_SDOserver_process+0x57a>
                            if (!validateAndWriteToOD(SDO, &abortCode, 0, 0)) {
 8004a3e:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8004a42:	2300      	movs	r3, #0
 8004a44:	2200      	movs	r2, #0
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f7ff fb70 	bl	800412c <validateAndWriteToOD>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d040      	beq.n	8004ad4 <CO_SDOserver_process+0x5fc>
                                break;
                            }
                        }

                        SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2214      	movs	r2, #20
 8004a56:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8004a58:	e03d      	b.n	8004ad6 <CO_SDOserver_process+0x5fe>
                        abortCode = CO_SDO_AB_CMD;
 8004a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad0 <CO_SDOserver_process+0x5f8>)
 8004a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	751a      	strb	r2, [r3, #20]
                    break;
 8004a64:	e037      	b.n	8004ad6 <CO_SDOserver_process+0x5fe>
                }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

                case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
                    SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2222      	movs	r2, #34	@ 0x22
 8004a6a:	751a      	strb	r2, [r3, #20]
                    break;
 8004a6c:	e033      	b.n	8004ad6 <CO_SDOserver_process+0x5fe>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xEFU) == 0x60U) {
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a74:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8004a78:	2b60      	cmp	r3, #96	@ 0x60
 8004a7a:	d117      	bne.n	8004aac <CO_SDOserver_process+0x5d4>
                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a82:	f003 0310 	and.w	r3, r3, #16
 8004a86:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                        if (toggle != SDO->toggle) {
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8004a90:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d005      	beq.n	8004aa4 <CO_SDOserver_process+0x5cc>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 8004a98:	4b0c      	ldr	r3, [pc, #48]	@ (8004acc <CO_SDOserver_process+0x5f4>)
 8004a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	751a      	strb	r2, [r3, #20]
                            break;
 8004aa2:	e018      	b.n	8004ad6 <CO_SDOserver_process+0x5fe>
                        }
                        SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2224      	movs	r2, #36	@ 0x24
 8004aa8:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8004aaa:	e014      	b.n	8004ad6 <CO_SDOserver_process+0x5fe>
                        abortCode = CO_SDO_AB_CMD;
 8004aac:	4b08      	ldr	r3, [pc, #32]	@ (8004ad0 <CO_SDOserver_process+0x5f8>)
 8004aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	751a      	strb	r2, [r3, #20]
                    break;
 8004ab6:	e00e      	b.n	8004ad6 <CO_SDOserver_process+0x5fe>
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ:
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */
                default: {
                    /* unknown message received */
                    abortCode = CO_SDO_AB_CMD;
 8004ab8:	4b05      	ldr	r3, [pc, #20]	@ (8004ad0 <CO_SDOserver_process+0x5f8>)
 8004aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	751a      	strb	r2, [r3, #20]
                    break;
 8004ac2:	e008      	b.n	8004ad6 <CO_SDOserver_process+0x5fe>
 8004ac4:	06070012 	.word	0x06070012
 8004ac8:	06070013 	.word	0x06070013
 8004acc:	05030000 	.word	0x05030000
 8004ad0:	05040001 	.word	0x05040001
                                break;
 8004ad4:	bf00      	nop
                }
            } /* switch (SDO->state) */
        }     /* if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT) */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
        SDO->timeoutTimer = 0;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	67da      	str	r2, [r3, #124]	@ 0x7c
#endif
        timeDifference_us = 0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	63da      	str	r2, [r3, #60]	@ 0x3c
    else { /* MISRA C 2004 14.10 */
    }

    /* Timeout timers and transmit bufferFull flag ****************************/
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
    if (ret == CO_SDO_RT_waitingResponse) {
 8004ae6:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d11e      	bne.n	8004b2c <CO_SDOserver_process+0x654>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d205      	bcs.n	8004b06 <CO_SDOserver_process+0x62e>
            SDO->timeoutTimer += timeDifference_us;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	441a      	add	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d304      	bcc.n	8004b1c <CO_SDOserver_process+0x644>
            abortCode = CO_SDO_AB_TIMEOUT;
 8004b12:	4b9c      	ldr	r3, [pc, #624]	@ (8004d84 <CO_SDOserver_process+0x8ac>)
 8004b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
            SDO->state = CO_SDO_ST_ABORT;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <CO_SDOserver_process+0x654>
            ret = CO_SDO_RT_transmittBufferFull;
 8004b26:	2304      	movs	r3, #4
 8004b28:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 8004b2c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	f040 81ab 	bne.w	8004e8c <CO_SDOserver_process+0x9b4>
        /* clear response buffer */
        (void)memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	3305      	adds	r3, #5
 8004b3c:	2208      	movs	r2, #8
 8004b3e:	2100      	movs	r1, #0
 8004b40:	4618      	mov	r0, r3
 8004b42:	f006 fac3 	bl	800b0cc <memset>

        switch (SDO->state) {
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	7d1b      	ldrb	r3, [r3, #20]
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	3b12      	subs	r3, #18
 8004b4e:	2b12      	cmp	r3, #18
 8004b50:	f200 8199 	bhi.w	8004e86 <CO_SDOserver_process+0x9ae>
 8004b54:	a201      	add	r2, pc, #4	@ (adr r2, 8004b5c <CO_SDOserver_process+0x684>)
 8004b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5a:	bf00      	nop
 8004b5c:	08004ba9 	.word	0x08004ba9
 8004b60:	08004e87 	.word	0x08004e87
 8004b64:	08004c2b 	.word	0x08004c2b
 8004b68:	08004e87 	.word	0x08004e87
 8004b6c:	08004e87 	.word	0x08004e87
 8004b70:	08004e87 	.word	0x08004e87
 8004b74:	08004e87 	.word	0x08004e87
 8004b78:	08004e87 	.word	0x08004e87
 8004b7c:	08004e87 	.word	0x08004e87
 8004b80:	08004e87 	.word	0x08004e87
 8004b84:	08004e87 	.word	0x08004e87
 8004b88:	08004e87 	.word	0x08004e87
 8004b8c:	08004e87 	.word	0x08004e87
 8004b90:	08004e87 	.word	0x08004e87
 8004b94:	08004e87 	.word	0x08004e87
 8004b98:	08004e87 	.word	0x08004e87
 8004b9c:	08004c87 	.word	0x08004c87
 8004ba0:	08004e87 	.word	0x08004e87
 8004ba4:	08004d55 	.word	0x08004d55
            case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
                SDO->CANtxBuff->data[0] = 0x60;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2260      	movs	r2, #96	@ 0x60
 8004bae:	715a      	strb	r2, [r3, #5]
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004bc0:	0a1b      	lsrs	r3, r3, #8
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 8004bd6:	721a      	strb	r2, [r3, #8]

                /* reset timeout timer and send message */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                SDO->timeoutTimer = 0;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	67da      	str	r2, [r3, #124]	@ 0x7c
#endif
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	4619      	mov	r1, r3
 8004be8:	4610      	mov	r0, r2
 8004bea:	f002 ffdd 	bl	8007ba8 <CO_CANsend>
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                if (SDO->finished) {
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d006      	beq.n	8004c04 <CO_SDOserver_process+0x72c>
                    SDO->state = CO_SDO_ST_IDLE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                }
#else
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
#endif
                break;
 8004c02:	e143      	b.n	8004e8c <CO_SDOserver_process+0x9b4>
                    SDO->toggle = 0x00;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    SDO->sizeTran = 0;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	66da      	str	r2, [r3, #108]	@ 0x6c
                    SDO->bufOffsetWr = 0;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                    SDO->bufOffsetRd = 0;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2213      	movs	r2, #19
 8004c26:	751a      	strb	r2, [r3, #20]
                break;
 8004c28:	e130      	b.n	8004e8c <CO_SDOserver_process+0x9b4>
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
                SDO->CANtxBuff->data[0] = 0x20U | SDO->toggle;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f893 2070 	ldrb.w	r2, [r3, #112]	@ 0x70
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f042 0220 	orr.w	r2, r2, #32
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <CO_SDOserver_process+0x772>
 8004c46:	2210      	movs	r2, #16
 8004c48:	e000      	b.n	8004c4c <CO_SDOserver_process+0x774>
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                /* reset timeout timer and send message */
                SDO->timeoutTimer = 0;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	67da      	str	r2, [r3, #124]	@ 0x7c
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	4619      	mov	r1, r3
 8004c62:	4610      	mov	r0, r2
 8004c64:	f002 ffa0 	bl	8007ba8 <CO_CANsend>
                if (SDO->finished) {
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d006      	beq.n	8004c7e <CO_SDOserver_process+0x7a6>
                    SDO->state = CO_SDO_ST_IDLE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8004c76:	2300      	movs	r3, #0
 8004c78:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                } else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
                }
                break;
 8004c7c:	e106      	b.n	8004e8c <CO_SDOserver_process+0x9b4>
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2213      	movs	r2, #19
 8004c82:	751a      	strb	r2, [r3, #20]
                break;
 8004c84:	e102      	b.n	8004e8c <CO_SDOserver_process+0x9b4>
#endif

            case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                /* data were already loaded from OD variable */
                if ((SDO->sizeInd > 0U) && (SDO->sizeInd <= 4U)) {
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d024      	beq.n	8004cd8 <CO_SDOserver_process+0x800>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d820      	bhi.n	8004cd8 <CO_SDOserver_process+0x800>
                    /* expedited transfer */
                    SDO->CANtxBuff->data[0] = (uint8_t)(0x43U | ((4U - SDO->sizeInd) << 2U));
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	f1c3 0304 	rsb	r3, r3, #4
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f042 0243 	orr.w	r2, r2, #67	@ 0x43
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	715a      	strb	r2, [r3, #5]
                    (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&SDO->buf[0]), SDO->sizeInd);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f103 0009 	add.w	r0, r3, #9
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	f006 fa8c 	bl	800b1e2 <memcpy>
                    SDO->state = CO_SDO_ST_IDLE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004cd6:	e020      	b.n	8004d1a <CO_SDOserver_process+0x842>
                } else {
                    /* data will be transferred with segmented transfer */
                    if (SDO->sizeInd > 0U) {
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00e      	beq.n	8004cfe <CO_SDOserver_process+0x826>
                        /* indicate data size, if known */
                        uint32_t sizeInd = SDO->sizeInd;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
                        uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce8:	61bb      	str	r3, [r7, #24]
                        SDO->CANtxBuff->data[0] = 0x41;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2241      	movs	r2, #65	@ 0x41
 8004cf0:	715a      	strb	r2, [r3, #5]
                        (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&sizeIndSw), sizeof(sizeIndSw));
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	3309      	adds	r3, #9
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	e003      	b.n	8004d06 <CO_SDOserver_process+0x82e>
                    } else {
                        SDO->CANtxBuff->data[0] = 0x40;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2240      	movs	r2, #64	@ 0x40
 8004d04:	715a      	strb	r2, [r3, #5]
                    }
                    SDO->toggle = 0x00;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    SDO->timeoutTimer = 0;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	67da      	str	r2, [r3, #124]	@ 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2223      	movs	r2, #35	@ 0x23
 8004d18:	751a      	strb	r2, [r3, #20]
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

                /* send message */
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004d2a:	0a1b      	lsrs	r3, r3, #8
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 8004d40:	721a      	strb	r2, [r3, #8]
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	f002 ff2b 	bl	8007ba8 <CO_CANsend>
                break;
 8004d52:	e09b      	b.n	8004e8c <CO_SDOserver_process+0x9b4>
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
                /* refill the data buffer if necessary */
                if (!readFromOd(SDO, &abortCode, 7, false)) {
 8004d54:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8004d58:	2300      	movs	r3, #0
 8004d5a:	2207      	movs	r2, #7
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f7ff faf5 	bl	800434c <readFromOd>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 8090 	beq.w	8004e8a <CO_SDOserver_process+0x9b2>
                    break;
                }

                /* SDO command specifier with toggle bit */
                SDO->CANtxBuff->data[0] = SDO->toggle;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	f892 2070 	ldrb.w	r2, [r2, #112]	@ 0x70
 8004d74:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d103      	bne.n	8004d88 <CO_SDOserver_process+0x8b0>
 8004d80:	2210      	movs	r2, #16
 8004d82:	e002      	b.n	8004d8a <CO_SDOserver_process+0x8b2>
 8004d84:	05040000 	.word	0x05040000
 8004d88:	2200      	movs	r2, #0
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	65bb      	str	r3, [r7, #88]	@ 0x58
                /* verify, if this is the last segment */
                if ((count < 7U) || (SDO->finished && (count == 7U))) {
 8004da0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004da2:	2b06      	cmp	r3, #6
 8004da4:	d906      	bls.n	8004db4 <CO_SDOserver_process+0x8dc>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d01b      	beq.n	8004de6 <CO_SDOserver_process+0x90e>
 8004dae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004db0:	2b07      	cmp	r3, #7
 8004db2:	d118      	bne.n	8004de6 <CO_SDOserver_process+0x90e>
                    /* indicate last segment and nnn */
                    SDO->CANtxBuff->data[0] |= (uint8_t)(((7U - count) << 1U) | 0x01U);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	795a      	ldrb	r2, [r3, #5]
 8004dba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	f1c3 0307 	rsb	r3, r3, #7
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f042 0201 	orr.w	r2, r2, #1
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	715a      	strb	r2, [r3, #5]
                    SDO->state = CO_SDO_ST_IDLE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8004dde:	2300      	movs	r3, #0
 8004de0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004de4:	e007      	b.n	8004df6 <CO_SDOserver_process+0x91e>
                } else {
                    SDO->timeoutTimer = 0;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	67da      	str	r2, [r3, #124]	@ 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2223      	movs	r2, #35	@ 0x23
 8004df0:	751a      	strb	r2, [r3, #20]
                    count = 7;
 8004df2:	2307      	movs	r3, #7
 8004df4:	65bb      	str	r3, [r7, #88]	@ 0x58
                }

                /* copy data segment to CAN message */
                (void)memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd, count);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	1d98      	adds	r0, r3, #6
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004e08:	4413      	add	r3, r2
 8004e0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	f006 f9e8 	bl	800b1e2 <memcpy>
                SDO->bufOffsetRd += count;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8004e18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e1a:	441a      	add	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                SDO->sizeTran += count;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004e26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e28:	441a      	add	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* verify if sizeTran is too large or too short if last segment */
                if (SDO->sizeInd > 0U) {
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d01e      	beq.n	8004e74 <CO_SDOserver_process+0x99c>
                    if (SDO->sizeTran > SDO->sizeInd) {
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d905      	bls.n	8004e4e <CO_SDOserver_process+0x976>
                        abortCode = CO_SDO_AB_DATA_LONG;
 8004e42:	4b30      	ldr	r3, [pc, #192]	@ (8004f04 <CO_SDOserver_process+0xa2c>)
 8004e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	751a      	strb	r2, [r3, #20]
                        break;
 8004e4c:	e01e      	b.n	8004e8c <CO_SDOserver_process+0x9b4>
                    } else if ((ret == CO_SDO_RT_ok_communicationEnd) && (SDO->sizeTran < SDO->sizeInd)) {
 8004e4e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10e      	bne.n	8004e74 <CO_SDOserver_process+0x99c>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d208      	bcs.n	8004e74 <CO_SDOserver_process+0x99c>
                        abortCode = CO_SDO_AB_DATA_SHORT;
 8004e62:	4b29      	ldr	r3, [pc, #164]	@ (8004f08 <CO_SDOserver_process+0xa30>)
 8004e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        ret = CO_SDO_RT_waitingResponse;
 8004e66:	2301      	movs	r3, #1
 8004e68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                        SDO->state = CO_SDO_ST_ABORT;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	751a      	strb	r2, [r3, #20]
                        break;
 8004e72:	e00b      	b.n	8004e8c <CO_SDOserver_process+0x9b4>
                    } else { /* MISRA C 2004 14.10 */
                    }
                }

                /* send message */
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4610      	mov	r0, r2
 8004e80:	f002 fe92 	bl	8007ba8 <CO_CANsend>
                break;
 8004e84:	e002      	b.n	8004e8c <CO_SDOserver_process+0x9b4>
            case CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ2:
            case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
            case CO_SDO_ST_UPLOAD_BLK_END_CRSP:
            default: {
                /* none */
                break;
 8004e86:	bf00      	nop
 8004e88:	e000      	b.n	8004e8c <CO_SDOserver_process+0x9b4>
                    break;
 8004e8a:	bf00      	nop
            }
        } /* switch (SDO->state) */
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 8004e8c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d131      	bne.n	8004ef8 <CO_SDOserver_process+0xa20>
        if (SDO->state == CO_SDO_ST_ABORT) {
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	7d1b      	ldrb	r3, [r3, #20]
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d12c      	bne.n	8004ef8 <CO_SDOserver_process+0xa20>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8004e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea0:	617b      	str	r3, [r7, #20]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	2280      	movs	r2, #128	@ 0x80
 8004ea8:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004eba:	0a1b      	lsrs	r3, r3, #8
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 8004ed0:	721a      	strb	r2, [r3, #8]

            (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&code), sizeof(code));
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	3309      	adds	r3, #9
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	601a      	str	r2, [r3, #0]
            (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	f002 fe5e 	bl	8007ba8 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 8004ef2:	23f6      	movs	r3, #246	@ 0xf6
 8004ef4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 8004ef8:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	376c      	adds	r7, #108	@ 0x6c
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd90      	pop	{r4, r7, pc}
 8004f04:	06070012 	.word	0x06070012
 8004f08:	06070013 	.word	0x06070013

08004f0c <CO_getUint8>:
CO_getUint8(const void* buf) {
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	73fb      	strb	r3, [r7, #15]
    return value;
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60fb      	str	r3, [r7, #12]
    return value;
 8004f36:	68fb      	ldr	r3, [r7, #12]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3714      	adds	r7, #20
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d002      	beq.n	8004f58 <OD_getIndex+0x14>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	e000      	b.n	8004f5a <OD_getIndex+0x16>
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8004f76:	2305      	movs	r3, #5
 8004f78:	e003      	b.n	8004f82 <OD_extension_init+0x1c>
    entry->extension = extension;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b086      	sub	sp, #24
 8004f92:	af02      	add	r7, sp, #8
 8004f94:	60f8      	str	r0, [r7, #12]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	603b      	str	r3, [r7, #0]
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004f9e:	7af9      	ldrb	r1, [r7, #11]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f7fc ff75 	bl	8001e98 <OD_get_value>
 8004fae:	4603      	mov	r3, r0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	607a      	str	r2, [r7, #4]
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004fc8:	7af9      	ldrb	r1, [r7, #11]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	2304      	movs	r3, #4
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f7fc ff60 	bl	8001e98 <OD_get_value>
 8004fd8:	4603      	mov	r3, r0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <CO_SYNCsend>:
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t
CO_SYNCsend(CO_SYNC_t* SYNC) {
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b082      	sub	sp, #8
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) {
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	7c9b      	ldrb	r3, [r3, #18]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	749a      	strb	r2, [r3, #18]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	7c9a      	ldrb	r2, [r3, #18]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	7c5b      	ldrb	r3, [r3, #17]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d902      	bls.n	8005008 <CO_SYNCsend+0x26>
        SYNC->counter = 1;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	749a      	strb	r2, [r3, #18]
    }
    SYNC->timer = 0;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	bf0c      	ite	eq
 8005016:	2301      	moveq	r3, #1
 8005018:	2300      	movne	r3, #0
 800501a:	b2db      	uxtb	r3, r3
 800501c:	461a      	mov	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	7c92      	ldrb	r2, [r2, #18]
 800502a:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005034:	4619      	mov	r1, r3
 8005036:	4610      	mov	r0, r2
 8005038:	f002 fdb6 	bl	8007ba8 <CO_CANsend>
 800503c:	4603      	mov	r3, r0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SYNC_receive(void* object, void* msg) {
 8005046:	b480      	push	{r7}
 8005048:	b087      	sub	sp, #28
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
 800504e:	6039      	str	r1, [r7, #0]
    CO_SYNC_t* SYNC = object;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	791b      	ldrb	r3, [r3, #4]
 8005058:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 800505a:	2300      	movs	r3, #0
 800505c:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0U) {
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	7c5b      	ldrb	r3, [r3, #17]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10c      	bne.n	8005080 <CO_SYNC_receive+0x3a>
        if (DLC == 0U) {
 8005066:	7bfb      	ldrb	r3, [r7, #15]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d102      	bne.n	8005072 <CO_SYNC_receive+0x2c>
            syncReceived = true;
 800506c:	2301      	movs	r3, #1
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	e019      	b.n	80050a6 <CO_SYNC_receive+0x60>
        } else {
            SYNC->receiveError = DLC | 0x40U;
 8005072:	7bfb      	ldrb	r3, [r7, #15]
 8005074:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005078:	b2da      	uxtb	r2, r3
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	721a      	strb	r2, [r3, #8]
 800507e:	e012      	b.n	80050a6 <CO_SYNC_receive+0x60>
        }
    } else {
        if (DLC == 1U) {
 8005080:	7bfb      	ldrb	r3, [r7, #15]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d109      	bne.n	800509a <CO_SYNC_receive+0x54>
            const uint8_t* data = CO_CANrxMsg_readData(msg);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	3305      	adds	r3, #5
 800508a:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	781a      	ldrb	r2, [r3, #0]
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 8005094:	2301      	movs	r3, #1
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	e005      	b.n	80050a6 <CO_SYNC_receive+0x60>
        } else {
            SYNC->receiveError = DLC | 0x80U;
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00c      	beq.n	80050c6 <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	bf0c      	ite	eq
 80050b4:	2301      	moveq	r3, #1
 80050b6:	2300      	movne	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	461a      	mov	r2, r3
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	2201      	movs	r2, #1
 80050c4:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
	...

080050d4 <OD_write_1005>:
 * Custom function for writing OD object "COB-ID sync message"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1005(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80050d4:	b590      	push	{r4, r7, lr}
 80050d6:	b08f      	sub	sp, #60	@ 0x3c
 80050d8:	af04      	add	r7, sp, #16
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00c      	beq.n	8005102 <OD_write_1005+0x2e>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	7d1b      	ldrb	r3, [r3, #20]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d108      	bne.n	8005102 <OD_write_1005+0x2e>
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d005      	beq.n	8005102 <OD_write_1005+0x2e>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d102      	bne.n	8005102 <OD_write_1005+0x2e>
        || (countWritten == NULL)) {
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <OD_write_1005+0x32>
        return ODR_DEV_INCOMPAT;
 8005102:	2309      	movs	r3, #9
 8005104:	e0a2      	b.n	800524c <OD_write_1005+0x178>
    }

    CO_SYNC_t* SYNC = stream->object;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 800510c:	68b8      	ldr	r0, [r7, #8]
 800510e:	f7ff ff0b 	bl	8004f28 <CO_getUint32>
 8005112:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	b29b      	uxth	r3, r3
 8005118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800511c:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    bool_t isProducer = (cobIdSync & 0x40000000U) != 0U;
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	bf14      	ite	ne
 8005128:	2301      	movne	r3, #1
 800512a:	2300      	moveq	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	61bb      	str	r3, [r7, #24]
    if (((cobIdSync & 0xBFFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 8005130:	6a3a      	ldr	r2, [r7, #32]
 8005132:	4b48      	ldr	r3, [pc, #288]	@ (8005254 <OD_write_1005+0x180>)
 8005134:	4013      	ands	r3, r2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d133      	bne.n	80051a2 <OD_write_1005+0xce>
 800513a:	8bfb      	ldrh	r3, [r7, #30]
 800513c:	2b7f      	cmp	r3, #127	@ 0x7f
 800513e:	d930      	bls.n	80051a2 <OD_write_1005+0xce>
 8005140:	8bfb      	ldrh	r3, [r7, #30]
 8005142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005146:	d903      	bls.n	8005150 <OD_write_1005+0x7c>
 8005148:	8bfb      	ldrh	r3, [r7, #30]
 800514a:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800514e:	d928      	bls.n	80051a2 <OD_write_1005+0xce>
 8005150:	8bfb      	ldrh	r3, [r7, #30]
 8005152:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8005156:	d903      	bls.n	8005160 <OD_write_1005+0x8c>
 8005158:	8bfb      	ldrh	r3, [r7, #30]
 800515a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800515e:	d320      	bcc.n	80051a2 <OD_write_1005+0xce>
 8005160:	8bfb      	ldrh	r3, [r7, #30]
 8005162:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005166:	d903      	bls.n	8005170 <OD_write_1005+0x9c>
 8005168:	8bfb      	ldrh	r3, [r7, #30]
 800516a:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 800516e:	d318      	bcc.n	80051a2 <OD_write_1005+0xce>
 8005170:	8bfb      	ldrh	r3, [r7, #30]
 8005172:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8005176:	d303      	bcc.n	8005180 <OD_write_1005+0xac>
 8005178:	8bfb      	ldrh	r3, [r7, #30]
 800517a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800517e:	d310      	bcc.n	80051a2 <OD_write_1005+0xce>
 8005180:	8bfb      	ldrh	r3, [r7, #30]
 8005182:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005186:	d80c      	bhi.n	80051a2 <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && (CAN_ID != SYNC->CAN_ID))) {
 8005188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00a      	beq.n	80051a6 <OD_write_1005+0xd2>
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d007      	beq.n	80051a6 <OD_write_1005+0xd2>
 8005196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005198:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800519c:	8bfa      	ldrh	r2, [r7, #30]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d001      	beq.n	80051a6 <OD_write_1005+0xd2>
        return ODR_INVALID_VALUE;
 80051a2:	230f      	movs	r3, #15
 80051a4:	e052      	b.n	800524c <OD_write_1005+0x178>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 80051a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80051ac:	8bfa      	ldrh	r2, [r7, #30]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d039      	beq.n	8005226 <OD_write_1005+0x152>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(SYNC->CANdevRx, SYNC->CANdevRxIdx, CAN_ID, 0x7FF, false,
 80051b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80051b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b8:	8e99      	ldrh	r1, [r3, #52]	@ 0x34
 80051ba:	8bfa      	ldrh	r2, [r7, #30]
 80051bc:	4b26      	ldr	r3, [pc, #152]	@ (8005258 <OD_write_1005+0x184>)
 80051be:	9302      	str	r3, [sp, #8]
 80051c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c2:	9301      	str	r3, [sp, #4]
 80051c4:	2300      	movs	r3, #0
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80051cc:	f002 fc16 	bl	80079fc <CO_CANrxBufferInit>
 80051d0:	4603      	mov	r3, r0
 80051d2:	75fb      	strb	r3, [r7, #23]
                                                     (void*)SYNC, CO_SYNC_receive);

        if (CANret != CO_ERROR_NO) {
 80051d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 80051dc:	2309      	movs	r3, #9
 80051de:	e035      	b.n	800524c <OD_write_1005+0x178>
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 80051e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80051e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e6:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
                                             (SYNC->counterOverflowValue != 0U) ? 1U : 0U, false);
 80051ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ec:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <OD_write_1005+0x122>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e000      	b.n	80051f8 <OD_write_1005+0x124>
 80051f6:	2300      	movs	r3, #0
 80051f8:	8bfa      	ldrh	r2, [r7, #30]
 80051fa:	2400      	movs	r4, #0
 80051fc:	9401      	str	r4, [sp, #4]
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	2300      	movs	r3, #0
 8005202:	f002 fc57 	bl	8007ab4 <CO_CANtxBufferInit>
 8005206:	4602      	mov	r2, r0
 8005208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520a:	62da      	str	r2, [r3, #44]	@ 0x2c

        if (SYNC->CANtxBuff == NULL) {
 800520c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005210:	2b00      	cmp	r3, #0
 8005212:	d104      	bne.n	800521e <OD_write_1005+0x14a>
            SYNC->isProducer = false;
 8005214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005216:	2200      	movs	r2, #0
 8005218:	625a      	str	r2, [r3, #36]	@ 0x24
            return ODR_DEV_INCOMPAT;
 800521a:	2309      	movs	r3, #9
 800521c:	e016      	b.n	800524c <OD_write_1005+0x178>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 800521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005220:	8bfa      	ldrh	r2, [r7, #30]
 8005222:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = isProducer;
 8005226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (isProducer) {
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d005      	beq.n	800523e <OD_write_1005+0x16a>
        SYNC->counter = 0;
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	2200      	movs	r2, #0
 8005236:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8005238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523a:	2200      	movs	r2, #0
 800523c:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	68b9      	ldr	r1, [r7, #8]
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f7fc fc1c 	bl	8001a82 <OD_writeOriginal>
 800524a:	4603      	mov	r3, r0
}
 800524c:	4618      	mov	r0, r3
 800524e:	372c      	adds	r7, #44	@ 0x2c
 8005250:	46bd      	mov	sp, r7
 8005252:	bd90      	pop	{r4, r7, pc}
 8005254:	bffff800 	.word	0xbffff800
 8005258:	08005047 	.word	0x08005047

0800525c <OD_write_1019>:
 * Custom function for writing OD object "Synchronous counter overflow value"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1019(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800525c:	b590      	push	{r4, r7, lr}
 800525e:	b089      	sub	sp, #36	@ 0x24
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint8_t))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00c      	beq.n	800528a <OD_write_1019+0x2e>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	7d1b      	ldrb	r3, [r3, #20]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d108      	bne.n	800528a <OD_write_1019+0x2e>
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d005      	beq.n	800528a <OD_write_1019+0x2e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d102      	bne.n	800528a <OD_write_1019+0x2e>
        || (countWritten == NULL)) {
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <OD_write_1019+0x32>
        return ODR_DEV_INCOMPAT;
 800528a:	2309      	movs	r3, #9
 800528c:	e040      	b.n	8005310 <OD_write_1019+0xb4>
    }

    CO_SYNC_t* SYNC = stream->object;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 8005294:	68b8      	ldr	r0, [r7, #8]
 8005296:	f7ff fe39 	bl	8004f0c <CO_getUint8>
 800529a:	4603      	mov	r3, r0
 800529c:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if ((syncCounterOvf == 1U) || (syncCounterOvf > 240U)) {
 800529e:	7cfb      	ldrb	r3, [r7, #19]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d002      	beq.n	80052aa <OD_write_1019+0x4e>
 80052a4:	7cfb      	ldrb	r3, [r7, #19]
 80052a6:	2bf0      	cmp	r3, #240	@ 0xf0
 80052a8:	d901      	bls.n	80052ae <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 80052aa:	230f      	movs	r3, #15
 80052ac:	e030      	b.n	8005310 <OD_write_1019+0xb4>
    }
    if (*SYNC->OD_1006_period != 0U) {
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 80052b8:	2317      	movs	r3, #23
 80052ba:	e029      	b.n	8005310 <OD_write_1019+0xb4>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, SYNC->CAN_ID, false,
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80052cc:	7cfb      	ldrb	r3, [r7, #19]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <OD_write_1019+0x7a>
 80052d2:	2301      	movs	r3, #1
 80052d4:	e000      	b.n	80052d8 <OD_write_1019+0x7c>
 80052d6:	2300      	movs	r3, #0
 80052d8:	2400      	movs	r4, #0
 80052da:	9401      	str	r4, [sp, #4]
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	2300      	movs	r3, #0
 80052e0:	f002 fbe8 	bl	8007ab4 <CO_CANtxBufferInit>
 80052e4:	4602      	mov	r2, r0
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	62da      	str	r2, [r3, #44]	@ 0x2c
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);

    if (SYNC->CANtxBuff == NULL) {
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d104      	bne.n	80052fc <OD_write_1019+0xa0>
        SYNC->isProducer = false;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2200      	movs	r2, #0
 80052f6:	625a      	str	r2, [r3, #36]	@ 0x24
        return ODR_DEV_INCOMPAT;
 80052f8:	2309      	movs	r3, #9
 80052fa:	e009      	b.n	8005310 <OD_write_1019+0xb4>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	7cfa      	ldrb	r2, [r7, #19]
 8005300:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	68b9      	ldr	r1, [r7, #8]
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f7fc fbba 	bl	8001a82 <OD_writeOriginal>
 800530e:	4603      	mov	r3, r0
}
 8005310:	4618      	mov	r0, r3
 8005312:	371c      	adds	r7, #28
 8005314:	46bd      	mov	sp, r7
 8005316:	bd90      	pop	{r4, r7, pc}

08005318 <CO_SYNC_init>:
             OD_entry_t* OD_1007_syncWindowLen, OD_entry_t* OD_1019_syncCounterOvf, CO_CANmodule_t* CANdevRx,
             uint16_t CANdevRxIdx,
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 8005318:	b580      	push	{r7, lr}
 800531a:	b08c      	sub	sp, #48	@ 0x30
 800531c:	af04      	add	r7, sp, #16
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if ((SYNC == NULL) || (em == NULL) || (OD_1005_cobIdSync == NULL)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00e      	beq.n	800534a <CO_SYNC_init+0x32>
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00b      	beq.n	800534a <CO_SYNC_init+0x32>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d008      	beq.n	800534a <CO_SYNC_init+0x32>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        || (OD_1006_commCyclePeriod == NULL) || (CANdevTx == NULL)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d005      	beq.n	800534a <CO_SYNC_init+0x32>
 800533e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <CO_SYNC_init+0x32>
#endif
        || (CANdevRx == NULL)) {
 8005344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005346:	2b00      	cmp	r3, #0
 8005348:	d102      	bne.n	8005350 <CO_SYNC_init+0x38>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800534a:	f04f 33ff 	mov.w	r3, #4294967295
 800534e:	e0fd      	b.n	800554c <CO_SYNC_init+0x234>
    }

    /* clear object */
    (void)memset(SYNC, 0, sizeof(CO_SYNC_t));
 8005350:	225c      	movs	r2, #92	@ 0x5c
 8005352:	2100      	movs	r1, #0
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f005 feb9 	bl	800b0cc <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 800535a:	2380      	movs	r3, #128	@ 0x80
 800535c:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 800535e:	f107 0218 	add.w	r2, r7, #24
 8005362:	2301      	movs	r3, #1
 8005364:	2100      	movs	r1, #0
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7ff fe26 	bl	8004fb8 <OD_get_u32>
 800536c:	4603      	mov	r3, r0
 800536e:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8005370:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00c      	beq.n	8005392 <CO_SYNC_init+0x7a>
        if (errInfo != NULL) {
 8005378:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800537a:	2b00      	cmp	r3, #0
 800537c:	d006      	beq.n	800538c <CO_SYNC_init+0x74>
            *errInfo = OD_getIndex(OD_1005_cobIdSync);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7ff fde0 	bl	8004f44 <OD_getIndex>
 8005384:	4603      	mov	r3, r0
 8005386:	461a      	mov	r2, r3
 8005388:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800538a:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800538c:	f06f 030b 	mvn.w	r3, #11
 8005390:	e0dc      	b.n	800554c <CO_SYNC_init+0x234>
    }
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->OD_1005_extension.object = SYNC;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	639a      	str	r2, [r3, #56]	@ 0x38
    SYNC->OD_1005_extension.read = OD_readOriginal;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4a6e      	ldr	r2, [pc, #440]	@ (8005554 <CO_SYNC_init+0x23c>)
 800539c:	63da      	str	r2, [r3, #60]	@ 0x3c
    SYNC->OD_1005_extension.write = OD_write_1005;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4a6d      	ldr	r2, [pc, #436]	@ (8005558 <CO_SYNC_init+0x240>)
 80053a2:	641a      	str	r2, [r3, #64]	@ 0x40
    (void)OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3338      	adds	r3, #56	@ 0x38
 80053a8:	4619      	mov	r1, r3
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7ff fddb 	bl	8004f66 <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0, sizeof(uint32_t), NULL);
 80053b0:	2300      	movs	r3, #0
 80053b2:	2204      	movs	r2, #4
 80053b4:	2100      	movs	r1, #0
 80053b6:	6838      	ldr	r0, [r7, #0]
 80053b8:	f7fc fde8 	bl	8001f8c <OD_getPtr>
 80053bc:	4602      	mov	r2, r0
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	61da      	str	r2, [r3, #28]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    if (SYNC->OD_1006_period == NULL) {
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10c      	bne.n	80053e4 <CO_SYNC_init+0xcc>
        if (errInfo != NULL) {
 80053ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d006      	beq.n	80053de <CO_SYNC_init+0xc6>
            *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 80053d0:	6838      	ldr	r0, [r7, #0]
 80053d2:	f7ff fdb7 	bl	8004f44 <OD_getIndex>
 80053d6:	4603      	mov	r3, r0
 80053d8:	461a      	mov	r2, r3
 80053da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053dc:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80053de:	f06f 030b 	mvn.w	r3, #11
 80053e2:	e0b3      	b.n	800554c <CO_SYNC_init+0x234>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0, sizeof(uint32_t), NULL);
 80053e4:	2300      	movs	r3, #0
 80053e6:	2204      	movs	r2, #4
 80053e8:	2100      	movs	r1, #0
 80053ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053ec:	f7fc fdce 	bl	8001f8c <OD_getPtr>
 80053f0:	4602      	mov	r2, r0
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	621a      	str	r2, [r3, #32]
    if ((OD_1007_syncWindowLen != NULL) && (SYNC->OD_1007_window == NULL)) {
 80053f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d010      	beq.n	800541e <CO_SYNC_init+0x106>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10c      	bne.n	800541e <CO_SYNC_init+0x106>
        if (errInfo != NULL) {
 8005404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005406:	2b00      	cmp	r3, #0
 8005408:	d006      	beq.n	8005418 <CO_SYNC_init+0x100>
            *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 800540a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800540c:	f7ff fd9a 	bl	8004f44 <OD_getIndex>
 8005410:	4603      	mov	r3, r0
 8005412:	461a      	mov	r2, r3
 8005414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005416:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8005418:	f06f 030b 	mvn.w	r3, #11
 800541c:	e096      	b.n	800554c <CO_SYNC_init+0x234>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and configure extension */
    uint8_t syncCounterOvf = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 8005422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005424:	2b00      	cmp	r3, #0
 8005426:	d033      	beq.n	8005490 <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 8005428:	f107 0217 	add.w	r2, r7, #23
 800542c:	2301      	movs	r3, #1
 800542e:	2100      	movs	r1, #0
 8005430:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005432:	f7ff fdac 	bl	8004f8e <OD_get_u8>
 8005436:	4603      	mov	r3, r0
 8005438:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 800543a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00c      	beq.n	800545c <CO_SYNC_init+0x144>
            if (errInfo != NULL) {
 8005442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005444:	2b00      	cmp	r3, #0
 8005446:	d006      	beq.n	8005456 <CO_SYNC_init+0x13e>
                *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 8005448:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800544a:	f7ff fd7b 	bl	8004f44 <OD_getIndex>
 800544e:	4603      	mov	r3, r0
 8005450:	461a      	mov	r2, r3
 8005452:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005454:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8005456:	f06f 030b 	mvn.w	r3, #11
 800545a:	e077      	b.n	800554c <CO_SYNC_init+0x234>
        }
        if (syncCounterOvf == 1U) {
 800545c:	7dfb      	ldrb	r3, [r7, #23]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d102      	bne.n	8005468 <CO_SYNC_init+0x150>
            syncCounterOvf = 2;
 8005462:	2302      	movs	r3, #2
 8005464:	75fb      	strb	r3, [r7, #23]
 8005466:	e004      	b.n	8005472 <CO_SYNC_init+0x15a>
        } else if (syncCounterOvf > 240U) {
 8005468:	7dfb      	ldrb	r3, [r7, #23]
 800546a:	2bf0      	cmp	r3, #240	@ 0xf0
 800546c:	d901      	bls.n	8005472 <CO_SYNC_init+0x15a>
            syncCounterOvf = 240;
 800546e:	23f0      	movs	r3, #240	@ 0xf0
 8005470:	75fb      	strb	r3, [r7, #23]
        } else { /* MISRA C 2004 14.10 */
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->OD_1019_extension.object = SYNC;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	64da      	str	r2, [r3, #76]	@ 0x4c
        SYNC->OD_1019_extension.read = OD_readOriginal;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4a36      	ldr	r2, [pc, #216]	@ (8005554 <CO_SYNC_init+0x23c>)
 800547c:	651a      	str	r2, [r3, #80]	@ 0x50
        SYNC->OD_1019_extension.write = OD_write_1019;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4a36      	ldr	r2, [pc, #216]	@ (800555c <CO_SYNC_init+0x244>)
 8005482:	655a      	str	r2, [r3, #84]	@ 0x54
        (void)OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	334c      	adds	r3, #76	@ 0x4c
 8005488:	4619      	mov	r1, r3
 800548a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800548c:	f7ff fd6b 	bl	8004f66 <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 8005490:	7dfa      	ldrb	r2, [r7, #23]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = (cobIdSync & 0x40000000U) != 0U;
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	bf14      	ite	ne
 80054a6:	2301      	movne	r3, #1
 80054a8:	2300      	moveq	r3, #0
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	461a      	mov	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	625a      	str	r2, [r3, #36]	@ 0x24
    SYNC->CANdevTx = CANdevTx;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054b6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    SYNC->CANdevRx = CANdevRx;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054cc:	631a      	str	r2, [r3, #48]	@ 0x30
    SYNC->CANdevRxIdx = CANdevRxIdx;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80054d2:	869a      	strh	r2, [r3, #52]	@ 0x34
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANdevTxIdx = CANdevTxIdx;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80054d8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
#endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, (uint16_t)(cobIdSync & 0x7FFU), 0x7FF, false,
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	b29b      	uxth	r3, r3
 80054e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 80054e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005560 <CO_SYNC_init+0x248>)
 80054ea:	9302      	str	r3, [sp, #8]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	2300      	movs	r3, #0
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80054f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054fa:	f002 fa7f 	bl	80079fc <CO_CANrxBufferInit>
 80054fe:	4603      	mov	r3, r0
 8005500:	77bb      	strb	r3, [r7, #30]
                                              (void*)SYNC, CO_SYNC_receive);
    if (ret != CO_ERROR_NO) {
 8005502:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <CO_SYNC_init+0x1f8>
        return ret;
 800550a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800550e:	e01d      	b.n	800554c <CO_SYNC_init+0x234>
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	b29b      	uxth	r3, r3
 8005514:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005518:	b29a      	uxth	r2, r3
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);
 800551a:	7dfb      	ldrb	r3, [r7, #23]
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <CO_SYNC_init+0x20c>
 8005520:	2301      	movs	r3, #1
 8005522:	e000      	b.n	8005526 <CO_SYNC_init+0x20e>
 8005524:	2300      	movs	r3, #0
 8005526:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8005528:	2000      	movs	r0, #0
 800552a:	9001      	str	r0, [sp, #4]
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	2300      	movs	r3, #0
 8005530:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005532:	f002 fabf 	bl	8007ab4 <CO_CANtxBufferInit>
 8005536:	4602      	mov	r2, r0
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (SYNC->CANtxBuff == NULL) {
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005540:	2b00      	cmp	r3, #0
 8005542:	d102      	bne.n	800554a <CO_SYNC_init+0x232>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005544:	f04f 33ff 	mov.w	r3, #4294967295
 8005548:	e000      	b.n	800554c <CO_SYNC_init+0x234>
    }
#endif

    return CO_ERROR_NO;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3720      	adds	r7, #32
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	080019d3 	.word	0x080019d3
 8005558:	080050d5 	.word	0x080050d5
 800555c:	0800525d 	.word	0x0800525d
 8005560:	08005047 	.word	0x08005047

08005564 <CO_SYNC_process>:
    }
}
#endif

CO_SYNC_status_t
CO_SYNC_process(CO_SYNC_t* SYNC, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8005564:	b580      	push	{r7, lr}
 8005566:	b08a      	sub	sp, #40	@ 0x28
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 8005572:	2300      	movs	r3, #0
 8005574:	77fb      	strb	r3, [r7, #31]

    if (NMTisPreOrOperational) {
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 8088 	beq.w	800568e <CO_SYNC_process+0x12a>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	4413      	add	r3, r2
 8005586:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) {
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	429a      	cmp	r2, r3
 8005590:	d902      	bls.n	8005598 <CO_SYNC_process+0x34>
            SYNC->timer = timerNew;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	619a      	str	r2, [r3, #24]
        }

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d007      	beq.n	80055b0 <CO_SYNC_process+0x4c>
            SYNC->timer = 0;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 80055a6:	2301      	movs	r3, #1
 80055a8:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = (SYNC->OD_1006_period != NULL) ? *SYNC->OD_1006_period : 0U;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <CO_SYNC_process+0x5c>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	e000      	b.n	80055c2 <CO_SYNC_process+0x5e>
 80055c0:	2300      	movs	r3, #0
 80055c2:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0U) {
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d031      	beq.n	800562e <CO_SYNC_process+0xca>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
            if (SYNC->isProducer) {
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <CO_SYNC_process+0x84>
                if (SYNC->timer >= OD_1006_period) {
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d828      	bhi.n	800562e <CO_SYNC_process+0xca>
                    syncStatus = CO_SYNC_RX_TX;
 80055dc:	2301      	movs	r3, #1
 80055de:	77fb      	strb	r3, [r7, #31]
                    (void)CO_SYNCsend(SYNC);
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f7ff fcfe 	bl	8004fe2 <CO_SYNCsend>
 80055e6:	e022      	b.n	800562e <CO_SYNC_process+0xca>
#endif
            } else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

                /* Verify timeout of SYNC */
                if (SYNC->timeoutError == 1U) {
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	7c1b      	ldrb	r3, [r3, #16]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d11e      	bne.n	800562e <CO_SYNC_process+0xca>
                    /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                    uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	085b      	lsrs	r3, r3, #1
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4413      	add	r3, r2
 80055f8:	61bb      	str	r3, [r7, #24]
                    if (periodTimeout < OD_1006_period) {
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d202      	bcs.n	8005608 <CO_SYNC_process+0xa4>
                        periodTimeout = 0xFFFFFFFFU;
 8005602:	f04f 33ff 	mov.w	r3, #4294967295
 8005606:	61bb      	str	r3, [r7, #24]
                    }

                    if (SYNC->timer > periodTimeout) {
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	429a      	cmp	r2, r3
 8005610:	d20d      	bcs.n	800562e <CO_SYNC_process+0xca>
                        CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8005620:	2218      	movs	r2, #24
 8005622:	2101      	movs	r1, #1
 8005624:	f7fb fb61 	bl	8000cea <CO_error>
                        SYNC->timeoutError = 2;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2202      	movs	r2, #2
 800562c:	741a      	strb	r2, [r3, #16]
                } else { /* MISRA C 2004 14.10 */
                }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if ((SYNC->OD_1007_window != NULL) && (*SYNC->OD_1007_window > 0U) && (SYNC->timer > *SYNC->OD_1007_window)) {
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d015      	beq.n	8005662 <CO_SYNC_process+0xfe>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d010      	beq.n	8005662 <CO_SYNC_process+0xfe>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	699a      	ldr	r2, [r3, #24]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	429a      	cmp	r2, r3
 800564c:	d909      	bls.n	8005662 <CO_SYNC_process+0xfe>
            if (!SYNC->syncIsOutsideWindow) {
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <CO_SYNC_process+0xf6>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 8005656:	2302      	movs	r3, #2
 8005658:	77fb      	strb	r3, [r7, #31]
            }
            SYNC->syncIsOutsideWindow = true;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	615a      	str	r2, [r3, #20]
 8005660:	e002      	b.n	8005668 <CO_SYNC_process+0x104>
        } else {
            SYNC->syncIsOutsideWindow = false;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0U) {
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	7a1b      	ldrb	r3, [r3, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01a      	beq.n	80056a6 <CO_SYNC_process+0x142>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6818      	ldr	r0, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	7a1b      	ldrb	r3, [r3, #8]
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	f248 2340 	movw	r3, #33344	@ 0x8240
 800567e:	2219      	movs	r2, #25
 8005680:	2101      	movs	r1, #1
 8005682:	f7fb fb32 	bl	8000cea <CO_error>
            SYNC->receiveError = 0;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	721a      	strb	r2, [r3, #8]
 800568c:	e00b      	b.n	80056a6 <CO_SYNC_process+0x142>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 80056a6:	7ffb      	ldrb	r3, [r7, #31]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d10f      	bne.n	80056cc <CO_SYNC_process+0x168>
        if (SYNC->timeoutError == 2U) {
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	7c1b      	ldrb	r3, [r3, #16]
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d108      	bne.n	80056c6 <CO_SYNC_process+0x162>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6818      	ldr	r0, [r3, #0]
 80056b8:	2300      	movs	r3, #0
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	2300      	movs	r3, #0
 80056be:	2218      	movs	r2, #24
 80056c0:	2100      	movs	r1, #0
 80056c2:	f7fb fb12 	bl	8000cea <CO_error>
        }
        SYNC->timeoutError = 1;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2201      	movs	r2, #1
 80056ca:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 80056cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3720      	adds	r7, #32
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <CO_getUint16>:
CO_getUint16(const void* buf) {
 80056d6:	b480      	push	{r7}
 80056d8:	b085      	sub	sp, #20
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	81fb      	strh	r3, [r7, #14]
    return value;
 80056e6:	89fb      	ldrh	r3, [r7, #14]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <CO_getUint32>:
CO_getUint32(const void* buf) {
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	60fb      	str	r3, [r7, #12]
    return value;
 8005702:	68fb      	ldr	r3, [r7, #12]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <CO_setUint16>:
CO_setUint16(void* buf, uint16_t value) {
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	807b      	strh	r3, [r7, #2]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 800571c:	887a      	ldrh	r2, [r7, #2]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	801a      	strh	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8005722:	2302      	movs	r3, #2
}
 8005724:	4618      	mov	r0, r3
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <CO_setUint32>:
CO_setUint32(void* buf, uint32_t value) {
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8005740:	2304      	movs	r3, #4
}
 8005742:	4618      	mov	r0, r3
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 800574e:	b480      	push	{r7}
 8005750:	b083      	sub	sp, #12
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <OD_getIndex+0x14>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	e000      	b.n	8005764 <OD_getIndex+0x16>
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8005780:	2305      	movs	r3, #5
 8005782:	e003      	b.n	800578c <OD_extension_init+0x1c>
    entry->extension = extension;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af02      	add	r7, sp, #8
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	607a      	str	r2, [r7, #4]
 80057a2:	603b      	str	r3, [r7, #0]
 80057a4:	460b      	mov	r3, r1
 80057a6:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80057a8:	7af9      	ldrb	r1, [r7, #11]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	2304      	movs	r3, #4
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f7fc fb70 	bl	8001e98 <OD_get_value>
 80057b8:	4603      	mov	r3, r0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_TIME_receive(void* object, void* msg) {
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b086      	sub	sp, #24
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	6039      	str	r1, [r7, #0]
    CO_TIME_t* TIME = object;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	791b      	ldrb	r3, [r3, #4]
 80057d4:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	3305      	adds	r3, #5
 80057da:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 80057dc:	7cfb      	ldrb	r3, [r7, #19]
 80057de:	2b06      	cmp	r3, #6
 80057e0:	d112      	bne.n	8005808 <CO_TIME_receive+0x46>
        (void)memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2206      	movs	r2, #6
 80057e6:	68f9      	ldr	r1, [r7, #12]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f005 fcfa 	bl	800b1e2 <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2201      	movs	r2, #1
 80057f2:	619a      	str	r2, [r3, #24]

#if ((CO_CONFIG_TIME)&CO_CONFIG_FLAG_CALLBACK_PRE) != 0
        /* Optional signal to RTOS, which can resume task, which handles TIME. */
        if (TIME->pFunctSignalPre != NULL) {
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d005      	beq.n	8005808 <CO_TIME_receive+0x46>
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005804:	4610      	mov	r0, r2
 8005806:	4798      	blx	r3
        }
#endif
    }
}
 8005808:	bf00      	nop
 800580a:	3718      	adds	r7, #24
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <OD_write_1012>:
 * Custom function for writing OD object "COB-ID time stamp"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1012(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8005810:	b580      	push	{r7, lr}
 8005812:	b088      	sub	sp, #32
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00c      	beq.n	800583e <OD_write_1012+0x2e>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	7d1b      	ldrb	r3, [r3, #20]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d108      	bne.n	800583e <OD_write_1012+0x2e>
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d005      	beq.n	800583e <OD_write_1012+0x2e>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b04      	cmp	r3, #4
 8005836:	d102      	bne.n	800583e <OD_write_1012+0x2e>
        || (countWritten == NULL)) {
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <OD_write_1012+0x32>
        return ODR_DEV_INCOMPAT;
 800583e:	2309      	movs	r3, #9
 8005840:	e051      	b.n	80058e6 <OD_write_1012+0xd6>
    }

    CO_TIME_t* TIME = stream->object;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 8005848:	68b8      	ldr	r0, [r7, #8]
 800584a:	f7ff ff53 	bl	80056f4 <CO_getUint32>
 800584e:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	b29b      	uxth	r3, r3
 8005854:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005858:	82fb      	strh	r3, [r7, #22]
    if (((cobIdTimeStamp & 0x3FFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	4b24      	ldr	r3, [pc, #144]	@ (80058f0 <OD_write_1012+0xe0>)
 800585e:	4013      	ands	r3, r2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d126      	bne.n	80058b2 <OD_write_1012+0xa2>
 8005864:	8afb      	ldrh	r3, [r7, #22]
 8005866:	2b7f      	cmp	r3, #127	@ 0x7f
 8005868:	d923      	bls.n	80058b2 <OD_write_1012+0xa2>
 800586a:	8afb      	ldrh	r3, [r7, #22]
 800586c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005870:	d903      	bls.n	800587a <OD_write_1012+0x6a>
 8005872:	8afb      	ldrh	r3, [r7, #22]
 8005874:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8005878:	d91b      	bls.n	80058b2 <OD_write_1012+0xa2>
 800587a:	8afb      	ldrh	r3, [r7, #22]
 800587c:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8005880:	d903      	bls.n	800588a <OD_write_1012+0x7a>
 8005882:	8afb      	ldrh	r3, [r7, #22]
 8005884:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005888:	d313      	bcc.n	80058b2 <OD_write_1012+0xa2>
 800588a:	8afb      	ldrh	r3, [r7, #22]
 800588c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005890:	d903      	bls.n	800589a <OD_write_1012+0x8a>
 8005892:	8afb      	ldrh	r3, [r7, #22]
 8005894:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8005898:	d30b      	bcc.n	80058b2 <OD_write_1012+0xa2>
 800589a:	8afb      	ldrh	r3, [r7, #22]
 800589c:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 80058a0:	d303      	bcc.n	80058aa <OD_write_1012+0x9a>
 80058a2:	8afb      	ldrh	r3, [r7, #22]
 80058a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058a8:	d303      	bcc.n	80058b2 <OD_write_1012+0xa2>
 80058aa:	8afb      	ldrh	r3, [r7, #22]
 80058ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058b0:	d901      	bls.n	80058b6 <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 80058b2:	230f      	movs	r3, #15
 80058b4:	e017      	b.n	80058e6 <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	0fdb      	lsrs	r3, r3, #31
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	461a      	mov	r2, r3
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	bf14      	ite	ne
 80058cc:	2301      	movne	r3, #1
 80058ce:	2300      	moveq	r3, #0
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	461a      	mov	r2, r3
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	68b9      	ldr	r1, [r7, #8]
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f7fc f8cf 	bl	8001a82 <OD_writeOriginal>
 80058e4:	4603      	mov	r3, r0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3720      	adds	r7, #32
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	3ffff800 	.word	0x3ffff800

080058f4 <CO_TIME_init>:
CO_ReturnError_t
CO_TIME_init(CO_TIME_t* TIME, OD_entry_t* OD_1012_cobIdTimeStamp, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08c      	sub	sp, #48	@ 0x30
 80058f8:	af04      	add	r7, sp, #16
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
 8005900:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if ((TIME == NULL) || (OD_1012_cobIdTimeStamp == NULL) || (CANdevRx == NULL)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d008      	beq.n	800591a <CO_TIME_init+0x26>
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d005      	beq.n	800591a <CO_TIME_init+0x26>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <CO_TIME_init+0x26>
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
        || CANdevTx == NULL
 8005914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005916:	2b00      	cmp	r3, #0
 8005918:	d102      	bne.n	8005920 <CO_TIME_init+0x2c>
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800591a:	f04f 33ff 	mov.w	r3, #4294967295
 800591e:	e078      	b.n	8005a12 <CO_TIME_init+0x11e>
    }

    (void)memset(TIME, 0, sizeof(CO_TIME_t));
 8005920:	2244      	movs	r2, #68	@ 0x44
 8005922:	2100      	movs	r1, #0
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f005 fbd1 	bl	800b0cc <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 800592a:	f107 0214 	add.w	r2, r7, #20
 800592e:	2301      	movs	r3, #1
 8005930:	2100      	movs	r1, #0
 8005932:	68b8      	ldr	r0, [r7, #8]
 8005934:	f7ff ff30 	bl	8005798 <OD_get_u32>
 8005938:	4603      	mov	r3, r0
 800593a:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 800593c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00c      	beq.n	800595e <CO_TIME_init+0x6a>
        if (errInfo != NULL) {
 8005944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005946:	2b00      	cmp	r3, #0
 8005948:	d006      	beq.n	8005958 <CO_TIME_init+0x64>
            *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 800594a:	68b8      	ldr	r0, [r7, #8]
 800594c:	f7ff feff 	bl	800574e <OD_getIndex>
 8005950:	4603      	mov	r3, r0
 8005952:	461a      	mov	r2, r3
 8005954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005956:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8005958:	f06f 030b 	mvn.w	r3, #11
 800595c:	e059      	b.n	8005a12 <CO_TIME_init+0x11e>
    }
#if ((CO_CONFIG_TIME)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    TIME->OD_1012_extension.object = TIME;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	635a      	str	r2, [r3, #52]	@ 0x34
    TIME->OD_1012_extension.read = OD_readOriginal;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4a2d      	ldr	r2, [pc, #180]	@ (8005a1c <CO_TIME_init+0x128>)
 8005968:	639a      	str	r2, [r3, #56]	@ 0x38
    TIME->OD_1012_extension.write = OD_write_1012;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4a2c      	ldr	r2, [pc, #176]	@ (8005a20 <CO_TIME_init+0x12c>)
 800596e:	63da      	str	r2, [r3, #60]	@ 0x3c
    (void)OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3334      	adds	r3, #52	@ 0x34
 8005974:	4619      	mov	r1, r3
 8005976:	68b8      	ldr	r0, [r7, #8]
 8005978:	f7ff fefa 	bl	8005770 <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	b29b      	uxth	r3, r3
 8005980:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005984:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	0fdb      	lsrs	r3, r3, #31
 800598a:	b2db      	uxtb	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005998:	2b00      	cmp	r3, #0
 800599a:	bf14      	ite	ne
 800599c:	2301      	movne	r3, #1
 800599e:	2300      	moveq	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	461a      	mov	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
    if (TIME->isConsumer) {
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d015      	beq.n	80059e2 <CO_TIME_init+0xee>
        CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, cobId, 0x7FF, false, (void*)TIME,
 80059b6:	8bba      	ldrh	r2, [r7, #28]
 80059b8:	8879      	ldrh	r1, [r7, #2]
 80059ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005a24 <CO_TIME_init+0x130>)
 80059bc:	9302      	str	r3, [sp, #8]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	9301      	str	r3, [sp, #4]
 80059c2:	2300      	movs	r3, #0
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f002 f816 	bl	80079fc <CO_CANrxBufferInit>
 80059d0:	4603      	mov	r3, r0
 80059d2:	76fb      	strb	r3, [r7, #27]
                                                  CO_TIME_receive);
        if (ret != CO_ERROR_NO) {
 80059d4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <CO_TIME_init+0xee>
            return ret;
 80059dc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80059e0:	e017      	b.n	8005a12 <CO_TIME_init+0x11e>
        }
    }

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
    /* configure TIME producer message transmission */
    TIME->CANdevTx = CANdevTx;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059e6:	625a      	str	r2, [r3, #36]	@ 0x24
    TIME->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, cobId, false, CO_TIME_MSG_LENGTH, false);
 80059e8:	8bba      	ldrh	r2, [r7, #28]
 80059ea:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 80059ec:	2300      	movs	r3, #0
 80059ee:	9301      	str	r3, [sp, #4]
 80059f0:	2306      	movs	r3, #6
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	2300      	movs	r3, #0
 80059f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059f8:	f002 f85c 	bl	8007ab4 <CO_CANtxBufferInit>
 80059fc:	4602      	mov	r2, r0
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	629a      	str	r2, [r3, #40]	@ 0x28

    if (TIME->CANtxBuff == NULL) {
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d102      	bne.n	8005a10 <CO_TIME_init+0x11c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a0e:	e000      	b.n	8005a12 <CO_TIME_init+0x11e>
    }
#endif

    return CO_ERROR_NO;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3720      	adds	r7, #32
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	080019d3 	.word	0x080019d3
 8005a20:	08005811 	.word	0x08005811
 8005a24:	080057c3 	.word	0x080057c3

08005a28 <CO_TIME_process>:
    }
}
#endif

bool_t
CO_TIME_process(CO_TIME_t* TIME, bool_t NMTisPreOrOperational, uint32_t timeDifference_us) {
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08c      	sub	sp, #48	@ 0x30
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 8005a34:	2300      	movs	r3, #0
 8005a36:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d024      	beq.n	8005a88 <CO_TIME_process+0x60>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d020      	beq.n	8005a88 <CO_TIME_process+0x60>
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d01f      	beq.n	8005a8e <CO_TIME_process+0x66>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7ff fe4f 	bl	80056f4 <CO_getUint32>
 8005a56:	6278      	str	r0, [r7, #36]	@ 0x24
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7ff fe3a 	bl	80056d6 <CO_getUint16>
 8005a62:	4603      	mov	r3, r0
 8005a64:	847b      	strh	r3, [r7, #34]	@ 0x22
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFFU;
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005a74:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            CO_FLAG_CLEAR(TIME->CANrxNew);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	619a      	str	r2, [r3, #24]
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 8005a86:	e002      	b.n	8005a8e <CO_TIME_process+0x66>
        }
    } else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (!timestampReceived && (timeDifference_us > 0U)) {
 8005a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d132      	bne.n	8005afe <CO_TIME_process+0xd6>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d02f      	beq.n	8005afe <CO_TIME_process+0xd6>
        uint32_t us = timeDifference_us + TIME->residual_us;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	89db      	ldrh	r3, [r3, #14]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	61fb      	str	r3, [r7, #28]
        ms = us / 1000U;
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	4a37      	ldr	r2, [pc, #220]	@ (8005b8c <CO_TIME_process+0x164>)
 8005aae:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab2:	099b      	lsrs	r3, r3, #6
 8005ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
        TIME->residual_us = (uint16_t)(us % 1000U);
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	4b34      	ldr	r3, [pc, #208]	@ (8005b8c <CO_TIME_process+0x164>)
 8005aba:	fba3 1302 	umull	r1, r3, r3, r2
 8005abe:	099b      	lsrs	r3, r3, #6
 8005ac0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005ac4:	fb01 f303 	mul.w	r3, r1, r3
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad6:	441a      	add	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000U * 60U * 60U * 24U)) {
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8005b90 <CO_TIME_process+0x168>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d90b      	bls.n	8005afe <CO_TIME_process+0xd6>
            TIME->ms -= ((uint32_t)1000U * 60U * 60U * 24U);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	689a      	ldr	r2, [r3, #8]
 8005aea:	4b2a      	ldr	r3, [pc, #168]	@ (8005b94 <CO_TIME_process+0x16c>)
 8005aec:	4413      	add	r3, r2
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	6093      	str	r3, [r2, #8]
            TIME->days += 1U;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	899b      	ldrh	r3, [r3, #12]
 8005af6:	3301      	adds	r3, #1
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	819a      	strh	r2, [r3, #12]
        }
    }

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
    if (NMTisPreOrOperational && TIME->isProducer && TIME->producerInterval_ms > 0) {
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d039      	beq.n	8005b78 <CO_TIME_process+0x150>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d035      	beq.n	8005b78 <CO_TIME_process+0x150>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d031      	beq.n	8005b78 <CO_TIME_process+0x150>
        if (TIME->producerTimer_ms >= TIME->producerInterval_ms) {
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6a1a      	ldr	r2, [r3, #32]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d324      	bcc.n	8005b6a <CO_TIME_process+0x142>
            TIME->producerTimer_ms -= TIME->producerInterval_ms;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a1a      	ldr	r2, [r3, #32]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	1ad2      	subs	r2, r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	621a      	str	r2, [r3, #32]

            uint32_t ms_swapped = CO_SWAP_32(TIME->ms);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	61bb      	str	r3, [r7, #24]
            uint16_t days_swapped = CO_SWAP_16(TIME->days);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	899b      	ldrh	r3, [r3, #12]
 8005b38:	82fb      	strh	r3, [r7, #22]
            (void)CO_setUint32(&TIME->CANtxBuff->data[0], ms_swapped);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b3e:	3305      	adds	r3, #5
 8005b40:	69b9      	ldr	r1, [r7, #24]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7ff fdf4 	bl	8005730 <CO_setUint32>
            (void)CO_setUint16(&TIME->CANtxBuff->data[4], days_swapped);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4c:	3309      	adds	r3, #9
 8005b4e:	8afa      	ldrh	r2, [r7, #22]
 8005b50:	4611      	mov	r1, r2
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7ff fddc 	bl	8005710 <CO_setUint16>
            (void)CO_CANsend(TIME->CANdevTx, TIME->CANtxBuff);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b60:	4619      	mov	r1, r3
 8005b62:	4610      	mov	r0, r2
 8005b64:	f002 f820 	bl	8007ba8 <CO_CANsend>
        if (TIME->producerTimer_ms >= TIME->producerInterval_ms) {
 8005b68:	e00a      	b.n	8005b80 <CO_TIME_process+0x158>
        } else {
            TIME->producerTimer_ms += ms;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6a1a      	ldr	r2, [r3, #32]
 8005b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b70:	441a      	add	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	621a      	str	r2, [r3, #32]
        if (TIME->producerTimer_ms >= TIME->producerInterval_ms) {
 8005b76:	e003      	b.n	8005b80 <CO_TIME_process+0x158>
        }
    } else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	69da      	ldr	r2, [r3, #28]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	621a      	str	r2, [r3, #32]
    }
#endif

    return timestampReceived;
 8005b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3730      	adds	r7, #48	@ 0x30
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	10624dd3 	.word	0x10624dd3
 8005b90:	05265bff 	.word	0x05265bff
 8005b94:	fad9a400 	.word	0xfad9a400

08005b98 <CO_fifo_init>:
#error CO_CONFIG_CRC16_ENABLE must be enabled.
#endif
#endif

void
CO_fifo_init(CO_fifo_t* fifo, uint8_t* buf, size_t bufSize) {
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]

    if ((fifo == NULL) || (buf == NULL) || (bufSize < 2U)) {
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d012      	beq.n	8005bd0 <CO_fifo_init+0x38>
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00f      	beq.n	8005bd0 <CO_fifo_init+0x38>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d90c      	bls.n	8005bd0 <CO_fifo_init+0x38>
        return;
    }

    fifo->readPtr = 0;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	60da      	str	r2, [r3, #12]
    fifo->writePtr = 0;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	609a      	str	r2, [r3, #8]
    fifo->buf = buf;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	601a      	str	r2, [r3, #0]
    fifo->bufSize = bufSize;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	605a      	str	r2, [r3, #4]

    return;
 8005bce:	e000      	b.n	8005bd2 <CO_fifo_init+0x3a>
        return;
 8005bd0:	bf00      	nop
}
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0

CO_ReturnError_t
CO_LEDs_init(CO_LEDs_t* LEDs) {
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8005be4:	2300      	movs	r3, #0
 8005be6:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d102      	bne.n	8005bf4 <CO_LEDs_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005bee:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf2:	e006      	b.n	8005c02 <CO_LEDs_init+0x26>
    }

    /* clear the object */
    (void)memset(LEDs, 0, sizeof(CO_LEDs_t));
 8005bf4:	220c      	movs	r2, #12
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f005 fa67 	bl	800b0cc <memset>

    return ret;
 8005bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <CO_LEDs_process>:

void
CO_LEDs_process(CO_LEDs_t* LEDs, uint32_t timeDifference_us, CO_NMT_internalState_t NMTstate, bool_t LSSconfig,
                bool_t ErrCANbusOff, bool_t ErrCANbusWarn, bool_t ErrRpdo, bool_t ErrSync, bool_t ErrHbCons,
                bool_t ErrOther, bool_t firmwareDownload, uint32_t* timerNext_us) {
 8005c0c:	b480      	push	{r7}
 8005c0e:	b089      	sub	sp, #36	@ 0x24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	77fb      	strb	r3, [r7, #31]
    uint8_t gr = 0;
 8005c20:	2300      	movs	r3, #0
 8005c22:	77bb      	strb	r3, [r7, #30]
    bool_t tick = false;
 8005c24:	2300      	movs	r3, #0
 8005c26:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	441a      	add	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000U) {
 8005c34:	e110      	b.n	8005e58 <CO_LEDs_process+0x24c>
        bool_t rdFlickerNext = (LEDs->LEDred & (uint8_t)CO_LED_flicker) == 0U;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	7a5b      	ldrb	r3, [r3, #9]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	bf0c      	ite	eq
 8005c42:	2301      	moveq	r3, #1
 8005c44:	2300      	movne	r3, #0
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	613b      	str	r3, [r7, #16]

        tick = true;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000U;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	4ba7      	ldr	r3, [pc, #668]	@ (8005ef0 <CO_LEDs_process+0x2e4>)
 8005c54:	4413      	add	r3, r2
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3U) {
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	791b      	ldrb	r3, [r3, #4]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	711a      	strb	r2, [r3, #4]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	791b      	ldrb	r3, [r3, #4]
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	f240 80dc 	bls.w	8005e28 <CO_LEDs_process+0x21c>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	711a      	strb	r2, [r3, #4]
            rd = 0;
 8005c76:	2300      	movs	r3, #0
 8005c78:	77fb      	strb	r3, [r7, #31]
            gr = 0;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	77bb      	strb	r3, [r7, #30]

            if ((LEDs->LEDred & CO_LED_blink) == 0U) {
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	7a5b      	ldrb	r3, [r3, #9]
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d104      	bne.n	8005c94 <CO_LEDs_process+0x88>
                rd |= CO_LED_blink;
 8005c8a:	7ffb      	ldrb	r3, [r7, #31]
 8005c8c:	f043 0302 	orr.w	r3, r3, #2
 8005c90:	77fb      	strb	r3, [r7, #31]
 8005c92:	e003      	b.n	8005c9c <CO_LEDs_process+0x90>
            } else {
                gr |= CO_LED_blink;
 8005c94:	7fbb      	ldrb	r3, [r7, #30]
 8005c96:	f043 0302 	orr.w	r3, r3, #2
 8005c9a:	77bb      	strb	r3, [r7, #30]
            }

            switch (++LEDs->LEDtmrflash_1) {
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	795b      	ldrb	r3, [r3, #5]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	715a      	strb	r2, [r3, #5]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	795b      	ldrb	r3, [r3, #5]
 8005cac:	2b06      	cmp	r3, #6
 8005cae:	d010      	beq.n	8005cd2 <CO_LEDs_process+0xc6>
 8005cb0:	2b06      	cmp	r3, #6
 8005cb2:	dc12      	bgt.n	8005cda <CO_LEDs_process+0xce>
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d002      	beq.n	8005cbe <CO_LEDs_process+0xb2>
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d005      	beq.n	8005cc8 <CO_LEDs_process+0xbc>
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: /* none */ break;
 8005cbc:	e00d      	b.n	8005cda <CO_LEDs_process+0xce>
                case 1: rd |= CO_LED_flash_1; break;
 8005cbe:	7ffb      	ldrb	r3, [r7, #31]
 8005cc0:	f043 0304 	orr.w	r3, r3, #4
 8005cc4:	77fb      	strb	r3, [r7, #31]
 8005cc6:	e009      	b.n	8005cdc <CO_LEDs_process+0xd0>
                case 2: gr |= CO_LED_flash_1; break;
 8005cc8:	7fbb      	ldrb	r3, [r7, #30]
 8005cca:	f043 0304 	orr.w	r3, r3, #4
 8005cce:	77bb      	strb	r3, [r7, #30]
 8005cd0:	e004      	b.n	8005cdc <CO_LEDs_process+0xd0>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	715a      	strb	r2, [r3, #5]
 8005cd8:	e000      	b.n	8005cdc <CO_LEDs_process+0xd0>
                default: /* none */ break;
 8005cda:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_2) {
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	799b      	ldrb	r3, [r3, #6]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	719a      	strb	r2, [r3, #6]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	799b      	ldrb	r3, [r3, #6]
 8005cec:	3b01      	subs	r3, #1
 8005cee:	2b07      	cmp	r3, #7
 8005cf0:	d820      	bhi.n	8005d34 <CO_LEDs_process+0x128>
 8005cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf8 <CO_LEDs_process+0xec>)
 8005cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf8:	08005d19 	.word	0x08005d19
 8005cfc:	08005d23 	.word	0x08005d23
 8005d00:	08005d19 	.word	0x08005d19
 8005d04:	08005d23 	.word	0x08005d23
 8005d08:	08005d35 	.word	0x08005d35
 8005d0c:	08005d35 	.word	0x08005d35
 8005d10:	08005d35 	.word	0x08005d35
 8005d14:	08005d2d 	.word	0x08005d2d
                case 1:
                case 3: rd |= CO_LED_flash_2; break;
 8005d18:	7ffb      	ldrb	r3, [r7, #31]
 8005d1a:	f043 0308 	orr.w	r3, r3, #8
 8005d1e:	77fb      	strb	r3, [r7, #31]
 8005d20:	e009      	b.n	8005d36 <CO_LEDs_process+0x12a>
                case 2:
                case 4: gr |= CO_LED_flash_2; break;
 8005d22:	7fbb      	ldrb	r3, [r7, #30]
 8005d24:	f043 0308 	orr.w	r3, r3, #8
 8005d28:	77bb      	strb	r3, [r7, #30]
 8005d2a:	e004      	b.n	8005d36 <CO_LEDs_process+0x12a>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	719a      	strb	r2, [r3, #6]
 8005d32:	e000      	b.n	8005d36 <CO_LEDs_process+0x12a>
                default: /* none */ break;
 8005d34:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_3) {
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	79db      	ldrb	r3, [r3, #7]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	71da      	strb	r2, [r3, #7]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	79db      	ldrb	r3, [r3, #7]
 8005d46:	2b0a      	cmp	r3, #10
 8005d48:	bf8c      	ite	hi
 8005d4a:	2201      	movhi	r2, #1
 8005d4c:	2200      	movls	r2, #0
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	2a00      	cmp	r2, #0
 8005d52:	d12c      	bne.n	8005dae <CO_LEDs_process+0x1a2>
 8005d54:	2201      	movs	r2, #1
 8005d56:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5a:	f003 0254 	and.w	r2, r3, #84	@ 0x54
 8005d5e:	2a00      	cmp	r2, #0
 8005d60:	bf14      	ite	ne
 8005d62:	2201      	movne	r2, #1
 8005d64:	2200      	moveq	r2, #0
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	2a00      	cmp	r2, #0
 8005d6a:	d117      	bne.n	8005d9c <CO_LEDs_process+0x190>
 8005d6c:	f003 022a 	and.w	r2, r3, #42	@ 0x2a
 8005d70:	2a00      	cmp	r2, #0
 8005d72:	bf14      	ite	ne
 8005d74:	2201      	movne	r2, #1
 8005d76:	2200      	moveq	r2, #0
 8005d78:	b2d2      	uxtb	r2, r2
 8005d7a:	2a00      	cmp	r2, #0
 8005d7c:	d109      	bne.n	8005d92 <CO_LEDs_process+0x186>
 8005d7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	bf14      	ite	ne
 8005d86:	2301      	movne	r3, #1
 8005d88:	2300      	moveq	r3, #0
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10a      	bne.n	8005da6 <CO_LEDs_process+0x19a>
                case 5: rd |= CO_LED_flash_3; break;
                case 2:
                case 4:
                case 6: gr |= CO_LED_flash_3; break;
                case 10: LEDs->LEDtmrflash_3 = 0; break;
                default: /* none */ break;
 8005d90:	e00d      	b.n	8005dae <CO_LEDs_process+0x1a2>
                case 5: rd |= CO_LED_flash_3; break;
 8005d92:	7ffb      	ldrb	r3, [r7, #31]
 8005d94:	f043 0310 	orr.w	r3, r3, #16
 8005d98:	77fb      	strb	r3, [r7, #31]
 8005d9a:	e009      	b.n	8005db0 <CO_LEDs_process+0x1a4>
                case 6: gr |= CO_LED_flash_3; break;
 8005d9c:	7fbb      	ldrb	r3, [r7, #30]
 8005d9e:	f043 0310 	orr.w	r3, r3, #16
 8005da2:	77bb      	strb	r3, [r7, #30]
 8005da4:	e004      	b.n	8005db0 <CO_LEDs_process+0x1a4>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	71da      	strb	r2, [r3, #7]
 8005dac:	e000      	b.n	8005db0 <CO_LEDs_process+0x1a4>
                default: /* none */ break;
 8005dae:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_4) {
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	7a1b      	ldrb	r3, [r3, #8]
 8005db4:	3301      	adds	r3, #1
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	721a      	strb	r2, [r3, #8]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	7a1b      	ldrb	r3, [r3, #8]
 8005dc0:	2b0c      	cmp	r3, #12
 8005dc2:	bf8c      	ite	hi
 8005dc4:	2201      	movhi	r2, #1
 8005dc6:	2200      	movls	r2, #0
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	2a00      	cmp	r2, #0
 8005dcc:	d137      	bne.n	8005e3e <CO_LEDs_process+0x232>
 8005dce:	2201      	movs	r2, #1
 8005dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd4:	f403 72aa 	and.w	r2, r3, #340	@ 0x154
 8005dd8:	2a00      	cmp	r2, #0
 8005dda:	bf14      	ite	ne
 8005ddc:	2201      	movne	r2, #1
 8005dde:	2200      	moveq	r2, #0
 8005de0:	b2d2      	uxtb	r2, r2
 8005de2:	2a00      	cmp	r2, #0
 8005de4:	d117      	bne.n	8005e16 <CO_LEDs_process+0x20a>
 8005de6:	f003 02aa 	and.w	r2, r3, #170	@ 0xaa
 8005dea:	2a00      	cmp	r2, #0
 8005dec:	bf14      	ite	ne
 8005dee:	2201      	movne	r2, #1
 8005df0:	2200      	moveq	r2, #0
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	2a00      	cmp	r2, #0
 8005df6:	d109      	bne.n	8005e0c <CO_LEDs_process+0x200>
 8005df8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	bf14      	ite	ne
 8005e00:	2301      	movne	r3, #1
 8005e02:	2300      	moveq	r3, #0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10a      	bne.n	8005e20 <CO_LEDs_process+0x214>
                case 2:
                case 4:
                case 6:
                case 8: gr |= CO_LED_flash_4; break;
                case 12: LEDs->LEDtmrflash_4 = 0; break;
                default: /* none */ break;
 8005e0a:	e018      	b.n	8005e3e <CO_LEDs_process+0x232>
                case 7: rd |= CO_LED_flash_4; break;
 8005e0c:	7ffb      	ldrb	r3, [r7, #31]
 8005e0e:	f043 0320 	orr.w	r3, r3, #32
 8005e12:	77fb      	strb	r3, [r7, #31]
 8005e14:	e014      	b.n	8005e40 <CO_LEDs_process+0x234>
                case 8: gr |= CO_LED_flash_4; break;
 8005e16:	7fbb      	ldrb	r3, [r7, #30]
 8005e18:	f043 0320 	orr.w	r3, r3, #32
 8005e1c:	77bb      	strb	r3, [r7, #30]
 8005e1e:	e00f      	b.n	8005e40 <CO_LEDs_process+0x234>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	721a      	strb	r2, [r3, #8]
 8005e26:	e00b      	b.n	8005e40 <CO_LEDs_process+0x234>
            }
        } else {
            /* clear flicker and CANopen bits, keep others */
            rd = LEDs->LEDred & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	7a5b      	ldrb	r3, [r3, #9]
 8005e2c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8005e30:	77fb      	strb	r3, [r7, #31]
            gr = LEDs->LEDgreen & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	7a9b      	ldrb	r3, [r3, #10]
 8005e36:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8005e3a:	77bb      	strb	r3, [r7, #30]
 8005e3c:	e000      	b.n	8005e40 <CO_LEDs_process+0x234>
                default: /* none */ break;
 8005e3e:	bf00      	nop
        }

        /* calculate 10Hz flickering */
        if (rdFlickerNext) {
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d004      	beq.n	8005e50 <CO_LEDs_process+0x244>
            rd |= CO_LED_flicker;
 8005e46:	7ffb      	ldrb	r3, [r7, #31]
 8005e48:	f043 0301 	orr.w	r3, r3, #1
 8005e4c:	77fb      	strb	r3, [r7, #31]
 8005e4e:	e003      	b.n	8005e58 <CO_LEDs_process+0x24c>
        } else {
            gr |= CO_LED_flicker;
 8005e50:	7fbb      	ldrb	r3, [r7, #30]
 8005e52:	f043 0301 	orr.w	r3, r3, #1
 8005e56:	77bb      	strb	r3, [r7, #30]
    while (LEDs->LEDtmr50ms >= 50000U) {
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8005e60:	4293      	cmp	r3, r2
 8005e62:	f63f aee8 	bhi.w	8005c36 <CO_LEDs_process+0x2a>
        }

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d07a      	beq.n	8005f62 <CO_LEDs_process+0x356>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if (ErrCANbusOff) {
 8005e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <CO_LEDs_process+0x26c>
            rd_co = 1;
 8005e72:	2301      	movs	r3, #1
 8005e74:	75fb      	strb	r3, [r7, #23]
 8005e76:	e032      	b.n	8005ede <CO_LEDs_process+0x2d2>
        } else if (NMTstate == CO_NMT_INITIALIZING) {
 8005e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d104      	bne.n	8005e8a <CO_LEDs_process+0x27e>
            rd_co = rd & CO_LED_flicker;
 8005e80:	7ffb      	ldrb	r3, [r7, #31]
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	75fb      	strb	r3, [r7, #23]
 8005e88:	e029      	b.n	8005ede <CO_LEDs_process+0x2d2>
        } else if (ErrRpdo) {
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d004      	beq.n	8005e9a <CO_LEDs_process+0x28e>
            rd_co = rd & CO_LED_flash_4;
 8005e90:	7ffb      	ldrb	r3, [r7, #31]
 8005e92:	f003 0320 	and.w	r3, r3, #32
 8005e96:	75fb      	strb	r3, [r7, #23]
 8005e98:	e021      	b.n	8005ede <CO_LEDs_process+0x2d2>
        } else if (ErrSync) {
 8005e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d004      	beq.n	8005eaa <CO_LEDs_process+0x29e>
            rd_co = rd & CO_LED_flash_3;
 8005ea0:	7ffb      	ldrb	r3, [r7, #31]
 8005ea2:	f003 0310 	and.w	r3, r3, #16
 8005ea6:	75fb      	strb	r3, [r7, #23]
 8005ea8:	e019      	b.n	8005ede <CO_LEDs_process+0x2d2>
        } else if (ErrHbCons) {
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d004      	beq.n	8005eba <CO_LEDs_process+0x2ae>
            rd_co = rd & CO_LED_flash_2;
 8005eb0:	7ffb      	ldrb	r3, [r7, #31]
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	75fb      	strb	r3, [r7, #23]
 8005eb8:	e011      	b.n	8005ede <CO_LEDs_process+0x2d2>
        } else if (ErrCANbusWarn) {
 8005eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d004      	beq.n	8005eca <CO_LEDs_process+0x2be>
            rd_co = rd & CO_LED_flash_1;
 8005ec0:	7ffb      	ldrb	r3, [r7, #31]
 8005ec2:	f003 0304 	and.w	r3, r3, #4
 8005ec6:	75fb      	strb	r3, [r7, #23]
 8005ec8:	e009      	b.n	8005ede <CO_LEDs_process+0x2d2>
        } else if (ErrOther) {
 8005eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d004      	beq.n	8005eda <CO_LEDs_process+0x2ce>
            rd_co = rd & CO_LED_blink;
 8005ed0:	7ffb      	ldrb	r3, [r7, #31]
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	75fb      	strb	r3, [r7, #23]
 8005ed8:	e001      	b.n	8005ede <CO_LEDs_process+0x2d2>
        } else {
            rd_co = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	75fb      	strb	r3, [r7, #23]
        }

        /* CANopen green RUN LED */
        if (LSSconfig) {
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d007      	beq.n	8005ef4 <CO_LEDs_process+0x2e8>
            gr_co = gr & CO_LED_flicker;
 8005ee4:	7fbb      	ldrb	r3, [r7, #30]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	75bb      	strb	r3, [r7, #22]
 8005eec:	e025      	b.n	8005f3a <CO_LEDs_process+0x32e>
 8005eee:	bf00      	nop
 8005ef0:	ffff3cb0 	.word	0xffff3cb0
        } else if (firmwareDownload) {
 8005ef4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d004      	beq.n	8005f04 <CO_LEDs_process+0x2f8>
            gr_co = gr & CO_LED_flash_3;
 8005efa:	7fbb      	ldrb	r3, [r7, #30]
 8005efc:	f003 0310 	and.w	r3, r3, #16
 8005f00:	75bb      	strb	r3, [r7, #22]
 8005f02:	e01a      	b.n	8005f3a <CO_LEDs_process+0x32e>
        } else if (NMTstate == CO_NMT_STOPPED) {
 8005f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f08:	2b04      	cmp	r3, #4
 8005f0a:	d104      	bne.n	8005f16 <CO_LEDs_process+0x30a>
            gr_co = gr & CO_LED_flash_1;
 8005f0c:	7fbb      	ldrb	r3, [r7, #30]
 8005f0e:	f003 0304 	and.w	r3, r3, #4
 8005f12:	75bb      	strb	r3, [r7, #22]
 8005f14:	e011      	b.n	8005f3a <CO_LEDs_process+0x32e>
        } else if (NMTstate == CO_NMT_PRE_OPERATIONAL) {
 8005f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f1c:	d104      	bne.n	8005f28 <CO_LEDs_process+0x31c>
            gr_co = gr & CO_LED_blink;
 8005f1e:	7fbb      	ldrb	r3, [r7, #30]
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	75bb      	strb	r3, [r7, #22]
 8005f26:	e008      	b.n	8005f3a <CO_LEDs_process+0x32e>
        } else if (NMTstate == CO_NMT_OPERATIONAL) {
 8005f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f2c:	2b05      	cmp	r3, #5
 8005f2e:	d102      	bne.n	8005f36 <CO_LEDs_process+0x32a>
            gr_co = 1;
 8005f30:	2301      	movs	r3, #1
 8005f32:	75bb      	strb	r3, [r7, #22]
 8005f34:	e001      	b.n	8005f3a <CO_LEDs_process+0x32e>
        } else {
            gr_co = 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	75bb      	strb	r3, [r7, #22]
        }

        if (rd_co != 0U) {
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <CO_LEDs_process+0x33c>
            rd |= CO_LED_CANopen;
 8005f40:	7ffb      	ldrb	r3, [r7, #31]
 8005f42:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f46:	77fb      	strb	r3, [r7, #31]
        }
        if (gr_co != 0U) {
 8005f48:	7dbb      	ldrb	r3, [r7, #22]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <CO_LEDs_process+0x34a>
            gr |= CO_LED_CANopen;
 8005f4e:	7fbb      	ldrb	r3, [r7, #30]
 8005f50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f54:	77bb      	strb	r3, [r7, #30]
        }
        LEDs->LEDred = rd;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	7ffa      	ldrb	r2, [r7, #31]
 8005f5a:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	7fba      	ldrb	r2, [r7, #30]
 8005f60:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 8005f62:	bf00      	nop
 8005f64:	3724      	adds	r7, #36	@ 0x24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop

08005f70 <CO_LSSslave_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_LSSslave_receive(void* object, void* msg) {
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b090      	sub	sp, #64	@ 0x40
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t* LSSslave = (CO_LSSslave_t*)object;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	791b      	ldrb	r3, [r3, #4]
 8005f82:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    if ((DLC == 8U) && !CO_FLAG_READ(LSSslave->sendResponse)) {
 8005f86:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005f8a:	2b08      	cmp	r3, #8
 8005f8c:	f040 8159 	bne.w	8006242 <CO_LSSslave_receive+0x2d2>
 8005f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f040 8154 	bne.w	8006242 <CO_LSSslave_receive+0x2d2>
        bool_t request_LSSslave_process = false;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        const uint8_t* data = CO_CANrxMsg_readData(msg);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	3305      	adds	r3, #5
 8005fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t cs = data[0];
 8005fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 8005fac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	d12d      	bne.n	8006010 <CO_LSSslave_receive+0xa0>
            uint8_t mode = data[1];
 8005fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 8005fbc:	7ffb      	ldrb	r3, [r7, #31]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <CO_LSSslave_receive+0x58>
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d020      	beq.n	8006008 <CO_LSSslave_receive+0x98>
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
                    break;
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
                default:
                    /* none */
                    break;
 8005fc6:	e12c      	b.n	8006222 <CO_LSSslave_receive+0x2b2>
                    if ((LSSslave->lssState == CO_LSS_STATE_CONFIGURATION)
 8005fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fca:	7c1b      	ldrb	r3, [r3, #16]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d110      	bne.n	8005ff2 <CO_LSSslave_receive+0x82>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8005fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fd6:	2bff      	cmp	r3, #255	@ 0xff
 8005fd8:	d10b      	bne.n	8005ff2 <CO_LSSslave_receive+0x82>
                        && (*LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)) {
 8005fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2bff      	cmp	r3, #255	@ 0xff
 8005fe2:	d006      	beq.n	8005ff2 <CO_LSSslave_receive+0x82>
                        LSSslave->service = cs;
 8005fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fe6:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005fea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                        request_LSSslave_process = true;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8005ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	741a      	strb	r2, [r3, #16]
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
 8005ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ffa:	3314      	adds	r3, #20
 8005ffc:	2210      	movs	r2, #16
 8005ffe:	2100      	movs	r1, #0
 8006000:	4618      	mov	r0, r3
 8006002:	f005 f863 	bl	800b0cc <memset>
                    break;
 8006006:	e10c      	b.n	8006222 <CO_LSSslave_receive+0x2b2>
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
 8006008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800600a:	2201      	movs	r2, #1
 800600c:	741a      	strb	r2, [r3, #16]
 800600e:	e108      	b.n	8006222 <CO_LSSslave_receive+0x2b2>
            }
        } else if (LSSslave->lssState == CO_LSS_STATE_WAITING) {
 8006010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006012:	7c1b      	ldrb	r3, [r3, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	f040 80f0 	bne.w	80061fa <CO_LSSslave_receive+0x28a>
            switch (cs) {
 800601a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800601e:	3b40      	subs	r3, #64	@ 0x40
 8006020:	2b11      	cmp	r3, #17
 8006022:	f200 80f9 	bhi.w	8006218 <CO_LSSslave_receive+0x2a8>
 8006026:	a201      	add	r2, pc, #4	@ (adr r2, 800602c <CO_LSSslave_receive+0xbc>)
 8006028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602c:	08006075 	.word	0x08006075
 8006030:	08006085 	.word	0x08006085
 8006034:	08006095 	.word	0x08006095
 8006038:	080060a5 	.word	0x080060a5
 800603c:	08006219 	.word	0x08006219
 8006040:	08006219 	.word	0x08006219
 8006044:	08006219 	.word	0x08006219
 8006048:	08006219 	.word	0x08006219
 800604c:	08006219 	.word	0x08006219
 8006050:	08006219 	.word	0x08006219
 8006054:	08006219 	.word	0x08006219
 8006058:	08006219 	.word	0x08006219
 800605c:	08006219 	.word	0x08006219
 8006060:	08006219 	.word	0x08006219
 8006064:	08006219 	.word	0x08006219
 8006068:	08006219 	.word	0x08006219
 800606c:	08006219 	.word	0x08006219
 8006070:	08006101 	.word	0x08006101
                case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8006074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006076:	3301      	adds	r3, #1
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	61bb      	str	r3, [r7, #24]
                    LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006080:	615a      	str	r2, [r3, #20]
                    break;
 8006082:	e0ce      	b.n	8006222 <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8006084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006086:	3301      	adds	r3, #1
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	617b      	str	r3, [r7, #20]
                    LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006090:	619a      	str	r2, [r3, #24]
                    break;
 8006092:	e0c6      	b.n	8006222 <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_REV: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8006094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006096:	3301      	adds	r3, #1
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	613b      	str	r3, [r7, #16]
                    LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060a0:	61da      	str	r2, [r3, #28]
                    break;
 80060a2:	e0be      	b.n	8006222 <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 80060a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a6:	3301      	adds	r3, #1
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60fb      	str	r3, [r7, #12]
                    LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b0:	621a      	str	r2, [r3, #32]

                    if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress, LSSslave->lssSelect)) {
 80060b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	f040 80ae 	bne.w	800621c <CO_LSSslave_receive+0x2ac>
 80060c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	f040 80a7 	bne.w	800621c <CO_LSSslave_receive+0x2ac>
 80060ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	f040 80a0 	bne.w	800621c <CO_LSSslave_receive+0x2ac>
 80060dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e2:	695b      	ldr	r3, [r3, #20]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	f040 8099 	bne.w	800621c <CO_LSSslave_receive+0x2ac>
                        LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 80060ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ec:	2201      	movs	r2, #1
 80060ee:	741a      	strb	r2, [r3, #16]
                        LSSslave->service = cs;
 80060f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060f2:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80060f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                        request_LSSslave_process = true;
 80060fa:	2301      	movs	r3, #1
 80060fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    }
                    break;
 80060fe:	e08d      	b.n	800621c <CO_LSSslave_receive+0x2ac>
                }
                case CO_LSS_IDENT_FASTSCAN: {
                    /* fastscan is only active on unconfigured nodes */
                    if ((*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8006100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	2bff      	cmp	r3, #255	@ 0xff
 8006108:	f040 808a 	bne.w	8006220 <CO_LSSslave_receive+0x2b0>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)) {
 800610c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800610e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006112:	2bff      	cmp	r3, #255	@ 0xff
 8006114:	f040 8084 	bne.w	8006220 <CO_LSSslave_receive+0x2b0>
                        uint8_t bitCheck = data[5];
 8006118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800611a:	3305      	adds	r3, #5
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                        uint8_t lssSub = data[6];
 8006122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006124:	3306      	adds	r3, #6
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                        uint8_t lssNext = data[7];
 800612c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612e:	3307      	adds	r3, #7
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                        uint32_t valSw;
                        uint32_t idNumber;
                        bool_t ack;

                        if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub)
 8006136:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800613a:	2b1f      	cmp	r3, #31
 800613c:	d903      	bls.n	8006146 <CO_LSSslave_receive+0x1d6>
 800613e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006142:	2b80      	cmp	r3, #128	@ 0x80
 8006144:	d16d      	bne.n	8006222 <CO_LSSslave_receive+0x2b2>
 8006146:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800614a:	2b03      	cmp	r3, #3
 800614c:	d869      	bhi.n	8006222 <CO_LSSslave_receive+0x2b2>
                            || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
 800614e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006152:	2b03      	cmp	r3, #3
 8006154:	d865      	bhi.n	8006222 <CO_LSSslave_receive+0x2b2>
                            /* Invalid request */
                            break;
                        }

                        (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8006156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006158:	3301      	adds	r3, #1
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	60bb      	str	r3, [r7, #8]
                        idNumber = CO_SWAP_32(valSw);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	627b      	str	r3, [r7, #36]	@ 0x24
                        ack = false;
 8006162:	2300      	movs	r3, #0
 8006164:	63bb      	str	r3, [r7, #56]	@ 0x38

                        if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 8006166:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800616a:	2b80      	cmp	r3, #128	@ 0x80
 800616c:	d10d      	bne.n	800618a <CO_LSSslave_receive+0x21a>
                            /* Confirm, Reset */
                            ack = true;
 800616e:	2301      	movs	r3, #1
 8006170:	63bb      	str	r3, [r7, #56]	@ 0x38
                            LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8006172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                            (void)memset(&LSSslave->lssFastscan, 0, sizeof(LSSslave->lssFastscan));
 800617a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800617c:	3324      	adds	r3, #36	@ 0x24
 800617e:	2210      	movs	r2, #16
 8006180:	2100      	movs	r1, #0
 8006182:	4618      	mov	r0, r3
 8006184:	f004 ffa2 	bl	800b0cc <memset>
 8006188:	e02c      	b.n	80061e4 <CO_LSSslave_receive+0x274>
                        } else if (LSSslave->fastscanPos == lssSub) {
 800618a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800618c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006190:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8006194:	429a      	cmp	r2, r3
 8006196:	d125      	bne.n	80061e4 <CO_LSSslave_receive+0x274>
                            uint32_t mask = 0xFFFFFFFFU << bitCheck;
 8006198:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800619c:	f04f 32ff 	mov.w	r2, #4294967295
 80061a0:	fa02 f303 	lsl.w	r3, r2, r3
 80061a4:	623b      	str	r3, [r7, #32]

                            if ((LSSslave->lssAddress.addr[lssSub] & mask) == (idNumber & mask)) {
 80061a6:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80061aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b2:	405a      	eors	r2, r3
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	4013      	ands	r3, r2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d113      	bne.n	80061e4 <CO_LSSslave_receive+0x274>
                                /* all requested bits match */
                                ack = true;
 80061bc:	2301      	movs	r3, #1
 80061be:	63bb      	str	r3, [r7, #56]	@ 0x38
                                LSSslave->fastscanPos = lssNext;
 80061c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80061c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

                                if ((bitCheck == 0U) && (lssNext < lssSub)) {
 80061ca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d108      	bne.n	80061e4 <CO_LSSslave_receive+0x274>
 80061d2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80061d6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80061da:	429a      	cmp	r2, r3
 80061dc:	d202      	bcs.n	80061e4 <CO_LSSslave_receive+0x274>
                                    /* complete match, enter configuration state */
                                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 80061de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061e0:	2201      	movs	r2, #1
 80061e2:	741a      	strb	r2, [r3, #16]
                                }
                            }
                        } else { /* MISRA C 2004 14.10 */
                        }
                        if (ack) {
 80061e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d01a      	beq.n	8006220 <CO_LSSslave_receive+0x2b0>
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE_FASTSCAN_DIRECT_RESPOND) != 0
                            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                            (void)memset(&LSSslave->TXbuff->data[1], 0, sizeof(LSSslave->TXbuff->data) - 1U);
                            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                            LSSslave->service = cs;
 80061ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ec:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80061f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                            request_LSSslave_process = true;
 80061f4:	2301      	movs	r3, #1
 80061f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
                        }
                    }
                    break;
 80061f8:	e012      	b.n	8006220 <CO_LSSslave_receive+0x2b0>
                    /* none */
                    break;
                }
            }
        } else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            (void)memcpy((void*)(&LSSslave->CANdata[0]), (const void*)(&data[0]), sizeof(LSSslave->CANdata));
 80061fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061fc:	3349      	adds	r3, #73	@ 0x49
 80061fe:	2208      	movs	r2, #8
 8006200:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006202:	4618      	mov	r0, r3
 8006204:	f004 ffed 	bl	800b1e2 <memcpy>
            LSSslave->service = cs;
 8006208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800620a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800620e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            request_LSSslave_process = true;
 8006212:	2301      	movs	r3, #1
 8006214:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006216:	e004      	b.n	8006222 <CO_LSSslave_receive+0x2b2>
                    break;
 8006218:	bf00      	nop
 800621a:	e002      	b.n	8006222 <CO_LSSslave_receive+0x2b2>
                    break;
 800621c:	bf00      	nop
 800621e:	e000      	b.n	8006222 <CO_LSSslave_receive+0x2b2>
                    break;
 8006220:	bf00      	nop
        }

        if (request_LSSslave_process) {
 8006222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00c      	beq.n	8006242 <CO_LSSslave_receive+0x2d2>
            CO_FLAG_SET(LSSslave->sendResponse);
 8006228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800622a:	2201      	movs	r2, #1
 800622c:	645a      	str	r2, [r3, #68]	@ 0x44
#if ((CO_CONFIG_LSS)&CO_CONFIG_FLAG_CALLBACK_PRE) != 0
            /* Optional signal to RTOS, which can resume task, which handles further processing. */
            if (LSSslave->pFunctSignalPre != NULL) {
 800622e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006232:	2b00      	cmp	r3, #0
 8006234:	d005      	beq.n	8006242 <CO_LSSslave_receive+0x2d2>
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
 8006236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800623a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800623c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800623e:	4610      	mov	r0, r2
 8006240:	4798      	blx	r3
            }
#endif
        }
    }
}
 8006242:	bf00      	nop
 8006244:	3740      	adds	r7, #64	@ 0x40
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop

0800624c <CO_LSSslave_init>:

CO_ReturnError_t
CO_LSSslave_init(CO_LSSslave_t* LSSslave, CO_LSS_address_t* lssAddress, uint16_t* pendingBitRate,
                 uint8_t* pendingNodeID, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANidLssMaster,
                 CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx, uint16_t CANidLssSlave) {
 800624c:	b580      	push	{r7, lr}
 800624e:	b08a      	sub	sp, #40	@ 0x28
 8006250:	af04      	add	r7, sp, #16
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800625a:	2300      	movs	r3, #0
 800625c:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((LSSslave == NULL) || (pendingBitRate == NULL) || (pendingNodeID == NULL) || (CANdevRx == NULL)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d018      	beq.n	8006296 <CO_LSSslave_init+0x4a>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d015      	beq.n	8006296 <CO_LSSslave_init+0x4a>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d012      	beq.n	8006296 <CO_LSSslave_init+0x4a>
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00f      	beq.n	8006296 <CO_LSSslave_init+0x4a>
        || (CANdevTx == NULL) || !CO_LSS_NODE_ID_VALID(*pendingNodeID)) {
 8006276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00c      	beq.n	8006296 <CO_LSSslave_init+0x4a>
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d004      	beq.n	800628e <CO_LSSslave_init+0x42>
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	b25b      	sxtb	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	da06      	bge.n	800629c <CO_LSSslave_init+0x50>
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	2bff      	cmp	r3, #255	@ 0xff
 8006294:	d002      	beq.n	800629c <CO_LSSslave_init+0x50>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006296:	f04f 33ff 	mov.w	r3, #4294967295
 800629a:	e046      	b.n	800632a <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    (void)memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 800629c:	227c      	movs	r2, #124	@ 0x7c
 800629e:	2100      	movs	r1, #0
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f004 ff13 	bl	800b0cc <memset>

    /* Configure object variables */
    (void)memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2210      	movs	r2, #16
 80062aa:	68b9      	ldr	r1, [r7, #8]
 80062ac:	4618      	mov	r0, r3
 80062ae:	f004 ff98 	bl	800b1e2 <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	639a      	str	r2, [r3, #56]	@ 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781a      	ldrb	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CANidLssMaster, 0x7FF, false, (void*)LSSslave, CO_LSSslave_receive);
 80062dc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80062de:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80062e0:	4b14      	ldr	r3, [pc, #80]	@ (8006334 <CO_LSSslave_init+0xe8>)
 80062e2:	9302      	str	r3, [sp, #8]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	9301      	str	r3, [sp, #4]
 80062e8:	2300      	movs	r3, #0
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80062f0:	6a38      	ldr	r0, [r7, #32]
 80062f2:	f001 fb83 	bl	80079fc <CO_CANrxBufferInit>
 80062f6:	4603      	mov	r3, r0
 80062f8:	75fb      	strb	r3, [r7, #23]

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062fe:	675a      	str	r2, [r3, #116]	@ 0x74
    LSSslave->TXbuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CANidLssSlave, false, 8, false);
 8006300:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006302:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8006304:	2300      	movs	r3, #0
 8006306:	9301      	str	r3, [sp, #4]
 8006308:	2308      	movs	r3, #8
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	2300      	movs	r3, #0
 800630e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006310:	f001 fbd0 	bl	8007ab4 <CO_CANtxBufferInit>
 8006314:	4602      	mov	r2, r0
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	679a      	str	r2, [r3, #120]	@ 0x78

    if (LSSslave->TXbuff == NULL) {
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8006322:	23ff      	movs	r3, #255	@ 0xff
 8006324:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 8006326:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	08005f71 	.word	0x08005f71

08006338 <CO_LSSslave_process>:
        LSSslave->pFunctLSScfgStore = pFunctLSScfgStore;
    }
}

bool_t
CO_LSSslave_process(CO_LSSslave_t* LSSslave) {
 8006338:	b580      	push	{r7, lr}
 800633a:	b08c      	sub	sp, #48	@ 0x30
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 8006340:	2300      	movs	r3, #0
 8006342:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 8202 	beq.w	8006752 <CO_LSSslave_process+0x41a>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 800634e:	2300      	movs	r3, #0
 8006350:	627b      	str	r3, [r7, #36]	@ 0x24
        uint32_t valSw;

        (void)memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006356:	3305      	adds	r3, #5
 8006358:	2208      	movs	r2, #8
 800635a:	2100      	movs	r1, #0
 800635c:	4618      	mov	r0, r3
 800635e:	f004 feb5 	bl	800b0cc <memset>

        switch (LSSslave->service) {
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8006368:	3b04      	subs	r3, #4
 800636a:	2b5a      	cmp	r3, #90	@ 0x5a
 800636c:	f200 81dc 	bhi.w	8006728 <CO_LSSslave_process+0x3f0>
 8006370:	a201      	add	r2, pc, #4	@ (adr r2, 8006378 <CO_LSSslave_process+0x40>)
 8006372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006376:	bf00      	nop
 8006378:	080064e5 	.word	0x080064e5
 800637c:	08006729 	.word	0x08006729
 8006380:	08006729 	.word	0x08006729
 8006384:	08006729 	.word	0x08006729
 8006388:	08006729 	.word	0x08006729
 800638c:	08006729 	.word	0x08006729
 8006390:	08006729 	.word	0x08006729
 8006394:	08006729 	.word	0x08006729
 8006398:	08006729 	.word	0x08006729
 800639c:	08006729 	.word	0x08006729
 80063a0:	08006729 	.word	0x08006729
 80063a4:	08006729 	.word	0x08006729
 80063a8:	08006729 	.word	0x08006729
 80063ac:	080064f9 	.word	0x080064f9
 80063b0:	08006729 	.word	0x08006729
 80063b4:	08006547 	.word	0x08006547
 80063b8:	08006729 	.word	0x08006729
 80063bc:	080065e3 	.word	0x080065e3
 80063c0:	08006729 	.word	0x08006729
 80063c4:	0800661f 	.word	0x0800661f
 80063c8:	08006729 	.word	0x08006729
 80063cc:	08006729 	.word	0x08006729
 80063d0:	08006729 	.word	0x08006729
 80063d4:	08006729 	.word	0x08006729
 80063d8:	08006729 	.word	0x08006729
 80063dc:	08006729 	.word	0x08006729
 80063e0:	08006729 	.word	0x08006729
 80063e4:	08006729 	.word	0x08006729
 80063e8:	08006729 	.word	0x08006729
 80063ec:	08006729 	.word	0x08006729
 80063f0:	08006729 	.word	0x08006729
 80063f4:	08006729 	.word	0x08006729
 80063f8:	08006729 	.word	0x08006729
 80063fc:	08006729 	.word	0x08006729
 8006400:	08006729 	.word	0x08006729
 8006404:	08006729 	.word	0x08006729
 8006408:	08006729 	.word	0x08006729
 800640c:	08006729 	.word	0x08006729
 8006410:	08006729 	.word	0x08006729
 8006414:	08006729 	.word	0x08006729
 8006418:	08006729 	.word	0x08006729
 800641c:	08006729 	.word	0x08006729
 8006420:	08006729 	.word	0x08006729
 8006424:	08006729 	.word	0x08006729
 8006428:	08006729 	.word	0x08006729
 800642c:	08006729 	.word	0x08006729
 8006430:	08006729 	.word	0x08006729
 8006434:	08006729 	.word	0x08006729
 8006438:	08006729 	.word	0x08006729
 800643c:	08006729 	.word	0x08006729
 8006440:	08006729 	.word	0x08006729
 8006444:	08006729 	.word	0x08006729
 8006448:	08006729 	.word	0x08006729
 800644c:	08006729 	.word	0x08006729
 8006450:	08006729 	.word	0x08006729
 8006454:	08006729 	.word	0x08006729
 8006458:	08006729 	.word	0x08006729
 800645c:	08006729 	.word	0x08006729
 8006460:	08006729 	.word	0x08006729
 8006464:	08006729 	.word	0x08006729
 8006468:	08006729 	.word	0x08006729
 800646c:	08006729 	.word	0x08006729
 8006470:	08006729 	.word	0x08006729
 8006474:	080064eb 	.word	0x080064eb
 8006478:	08006729 	.word	0x08006729
 800647c:	08006729 	.word	0x08006729
 8006480:	08006729 	.word	0x08006729
 8006484:	08006729 	.word	0x08006729
 8006488:	08006729 	.word	0x08006729
 800648c:	08006729 	.word	0x08006729
 8006490:	08006729 	.word	0x08006729
 8006494:	08006729 	.word	0x08006729
 8006498:	08006729 	.word	0x08006729
 800649c:	08006729 	.word	0x08006729
 80064a0:	08006729 	.word	0x08006729
 80064a4:	08006729 	.word	0x08006729
 80064a8:	08006729 	.word	0x08006729
 80064ac:	0800671b 	.word	0x0800671b
 80064b0:	08006729 	.word	0x08006729
 80064b4:	08006729 	.word	0x08006729
 80064b8:	08006729 	.word	0x08006729
 80064bc:	08006729 	.word	0x08006729
 80064c0:	08006729 	.word	0x08006729
 80064c4:	08006729 	.word	0x08006729
 80064c8:	08006729 	.word	0x08006729
 80064cc:	08006729 	.word	0x08006729
 80064d0:	08006675 	.word	0x08006675
 80064d4:	08006697 	.word	0x08006697
 80064d8:	080066b9 	.word	0x080066b9
 80064dc:	080066db 	.word	0x080066db
 80064e0:	080066fd 	.word	0x080066fd
            case CO_LSS_SWITCH_STATE_GLOBAL: {
                /* Node-Id was unconfigured before, now it is configured,
                 * enter the NMT Reset communication autonomously. */
                resetCommunication = true;
 80064e4:	2301      	movs	r3, #1
 80064e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 80064e8:	e125      	b.n	8006736 <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064ee:	2244      	movs	r2, #68	@ 0x44
 80064f0:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 80064f2:	2301      	movs	r3, #1
 80064f4:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 80064f6:	e11e      	b.n	8006736 <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_CFG_NODE_ID: {
                nid = LSSslave->CANdata[1];
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80064fe:	74fb      	strb	r3, [r7, #19]
                errorCode = CO_LSS_CFG_NODE_ID_OK;
 8006500:	2300      	movs	r3, #0
 8006502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if (CO_LSS_NODE_ID_VALID(nid)) {
 8006506:	7cfb      	ldrb	r3, [r7, #19]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <CO_LSSslave_process+0x1dc>
 800650c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006510:	2b00      	cmp	r3, #0
 8006512:	da02      	bge.n	800651a <CO_LSSslave_process+0x1e2>
 8006514:	7cfb      	ldrb	r3, [r7, #19]
 8006516:	2bff      	cmp	r3, #255	@ 0xff
 8006518:	d104      	bne.n	8006524 <CO_LSSslave_process+0x1ec>
                    *LSSslave->pendingNodeID = nid;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800651e:	7cfa      	ldrb	r2, [r7, #19]
 8006520:	701a      	strb	r2, [r3, #0]
 8006522:	e002      	b.n	800652a <CO_LSSslave_process+0x1f2>
                } else {
                    errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 8006524:	2301      	movs	r3, #1
 8006526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8006534:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800653a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800653e:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 8006540:	2301      	movs	r3, #1
 8006542:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8006544:	e0f7      	b.n	8006736 <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_CFG_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 80ee 	beq.w	800672c <CO_LSSslave_process+0x3f4>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                tableSelector = LSSslave->CANdata[1];
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8006556:	777b      	strb	r3, [r7, #29]
                tableIndex = LSSslave->CANdata[2];
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800655e:	773b      	strb	r3, [r7, #28]
                errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 800656c:	7f7b      	ldrb	r3, [r7, #29]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d121      	bne.n	80065b6 <CO_LSSslave_process+0x27e>
 8006572:	7f3b      	ldrb	r3, [r7, #28]
 8006574:	2b05      	cmp	r3, #5
 8006576:	d01e      	beq.n	80065b6 <CO_LSSslave_process+0x27e>
 8006578:	7f3b      	ldrb	r3, [r7, #28]
 800657a:	2b09      	cmp	r3, #9
 800657c:	d81b      	bhi.n	80065b6 <CO_LSSslave_process+0x27e>
                    uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 800657e:	7f3b      	ldrb	r3, [r7, #28]
 8006580:	4a76      	ldr	r2, [pc, #472]	@ (800675c <CO_LSSslave_process+0x424>)
 8006582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006586:	837b      	strh	r3, [r7, #26]
                    bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(LSSslave->functLSScheckBitRateObject,
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8006590:	8b79      	ldrh	r1, [r7, #26]
 8006592:	4610      	mov	r0, r2
 8006594:	4798      	blx	r3
 8006596:	6178      	str	r0, [r7, #20]
                                                                                bit);

                    if (bit_rate_supported) {
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d004      	beq.n	80065a8 <CO_LSSslave_process+0x270>
                        *LSSslave->pendingBitRate = bit;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a2:	8b7a      	ldrh	r2, [r7, #26]
 80065a4:	801a      	strh	r2, [r3, #0]
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 80065a6:	e009      	b.n	80065bc <CO_LSSslave_process+0x284>
                    } else {
                        errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 80065a8:	23ff      	movs	r3, #255	@ 0xff
 80065aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                        errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 80065ae:	2301      	movs	r3, #1
 80065b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 80065b4:	e002      	b.n	80065bc <CO_LSSslave_process+0x284>
                    }
                } else {
                    /* we currently only support CiA301 bit timing table */
                    errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 80065b6:	2301      	movs	r3, #1
 80065b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 80065c6:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065cc:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80065d0:	719a      	strb	r2, [r3, #6]
                LSSslave->TXbuff->data[2] = errorCodeManuf;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065d6:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 80065da:	71da      	strb	r2, [r3, #7]
                CANsend = true;
 80065dc:	2301      	movs	r3, #1
 80065de:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 80065e0:	e0a9      	b.n	8006736 <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f000 80a2 	beq.w	8006730 <CO_LSSslave_process+0x3f8>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                /* notify application */
                if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 809f 	beq.w	8006734 <CO_LSSslave_process+0x3fc>
                    uint16_t delay = ((uint16_t)LSSslave->CANdata[2]) << 8;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80065fc:	021b      	lsls	r3, r3, #8
 80065fe:	83fb      	strh	r3, [r7, #30]
                    delay |= LSSslave->CANdata[1];
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8006606:	461a      	mov	r2, r3
 8006608:	8bfb      	ldrh	r3, [r7, #30]
 800660a:	4313      	orrs	r3, r2
 800660c:	83fb      	strh	r3, [r7, #30]
                    LSSslave->pFunctLSSactivateBitRate(LSSslave->functLSSactivateBitRateObject, delay);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006616:	8bf9      	ldrh	r1, [r7, #30]
 8006618:	4610      	mov	r0, r2
 800661a:	4798      	blx	r3
                }
                break;
 800661c:	e08a      	b.n	8006734 <CO_LSSslave_process+0x3fc>
            }
            case CO_LSS_CFG_STORE: {
                errorCode = CO_LSS_CFG_STORE_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if (LSSslave->pFunctLSScfgStore == NULL) {
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006628:	2b00      	cmp	r3, #0
 800662a:	d103      	bne.n	8006634 <CO_LSSslave_process+0x2fc>
                    /* storing is not supported. Reply error */
                    errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 800662c:	2301      	movs	r3, #1
 800662e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006632:	e011      	b.n	8006658 <CO_LSSslave_process+0x320>
                } else {
                    bool_t result;
                    /* Store "pending" to "persistent" */
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006640:	7811      	ldrb	r1, [r2, #0]
                                                         *LSSslave->pendingBitRate);
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	6b92      	ldr	r2, [r2, #56]	@ 0x38
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 8006646:	8812      	ldrh	r2, [r2, #0]
 8006648:	4798      	blx	r3
 800664a:	6238      	str	r0, [r7, #32]
                    if (!result) {
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d102      	bne.n	8006658 <CO_LSSslave_process+0x320>
                        errorCode = CO_LSS_CFG_STORE_FAILED;
 8006652:	2302      	movs	r3, #2
 8006654:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                    }
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8006662:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006668:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800666c:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 800666e:	2301      	movs	r3, #1
 8006670:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8006672:	e060      	b.n	8006736 <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_VENDOR: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 800667e:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800668a:	3306      	adds	r3, #6
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	601a      	str	r2, [r3, #0]
                CANsend = true;
 8006690:	2301      	movs	r3, #1
 8006692:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8006694:	e04f      	b.n	8006736 <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_PRODUCT: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 80066a0:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066ac:	3306      	adds	r3, #6
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	601a      	str	r2, [r3, #0]
                CANsend = true;
 80066b2:	2301      	movs	r3, #1
 80066b4:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 80066b6:	e03e      	b.n	8006736 <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_REV: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 80066c2:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066ce:	3306      	adds	r3, #6
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	601a      	str	r2, [r3, #0]
                CANsend = true;
 80066d4:	2301      	movs	r3, #1
 80066d6:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 80066d8:	e02d      	b.n	8006736 <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_SERIAL: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 80066e4:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066f0:	3306      	adds	r3, #6
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	601a      	str	r2, [r3, #0]
                CANsend = true;
 80066f6:	2301      	movs	r3, #1
 80066f8:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 80066fa:	e01c      	b.n	8006736 <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_NODE_ID: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8006706:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8006712:	719a      	strb	r2, [r3, #6]
                CANsend = true;
 8006714:	2301      	movs	r3, #1
 8006716:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8006718:	e00d      	b.n	8006736 <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800671e:	224f      	movs	r2, #79	@ 0x4f
 8006720:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 8006722:	2301      	movs	r3, #1
 8006724:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8006726:	e006      	b.n	8006736 <CO_LSSslave_process+0x3fe>
            }
            default: {
                /* none */
                break;
 8006728:	bf00      	nop
 800672a:	e004      	b.n	8006736 <CO_LSSslave_process+0x3fe>
                    break;
 800672c:	bf00      	nop
 800672e:	e002      	b.n	8006736 <CO_LSSslave_process+0x3fe>
                    break;
 8006730:	bf00      	nop
 8006732:	e000      	b.n	8006736 <CO_LSSslave_process+0x3fe>
                break;
 8006734:	bf00      	nop
            }
        }

        if (CANsend) {
 8006736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006738:	2b00      	cmp	r3, #0
 800673a:	d007      	beq.n	800674c <CO_LSSslave_process+0x414>
            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006744:	4619      	mov	r1, r3
 8006746:	4610      	mov	r0, r2
 8006748:	f001 fa2e 	bl	8007ba8 <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    return resetCommunication;
 8006752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006754:	4618      	mov	r0, r3
 8006756:	3730      	adds	r7, #48	@ 0x30
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	0800bb80 	.word	0x0800bb80

08006760 <CO_isError>:
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	460b      	mov	r3, r1
 800676a:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 800676c:	78fb      	ldrb	r3, [r7, #3]
 800676e:	08db      	lsrs	r3, r3, #3
 8006770:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8006772:	78fb      	ldrb	r3, [r7, #3]
 8006774:	f003 0307 	and.w	r3, r3, #7
 8006778:	2201      	movs	r2, #1
 800677a:	fa02 f303 	lsl.w	r3, r2, r3
 800677e:	73bb      	strb	r3, [r7, #14]
               : false;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 8006786:	7bfb      	ldrb	r3, [r7, #15]
 8006788:	2b09      	cmp	r3, #9
 800678a:	d807      	bhi.n	800679c <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0)
 800678c:	7bfb      	ldrb	r3, [r7, #15]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	5cd2      	ldrb	r2, [r2, r3]
 8006792:	7bbb      	ldrb	r3, [r7, #14]
 8006794:	4013      	ands	r3, r2
 8006796:	b2db      	uxtb	r3, r3
               : false;
 8006798:	2b00      	cmp	r3, #0
 800679a:	d001      	beq.n	80067a0 <CO_isError+0x40>
 800679c:	2301      	movs	r3, #1
 800679e:	e000      	b.n	80067a2 <CO_isError+0x42>
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <CO_getErrorRegister>:
CO_getErrorRegister(CO_EM_t* em) {
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d007      	beq.n	80067cc <CO_getErrorRegister+0x1e>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <CO_getErrorRegister+0x1e>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	e000      	b.n	80067ce <CO_getErrorRegister+0x20>
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <CO_NMT_getInternalState>:
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t
CO_NMT_getInternalState(CO_NMT_t* NMT) {
 80067da:	b480      	push	{r7}
 80067dc:	b083      	sub	sp, #12
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d003      	beq.n	80067f0 <CO_NMT_getInternalState+0x16>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f993 3000 	ldrsb.w	r3, [r3]
 80067ee:	e000      	b.n	80067f2 <CO_NMT_getInternalState+0x18>
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <CO_LSSslave_getState>:
 *
 * @param LSSslave This object.
 * @return @ref CO_LSS_STATE_state
 */
static inline uint8_t
CO_LSSslave_getState(CO_LSSslave_t* LSSslave) {
 80067fe:	b480      	push	{r7}
 8006800:	b083      	sub	sp, #12
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <CO_LSSslave_getState+0x14>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	7c1b      	ldrb	r3, [r3, #16]
 8006810:	e000      	b.n	8006814 <CO_LSSslave_getState+0x16>
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <CO_new>:
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t*
CO_new(CO_config_t* config, uint32_t* heapMemoryUsed) {
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
    CO_t* co = NULL;
 800682a:	2300      	movs	r3, #0
 800682c:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t* coFinal = NULL;
 800682e:	2300      	movs	r3, #0
 8006830:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 8006832:	2300      	movs	r3, #0
 8006834:	613b      	str	r3, [r7, #16]
#else
        (void)config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1U, sizeof(*co));
 8006836:	2144      	movs	r1, #68	@ 0x44
 8006838:	2001      	movs	r0, #1
 800683a:	f004 f891 	bl	800a960 <calloc>
 800683e:	4603      	mov	r3, r0
 8006840:	60fb      	str	r3, [r7, #12]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 8116 	beq.w	8006a76 <CO_new+0x256>
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	3344      	adds	r3, #68	@ 0x44
 800684e:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1U) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8006850:	2134      	movs	r1, #52	@ 0x34
 8006852:	2001      	movs	r0, #1
 8006854:	f004 f884 	bl	800a960 <calloc>
 8006858:	4603      	mov	r3, r0
 800685a:	461a      	mov	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	611a      	str	r2, [r3, #16]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 8106 	beq.w	8006a76 <CO_new+0x256>
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	3334      	adds	r3, #52	@ 0x34
 800686e:	613b      	str	r3, [r7, #16]
        }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1U) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 8006870:	2308      	movs	r3, #8
 8006872:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8006874:	2130      	movs	r1, #48	@ 0x30
 8006876:	2001      	movs	r0, #1
 8006878:	f004 f872 	bl	800a960 <calloc>
 800687c:	4603      	mov	r3, r0
 800687e:	461a      	mov	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	615a      	str	r2, [r3, #20]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 80f4 	beq.w	8006a76 <CO_new+0x256>
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	3330      	adds	r3, #48	@ 0x30
 8006892:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8006894:	7afb      	ldrb	r3, [r7, #11]
 8006896:	2118      	movs	r1, #24
 8006898:	4618      	mov	r0, r3
 800689a:	f004 f861 	bl	800a960 <calloc>
 800689e:	4603      	mov	r3, r0
 80068a0:	461a      	mov	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	619a      	str	r2, [r3, #24]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 80e3 	beq.w	8006a76 <CO_new+0x256>
 80068b0:	7afa      	ldrb	r2, [r7, #11]
 80068b2:	4613      	mov	r3, r2
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	4413      	add	r3, r2
 80068b8:	00db      	lsls	r3, r3, #3
 80068ba:	461a      	mov	r2, r3
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	4413      	add	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1U) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 80068c2:	2158      	movs	r1, #88	@ 0x58
 80068c4:	2001      	movs	r0, #1
 80068c6:	f004 f84b 	bl	800a960 <calloc>
 80068ca:	4603      	mov	r3, r0
 80068cc:	461a      	mov	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	61da      	str	r2, [r3, #28]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 80cd 	beq.w	8006a76 <CO_new+0x256>
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	3358      	adds	r3, #88	@ 0x58
 80068e0:	613b      	str	r3, [r7, #16]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
#endif
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1U;
 80068e2:	2311      	movs	r3, #17
 80068e4:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2U) {
 80068e6:	7abb      	ldrb	r3, [r7, #10]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d912      	bls.n	8006912 <CO_new+0xf2>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 80068ec:	7abb      	ldrb	r3, [r7, #10]
 80068ee:	2108      	movs	r1, #8
 80068f0:	4618      	mov	r0, r3
 80068f2:	f004 f835 	bl	800a960 <calloc>
 80068f6:	4603      	mov	r3, r0
 80068f8:	461a      	mov	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	621a      	str	r2, [r3, #32]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 80b7 	beq.w	8006a76 <CO_new+0x256>
 8006908:	7abb      	ldrb	r3, [r7, #10]
 800690a:	00db      	lsls	r3, r3, #3
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	4413      	add	r3, r2
 8006910:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0U) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 8006912:	21b4      	movs	r1, #180	@ 0xb4
 8006914:	2001      	movs	r0, #1
 8006916:	f004 f823 	bl	800a960 <calloc>
 800691a:	4603      	mov	r3, r0
 800691c:	461a      	mov	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	625a      	str	r2, [r3, #36]	@ 0x24
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 80a5 	beq.w	8006a76 <CO_new+0x256>
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	33b4      	adds	r3, #180	@ 0xb4
 8006930:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_SDO_CLI = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_CLI = 0);
        if (CO_GET_CNT(SDO_CLI) > 0U) {
            CO_alloc_break_on_fail(co->SDOclient, CO_GET_CNT(SDO_CLI), sizeof(*co->SDOclient));
 8006932:	2194      	movs	r1, #148	@ 0x94
 8006934:	2001      	movs	r0, #1
 8006936:	f004 f813 	bl	800a960 <calloc>
 800693a:	4603      	mov	r3, r0
 800693c:	461a      	mov	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	629a      	str	r2, [r3, #40]	@ 0x28
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 8095 	beq.w	8006a76 <CO_new+0x256>
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	3394      	adds	r3, #148	@ 0x94
 8006950:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1U) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8006952:	2144      	movs	r1, #68	@ 0x44
 8006954:	2001      	movs	r0, #1
 8006956:	f004 f803 	bl	800a960 <calloc>
 800695a:	4603      	mov	r3, r0
 800695c:	461a      	mov	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 8085 	beq.w	8006a76 <CO_new+0x256>
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	3344      	adds	r3, #68	@ 0x44
 8006970:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1U) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8006972:	215c      	movs	r1, #92	@ 0x5c
 8006974:	2001      	movs	r0, #1
 8006976:	f003 fff3 	bl	800a960 <calloc>
 800697a:	4603      	mov	r3, r0
 800697c:	461a      	mov	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	631a      	str	r2, [r3, #48]	@ 0x30
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006986:	2b00      	cmp	r3, #0
 8006988:	d075      	beq.n	8006a76 <CO_new+0x256>
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	335c      	adds	r3, #92	@ 0x5c
 800698e:	613b      	str	r3, [r7, #16]
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
        ON_MULTI_OD(uint16_t RX_CNT_RPDO = 0);
        if (CO_GET_CNT(RPDO) > 0U) {
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 8006990:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8006994:	2004      	movs	r0, #4
 8006996:	f003 ffe3 	bl	800a960 <calloc>
 800699a:	4603      	mov	r3, r0
 800699c:	461a      	mov	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d065      	beq.n	8006a76 <CO_new+0x256>
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 80069b0:	613b      	str	r3, [r7, #16]
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0U) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 80069b2:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 80069b6:	2004      	movs	r0, #4
 80069b8:	f003 ffd2 	bl	800a960 <calloc>
 80069bc:	4603      	mov	r3, r0
 80069be:	461a      	mov	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d054      	beq.n	8006a76 <CO_new+0x256>
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80069d2:	613b      	str	r3, [r7, #16]
        }
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
        if (CO_GET_CNT(LEDS) == 1U) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 80069d4:	210c      	movs	r1, #12
 80069d6:	2001      	movs	r0, #1
 80069d8:	f003 ffc2 	bl	800a960 <calloc>
 80069dc:	4603      	mov	r3, r0
 80069de:	461a      	mov	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d044      	beq.n	8006a76 <CO_new+0x256>
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	330c      	adds	r3, #12
 80069f0:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1U) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 80069f2:	217c      	movs	r1, #124	@ 0x7c
 80069f4:	2001      	movs	r0, #1
 80069f6:	f003 ffb3 	bl	800a960 <calloc>
 80069fa:	4603      	mov	r3, r0
 80069fc:	461a      	mov	r2, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	641a      	str	r2, [r3, #64]	@ 0x40
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d035      	beq.n	8006a76 <CO_new+0x256>
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	337c      	adds	r3, #124	@ 0x7c
 8006a0e:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1U, sizeof(*co->CANmodule));
 8006a10:	2138      	movs	r1, #56	@ 0x38
 8006a12:	2001      	movs	r0, #1
 8006a14:	f003 ffa4 	bl	800a960 <calloc>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	605a      	str	r2, [r3, #4]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d026      	beq.n	8006a76 <CO_new+0x256>
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	3338      	adds	r3, #56	@ 0x38
 8006a2c:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8006a2e:	210c      	movs	r1, #12
 8006a30:	2012      	movs	r0, #18
 8006a32:	f003 ff95 	bl	800a960 <calloc>
 8006a36:	4603      	mov	r3, r0
 8006a38:	461a      	mov	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	609a      	str	r2, [r3, #8]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d017      	beq.n	8006a76 <CO_new+0x256>
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	33d8      	adds	r3, #216	@ 0xd8
 8006a4a:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8006a4c:	2118      	movs	r1, #24
 8006a4e:	200b      	movs	r0, #11
 8006a50:	f003 ff86 	bl	800a960 <calloc>
 8006a54:	4603      	mov	r3, r0
 8006a56:	461a      	mov	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	60da      	str	r2, [r3, #12]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d008      	beq.n	8006a76 <CO_new+0x256>
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8006a6a:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	601a      	str	r2, [r3, #0]
        coFinal = co;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	617b      	str	r3, [r7, #20]
    } while (false);

    if (coFinal == NULL) {
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d102      	bne.n	8006a82 <CO_new+0x262>
        CO_delete(co);
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 f80b 	bl	8006a98 <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <CO_new+0x26e>
        *heapMemoryUsed = mem;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 8006a8e:	697b      	ldr	r3, [r7, #20]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3718      	adds	r7, #24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <CO_delete>:

void
CO_delete(CO_t* co) {
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d058      	beq.n	8006b58 <CO_delete+0xc0>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 ff90 	bl	80079d0 <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f003 ff6f 	bl	800a998 <free>
    CO_free(co->CANrx);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f003 ff6a 	bl	800a998 <free>
    CO_free(co->CANmodule);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f003 ff65 	bl	800a998 <free>
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_MASTER) != 0
    CO_free(co->LSSmaster);
#endif

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    CO_free(co->LSSslave);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f003 ff60 	bl	800a998 <free>
#if ((CO_CONFIG_GFC)&CO_CONFIG_GFC_ENABLE) != 0
    CO_free(co->GFC);
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    CO_free(co->LEDs);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006adc:	4618      	mov	r0, r3
 8006ade:	f003 ff5b 	bl	800a998 <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
    CO_free(co->TPDO);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f003 ff56 	bl	800a998 <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
    CO_free(co->RPDO);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006af0:	4618      	mov	r0, r3
 8006af2:	f003 ff51 	bl	800a998 <free>
#endif

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
    CO_free(co->SYNC);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006afa:	4618      	mov	r0, r3
 8006afc:	f003 ff4c 	bl	800a998 <free>
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    CO_free(co->TIME);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b04:	4618      	mov	r0, r3
 8006b06:	f003 ff47 	bl	800a998 <free>
#endif

#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_ENABLE) != 0
    free(co->SDOclient);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f003 ff42 	bl	800a998 <free>
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f003 ff3d 	bl	800a998 <free>

    /* Emergency */
    CO_free(co->em);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f003 ff38 	bl	800a998 <free>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    CO_free(co->em_fifo);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f003 ff33 	bl	800a998 <free>
#if ((CO_CONFIG_NODE_GUARDING)&CO_CONFIG_NODE_GUARDING_MASTER_ENABLE) != 0
    CO_free(co->NGmaster);
#endif

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    CO_free(co->HBconsMonitoredNodes);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f003 ff2e 	bl	800a998 <free>
    CO_free(co->HBcons);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f003 ff29 	bl	800a998 <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f003 ff24 	bl	800a998 <free>

    /* CANopen object */
    CO_free(co);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f003 ff21 	bl	800a998 <free>
 8006b56:	e000      	b.n	8006b5a <CO_delete+0xc2>
        return;
 8006b58:	bf00      	nop
}
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <CO_CANinit>:
#endif
    return en;
}

CO_ReturnError_t
CO_CANinit(CO_t* co, void* CANptr, uint16_t bitRate) {
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08a      	sub	sp, #40	@ 0x28
 8006b64:	af04      	add	r7, sp, #16
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) {
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d102      	bne.n	8006b7a <CO_CANinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006b74:	f04f 33ff 	mov.w	r3, #4294967295
 8006b78:	e01a      	b.n	8006bb0 <CO_CANinit+0x50>
    }

    co->CANmodule->CANnormal = false;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 8006b82:	68b8      	ldr	r0, [r7, #8]
 8006b84:	f000 fe34 	bl	80077f0 <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule, CANptr, co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), co->CANtx,
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6858      	ldr	r0, [r3, #4]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6899      	ldr	r1, [r3, #8]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	88fa      	ldrh	r2, [r7, #6]
 8006b96:	9202      	str	r2, [sp, #8]
 8006b98:	220b      	movs	r2, #11
 8006b9a:	9201      	str	r2, [sp, #4]
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	2312      	movs	r3, #18
 8006ba0:	460a      	mov	r2, r1
 8006ba2:	68b9      	ldr	r1, [r7, #8]
 8006ba4:	f000 fe4c 	bl	8007840 <CO_CANmodule_init>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_TX_MSGS), bitRate);

    return err;
 8006bac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <CO_LSSinit>:

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
CO_ReturnError_t
CO_LSSinit(CO_t* co, CO_LSS_address_t* lssAddress, uint8_t* pendingNodeID, uint16_t* pendingBitRate) {
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b08c      	sub	sp, #48	@ 0x30
 8006bbc:	af06      	add	r7, sp, #24
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if ((co == NULL) || (CO_GET_CNT(LSS_SLV) != 1U)) {
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d102      	bne.n	8006bd2 <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8006bd0:	e01a      	b.n	8006c08 <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave, lssAddress, pendingBitRate, pendingNodeID, co->CANmodule,
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	6852      	ldr	r2, [r2, #4]
 8006bde:	f240 71e4 	movw	r1, #2020	@ 0x7e4
 8006be2:	9105      	str	r1, [sp, #20]
 8006be4:	210a      	movs	r1, #10
 8006be6:	9104      	str	r1, [sp, #16]
 8006be8:	9203      	str	r2, [sp, #12]
 8006bea:	f240 72e5 	movw	r2, #2021	@ 0x7e5
 8006bee:	9202      	str	r2, [sp, #8]
 8006bf0:	2211      	movs	r2, #17
 8006bf2:	9201      	str	r2, [sp, #4]
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	68b9      	ldr	r1, [r7, #8]
 8006bfc:	f7ff fb26 	bl	800624c <CO_LSSslave_init>
 8006c00:	4603      	mov	r3, r0
 8006c02:	75fb      	strb	r3, [r7, #23]
                           CO_GET_CO(RX_IDX_LSS_SLV), CO_CAN_ID_LSS_MST, co->CANmodule, CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 8006c04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <CO_CANopenInit>:
#endif /* (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE */

CO_ReturnError_t
CO_CANopenInit(CO_t* co, CO_NMT_t* NMT, CO_EM_t* em, OD_t* od, OD_entry_t* OD_statusBits, uint16_t NMTcontrol,
               uint16_t firstHBTime_ms, uint16_t SDOserverTimeoutTime_ms, uint16_t SDOclientTimeoutTime_ms,
               bool_t SDOclientBlockTransfer, uint8_t nodeId, uint32_t* errInfo) {
 8006c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c12:	b093      	sub	sp, #76	@ 0x4c
 8006c14:	af0a      	add	r7, sp, #40	@ 0x28
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	603b      	str	r3, [r7, #0]

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_STATUS_BITS) == 0
    (void)OD_statusBits; /* may be unused */
#endif

    if ((co == NULL) || ((CO_GET_CNT(NMT) == 0U) && (NMT == NULL)) || ((CO_GET_CNT(EM) == 0U) && (em == NULL))) {
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d102      	bne.n	8006c2a <CO_CANopenInit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006c24:	f04f 33ff 	mov.w	r3, #4294967295
 8006c28:	e170      	b.n	8006f0c <CO_CANopenInit+0x2fc>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0U) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d102      	bne.n	8006c36 <CO_CANopenInit+0x26>
        em = co->em;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    if ((CO_GET_CNT(LSS_SLV) == 1U) && (nodeId == CO_LSS_NODE_ID_ASSIGNMENT)) {
 8006c3c:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8006c40:	2bff      	cmp	r3, #255	@ 0xff
 8006c42:	d103      	bne.n	8006c4c <CO_CANopenInit+0x3c>
        co->nodeIdUnconfigured = true;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2201      	movs	r2, #1
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	e00a      	b.n	8006c62 <CO_CANopenInit+0x52>
    } else
#endif
        if ((nodeId < 1U) || (nodeId > 127U)) {
 8006c4c:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d003      	beq.n	8006c5c <CO_CANopenInit+0x4c>
 8006c54:	f997 3050 	ldrsb.w	r3, [r7, #80]	@ 0x50
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	da02      	bge.n	8006c62 <CO_CANopenInit+0x52>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c60:	e154      	b.n	8006f0c <CO_CANopenInit+0x2fc>
    } else { /* MISRA C 2004 14.10 */
    }

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    if (CO_GET_CNT(LEDS) == 1U) {
        err = CO_LEDs_init(co->LEDs);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fe ffb8 	bl	8005bdc <CO_LEDs_init>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	747b      	strb	r3, [r7, #17]
        if (err != CO_ERROR_NO) {
 8006c70:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <CO_CANopenInit+0x6e>
            return err;
 8006c78:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006c7c:	e146      	b.n	8006f0c <CO_CANopenInit+0x2fc>
        }
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d002      	beq.n	8006c8c <CO_CANopenInit+0x7c>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 8006c86:	f06f 0312 	mvn.w	r3, #18
 8006c8a:	e13f      	b.n	8006f0c <CO_CANopenInit+0x2fc>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1U) {
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	69d8      	ldr	r0, [r3, #28]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	685c      	ldr	r4, [r3, #4]
 8006c94:	4b9f      	ldr	r3, [pc, #636]	@ (8006f14 <CO_CANopenInit+0x304>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f103 050c 	add.w	r5, r3, #12
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6a1e      	ldr	r6, [r3, #32]
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
                         co->em_fifo, (CO_GET_CNT(ARR_1003) + 1U),
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY), CO_GET_CO(TX_IDX_EM_PROD),
 8006ca2:	4b9c      	ldr	r3, [pc, #624]	@ (8006f14 <CO_CANopenInit+0x304>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8006ca8:	336c      	adds	r3, #108	@ 0x6c
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PROD_INHIBIT) != 0
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
#endif
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 8006caa:	4a9a      	ldr	r2, [pc, #616]	@ (8006f14 <CO_CANopenInit+0x304>)
 8006cac:	6812      	ldr	r2, [r2, #0]
 8006cae:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8006cb0:	3218      	adds	r2, #24
 8006cb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006cb4:	9105      	str	r1, [sp, #20]
 8006cb6:	f897 1050 	ldrb.w	r1, [r7, #80]	@ 0x50
 8006cba:	9104      	str	r1, [sp, #16]
 8006cbc:	9203      	str	r2, [sp, #12]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	9202      	str	r2, [sp, #8]
 8006cc2:	9301      	str	r3, [sp, #4]
 8006cc4:	2311      	movs	r3, #17
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	4633      	mov	r3, r6
 8006cca:	462a      	mov	r2, r5
 8006ccc:	4621      	mov	r1, r4
 8006cce:	f7f9 fde1 	bl	8000894 <CO_EM_init>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	747b      	strb	r3, [r7, #17]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
                         co->CANmodule, CO_GET_CO(RX_IDX_EM_CONS),
#endif
                         nodeId, errInfo);
        if (err != CO_ERROR_NO) {
 8006cd6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <CO_CANopenInit+0xd4>
            return err;
 8006cde:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006ce2:	e113      	b.n	8006f0c <CO_CANopenInit+0x2fc>
        }
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U) {
        err = CO_NMT_init(co->NMT, OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME), em, nodeId, NMTcontrol, firstHBTime_ms,
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	691c      	ldr	r4, [r3, #16]
 8006ce8:	4b8a      	ldr	r3, [pc, #552]	@ (8006f14 <CO_CANopenInit+0x304>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f103 0590 	add.w	r5, r3, #144	@ 0x90
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	6852      	ldr	r2, [r2, #4]
 8006cfa:	f897 1050 	ldrb.w	r1, [r7, #80]	@ 0x50
 8006cfe:	b289      	uxth	r1, r1
 8006d00:	f501 61e0 	add.w	r1, r1, #1792	@ 0x700
 8006d04:	b289      	uxth	r1, r1
 8006d06:	f897 6050 	ldrb.w	r6, [r7, #80]	@ 0x50
 8006d0a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8006d0c:	9008      	str	r0, [sp, #32]
 8006d0e:	9107      	str	r1, [sp, #28]
 8006d10:	2109      	movs	r1, #9
 8006d12:	9106      	str	r1, [sp, #24]
 8006d14:	9205      	str	r2, [sp, #20]
 8006d16:	2200      	movs	r2, #0
 8006d18:	9204      	str	r2, [sp, #16]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	9203      	str	r2, [sp, #12]
 8006d1e:	9302      	str	r3, [sp, #8]
 8006d20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006d24:	9301      	str	r3, [sp, #4]
 8006d26:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	4633      	mov	r3, r6
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	4629      	mov	r1, r5
 8006d30:	4620      	mov	r0, r4
 8006d32:	f7fa fc79 	bl	8001628 <CO_NMT_init>
 8006d36:	4603      	mov	r3, r0
 8006d38:	747b      	strb	r3, [r7, #17]
                          co->CANmodule, CO_GET_CO(RX_IDX_NMT_SLV), CO_CAN_ID_NMT_SERVICE,
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
                          co->CANmodule, CO_GET_CO(TX_IDX_NMT_MST), CO_CAN_ID_NMT_SERVICE,
#endif
                          co->CANmodule, CO_GET_CO(TX_IDX_HB_PROD), CO_CAN_ID_HEARTBEAT + nodeId, errInfo);
        if (err != CO_ERROR_NO) {
 8006d3a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d002      	beq.n	8006d48 <CO_CANopenInit+0x138>
            return err;
 8006d42:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006d46:	e0e1      	b.n	8006f0c <CO_CANopenInit+0x2fc>
        }
    }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    if (CO_GET_CNT(HB_CONS) == 1U) {
        err = CO_HBconsumer_init(co->HBcons, em, co->HBconsMonitoredNodes, CO_GET_CNT(ARR_1016),
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6958      	ldr	r0, [r3, #20]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	699c      	ldr	r4, [r3, #24]
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME), co->CANmodule, CO_GET_CO(RX_IDX_HB_CONS),
 8006d50:	4b70      	ldr	r3, [pc, #448]	@ (8006f14 <CO_CANopenInit+0x304>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons, em, co->HBconsMonitoredNodes, CO_GET_CNT(ARR_1016),
 8006d56:	3384      	adds	r3, #132	@ 0x84
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	6852      	ldr	r2, [r2, #4]
 8006d5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d5e:	9103      	str	r1, [sp, #12]
 8006d60:	2109      	movs	r1, #9
 8006d62:	9102      	str	r1, [sp, #8]
 8006d64:	9201      	str	r2, [sp, #4]
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	2308      	movs	r3, #8
 8006d6a:	4622      	mov	r2, r4
 8006d6c:	6879      	ldr	r1, [r7, #4]
 8006d6e:	f7fa f93d 	bl	8000fec <CO_HBconsumer_init>
 8006d72:	4603      	mov	r3, r0
 8006d74:	747b      	strb	r3, [r7, #17]
                                 errInfo);
        if (err != CO_ERROR_NO) {
 8006d76:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <CO_CANopenInit+0x174>
            return err;
 8006d7e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006d82:	e0c3      	b.n	8006f0c <CO_CANopenInit+0x2fc>
    }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0U) {
        OD_entry_t* SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 8006d84:	4b63      	ldr	r3, [pc, #396]	@ (8006f14 <CO_CANopenInit+0x304>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	33b4      	adds	r3, #180	@ 0xb4
 8006d8c:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006d8e:	2300      	movs	r3, #0
 8006d90:	837b      	strh	r3, [r7, #26]
 8006d92:	e030      	b.n	8006df6 <CO_CANopenInit+0x1e6>
            err = CO_SDOserver_init(&co->SDOserver[i], od, SDOsrvPar, nodeId, SDOserverTimeoutTime_ms, co->CANmodule,
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d98:	8b7b      	ldrh	r3, [r7, #26]
 8006d9a:	21b4      	movs	r1, #180	@ 0xb4
 8006d9c:	fb01 f303 	mul.w	r3, r1, r3
 8006da0:	18d5      	adds	r5, r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	8b7a      	ldrh	r2, [r7, #26]
 8006da8:	3207      	adds	r2, #7
 8006daa:	b292      	uxth	r2, r2
 8006dac:	68f9      	ldr	r1, [r7, #12]
 8006dae:	6849      	ldr	r1, [r1, #4]
 8006db0:	8b78      	ldrh	r0, [r7, #26]
 8006db2:	3007      	adds	r0, #7
 8006db4:	b280      	uxth	r0, r0
 8006db6:	f897 6050 	ldrb.w	r6, [r7, #80]	@ 0x50
 8006dba:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 8006dbc:	9405      	str	r4, [sp, #20]
 8006dbe:	9004      	str	r0, [sp, #16]
 8006dc0:	9103      	str	r1, [sp, #12]
 8006dc2:	9202      	str	r2, [sp, #8]
 8006dc4:	9301      	str	r3, [sp, #4]
 8006dc6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	4633      	mov	r3, r6
 8006dce:	69fa      	ldr	r2, [r7, #28]
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	f7fd f88e 	bl	8003ef4 <CO_SDOserver_init>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	747b      	strb	r3, [r7, #17]
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i, co->CANmodule, CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err != CO_ERROR_NO) {
 8006ddc:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d002      	beq.n	8006dea <CO_CANopenInit+0x1da>
                return err;
 8006de4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006de8:	e090      	b.n	8006f0c <CO_CANopenInit+0x2fc>
            }
            SDOsrvPar++;
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	330c      	adds	r3, #12
 8006dee:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006df0:	8b7b      	ldrh	r3, [r7, #26]
 8006df2:	3301      	adds	r3, #1
 8006df4:	837b      	strh	r3, [r7, #26]
 8006df6:	8b7b      	ldrh	r3, [r7, #26]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0cb      	beq.n	8006d94 <CO_CANopenInit+0x184>
        }
    }

#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_ENABLE) != 0
    if (CO_GET_CNT(SDO_CLI) > 0U) {
        OD_entry_t* SDOcliPar = OD_GET(H1280, OD_H1280_SDO_CLIENT_1_PARAM);
 8006dfc:	4b45      	ldr	r3, [pc, #276]	@ (8006f14 <CO_CANopenInit+0x304>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	33c0      	adds	r3, #192	@ 0xc0
 8006e04:	617b      	str	r3, [r7, #20]
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_CLI); i++) {
 8006e06:	2300      	movs	r3, #0
 8006e08:	827b      	strh	r3, [r7, #18]
 8006e0a:	e02d      	b.n	8006e68 <CO_CANopenInit+0x258>
            err = CO_SDOclient_init(&co->SDOclient[i], od, SDOcliPar, nodeId, co->CANmodule,
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e10:	8a7b      	ldrh	r3, [r7, #18]
 8006e12:	2194      	movs	r1, #148	@ 0x94
 8006e14:	fb01 f303 	mul.w	r3, r1, r3
 8006e18:	18d5      	adds	r5, r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	8a7a      	ldrh	r2, [r7, #18]
 8006e20:	3208      	adds	r2, #8
 8006e22:	b292      	uxth	r2, r2
 8006e24:	68f9      	ldr	r1, [r7, #12]
 8006e26:	6849      	ldr	r1, [r1, #4]
 8006e28:	8a78      	ldrh	r0, [r7, #18]
 8006e2a:	3008      	adds	r0, #8
 8006e2c:	b280      	uxth	r0, r0
 8006e2e:	f897 6050 	ldrb.w	r6, [r7, #80]	@ 0x50
 8006e32:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 8006e34:	9404      	str	r4, [sp, #16]
 8006e36:	9003      	str	r0, [sp, #12]
 8006e38:	9102      	str	r1, [sp, #8]
 8006e3a:	9201      	str	r2, [sp, #4]
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	4633      	mov	r3, r6
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	4628      	mov	r0, r5
 8006e46:	f7fc fd08 	bl	800385a <CO_SDOclient_init>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	747b      	strb	r3, [r7, #17]
                                    CO_GET_CO(RX_IDX_SDO_CLI) + i, co->CANmodule, CO_GET_CO(TX_IDX_SDO_CLI) + i,
                                    errInfo);
            SDOcliPar++;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	330c      	adds	r3, #12
 8006e52:	617b      	str	r3, [r7, #20]
            if (err != CO_ERROR_NO) {
 8006e54:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <CO_CANopenInit+0x252>
                return err;
 8006e5c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006e60:	e054      	b.n	8006f0c <CO_CANopenInit+0x2fc>
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_CLI); i++) {
 8006e62:	8a7b      	ldrh	r3, [r7, #18]
 8006e64:	3301      	adds	r3, #1
 8006e66:	827b      	strh	r3, [r7, #18]
 8006e68:	8a7b      	ldrh	r3, [r7, #18]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d0ce      	beq.n	8006e0c <CO_CANopenInit+0x1fc>
    }
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    if (CO_GET_CNT(TIME) == 1U) {
        err = CO_TIME_init(co->TIME, OD_GET(H1012, OD_H1012_COBID_TIME), co->CANmodule, CO_GET_CO(RX_IDX_TIME),
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006e72:	4b28      	ldr	r3, [pc, #160]	@ (8006f14 <CO_CANopenInit+0x304>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	685c      	ldr	r4, [r3, #4]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e86:	9202      	str	r2, [sp, #8]
 8006e88:	2202      	movs	r2, #2
 8006e8a:	9201      	str	r2, [sp, #4]
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	2302      	movs	r3, #2
 8006e90:	4622      	mov	r2, r4
 8006e92:	f7fe fd2f 	bl	80058f4 <CO_TIME_init>
 8006e96:	4603      	mov	r3, r0
 8006e98:	747b      	strb	r3, [r7, #17]
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
                           co->CANmodule, CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err != CO_ERROR_NO) {
 8006e9a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d002      	beq.n	8006ea8 <CO_CANopenInit+0x298>
            return err;
 8006ea2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006ea6:	e031      	b.n	8006f0c <CO_CANopenInit+0x2fc>
    }
#endif

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
    if (CO_GET_CNT(SYNC) == 1U) {
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6b1d      	ldr	r5, [r3, #48]	@ 0x30
 8006eac:	4b19      	ldr	r3, [pc, #100]	@ (8006f14 <CO_CANopenInit+0x304>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f103 0624 	add.w	r6, r3, #36	@ 0x24
 8006eb6:	4b17      	ldr	r3, [pc, #92]	@ (8006f14 <CO_CANopenInit+0x304>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f103 0c30 	add.w	ip, r3, #48	@ 0x30
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN), OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8006ec0:	4b14      	ldr	r3, [pc, #80]	@ (8006f14 <CO_CANopenInit+0x304>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8006ec6:	333c      	adds	r3, #60	@ 0x3c
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN), OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8006ec8:	4a12      	ldr	r2, [pc, #72]	@ (8006f14 <CO_CANopenInit+0x304>)
 8006eca:	6812      	ldr	r2, [r2, #0]
 8006ecc:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8006ece:	32a8      	adds	r2, #168	@ 0xa8
 8006ed0:	68f9      	ldr	r1, [r7, #12]
 8006ed2:	6849      	ldr	r1, [r1, #4]
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	6840      	ldr	r0, [r0, #4]
 8006ed8:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 8006eda:	9406      	str	r4, [sp, #24]
 8006edc:	2400      	movs	r4, #0
 8006ede:	9405      	str	r4, [sp, #20]
 8006ee0:	9004      	str	r0, [sp, #16]
 8006ee2:	2001      	movs	r0, #1
 8006ee4:	9003      	str	r0, [sp, #12]
 8006ee6:	9102      	str	r1, [sp, #8]
 8006ee8:	9201      	str	r2, [sp, #4]
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	4663      	mov	r3, ip
 8006eee:	4632      	mov	r2, r6
 8006ef0:	6879      	ldr	r1, [r7, #4]
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	f7fe fa10 	bl	8005318 <CO_SYNC_init>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	747b      	strb	r3, [r7, #17]
                           co->CANmodule, CO_GET_CO(RX_IDX_SYNC),
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
                           co->CANmodule, CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err != CO_ERROR_NO) {
 8006efc:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <CO_CANopenInit+0x2fa>
            return err;
 8006f04:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006f08:	e000      	b.n	8006f0c <CO_CANopenInit+0x2fc>
            }
        }
    }
#endif

    return CO_ERROR_NO;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3724      	adds	r7, #36	@ 0x24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f14:	200003c4 	.word	0x200003c4

08006f18 <CO_CANopenInitPDO>:

CO_ReturnError_t
CO_CANopenInitPDO(CO_t* co, CO_EM_t* em, OD_t* od, uint8_t nodeId, uint32_t* errInfo) {
 8006f18:	b590      	push	{r4, r7, lr}
 8006f1a:	b093      	sub	sp, #76	@ 0x4c
 8006f1c:	af06      	add	r7, sp, #24
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
 8006f24:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d102      	bne.n	8006f32 <CO_CANopenInitPDO+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f30:	e0b4      	b.n	800709c <CO_CANopenInitPDO+0x184>
    }
    if ((nodeId < 1U) || (nodeId > 127U) || co->nodeIdUnconfigured) {
 8006f32:	78fb      	ldrb	r3, [r7, #3]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d007      	beq.n	8006f48 <CO_CANopenInitPDO+0x30>
 8006f38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	db03      	blt.n	8006f48 <CO_CANopenInitPDO+0x30>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d009      	beq.n	8006f5c <CO_CANopenInitPDO+0x44>
        return (co->nodeIdUnconfigured) ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <CO_CANopenInitPDO+0x3e>
 8006f50:	f06f 0312 	mvn.w	r3, #18
 8006f54:	e0a2      	b.n	800709c <CO_CANopenInitPDO+0x184>
 8006f56:	f04f 33ff 	mov.w	r3, #4294967295
 8006f5a:	e09f      	b.n	800709c <CO_CANopenInitPDO+0x184>
    }

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
    if (CO_GET_CNT(RPDO) > 0U) {
        OD_entry_t* RPDOcomm = OD_GET(H1400, OD_H1400_RXPDO_1_PARAM);
 8006f5c:	4b51      	ldr	r3, [pc, #324]	@ (80070a4 <CO_CANopenInitPDO+0x18c>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	33cc      	adds	r3, #204	@ 0xcc
 8006f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        OD_entry_t* RPDOmap = OD_GET(H1600, OD_H1600_RXPDO_1_MAPPING);
 8006f66:	4b4f      	ldr	r3, [pc, #316]	@ (80070a4 <CO_CANopenInitPDO+0x18c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	33fc      	adds	r3, #252	@ 0xfc
 8006f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006f70:	2300      	movs	r3, #0
 8006f72:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006f74:	e03d      	b.n	8006ff2 <CO_CANopenInitPDO+0xda>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 8006f76:	2300      	movs	r3, #0
 8006f78:	84bb      	strh	r3, [r7, #36]	@ 0x24
            if (i < CO_RPDO_DEFAULT_CANID_COUNT) {
 8006f7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006f7c:	2b03      	cmp	r3, #3
 8006f7e:	d808      	bhi.n	8006f92 <CO_CANopenInitPDO+0x7a>
#if CO_RPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (uint16_t)((CO_CAN_ID_RPDO_1 + (i * 0x100U)) + nodeId);
 8006f80:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006f82:	3302      	adds	r3, #2
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	021b      	lsls	r3, r3, #8
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	78fb      	ldrb	r3, [r7, #3]
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	4413      	add	r3, r2
 8006f90:	84bb      	strh	r3, [r7, #36]	@ 0x24
                uint16_t pdoOffset = i % 4;
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + pdoOffset * 0x100) + nodeId + nodeIdOffset;
#endif
            }
            err = CO_RPDO_init(&co->RPDO[i], od, em,
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006f98:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8006f9c:	fb01 f303 	mul.w	r3, r1, r3
 8006fa0:	18d0      	adds	r0, r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006fac:	3203      	adds	r2, #3
 8006fae:	b292      	uxth	r2, r2
 8006fb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fb2:	9105      	str	r1, [sp, #20]
 8006fb4:	9204      	str	r2, [sp, #16]
 8006fb6:	9303      	str	r3, [sp, #12]
 8006fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fba:	9302      	str	r3, [sp, #8]
 8006fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fbe:	9301      	str	r3, [sp, #4]
 8006fc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	4623      	mov	r3, r4
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	f7fb fccb 	bl	8002964 <CO_RPDO_init>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	75bb      	strb	r3, [r7, #22]
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
                               co->SYNC,
#endif
                               preDefinedCanId, RPDOcomm, RPDOmap, co->CANmodule, CO_GET_CO(RX_IDX_RPDO) + i, errInfo);
            if (err != CO_ERROR_NO) {
 8006fd2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <CO_CANopenInitPDO+0xc8>
                return err;
 8006fda:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006fde:	e05d      	b.n	800709c <CO_CANopenInitPDO+0x184>
            }
            RPDOcomm++;
 8006fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe2:	330c      	adds	r3, #12
 8006fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            RPDOmap++;
 8006fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe8:	330c      	adds	r3, #12
 8006fea:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006fec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006fee:	3301      	adds	r3, #1
 8006ff0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006ff2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d9be      	bls.n	8006f76 <CO_CANopenInitPDO+0x5e>
    }
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
    if (CO_GET_CNT(TPDO) > 0U) {
        OD_entry_t* TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 8006ff8:	4b2a      	ldr	r3, [pc, #168]	@ (80070a4 <CO_CANopenInitPDO+0x18c>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8007002:	623b      	str	r3, [r7, #32]
        OD_entry_t* TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 8007004:	4b27      	ldr	r3, [pc, #156]	@ (80070a4 <CO_CANopenInitPDO+0x18c>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800700e:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8007010:	2300      	movs	r3, #0
 8007012:	837b      	strh	r3, [r7, #26]
 8007014:	e03e      	b.n	8007094 <CO_CANopenInitPDO+0x17c>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 8007016:	2300      	movs	r3, #0
 8007018:	833b      	strh	r3, [r7, #24]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 800701a:	8b7b      	ldrh	r3, [r7, #26]
 800701c:	2b03      	cmp	r3, #3
 800701e:	d809      	bhi.n	8007034 <CO_CANopenInitPDO+0x11c>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (uint16_t)((CO_CAN_ID_TPDO_1 + (i * 0x100U)) + nodeId);
 8007020:	8b7b      	ldrh	r3, [r7, #26]
 8007022:	021b      	lsls	r3, r3, #8
 8007024:	b29a      	uxth	r2, r3
 8007026:	78fb      	ldrb	r3, [r7, #3]
 8007028:	b29b      	uxth	r3, r3
 800702a:	4413      	add	r3, r2
 800702c:	b29b      	uxth	r3, r3
 800702e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8007032:	833b      	strh	r3, [r7, #24]
                uint16_t pdoOffset = i % 4;
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100) + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i], od, em,
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007038:	8b7b      	ldrh	r3, [r7, #26]
 800703a:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 800703e:	fb01 f303 	mul.w	r3, r1, r3
 8007042:	18d0      	adds	r0, r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	8b7a      	ldrh	r2, [r7, #26]
 800704e:	3203      	adds	r2, #3
 8007050:	b292      	uxth	r2, r2
 8007052:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007054:	9105      	str	r1, [sp, #20]
 8007056:	9204      	str	r2, [sp, #16]
 8007058:	9303      	str	r3, [sp, #12]
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	9302      	str	r3, [sp, #8]
 800705e:	6a3b      	ldr	r3, [r7, #32]
 8007060:	9301      	str	r3, [sp, #4]
 8007062:	8b3b      	ldrh	r3, [r7, #24]
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	4623      	mov	r3, r4
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	f7fc f85a 	bl	8003124 <CO_TPDO_init>
 8007070:	4603      	mov	r3, r0
 8007072:	75fb      	strb	r3, [r7, #23]
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
                               co->SYNC,
#endif
                               preDefinedCanId, TPDOcomm, TPDOmap, co->CANmodule, CO_GET_CO(TX_IDX_TPDO) + i, errInfo);
            if (err != CO_ERROR_NO) {
 8007074:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <CO_CANopenInitPDO+0x16a>
                return err;
 800707c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007080:	e00c      	b.n	800709c <CO_CANopenInitPDO+0x184>
            }
            TPDOcomm++;
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	330c      	adds	r3, #12
 8007086:	623b      	str	r3, [r7, #32]
            TPDOmap++;
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	330c      	adds	r3, #12
 800708c:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 800708e:	8b7b      	ldrh	r3, [r7, #26]
 8007090:	3301      	adds	r3, #1
 8007092:	837b      	strh	r3, [r7, #26]
 8007094:	8b7b      	ldrh	r3, [r7, #26]
 8007096:	2b03      	cmp	r3, #3
 8007098:	d9bd      	bls.n	8007016 <CO_CANopenInitPDO+0xfe>
        }
    }
#endif

    return CO_ERROR_NO;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3734      	adds	r7, #52	@ 0x34
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd90      	pop	{r4, r7, pc}
 80070a4:	200003c4 	.word	0x200003c4

080070a8 <CO_process>:
    return CO_ERROR_NO;
}
#endif

CO_NMT_reset_cmd_t
CO_process(CO_t* co, bool_t enableGateway, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 80070a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070aa:	b09b      	sub	sp, #108	@ 0x6c
 80070ac:	af08      	add	r7, sp, #32
 80070ae:	61f8      	str	r0, [r7, #28]
 80070b0:	61b9      	str	r1, [r7, #24]
 80070b2:	617a      	str	r2, [r7, #20]
 80070b4:	613b      	str	r3, [r7, #16]
    (void)enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 80070b6:	2300      	movs	r3, #0
 80070b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff fb8a 	bl	80067da <CO_NMT_getInternalState>
 80070c6:	4603      	mov	r3, r0
 80070c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    bool_t NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 80070cc:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80070d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80070d2:	d003      	beq.n	80070dc <CO_process+0x34>
 80070d4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80070d8:	2b05      	cmp	r3, #5
 80070da:	d101      	bne.n	80070e0 <CO_process+0x38>
 80070dc:	2301      	movs	r3, #1
 80070de:	e000      	b.n	80070e2 <CO_process+0x3a>
 80070e0:	2300      	movs	r3, #0
 80070e2:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f000 fe06 	bl	8007cfa <CO_CANmodule_process>

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE)
    if (CO_GET_CNT(LSS_SLV) == 1U) {
        if (CO_LSSslave_process(co->LSSslave)) {
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7ff f920 	bl	8006338 <CO_LSSslave_process>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <CO_process+0x5c>
            reset = CO_RESET_COMM;
 80070fe:	2301      	movs	r3, #1
 8007100:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    bool_t unc = co->nodeIdUnconfigured;
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	637b      	str	r3, [r7, #52]	@ 0x34
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	8a5b      	ldrh	r3, [r3, #18]
 8007110:	867b      	strh	r3, [r7, #50]	@ 0x32
    bool_t LSSslave_configuration = false;
 8007112:	2300      	movs	r3, #0
 8007114:	643b      	str	r3, [r7, #64]	@ 0x40
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    if (CO_GET_CNT(LSS_SLV) == 1U) {
        if (CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION) {
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800711a:	4618      	mov	r0, r3
 800711c:	f7ff fb6f 	bl	80067fe <CO_LSSslave_getState>
 8007120:	4603      	mov	r3, r0
 8007122:	2b01      	cmp	r3, #1
 8007124:	d101      	bne.n	800712a <CO_process+0x82>
            LSSslave_configuration = true;
 8007126:	2301      	movs	r3, #1
 8007128:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
#define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS false
#endif

    if (CO_GET_CNT(LEDS) == 1U) {
        bool_t ErrSync = CO_isError(co->em, CO_EM_SYNC_TIME_OUT);
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	2118      	movs	r1, #24
 8007130:	4618      	mov	r0, r3
 8007132:	f7ff fb15 	bl	8006760 <CO_isError>
 8007136:	62f8      	str	r0, [r7, #44]	@ 0x2c
        bool_t ErrHbCons = CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER);
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	211b      	movs	r1, #27
 800713e:	4618      	mov	r0, r3
 8007140:	f7ff fb0e 	bl	8006760 <CO_isError>
 8007144:	62b8      	str	r0, [r7, #40]	@ 0x28
        bool_t ErrHbConsRemote = CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	211c      	movs	r1, #28
 800714c:	4618      	mov	r0, r3
 800714e:	f7ff fb07 	bl	8006760 <CO_isError>
 8007152:	6278      	str	r0, [r7, #36]	@ 0x24
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 8007158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800715a:	2b00      	cmp	r3, #0
 800715c:	d102      	bne.n	8007164 <CO_process+0xbc>
 800715e:	f997 5023 	ldrsb.w	r5, [r7, #35]	@ 0x23
 8007162:	e000      	b.n	8007166 <CO_process+0xbe>
 8007164:	2500      	movs	r5, #0
                        (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0U, (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0U,
 8007166:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007168:	f003 0304 	and.w	r3, r3, #4
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 800716c:	2b00      	cmp	r3, #0
 800716e:	bf14      	ite	ne
 8007170:	2301      	movne	r3, #1
 8007172:	2300      	moveq	r3, #0
 8007174:	b2db      	uxtb	r3, r3
 8007176:	60fb      	str	r3, [r7, #12]
                        (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0U, (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0U,
 8007178:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800717a:	f240 3303 	movw	r3, #771	@ 0x303
 800717e:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8007180:	2b00      	cmp	r3, #0
 8007182:	bf14      	ite	ne
 8007184:	2301      	movne	r3, #1
 8007186:	2300      	moveq	r3, #0
 8007188:	b2db      	uxtb	r3, r3
 800718a:	60bb      	str	r3, [r7, #8]
 800718c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <CO_process+0xee>
 8007192:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8007194:	e000      	b.n	8007198 <CO_process+0xf0>
 8007196:	2400      	movs	r4, #0
                        false, /* RPDO event timer timeout */
                        unc ? false : ErrSync, unc ? false : (ErrHbCons || ErrHbConsRemote),
 8007198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800719a:	2b00      	cmp	r3, #0
 800719c:	d107      	bne.n	80071ae <CO_process+0x106>
 800719e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d102      	bne.n	80071aa <CO_process+0x102>
 80071a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <CO_process+0x106>
 80071aa:	2301      	movs	r3, #1
 80071ac:	e000      	b.n	80071b0 <CO_process+0x108>
 80071ae:	2300      	movs	r3, #0
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 80071b0:	607b      	str	r3, [r7, #4]
                        CO_getErrorRegister(co->em) != 0U, CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS, timerNext_us);
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	69db      	ldr	r3, [r3, #28]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7ff faf9 	bl	80067ae <CO_getErrorRegister>
 80071bc:	4603      	mov	r3, r0
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 80071be:	2b00      	cmp	r3, #0
 80071c0:	bf14      	ite	ne
 80071c2:	2301      	movne	r3, #1
 80071c4:	2300      	moveq	r3, #0
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	461a      	mov	r2, r3
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	9307      	str	r3, [sp, #28]
 80071ce:	2300      	movs	r3, #0
 80071d0:	9306      	str	r3, [sp, #24]
 80071d2:	9205      	str	r2, [sp, #20]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	9304      	str	r3, [sp, #16]
 80071d8:	9403      	str	r4, [sp, #12]
 80071da:	2300      	movs	r3, #0
 80071dc:	9302      	str	r3, [sp, #8]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	9301      	str	r3, [sp, #4]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071e8:	462a      	mov	r2, r5
 80071ea:	6979      	ldr	r1, [r7, #20]
 80071ec:	4630      	mov	r0, r6
 80071ee:	f7fe fd0d 	bl	8005c0c <CO_LEDs_process>
    }
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d002      	beq.n	8007200 <CO_process+0x158>
        return reset;
 80071fa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80071fe:	e047      	b.n	8007290 <CO_process+0x1e8>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1U) {
        CO_EM_process(co->em, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	69d8      	ldr	r0, [r3, #28]
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800720a:	f7f9 fc23 	bl	8000a54 <CO_EM_process>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U) {
        reset = CO_NMT_process(co->NMT, &NMTstate, timeDifference_us, timerNext_us);
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	6918      	ldr	r0, [r3, #16]
 8007212:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	f7fa fac3 	bl	80017a4 <CO_NMT_process>
 800721e:	4603      	mov	r3, r0
 8007220:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 8007224:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8007228:	2b7f      	cmp	r3, #127	@ 0x7f
 800722a:	d003      	beq.n	8007234 <CO_process+0x18c>
 800722c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8007230:	2b05      	cmp	r3, #5
 8007232:	d101      	bne.n	8007238 <CO_process+0x190>
 8007234:	2301      	movs	r3, #1
 8007236:	e000      	b.n	800723a <CO_process+0x192>
 8007238:	2300      	movs	r3, #0
 800723a:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 800723c:	2300      	movs	r3, #0
 800723e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007242:	e011      	b.n	8007268 <CO_process+0x1c0>
        (void)CO_SDOserver_process(&co->SDOserver[i], NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007248:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800724c:	21b4      	movs	r1, #180	@ 0xb4
 800724e:	fb01 f303 	mul.w	r3, r1, r3
 8007252:	18d0      	adds	r0, r2, r3
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800725a:	f7fd f93d 	bl	80044d8 <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 800725e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007262:	3301      	adds	r3, #1
 8007264:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007268:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0e9      	beq.n	8007244 <CO_process+0x19c>
    }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    if (CO_GET_CNT(HB_CONS) == 1U) {
        CO_HBconsumer_process(co->HBcons, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	6958      	ldr	r0, [r3, #20]
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800727a:	f7fa f80f 	bl	800129c <CO_HBconsumer_process>
    CO_nodeGuardingMaster_process(co->NGmaster, timeDifference_us, timerNext_us);
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    if (CO_GET_CNT(TIME) == 1U) {
        (void)CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007286:	4618      	mov	r0, r3
 8007288:	f7fe fbce 	bl	8005a28 <CO_TIME_process>
    if (CO_GET_CNT(GTWA) == 1U) {
        CO_GTWA_process(co->gtwa, enableGateway, timeDifference_us, timerNext_us);
    }
#endif

    return reset;
 800728c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007290:	4618      	mov	r0, r3
 8007292:	374c      	adds	r7, #76	@ 0x4c
 8007294:	46bd      	mov	sp, r7
 8007296:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007298 <CO_process_SYNC>:

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
bool_t
CO_process_SYNC(CO_t* co, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 80072a4:	2300      	movs	r3, #0
 80072a6:	61fb      	str	r3, [r7, #28]

    if ((!co->nodeIdUnconfigured) && (CO_GET_CNT(SYNC) == 1U)) {
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d131      	bne.n	8007314 <CO_process_SYNC+0x7c>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff fa90 	bl	80067da <CO_NMT_getInternalState>
 80072ba:	4603      	mov	r3, r0
 80072bc:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 80072be:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80072c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80072c4:	d003      	beq.n	80072ce <CO_process_SYNC+0x36>
 80072c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80072ca:	2b05      	cmp	r3, #5
 80072cc:	d101      	bne.n	80072d2 <CO_process_SYNC+0x3a>
 80072ce:	2301      	movs	r3, #1
 80072d0:	e000      	b.n	80072d4 <CO_process_SYNC+0x3c>
 80072d2:	2300      	movs	r3, #0
 80072d4:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC, NMTisPreOrOperational, timeDifference_us,
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	6979      	ldr	r1, [r7, #20]
 80072e0:	f7fe f940 	bl	8005564 <CO_SYNC_process>
 80072e4:	4603      	mov	r3, r0
 80072e6:	74fb      	strb	r3, [r7, #19]
                                                        timerNext_us);

        switch (sync_process) {
 80072e8:	7cfb      	ldrb	r3, [r7, #19]
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d009      	beq.n	8007302 <CO_process_SYNC+0x6a>
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	dc0d      	bgt.n	800730e <CO_process_SYNC+0x76>
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00d      	beq.n	8007312 <CO_process_SYNC+0x7a>
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d000      	beq.n	80072fc <CO_process_SYNC+0x64>
            case CO_SYNC_NONE: break;
            case CO_SYNC_RX_TX: syncWas = true; break;
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
            default:
                /* MISRA C 2004 15.3 */
                break;
 80072fa:	e008      	b.n	800730e <CO_process_SYNC+0x76>
            case CO_SYNC_RX_TX: syncWas = true; break;
 80072fc:	2301      	movs	r3, #1
 80072fe:	61fb      	str	r3, [r7, #28]
 8007300:	e008      	b.n	8007314 <CO_process_SYNC+0x7c>
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	4618      	mov	r0, r3
 8007308:	f000 fc91 	bl	8007c2e <CO_CANclearPendingSyncPDOs>
 800730c:	e002      	b.n	8007314 <CO_process_SYNC+0x7c>
                break;
 800730e:	bf00      	nop
 8007310:	e000      	b.n	8007314 <CO_process_SYNC+0x7c>
            case CO_SYNC_NONE: break;
 8007312:	bf00      	nop
        }
    }

    return syncWas;
 8007314:	69fb      	ldr	r3, [r7, #28]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3720      	adds	r7, #32
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <CO_process_RPDO>:
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
void
CO_process_RPDO(CO_t* co, bool_t syncWas, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 800731e:	b580      	push	{r7, lr}
 8007320:	b088      	sub	sp, #32
 8007322:	af02      	add	r7, sp, #8
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	607a      	str	r2, [r7, #4]
 800732a:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d124      	bne.n	800737e <CO_process_RPDO+0x60>
        return;
    }

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	4618      	mov	r0, r3
 800733a:	f7ff fa4e 	bl	80067da <CO_NMT_getInternalState>
 800733e:	4603      	mov	r3, r0
 8007340:	2b05      	cmp	r3, #5
 8007342:	bf0c      	ite	eq
 8007344:	2301      	moveq	r3, #1
 8007346:	2300      	movne	r3, #0
 8007348:	b2db      	uxtb	r3, r3
 800734a:	613b      	str	r3, [r7, #16]

    for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 800734c:	2300      	movs	r3, #0
 800734e:	82fb      	strh	r3, [r7, #22]
 8007350:	e011      	b.n	8007376 <CO_process_RPDO+0x58>
        CO_RPDO_process(&co->RPDO[i],
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007356:	8afb      	ldrh	r3, [r7, #22]
 8007358:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 800735c:	fb01 f303 	mul.w	r3, r1, r3
 8007360:	18d0      	adds	r0, r2, r3
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	683a      	ldr	r2, [r7, #0]
 800736a:	6879      	ldr	r1, [r7, #4]
 800736c:	f7fb fc3c 	bl	8002be8 <CO_RPDO_process>
    for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8007370:	8afb      	ldrh	r3, [r7, #22]
 8007372:	3301      	adds	r3, #1
 8007374:	82fb      	strh	r3, [r7, #22]
 8007376:	8afb      	ldrh	r3, [r7, #22]
 8007378:	2b03      	cmp	r3, #3
 800737a:	d9ea      	bls.n	8007352 <CO_process_RPDO+0x34>
 800737c:	e000      	b.n	8007380 <CO_process_RPDO+0x62>
        return;
 800737e:	bf00      	nop
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
                        timeDifference_us, timerNext_us,
#endif
                        NMTisOperational, syncWas);
    }
}
 8007380:	3718      	adds	r7, #24
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <CO_process_TPDO>:
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
void
CO_process_TPDO(CO_t* co, bool_t syncWas, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8007386:	b580      	push	{r7, lr}
 8007388:	b088      	sub	sp, #32
 800738a:	af02      	add	r7, sp, #8
 800738c:	60f8      	str	r0, [r7, #12]
 800738e:	60b9      	str	r1, [r7, #8]
 8007390:	607a      	str	r2, [r7, #4]
 8007392:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d124      	bne.n	80073e6 <CO_process_TPDO+0x60>
        return;
    }

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7ff fa1a 	bl	80067da <CO_NMT_getInternalState>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b05      	cmp	r3, #5
 80073aa:	bf0c      	ite	eq
 80073ac:	2301      	moveq	r3, #1
 80073ae:	2300      	movne	r3, #0
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	613b      	str	r3, [r7, #16]

    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80073b4:	2300      	movs	r3, #0
 80073b6:	82fb      	strh	r3, [r7, #22]
 80073b8:	e011      	b.n	80073de <CO_process_TPDO+0x58>
        CO_TPDO_process(&co->TPDO[i],
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073be:	8afb      	ldrh	r3, [r7, #22]
 80073c0:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 80073c4:	fb01 f303 	mul.w	r3, r1, r3
 80073c8:	18d0      	adds	r0, r2, r3
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	6879      	ldr	r1, [r7, #4]
 80073d4:	f7fc f8da 	bl	800358c <CO_TPDO_process>
    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80073d8:	8afb      	ldrh	r3, [r7, #22]
 80073da:	3301      	adds	r3, #1
 80073dc:	82fb      	strh	r3, [r7, #22]
 80073de:	8afb      	ldrh	r3, [r7, #22]
 80073e0:	2b03      	cmp	r3, #3
 80073e2:	d9ea      	bls.n	80073ba <CO_process_TPDO+0x34>
 80073e4:	e000      	b.n	80073e8 <CO_process_TPDO+0x62>
        return;
 80073e6:	bf00      	nop
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
                        timeDifference_us, timerNext_us,
#endif
                        NMTisOperational, syncWas);
    }
}
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
	...

080073f0 <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 80073f8:	4a13      	ldr	r2, [pc, #76]	@ (8007448 <canopen_app_init+0x58>)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 8007402:	f107 0308 	add.w	r3, r7, #8
 8007406:	4619      	mov	r1, r3
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f7ff fa09 	bl	8006820 <CO_new>
 800740e:	4603      	mov	r3, r0
 8007410:	4a0e      	ldr	r2, [pc, #56]	@ (800744c <canopen_app_init+0x5c>)
 8007412:	6013      	str	r3, [r2, #0]
    if (CO == NULL) {
 8007414:	4b0d      	ldr	r3, [pc, #52]	@ (800744c <canopen_app_init+0x5c>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d104      	bne.n	8007426 <canopen_app_init+0x36>
        log_printf("Error: Can't allocate memory\n");
 800741c:	480c      	ldr	r0, [pc, #48]	@ (8007450 <canopen_app_init+0x60>)
 800741e:	f003 fd5b 	bl	800aed8 <puts>
        return 1;
 8007422:	2301      	movs	r3, #1
 8007424:	e00c      	b.n	8007440 <canopen_app_init+0x50>
    } else {
        log_printf("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	4619      	mov	r1, r3
 800742a:	480a      	ldr	r0, [pc, #40]	@ (8007454 <canopen_app_init+0x64>)
 800742c:	f003 fcec 	bl	800ae08 <iprintf>
    }

    canopenNodeSTM32->canOpenStack = CO;
 8007430:	4b05      	ldr	r3, [pc, #20]	@ (8007448 <canopen_app_init+0x58>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a05      	ldr	r2, [pc, #20]	@ (800744c <canopen_app_init+0x5c>)
 8007436:	6812      	ldr	r2, [r2, #0]
 8007438:	615a      	str	r2, [r3, #20]
        log_printf("Error: Storage %d\n", storageInitError);
        return 2;
    }
#endif

    canopen_app_resetCommunication();
 800743a:	f000 f80d 	bl	8007458 <canopen_app_resetCommunication>

    return 0;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	2000044c 	.word	0x2000044c
 800744c:	20000450 	.word	0x20000450
 8007450:	0800b950 	.word	0x0800b950
 8007454:	0800b970 	.word	0x0800b970

08007458 <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication() {
 8007458:	b590      	push	{r4, r7, lr}
 800745a:	b08f      	sub	sp, #60	@ 0x3c
 800745c:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 800745e:	487d      	ldr	r0, [pc, #500]	@ (8007654 <canopen_app_resetCommunication+0x1fc>)
 8007460:	f003 fd3a 	bl	800aed8 <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 8007464:	4b7c      	ldr	r3, [pc, #496]	@ (8007658 <canopen_app_resetCommunication+0x200>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 800746e:	4b7b      	ldr	r3, [pc, #492]	@ (800765c <canopen_app_resetCommunication+0x204>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4618      	mov	r0, r3
 8007474:	f000 f9bc 	bl	80077f0 <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 8007478:	4b77      	ldr	r3, [pc, #476]	@ (8007658 <canopen_app_resetCommunication+0x200>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	4618      	mov	r0, r3
 8007480:	f000 faa6 	bl	80079d0 <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 8007484:	4b74      	ldr	r3, [pc, #464]	@ (8007658 <canopen_app_resetCommunication+0x200>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a74      	ldr	r2, [pc, #464]	@ (800765c <canopen_app_resetCommunication+0x204>)
 800748a:	6811      	ldr	r1, [r2, #0]
 800748c:	2200      	movs	r2, #0
 800748e:	4618      	mov	r0, r3
 8007490:	f7ff fb66 	bl	8006b60 <CO_CANinit>
 8007494:	4603      	mov	r3, r0
 8007496:	461a      	mov	r2, r3
 8007498:	4b71      	ldr	r3, [pc, #452]	@ (8007660 <canopen_app_resetCommunication+0x208>)
 800749a:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 800749c:	4b70      	ldr	r3, [pc, #448]	@ (8007660 <canopen_app_resetCommunication+0x208>)
 800749e:	f993 3000 	ldrsb.w	r3, [r3]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d008      	beq.n	80074b8 <canopen_app_resetCommunication+0x60>
        log_printf("Error: CAN initialization failed: %d\n", err);
 80074a6:	4b6e      	ldr	r3, [pc, #440]	@ (8007660 <canopen_app_resetCommunication+0x208>)
 80074a8:	f993 3000 	ldrsb.w	r3, [r3]
 80074ac:	4619      	mov	r1, r3
 80074ae:	486d      	ldr	r0, [pc, #436]	@ (8007664 <canopen_app_resetCommunication+0x20c>)
 80074b0:	f003 fcaa 	bl	800ae08 <iprintf>
        return 1;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e0c8      	b.n	800764a <canopen_app_resetCommunication+0x1f2>
    }

    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80074b8:	4b6b      	ldr	r3, [pc, #428]	@ (8007668 <canopen_app_resetCommunication+0x210>)
 80074ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074bc:	60bb      	str	r3, [r7, #8]
                                                .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 80074be:	4b6a      	ldr	r3, [pc, #424]	@ (8007668 <canopen_app_resetCommunication+0x210>)
 80074c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80074c2:	60fb      	str	r3, [r7, #12]
                                                .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 80074c4:	4b68      	ldr	r3, [pc, #416]	@ (8007668 <canopen_app_resetCommunication+0x210>)
 80074c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80074c8:	613b      	str	r3, [r7, #16]
                                                .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber}};
 80074ca:	4b67      	ldr	r3, [pc, #412]	@ (8007668 <canopen_app_resetCommunication+0x210>)
 80074cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80074ce:	617b      	str	r3, [r7, #20]
    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 80074d0:	4b61      	ldr	r3, [pc, #388]	@ (8007658 <canopen_app_resetCommunication+0x200>)
 80074d2:	6818      	ldr	r0, [r3, #0]
 80074d4:	4b61      	ldr	r3, [pc, #388]	@ (800765c <canopen_app_resetCommunication+0x204>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	461a      	mov	r2, r3
 80074da:	4b60      	ldr	r3, [pc, #384]	@ (800765c <canopen_app_resetCommunication+0x204>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3302      	adds	r3, #2
 80074e0:	f107 0108 	add.w	r1, r7, #8
 80074e4:	f7ff fb68 	bl	8006bb8 <CO_LSSinit>
 80074e8:	4603      	mov	r3, r0
 80074ea:	461a      	mov	r2, r3
 80074ec:	4b5c      	ldr	r3, [pc, #368]	@ (8007660 <canopen_app_resetCommunication+0x208>)
 80074ee:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 80074f0:	4b5b      	ldr	r3, [pc, #364]	@ (8007660 <canopen_app_resetCommunication+0x208>)
 80074f2:	f993 3000 	ldrsb.w	r3, [r3]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d008      	beq.n	800750c <canopen_app_resetCommunication+0xb4>
        log_printf("Error: LSS slave initialization failed: %d\n", err);
 80074fa:	4b59      	ldr	r3, [pc, #356]	@ (8007660 <canopen_app_resetCommunication+0x208>)
 80074fc:	f993 3000 	ldrsb.w	r3, [r3]
 8007500:	4619      	mov	r1, r3
 8007502:	485a      	ldr	r0, [pc, #360]	@ (800766c <canopen_app_resetCommunication+0x214>)
 8007504:	f003 fc80 	bl	800ae08 <iprintf>
        return 2;
 8007508:	2302      	movs	r3, #2
 800750a:	e09e      	b.n	800764a <canopen_app_resetCommunication+0x1f2>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 800750c:	4b53      	ldr	r3, [pc, #332]	@ (800765c <canopen_app_resetCommunication+0x204>)
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	4b52      	ldr	r3, [pc, #328]	@ (800765c <canopen_app_resetCommunication+0x204>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	7812      	ldrb	r2, [r2, #0]
 8007516:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 8007518:	2300      	movs	r3, #0
 800751a:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object */
 800751c:	4b4e      	ldr	r3, [pc, #312]	@ (8007658 <canopen_app_resetCommunication+0x200>)
 800751e:	6818      	ldr	r0, [r3, #0]
 8007520:	4b53      	ldr	r3, [pc, #332]	@ (8007670 <canopen_app_resetCommunication+0x218>)
 8007522:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t */
                         FIRST_HB_TIME,        /* firstHBTime_ms */
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer */
                         canopenNodeSTM32->activeNodeID, &errInfo);
 8007524:	4b4d      	ldr	r3, [pc, #308]	@ (800765c <canopen_app_resetCommunication+0x204>)
 8007526:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object */
 8007528:	785b      	ldrb	r3, [r3, #1]
 800752a:	1d3a      	adds	r2, r7, #4
 800752c:	9207      	str	r2, [sp, #28]
 800752e:	9306      	str	r3, [sp, #24]
 8007530:	2300      	movs	r3, #0
 8007532:	9305      	str	r3, [sp, #20]
 8007534:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8007538:	9304      	str	r3, [sp, #16]
 800753a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800753e:	9303      	str	r3, [sp, #12]
 8007540:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8007544:	9302      	str	r3, [sp, #8]
 8007546:	f242 1311 	movw	r3, #8465	@ 0x2111
 800754a:	9301      	str	r3, [sp, #4]
 800754c:	2300      	movs	r3, #0
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	460b      	mov	r3, r1
 8007552:	2200      	movs	r2, #0
 8007554:	2100      	movs	r1, #0
 8007556:	f7ff fb5b 	bl	8006c10 <CO_CANopenInit>
 800755a:	4603      	mov	r3, r0
 800755c:	461a      	mov	r2, r3
 800755e:	4b40      	ldr	r3, [pc, #256]	@ (8007660 <canopen_app_resetCommunication+0x208>)
 8007560:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 8007562:	4b3f      	ldr	r3, [pc, #252]	@ (8007660 <canopen_app_resetCommunication+0x208>)
 8007564:	f993 3000 	ldrsb.w	r3, [r3]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d01a      	beq.n	80075a2 <canopen_app_resetCommunication+0x14a>
 800756c:	4b3c      	ldr	r3, [pc, #240]	@ (8007660 <canopen_app_resetCommunication+0x208>)
 800756e:	f993 3000 	ldrsb.w	r3, [r3]
 8007572:	f113 0f13 	cmn.w	r3, #19
 8007576:	d014      	beq.n	80075a2 <canopen_app_resetCommunication+0x14a>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8007578:	4b39      	ldr	r3, [pc, #228]	@ (8007660 <canopen_app_resetCommunication+0x208>)
 800757a:	f993 3000 	ldrsb.w	r3, [r3]
 800757e:	f113 0f0c 	cmn.w	r3, #12
 8007582:	d105      	bne.n	8007590 <canopen_app_resetCommunication+0x138>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4619      	mov	r1, r3
 8007588:	483a      	ldr	r0, [pc, #232]	@ (8007674 <canopen_app_resetCommunication+0x21c>)
 800758a:	f003 fc3d 	bl	800ae08 <iprintf>
 800758e:	e006      	b.n	800759e <canopen_app_resetCommunication+0x146>
        } else {
            log_printf("Error: CANopen initialization failed: %d\n", err);
 8007590:	4b33      	ldr	r3, [pc, #204]	@ (8007660 <canopen_app_resetCommunication+0x208>)
 8007592:	f993 3000 	ldrsb.w	r3, [r3]
 8007596:	4619      	mov	r1, r3
 8007598:	4837      	ldr	r0, [pc, #220]	@ (8007678 <canopen_app_resetCommunication+0x220>)
 800759a:	f003 fc35 	bl	800ae08 <iprintf>
        }
        return 3;
 800759e:	2303      	movs	r3, #3
 80075a0:	e053      	b.n	800764a <canopen_app_resetCommunication+0x1f2>
    }

    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 80075a2:	4b2d      	ldr	r3, [pc, #180]	@ (8007658 <canopen_app_resetCommunication+0x200>)
 80075a4:	6818      	ldr	r0, [r3, #0]
 80075a6:	4b2c      	ldr	r3, [pc, #176]	@ (8007658 <canopen_app_resetCommunication+0x200>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	69d9      	ldr	r1, [r3, #28]
 80075ac:	4b30      	ldr	r3, [pc, #192]	@ (8007670 <canopen_app_resetCommunication+0x218>)
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	4b2a      	ldr	r3, [pc, #168]	@ (800765c <canopen_app_resetCommunication+0x204>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	785c      	ldrb	r4, [r3, #1]
 80075b6:	1d3b      	adds	r3, r7, #4
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	4623      	mov	r3, r4
 80075bc:	f7ff fcac 	bl	8006f18 <CO_CANopenInitPDO>
 80075c0:	4603      	mov	r3, r0
 80075c2:	461a      	mov	r2, r3
 80075c4:	4b26      	ldr	r3, [pc, #152]	@ (8007660 <canopen_app_resetCommunication+0x208>)
 80075c6:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 80075c8:	4b25      	ldr	r3, [pc, #148]	@ (8007660 <canopen_app_resetCommunication+0x208>)
 80075ca:	f993 3000 	ldrsb.w	r3, [r3]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d014      	beq.n	80075fc <canopen_app_resetCommunication+0x1a4>
        if (err == CO_ERROR_OD_PARAMETERS) {
 80075d2:	4b23      	ldr	r3, [pc, #140]	@ (8007660 <canopen_app_resetCommunication+0x208>)
 80075d4:	f993 3000 	ldrsb.w	r3, [r3]
 80075d8:	f113 0f0c 	cmn.w	r3, #12
 80075dc:	d105      	bne.n	80075ea <canopen_app_resetCommunication+0x192>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4619      	mov	r1, r3
 80075e2:	4824      	ldr	r0, [pc, #144]	@ (8007674 <canopen_app_resetCommunication+0x21c>)
 80075e4:	f003 fc10 	bl	800ae08 <iprintf>
 80075e8:	e006      	b.n	80075f8 <canopen_app_resetCommunication+0x1a0>
        } else {
            log_printf("Error: PDO initialization failed: %d\n", err);
 80075ea:	4b1d      	ldr	r3, [pc, #116]	@ (8007660 <canopen_app_resetCommunication+0x208>)
 80075ec:	f993 3000 	ldrsb.w	r3, [r3]
 80075f0:	4619      	mov	r1, r3
 80075f2:	4822      	ldr	r0, [pc, #136]	@ (800767c <canopen_app_resetCommunication+0x224>)
 80075f4:	f003 fc08 	bl	800ae08 <iprintf>
        }
        return 4;
 80075f8:	2304      	movs	r3, #4
 80075fa:	e026      	b.n	800764a <canopen_app_resetCommunication+0x1f2>
    }

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 80075fc:	4b17      	ldr	r3, [pc, #92]	@ (800765c <canopen_app_resetCommunication+0x204>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	4618      	mov	r0, r3
 8007604:	f002 ff10 	bl	800a428 <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured) {
 8007608:	4b13      	ldr	r3, [pc, #76]	@ (8007658 <canopen_app_resetCommunication+0x200>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d002      	beq.n	8007618 <canopen_app_resetCommunication+0x1c0>
        if (storageInitError != 0) {
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
        }
#endif
    } else {
        log_printf("CANopenNode - Node-id not initialized\n");
 8007612:	481b      	ldr	r0, [pc, #108]	@ (8007680 <canopen_app_resetCommunication+0x228>)
 8007614:	f003 fc60 	bl	800aed8 <puts>
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 8007618:	4b0f      	ldr	r3, [pc, #60]	@ (8007658 <canopen_app_resetCommunication+0x200>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	4618      	mov	r0, r3
 8007620:	f000 f8f6 	bl	8007810 <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 8007624:	4817      	ldr	r0, [pc, #92]	@ (8007684 <canopen_app_resetCommunication+0x22c>)
 8007626:	f003 fc57 	bl	800aed8 <puts>
    fflush(stdout);
 800762a:	4b17      	ldr	r3, [pc, #92]	@ (8007688 <canopen_app_resetCommunication+0x230>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	4618      	mov	r0, r3
 8007632:	f003 fb13 	bl	800ac5c <fflush>
    time_old = time_current = HAL_GetTick();
 8007636:	f001 f877 	bl	8008728 <HAL_GetTick>
 800763a:	4603      	mov	r3, r0
 800763c:	4a13      	ldr	r2, [pc, #76]	@ (800768c <canopen_app_resetCommunication+0x234>)
 800763e:	6013      	str	r3, [r2, #0]
 8007640:	4b12      	ldr	r3, [pc, #72]	@ (800768c <canopen_app_resetCommunication+0x234>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a12      	ldr	r2, [pc, #72]	@ (8007690 <canopen_app_resetCommunication+0x238>)
 8007646:	6013      	str	r3, [r2, #0]
    return 0;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	371c      	adds	r7, #28
 800764e:	46bd      	mov	sp, r7
 8007650:	bd90      	pop	{r4, r7, pc}
 8007652:	bf00      	nop
 8007654:	0800b998 	.word	0x0800b998
 8007658:	20000450 	.word	0x20000450
 800765c:	2000044c 	.word	0x2000044c
 8007660:	2000045c 	.word	0x2000045c
 8007664:	0800b9c0 	.word	0x0800b9c0
 8007668:	20000000 	.word	0x20000000
 800766c:	0800b9e8 	.word	0x0800b9e8
 8007670:	200003c4 	.word	0x200003c4
 8007674:	0800ba14 	.word	0x0800ba14
 8007678:	0800ba3c 	.word	0x0800ba3c
 800767c:	0800ba68 	.word	0x0800ba68
 8007680:	0800ba90 	.word	0x0800ba90
 8007684:	0800bab8 	.word	0x0800bab8
 8007688:	200003e0 	.word	0x200003e0
 800768c:	20000458 	.word	0x20000458
 8007690:	20000454 	.word	0x20000454

08007694 <canopen_app_process>:

void
canopen_app_process() {
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 800769a:	f001 f845 	bl	8008728 <HAL_GetTick>
 800769e:	4603      	mov	r3, r0
 80076a0:	4a2c      	ldr	r2, [pc, #176]	@ (8007754 <canopen_app_process+0xc0>)
 80076a2:	6013      	str	r3, [r2, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 80076a4:	4b2b      	ldr	r3, [pc, #172]	@ (8007754 <canopen_app_process+0xc0>)
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	4b2b      	ldr	r3, [pc, #172]	@ (8007758 <canopen_app_process+0xc4>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d04c      	beq.n	800774a <canopen_app_process+0xb6>
        /* CANopen process */
        CO_NMT_reset_cmd_t reset_status;
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 80076b0:	4b28      	ldr	r3, [pc, #160]	@ (8007754 <canopen_app_process+0xc0>)
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	4b28      	ldr	r3, [pc, #160]	@ (8007758 <canopen_app_process+0xc4>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80076be:	fb02 f303 	mul.w	r3, r2, r3
 80076c2:	607b      	str	r3, [r7, #4]
        time_old = time_current;
 80076c4:	4b23      	ldr	r3, [pc, #140]	@ (8007754 <canopen_app_process+0xc0>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a23      	ldr	r2, [pc, #140]	@ (8007758 <canopen_app_process+0xc4>)
 80076ca:	6013      	str	r3, [r2, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 80076cc:	4b23      	ldr	r3, [pc, #140]	@ (800775c <canopen_app_process+0xc8>)
 80076ce:	6818      	ldr	r0, [r3, #0]
 80076d0:	2300      	movs	r3, #0
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	2100      	movs	r1, #0
 80076d6:	f7ff fce7 	bl	80070a8 <CO_process>
 80076da:	4603      	mov	r3, r0
 80076dc:	70fb      	strb	r3, [r7, #3]
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 80076de:	4b1f      	ldr	r3, [pc, #124]	@ (800775c <canopen_app_process+0xc8>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076e4:	7a5a      	ldrb	r2, [r3, #9]
 80076e6:	4b1e      	ldr	r3, [pc, #120]	@ (8007760 <canopen_app_process+0xcc>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	09d2      	lsrs	r2, r2, #7
 80076ec:	b2d2      	uxtb	r2, r2
 80076ee:	745a      	strb	r2, [r3, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 80076f0:	4b1a      	ldr	r3, [pc, #104]	@ (800775c <canopen_app_process+0xc8>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076f6:	7a9a      	ldrb	r2, [r3, #10]
 80076f8:	4b19      	ldr	r3, [pc, #100]	@ (8007760 <canopen_app_process+0xcc>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	09d2      	lsrs	r2, r2, #7
 80076fe:	b2d2      	uxtb	r2, r2
 8007700:	741a      	strb	r2, [r3, #16]
        if (reset_status == CO_RESET_COMM) {
 8007702:	78fb      	ldrb	r3, [r7, #3]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d118      	bne.n	800773a <canopen_app_process+0xa6>
            /* delete objects from memory */
        	HAL_TIM_Base_Stop_IT(canopenNodeSTM32->timerHandle);
 8007708:	4b15      	ldr	r3, [pc, #84]	@ (8007760 <canopen_app_process+0xcc>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	4618      	mov	r0, r3
 8007710:	f002 ff02 	bl	800a518 <HAL_TIM_Base_Stop_IT>
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8007714:	4b12      	ldr	r3, [pc, #72]	@ (8007760 <canopen_app_process+0xcc>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4618      	mov	r0, r3
 800771a:	f000 f869 	bl	80077f0 <CO_CANsetConfigurationMode>
            CO_delete(CO);
 800771e:	4b0f      	ldr	r3, [pc, #60]	@ (800775c <canopen_app_process+0xc8>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4618      	mov	r0, r3
 8007724:	f7ff f9b8 	bl	8006a98 <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 8007728:	480e      	ldr	r0, [pc, #56]	@ (8007764 <canopen_app_process+0xd0>)
 800772a:	f003 fbd5 	bl	800aed8 <puts>
            canopen_app_init(canopenNodeSTM32); // Reset Communication routine
 800772e:	4b0c      	ldr	r3, [pc, #48]	@ (8007760 <canopen_app_process+0xcc>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4618      	mov	r0, r3
 8007734:	f7ff fe5c 	bl	80073f0 <canopen_app_init>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 8007738:	e007      	b.n	800774a <canopen_app_process+0xb6>
        } else if (reset_status == CO_RESET_APP) {
 800773a:	78fb      	ldrb	r3, [r7, #3]
 800773c:	2b02      	cmp	r3, #2
 800773e:	d104      	bne.n	800774a <canopen_app_process+0xb6>
            log_printf("CANopenNode Device Reset\n");
 8007740:	4809      	ldr	r0, [pc, #36]	@ (8007768 <canopen_app_process+0xd4>)
 8007742:	f003 fbc9 	bl	800aed8 <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 8007746:	f001 ffe0 	bl	800970a <HAL_NVIC_SystemReset>
}
 800774a:	bf00      	nop
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	20000458 	.word	0x20000458
 8007758:	20000454 	.word	0x20000454
 800775c:	20000450 	.word	0x20000450
 8007760:	2000044c 	.word	0x2000044c
 8007764:	0800bad4 	.word	0x0800bad4
 8007768:	0800bafc 	.word	0x0800bafc

0800776c <canopen_app_interrupt>:

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
    CO_LOCK_OD(CO->CANmodule);
 8007772:	4b1e      	ldr	r3, [pc, #120]	@ (80077ec <canopen_app_interrupt+0x80>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007778:	f3ef 8210 	mrs	r2, PRIMASK
 800777c:	607a      	str	r2, [r7, #4]
  return(result);
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8007782:	b672      	cpsid	i
}
 8007784:	bf00      	nop
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 8007786:	4b19      	ldr	r3, [pc, #100]	@ (80077ec <canopen_app_interrupt+0x80>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d120      	bne.n	80077d2 <canopen_app_interrupt+0x66>
 8007790:	4b16      	ldr	r3, [pc, #88]	@ (80077ec <canopen_app_interrupt+0x80>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d01a      	beq.n	80077d2 <canopen_app_interrupt+0x66>
        bool_t syncWas = false;
 800779c:	2300      	movs	r3, #0
 800779e:	60fb      	str	r3, [r7, #12]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000; // 1ms second
 80077a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80077a4:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 80077a6:	4b11      	ldr	r3, [pc, #68]	@ (80077ec <canopen_app_interrupt+0x80>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2200      	movs	r2, #0
 80077ac:	68b9      	ldr	r1, [r7, #8]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7ff fd72 	bl	8007298 <CO_process_SYNC>
 80077b4:	60f8      	str	r0, [r7, #12]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 80077b6:	4b0d      	ldr	r3, [pc, #52]	@ (80077ec <canopen_app_interrupt+0x80>)
 80077b8:	6818      	ldr	r0, [r3, #0]
 80077ba:	2300      	movs	r3, #0
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	68f9      	ldr	r1, [r7, #12]
 80077c0:	f7ff fdad 	bl	800731e <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 80077c4:	4b09      	ldr	r3, [pc, #36]	@ (80077ec <canopen_app_interrupt+0x80>)
 80077c6:	6818      	ldr	r0, [r3, #0]
 80077c8:	2300      	movs	r3, #0
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	68f9      	ldr	r1, [r7, #12]
 80077ce:	f7ff fdda 	bl	8007386 <CO_process_TPDO>
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 80077d2:	4b06      	ldr	r3, [pc, #24]	@ (80077ec <canopen_app_interrupt+0x80>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077da:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	f383 8810 	msr	PRIMASK, r3
}
 80077e2:	bf00      	nop
}
 80077e4:	bf00      	nop
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	20000450 	.word	0x20000450

080077f0 <CO_CANsetConfigurationMode>:
#define CANID_MASK 0x07FF /*!< CAN standard ID mask */
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d004      	beq.n	8007808 <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	4618      	mov	r0, r3
 8007804:	f001 f9c8 	bl	8008b98 <HAL_CAN_Stop>
#endif
    }
}
 8007808:	bf00      	nop
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00b      	beq.n	8007838 <CO_CANsetNormalMode+0x28>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	4618      	mov	r0, r3
 8007828:	f001 f972 	bl	8008b10 <HAL_CAN_Start>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d102      	bne.n	8007838 <CO_CANsetNormalMode+0x28>
#endif
        {
            CANmodule->CANnormal = true;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	615a      	str	r2, [r3, #20]
        }
    }
}
 8007838:	bf00      	nop
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 8007840:	b580      	push	{r7, lr}
 8007842:	b090      	sub	sp, #64	@ 0x40
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
 800784c:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d005      	beq.n	8007860 <CO_CANmodule_init+0x20>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d002      	beq.n	8007860 <CO_CANmodule_init+0x20>
 800785a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800785c:	2b00      	cmp	r3, #0
 800785e:	d102      	bne.n	8007866 <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007860:	f04f 33ff 	mov.w	r3, #4294967295
 8007864:	e0ab      	b.n	80079be <CO_CANmodule_init+0x17e>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 800786c:	4a56      	ldr	r2, [pc, #344]	@ (80079c8 <CO_CANmodule_init+0x188>)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6013      	str	r3, [r2, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	887a      	ldrh	r2, [r7, #2]
 800787c:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007882:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800788a:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2201      	movs	r2, #1
 80078a8:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	849a      	strh	r2, [r3, #36]	@ 0x24
    CANmodule->errOld = 0U;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 80078b6:	2300      	movs	r3, #0
 80078b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80078ba:	e02b      	b.n	8007914 <CO_CANmodule_init+0xd4>
        rxArray[i].ident = 0U;
 80078bc:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80078be:	4613      	mov	r3, r2
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	4413      	add	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	461a      	mov	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4413      	add	r3, r2
 80078cc:	2200      	movs	r2, #0
 80078ce:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 80078d0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80078d2:	4613      	mov	r3, r2
 80078d4:	005b      	lsls	r3, r3, #1
 80078d6:	4413      	add	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	461a      	mov	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4413      	add	r3, r2
 80078e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80078e4:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 80078e6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80078e8:	4613      	mov	r3, r2
 80078ea:	005b      	lsls	r3, r3, #1
 80078ec:	4413      	add	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	461a      	mov	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4413      	add	r3, r2
 80078f6:	2200      	movs	r2, #0
 80078f8:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 80078fa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80078fc:	4613      	mov	r3, r2
 80078fe:	005b      	lsls	r3, r3, #1
 8007900:	4413      	add	r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	461a      	mov	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4413      	add	r3, r2
 800790a:	2200      	movs	r2, #0
 800790c:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 800790e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007910:	3301      	adds	r3, #1
 8007912:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007914:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8007916:	887b      	ldrh	r3, [r7, #2]
 8007918:	429a      	cmp	r2, r3
 800791a:	d3cf      	bcc.n	80078bc <CO_CANmodule_init+0x7c>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 800791c:	2300      	movs	r3, #0
 800791e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007920:	e00c      	b.n	800793c <CO_CANmodule_init+0xfc>
        txArray[i].bufferFull = false;
 8007922:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8007924:	4613      	mov	r3, r2
 8007926:	005b      	lsls	r3, r3, #1
 8007928:	4413      	add	r3, r2
 800792a:	00db      	lsls	r3, r3, #3
 800792c:	461a      	mov	r2, r3
 800792e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007930:	4413      	add	r3, r2
 8007932:	2200      	movs	r2, #0
 8007934:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 8007936:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007938:	3301      	adds	r3, #1
 800793a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800793c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800793e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007942:	429a      	cmp	r2, r3
 8007944:	d3ed      	bcc.n	8007922 <CO_CANmodule_init+0xe2>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	4798      	blx	r3
#else
    CAN_FilterTypeDef FilterConfig;
#if defined(CAN)
    FilterConfig.FilterBank = 0;
#else
    if (((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance == CAN1) {
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a1d      	ldr	r2, [pc, #116]	@ (80079cc <CO_CANmodule_init+0x18c>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d102      	bne.n	8007960 <CO_CANmodule_init+0x120>
        FilterConfig.FilterBank = 0;
 800795a:	2300      	movs	r3, #0
 800795c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800795e:	e001      	b.n	8007964 <CO_CANmodule_init+0x124>
    } else {
        FilterConfig.FilterBank = 14;
 8007960:	230e      	movs	r3, #14
 8007962:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
#endif
    FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8007964:	2300      	movs	r3, #0
 8007966:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8007968:	2301      	movs	r3, #1
 800796a:	633b      	str	r3, [r7, #48]	@ 0x30
    FilterConfig.FilterIdHigh = 0x0;
 800796c:	2300      	movs	r3, #0
 800796e:	617b      	str	r3, [r7, #20]
    FilterConfig.FilterIdLow = 0x0;
 8007970:	2300      	movs	r3, #0
 8007972:	61bb      	str	r3, [r7, #24]
    FilterConfig.FilterMaskIdHigh = 0x0;
 8007974:	2300      	movs	r3, #0
 8007976:	61fb      	str	r3, [r7, #28]
    FilterConfig.FilterMaskIdLow = 0x0;
 8007978:	2300      	movs	r3, #0
 800797a:	623b      	str	r3, [r7, #32]
    FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800797c:	2300      	movs	r3, #0
 800797e:	627b      	str	r3, [r7, #36]	@ 0x24

    FilterConfig.FilterActivation = ENABLE;
 8007980:	2301      	movs	r3, #1
 8007982:	637b      	str	r3, [r7, #52]	@ 0x34
    FilterConfig.SlaveStartFilterBank = 14;
 8007984:	230e      	movs	r3, #14
 8007986:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (HAL_CAN_ConfigFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, &FilterConfig) != HAL_OK) {
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f107 0214 	add.w	r2, r7, #20
 8007990:	4611      	mov	r1, r2
 8007992:	4618      	mov	r0, r3
 8007994:	f000 ffd0 	bl	8008938 <HAL_CAN_ConfigFilter>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <CO_CANmodule_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800799e:	f04f 33ff 	mov.w	r3, #4294967295
 80079a2:	e00c      	b.n	80079be <CO_CANmodule_init+0x17e>
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#else
    if (HAL_CAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle, CAN_IT_RX_FIFO0_MSG_PENDING
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	2113      	movs	r1, #19
 80079aa:	4618      	mov	r0, r3
 80079ac:	f001 fb64 	bl	8009078 <HAL_CAN_ActivateNotification>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d002      	beq.n	80079bc <CO_CANmodule_init+0x17c>
                                                                                 | CAN_IT_RX_FIFO1_MSG_PENDING
                                                                                 | CAN_IT_TX_MAILBOX_EMPTY)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80079b6:	f04f 33ff 	mov.w	r3, #4294967295
 80079ba:	e000      	b.n	80079be <CO_CANmodule_init+0x17e>
    }
#endif

    return CO_ERROR_NO;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3740      	adds	r7, #64	@ 0x40
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	20000460 	.word	0x20000460
 80079cc:	40006400 	.word	0x40006400

080079d0 <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d009      	beq.n	80079f2 <CO_CANmodule_disable+0x22>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d005      	beq.n	80079f2 <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f001 f8d3 	bl	8008b98 <HAL_CAN_Stop>
#endif
    }
}
 80079f2:	bf00      	nop
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
	...

080079fc <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 80079fc:	b480      	push	{r7}
 80079fe:	b087      	sub	sp, #28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	4608      	mov	r0, r1
 8007a06:	4611      	mov	r1, r2
 8007a08:	461a      	mov	r2, r3
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	817b      	strh	r3, [r7, #10]
 8007a0e:	460b      	mov	r3, r1
 8007a10:	813b      	strh	r3, [r7, #8]
 8007a12:	4613      	mov	r3, r2
 8007a14:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8007a16:	2300      	movs	r3, #0
 8007a18:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d03a      	beq.n	8007a96 <CO_CANrxBufferInit+0x9a>
 8007a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d037      	beq.n	8007a96 <CO_CANrxBufferInit+0x9a>
 8007a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d034      	beq.n	8007a96 <CO_CANrxBufferInit+0x9a>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	891b      	ldrh	r3, [r3, #8]
 8007a30:	897a      	ldrh	r2, [r7, #10]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d22f      	bcs.n	8007a96 <CO_CANrxBufferInit+0x9a>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6859      	ldr	r1, [r3, #4]
 8007a3a:	897a      	ldrh	r2, [r7, #10]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	4413      	add	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	440b      	add	r3, r1
 8007a46:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a4c:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a52:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 8007a54:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007a58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a5c:	b21b      	sxth	r3, r3
 8007a5e:	6a3a      	ldr	r2, [r7, #32]
 8007a60:	2a00      	cmp	r2, #0
 8007a62:	d001      	beq.n	8007a68 <CO_CANrxBufferInit+0x6c>
 8007a64:	4a12      	ldr	r2, [pc, #72]	@ (8007ab0 <CO_CANrxBufferInit+0xb4>)
 8007a66:	e000      	b.n	8007a6a <CO_CANrxBufferInit+0x6e>
 8007a68:	2200      	movs	r2, #0
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	b21b      	sxth	r3, r3
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 8007a74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a7c:	b21a      	sxth	r2, r3
 8007a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8007ab0 <CO_CANrxBufferInit+0xb4>)
 8007a80:	4313      	orrs	r3, r2
 8007a82:	b21b      	sxth	r3, r3
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d004      	beq.n	8007a9c <CO_CANrxBufferInit+0xa0>
            __NOP();
 8007a92:	bf00      	nop
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007a94:	e002      	b.n	8007a9c <CO_CANrxBufferInit+0xa0>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8007a96:	23ff      	movs	r3, #255	@ 0xff
 8007a98:	75fb      	strb	r3, [r7, #23]
 8007a9a:	e000      	b.n	8007a9e <CO_CANrxBufferInit+0xa2>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007a9c:	bf00      	nop
    }

    return ret;
 8007a9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	371c      	adds	r7, #28
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	ffff8000 	.word	0xffff8000

08007ab4 <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 8007ab4:	b480      	push	{r7}
 8007ab6:	b087      	sub	sp, #28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	607b      	str	r3, [r7, #4]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	817b      	strh	r3, [r7, #10]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t* buffer = NULL;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d024      	beq.n	8007b1a <CO_CANtxBufferInit+0x66>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8a1b      	ldrh	r3, [r3, #16]
 8007ad4:	897a      	ldrh	r2, [r7, #10]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d21f      	bcs.n	8007b1a <CO_CANtxBufferInit+0x66>
        buffer = &CANmodule->txArray[index];
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	68d9      	ldr	r1, [r3, #12]
 8007ade:	897a      	ldrh	r2, [r7, #10]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	005b      	lsls	r3, r3, #1
 8007ae4:	4413      	add	r3, r2
 8007ae6:	00db      	lsls	r3, r3, #3
 8007ae8:	440b      	add	r3, r1
 8007aea:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 8007aec:	893b      	ldrh	r3, [r7, #8]
 8007aee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	2a00      	cmp	r2, #0
 8007af6:	d002      	beq.n	8007afe <CO_CANtxBufferInit+0x4a>
 8007af8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007afc:	e000      	b.n	8007b00 <CO_CANtxBufferInit+0x4c>
 8007afe:	2200      	movs	r2, #0
 8007b00:	431a      	orrs	r2, r3
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007b0c:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	2200      	movs	r2, #0
 8007b12:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b18:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 8007b1a:	697b      	ldr	r3, [r7, #20]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	371c      	adds	r7, #28
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 8007b32:	2300      	movs	r3, #0
 8007b34:	73fb      	strb	r3, [r7, #15]
            == HAL_OK;
    }
#else
    static CAN_TxHeaderTypeDef tx_hdr;
    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_CAN_GetTxMailboxesFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f001 f944 	bl	8008dca <HAL_CAN_GetTxMailboxesFreeLevel>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d028      	beq.n	8007b9a <prv_send_can_message+0x72>
        /*
    		 * RTR flag is part of identifier value
    		 * hence it needs to be properly decoded
    		 */
        tx_hdr.ExtId = 0u;
 8007b48:	4b16      	ldr	r3, [pc, #88]	@ (8007ba4 <prv_send_can_message+0x7c>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	605a      	str	r2, [r3, #4]
        tx_hdr.IDE = CAN_ID_STD;
 8007b4e:	4b15      	ldr	r3, [pc, #84]	@ (8007ba4 <prv_send_can_message+0x7c>)
 8007b50:	2200      	movs	r2, #0
 8007b52:	609a      	str	r2, [r3, #8]
        tx_hdr.DLC = buffer->DLC;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	791b      	ldrb	r3, [r3, #4]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	4b12      	ldr	r3, [pc, #72]	@ (8007ba4 <prv_send_can_message+0x7c>)
 8007b5c:	611a      	str	r2, [r3, #16]
        tx_hdr.StdId = buffer->ident & CANID_MASK;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b66:	4a0f      	ldr	r2, [pc, #60]	@ (8007ba4 <prv_send_can_message+0x7c>)
 8007b68:	6013      	str	r3, [r2, #0]
        tx_hdr.RTR = (buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	0b9b      	lsrs	r3, r3, #14
 8007b70:	f003 0302 	and.w	r3, r3, #2
 8007b74:	4a0b      	ldr	r2, [pc, #44]	@ (8007ba4 <prv_send_can_message+0x7c>)
 8007b76:	60d3      	str	r3, [r2, #12]

        uint32_t TxMailboxNum; // Transmission MailBox number

        /* Now add message to FIFO. Should not fail */
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6898      	ldr	r0, [r3, #8]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	1d5a      	adds	r2, r3, #5
 8007b82:	f107 0308 	add.w	r3, r7, #8
 8007b86:	4907      	ldr	r1, [pc, #28]	@ (8007ba4 <prv_send_can_message+0x7c>)
 8007b88:	f001 f84f 	bl	8008c2a <HAL_CAN_AddTxMessage>
 8007b8c:	4603      	mov	r3, r0
                                       &TxMailboxNum)
                  == HAL_OK;
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	bf0c      	ite	eq
 8007b92:	2301      	moveq	r3, #1
 8007b94:	2300      	movne	r3, #0
 8007b96:	b2db      	uxtb	r3, r3
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8007b98:	73fb      	strb	r3, [r7, #15]
    }
#endif
    return success;
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	20000464 	.word	0x20000464

08007ba8 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00c      	beq.n	8007bd8 <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d106      	bne.n	8007bd4 <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	8a5b      	ldrh	r3, [r3, #18]
 8007bca:	f043 0308 	orr.w	r3, r3, #8
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 8007bd4:	23f7      	movs	r3, #247	@ 0xf7
 8007bd6:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8007bdc:	613b      	str	r3, [r7, #16]
  return(result);
 8007bde:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8007be4:	b672      	cpsid	i
}
 8007be6:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7ff ff9c 	bl	8007b28 <prv_send_can_message>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d004      	beq.n	8007c00 <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	695a      	ldr	r2, [r3, #20]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	61da      	str	r2, [r3, #28]
 8007bfe:	e009      	b.n	8007c14 <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	2201      	movs	r2, #1
 8007c04:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c18:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f383 8810 	msr	PRIMASK, r3
}
 8007c20:	bf00      	nop

    return err;
 8007c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3718      	adds	r7, #24
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <CO_CANclearPendingSyncPDOs>:

/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 8007c2e:	b480      	push	{r7}
 8007c30:	b087      	sub	sp, #28
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 8007c36:	2300      	movs	r3, #0
 8007c38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8007c3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c40:	68fa      	ldr	r2, [r7, #12]

    CO_LOCK_CAN_SEND(CANmodule);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8007c46:	b672      	cpsid	i
}
 8007c48:	bf00      	nop
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	69db      	ldr	r3, [r3, #28]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d004      	beq.n	8007c5c <CO_CANclearPendingSyncPDOs+0x2e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if (CANmodule->CANtxCount > 0) {
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d032      	beq.n	8007ccc <CO_CANclearPendingSyncPDOs+0x9e>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	8a1b      	ldrh	r3, [r3, #16]
 8007c6a:	827b      	strh	r3, [r7, #18]
 8007c6c:	e02b      	b.n	8007cc6 <CO_CANclearPendingSyncPDOs+0x98>
            if (CANmodule->txArray[i].bufferFull) {
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68d9      	ldr	r1, [r3, #12]
 8007c72:	8a7a      	ldrh	r2, [r7, #18]
 8007c74:	4613      	mov	r3, r2
 8007c76:	005b      	lsls	r3, r3, #1
 8007c78:	4413      	add	r3, r2
 8007c7a:	00db      	lsls	r3, r3, #3
 8007c7c:	440b      	add	r3, r1
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d01d      	beq.n	8007cc0 <CO_CANclearPendingSyncPDOs+0x92>
                if (CANmodule->txArray[i].syncFlag) {
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68d9      	ldr	r1, [r3, #12]
 8007c88:	8a7a      	ldrh	r2, [r7, #18]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	005b      	lsls	r3, r3, #1
 8007c8e:	4413      	add	r3, r2
 8007c90:	00db      	lsls	r3, r3, #3
 8007c92:	440b      	add	r3, r1
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d012      	beq.n	8007cc0 <CO_CANclearPendingSyncPDOs+0x92>
                    CANmodule->txArray[i].bufferFull = false;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68d9      	ldr	r1, [r3, #12]
 8007c9e:	8a7a      	ldrh	r2, [r7, #18]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	005b      	lsls	r3, r3, #1
 8007ca4:	4413      	add	r3, r2
 8007ca6:	00db      	lsls	r3, r3, #3
 8007ca8:	440b      	add	r3, r1
 8007caa:	2200      	movs	r2, #0
 8007cac:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	849a      	strh	r2, [r3, #36]	@ 0x24
                    tpdoDeleted = 2U;
 8007cbc:	2302      	movs	r3, #2
 8007cbe:	617b      	str	r3, [r7, #20]
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8007cc0:	8a7b      	ldrh	r3, [r7, #18]
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	827b      	strh	r3, [r7, #18]
 8007cc6:	8a7b      	ldrh	r3, [r7, #18]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1d0      	bne.n	8007c6e <CO_CANclearPendingSyncPDOs+0x40>
                }
            }
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	f383 8810 	msr	PRIMASK, r3
}
 8007cd8:	bf00      	nop
    if (tpdoDeleted) {
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d006      	beq.n	8007cee <CO_CANclearPendingSyncPDOs+0xc0>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	8a5b      	ldrh	r3, [r3, #18]
 8007ce4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	825a      	strh	r2, [r3, #18]
    }
}
 8007cee:	bf00      	nop
 8007cf0:	371c      	adds	r7, #28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;

void
CO_CANmodule_process(CO_CANmodule_t* CANmodule) {
 8007cfa:	b480      	push	{r7}
 8007cfc:	b085      	sub	sp, #20
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
    uint32_t err = 0;
 8007d02:	2300      	movs	r3, #0
 8007d04:	60bb      	str	r3, [r7, #8]

        CANmodule->CANerrorStatus = status;
    }
#else

    err = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	f003 0307 	and.w	r3, r3, #7
 8007d14:	60bb      	str	r3, [r7, #8]
          & (CAN_ESR_BOFF | CAN_ESR_EPVF | CAN_ESR_EWGF);

    //    uint32_t esrVal = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR; Debug purpose
    if (CANmodule->errOld != err) {
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d02e      	beq.n	8007d7e <CO_CANmodule_process+0x84>

        uint16_t status = CANmodule->CANerrorStatus;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	8a5b      	ldrh	r3, [r3, #18]
 8007d24:	81fb      	strh	r3, [r7, #14]

        CANmodule->errOld = err;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	629a      	str	r2, [r3, #40]	@ 0x28

        if (err & CAN_ESR_BOFF) {
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	f003 0304 	and.w	r3, r3, #4
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d004      	beq.n	8007d40 <CO_CANmodule_process+0x46>
            status |= CO_CAN_ERRTX_BUS_OFF;
 8007d36:	89fb      	ldrh	r3, [r7, #14]
 8007d38:	f043 0304 	orr.w	r3, r3, #4
 8007d3c:	81fb      	strh	r3, [r7, #14]
 8007d3e:	e01b      	b.n	8007d78 <CO_CANmodule_process+0x7e>
            // In this driver, we assume that auto bus recovery is activated ! so this error will eventually handled automatically.

        } else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF
 8007d40:	89fb      	ldrh	r3, [r7, #14]
 8007d42:	f423 7341 	bic.w	r3, r3, #772	@ 0x304
 8007d46:	f023 0303 	bic.w	r3, r3, #3
 8007d4a:	81fb      	strh	r3, [r7, #14]
                      ^ (CO_CAN_ERRTX_BUS_OFF | CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_WARNING
                         | CO_CAN_ERRTX_PASSIVE);

            if (err & CAN_ESR_EWGF) {
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d005      	beq.n	8007d62 <CO_CANmodule_process+0x68>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 8007d56:	89fb      	ldrh	r3, [r7, #14]
 8007d58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d5c:	f043 0301 	orr.w	r3, r3, #1
 8007d60:	81fb      	strh	r3, [r7, #14]
            }

            if (err & CAN_ESR_EPVF) {
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	f003 0302 	and.w	r3, r3, #2
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d005      	beq.n	8007d78 <CO_CANmodule_process+0x7e>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 8007d6c:	89fb      	ldrh	r3, [r7, #14]
 8007d6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007d72:	f043 0302 	orr.w	r3, r3, #2
 8007d76:	81fb      	strh	r3, [r7, #14]
            }
        }

        CANmodule->CANerrorStatus = status;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	89fa      	ldrh	r2, [r7, #14]
 8007d7c:	825a      	strh	r2, [r3, #18]
    }

#endif
}
 8007d7e:	bf00      	nop
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
	...

08007d8c <prv_read_can_received_msg>:
 */

static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)

{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b08c      	sub	sp, #48	@ 0x30
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 8007d98:	2300      	movs	r3, #0
 8007d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t index;            /* index of received message */
    uint32_t rcvMsgIdent;      /* identifier of the received message */
    uint8_t messageFound = 0;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29


    static CAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_CAN_GetRxMessage(hcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 8007da2:	f107 0314 	add.w	r3, r7, #20
 8007da6:	3305      	adds	r3, #5
 8007da8:	4a2c      	ldr	r2, [pc, #176]	@ (8007e5c <prv_read_can_received_msg+0xd0>)
 8007daa:	68b9      	ldr	r1, [r7, #8]
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f001 f841 	bl	8008e34 <HAL_CAN_GetRxMessage>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d14c      	bne.n	8007e52 <prv_read_can_received_msg+0xc6>
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.StdId | (rx_hdr.RTR == CAN_RTR_REMOTE ? FLAG_RTR : 0x00);
 8007db8:	4b28      	ldr	r3, [pc, #160]	@ (8007e5c <prv_read_can_received_msg+0xd0>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a27      	ldr	r2, [pc, #156]	@ (8007e5c <prv_read_can_received_msg+0xd0>)
 8007dbe:	68d2      	ldr	r2, [r2, #12]
 8007dc0:	2a02      	cmp	r2, #2
 8007dc2:	d102      	bne.n	8007dca <prv_read_can_received_msg+0x3e>
 8007dc4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007dc8:	e000      	b.n	8007dcc <prv_read_can_received_msg+0x40>
 8007dca:	2200      	movs	r2, #0
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	617b      	str	r3, [r7, #20]
    rcvMsg.dlc = rx_hdr.DLC;
 8007dd0:	4b22      	ldr	r3, [pc, #136]	@ (8007e5c <prv_read_can_received_msg+0xd0>)
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	763b      	strb	r3, [r7, #24]
    rcvMsgIdent = rcvMsg.ident;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	627b      	str	r3, [r7, #36]	@ 0x24

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 8007ddc:	4b20      	ldr	r3, [pc, #128]	@ (8007e60 <prv_read_can_received_msg+0xd4>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <prv_read_can_received_msg+0x5e>
        __BKPT(0);
 8007de6:	be00      	bkpt	0x0000
 8007de8:	e01f      	b.n	8007e2a <prv_read_can_received_msg+0x9e>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 8007dea:	4b1d      	ldr	r3, [pc, #116]	@ (8007e60 <prv_read_can_received_msg+0xd4>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8007df2:	4b1b      	ldr	r3, [pc, #108]	@ (8007e60 <prv_read_can_received_msg+0xd4>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	891b      	ldrh	r3, [r3, #8]
 8007df8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007dfa:	e013      	b.n	8007e24 <prv_read_can_received_msg+0x98>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 8007dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dfe:	881b      	ldrh	r3, [r3, #0]
 8007e00:	461a      	mov	r2, r3
 8007e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e04:	4053      	eors	r3, r2
 8007e06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e08:	8852      	ldrh	r2, [r2, #2]
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d103      	bne.n	8007e18 <prv_read_can_received_msg+0x8c>
                messageFound = 1;
 8007e10:	2301      	movs	r3, #1
 8007e12:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                break;
 8007e16:	e008      	b.n	8007e2a <prv_read_can_received_msg+0x9e>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8007e18:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e20:	330c      	adds	r3, #12
 8007e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e24:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1e8      	bne.n	8007dfc <prv_read_can_received_msg+0x70>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 8007e2a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d010      	beq.n	8007e54 <prv_read_can_received_msg+0xc8>
 8007e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00d      	beq.n	8007e54 <prv_read_can_received_msg+0xc8>
 8007e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d009      	beq.n	8007e54 <prv_read_can_received_msg+0xc8>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 8007e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e46:	6852      	ldr	r2, [r2, #4]
 8007e48:	f107 0114 	add.w	r1, r7, #20
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	4798      	blx	r3
 8007e50:	e000      	b.n	8007e54 <prv_read_can_received_msg+0xc8>
        return;
 8007e52:	bf00      	nop
    }
}
 8007e54:	3730      	adds	r7, #48	@ 0x30
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	2000047c 	.word	0x2000047c
 8007e60:	20000460 	.word	0x20000460

08007e64 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \brief           Rx FIFO 0 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO0, 0);
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2100      	movs	r1, #0
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f7ff ff8b 	bl	8007d8c <prv_read_can_received_msg>

}
 8007e76:	bf00      	nop
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <HAL_CAN_RxFifo1MsgPendingCallback>:
 * \brief           Rx FIFO 1 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b082      	sub	sp, #8
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO1, 0);
 8007e86:	2200      	movs	r2, #0
 8007e88:	2101      	movs	r1, #1
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7ff ff7e 	bl	8007d8c <prv_read_can_received_msg>
}
 8007e90:	bf00      	nop
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <CO_CANinterrupt_TX>:
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 * \param[in]       MailboxNumber: the mailbox number that has been transmitted
 */
void
CO_CANinterrupt_TX(CO_CANmodule_t* CANmodule, uint32_t MailboxNumber) {
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]

    CANmodule->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	621a      	str	r2, [r3, #32]
    CANmodule->bufferInhibitFlag = false;            /* Clear flag from previous message */
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	61da      	str	r2, [r3, #28]
    if (CANmodule->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d03d      	beq.n	8007f34 <CO_CANinterrupt_TX+0x9c>
        CO_CANtx_t* buffer = &CANmodule->txArray[0]; /* Start with first buffer handle */
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8007ec2:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ec4:	68fa      	ldr	r2, [r7, #12]
		 * This function is always called from interrupt,
		 * however to make sure no preemption can happen, interrupts are anyway locked
		 * (unless you can guarantee no higher priority interrupt will try to access to CAN instance and send data,
		 *  then no need to lock interrupts..)
		 */
        CO_LOCK_CAN_SEND(CANmodule);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8007eca:	b672      	cpsid	i
}
 8007ecc:	bf00      	nop
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	8a1b      	ldrh	r3, [r3, #16]
 8007ed2:	827b      	strh	r3, [r7, #18]
 8007ed4:	e01e      	b.n	8007f14 <CO_CANinterrupt_TX+0x7c>
            /* Try to send message */
            if (buffer->bufferFull) {
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d014      	beq.n	8007f08 <CO_CANinterrupt_TX+0x70>
                if (prv_send_can_message(CANmodule, buffer)) {
 8007ede:	6979      	ldr	r1, [r7, #20]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f7ff fe21 	bl	8007b28 <prv_send_can_message>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00d      	beq.n	8007f08 <CO_CANinterrupt_TX+0x70>
                    buffer->bufferFull = false;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	849a      	strh	r2, [r3, #36]	@ 0x24
                    CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	695a      	ldr	r2, [r3, #20]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	61da      	str	r2, [r3, #28]
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 8007f08:	8a7b      	ldrh	r3, [r7, #18]
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	827b      	strh	r3, [r7, #18]
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	3318      	adds	r3, #24
 8007f12:	617b      	str	r3, [r7, #20]
 8007f14:	8a7b      	ldrh	r3, [r7, #18]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1dd      	bne.n	8007ed6 <CO_CANinterrupt_TX+0x3e>
                }
            }
        }
        /* Clear counter if no more messages */
        if (i == 0U) {
 8007f1a:	8a7b      	ldrh	r3, [r7, #18]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d102      	bne.n	8007f26 <CO_CANinterrupt_TX+0x8e>
            CANmodule->CANtxCount = 0U;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	849a      	strh	r2, [r3, #36]	@ 0x24
        }
        CO_UNLOCK_CAN_SEND(CANmodule);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f2a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	f383 8810 	msr	PRIMASK, r3
}
 8007f32:	bf00      	nop
    }
}
 8007f34:	bf00      	nop
 8007f36:	3718      	adds	r7, #24
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <HAL_CAN_TxMailbox0CompleteCallback>:

void
HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan) {
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8007f44:	4b04      	ldr	r3, [pc, #16]	@ (8007f58 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2101      	movs	r1, #1
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7ff ffa4 	bl	8007e98 <CO_CANinterrupt_TX>
}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	20000460 	.word	0x20000460

08007f5c <HAL_CAN_TxMailbox1CompleteCallback>:

void
HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan) {
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8007f64:	4b04      	ldr	r3, [pc, #16]	@ (8007f78 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2101      	movs	r1, #1
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7ff ff94 	bl	8007e98 <CO_CANinterrupt_TX>
}
 8007f70:	bf00      	nop
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	20000460 	.word	0x20000460

08007f7c <HAL_CAN_TxMailbox2CompleteCallback>:

void
HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan) {
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8007f84:	4b04      	ldr	r3, [pc, #16]	@ (8007f98 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2101      	movs	r1, #1
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7ff ff84 	bl	8007e98 <CO_CANinterrupt_TX>
}
 8007f90:	bf00      	nop
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	20000460 	.word	0x20000460

08007f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007fa2:	f000 fb70 	bl	8008686 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007fa6:	f000 f82d 	bl	8008004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007faa:	f000 f8f1 	bl	8008190 <MX_GPIO_Init>
  MX_CAN1_Init();
 8007fae:	f000 f893 	bl	80080d8 <MX_CAN1_Init>
  MX_TIM14_Init();
 8007fb2:	f000 f8c9 	bl	8008148 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  CANopenNodeSTM32 canOpenNodeSTM32;
  canOpenNodeSTM32.CANHandle = &hcan1;
 8007fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8007ff4 <main+0x58>)
 8007fb8:	60bb      	str	r3, [r7, #8]
  canOpenNodeSTM32.HWInitFunction = MX_CAN1_Init;
 8007fba:	4b0f      	ldr	r3, [pc, #60]	@ (8007ff8 <main+0x5c>)
 8007fbc:	60fb      	str	r3, [r7, #12]
  canOpenNodeSTM32.timerHandle = &htim14;
 8007fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8007ffc <main+0x60>)
 8007fc0:	607b      	str	r3, [r7, #4]
  canOpenNodeSTM32.desiredNodeID = 1;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	703b      	strb	r3, [r7, #0]
  canOpenNodeSTM32.baudrate = 100;
 8007fc6:	2364      	movs	r3, #100	@ 0x64
 8007fc8:	807b      	strh	r3, [r7, #2]
  canopen_app_init(&canOpenNodeSTM32);
 8007fca:	463b      	mov	r3, r7
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7ff fa0f 	bl	80073f0 <canopen_app_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, canOpenNodeSTM32.outStatusLEDGreen);
 8007fd2:	7c3b      	ldrb	r3, [r7, #16]
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	2120      	movs	r1, #32
 8007fd8:	4809      	ldr	r0, [pc, #36]	@ (8008000 <main+0x64>)
 8007fda:	f001 fd53 	bl	8009a84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13, canOpenNodeSTM32.outStatusLEDRed);
 8007fde:	7c7b      	ldrb	r3, [r7, #17]
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007fe6:	4806      	ldr	r0, [pc, #24]	@ (8008000 <main+0x64>)
 8007fe8:	f001 fd4c 	bl	8009a84 <HAL_GPIO_WritePin>
	  canopen_app_process();
 8007fec:	f7ff fb52 	bl	8007694 <canopen_app_process>
		HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, canOpenNodeSTM32.outStatusLEDGreen);
 8007ff0:	bf00      	nop
 8007ff2:	e7ee      	b.n	8007fd2 <main+0x36>
 8007ff4:	20000498 	.word	0x20000498
 8007ff8:	080080d9 	.word	0x080080d9
 8007ffc:	200004c0 	.word	0x200004c0
 8008000:	40022400 	.word	0x40022400

08008004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b094      	sub	sp, #80	@ 0x50
 8008008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800800a:	f107 031c 	add.w	r3, r7, #28
 800800e:	2234      	movs	r2, #52	@ 0x34
 8008010:	2100      	movs	r1, #0
 8008012:	4618      	mov	r0, r3
 8008014:	f003 f85a 	bl	800b0cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008018:	f107 0308 	add.w	r3, r7, #8
 800801c:	2200      	movs	r2, #0
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	605a      	str	r2, [r3, #4]
 8008022:	609a      	str	r2, [r3, #8]
 8008024:	60da      	str	r2, [r3, #12]
 8008026:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008028:	4b29      	ldr	r3, [pc, #164]	@ (80080d0 <SystemClock_Config+0xcc>)
 800802a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800802c:	4a28      	ldr	r2, [pc, #160]	@ (80080d0 <SystemClock_Config+0xcc>)
 800802e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008032:	6413      	str	r3, [r2, #64]	@ 0x40
 8008034:	4b26      	ldr	r3, [pc, #152]	@ (80080d0 <SystemClock_Config+0xcc>)
 8008036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008038:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800803c:	607b      	str	r3, [r7, #4]
 800803e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8008040:	4b24      	ldr	r3, [pc, #144]	@ (80080d4 <SystemClock_Config+0xd0>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8008048:	4a22      	ldr	r2, [pc, #136]	@ (80080d4 <SystemClock_Config+0xd0>)
 800804a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800804e:	6013      	str	r3, [r2, #0]
 8008050:	4b20      	ldr	r3, [pc, #128]	@ (80080d4 <SystemClock_Config+0xd0>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008058:	603b      	str	r3, [r7, #0]
 800805a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800805c:	2301      	movs	r3, #1
 800805e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008060:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008064:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008066:	2302      	movs	r3, #2
 8008068:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800806a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800806e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8008070:	2319      	movs	r3, #25
 8008072:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8008074:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8008078:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800807a:	2302      	movs	r3, #2
 800807c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800807e:	2304      	movs	r3, #4
 8008080:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8008082:	2302      	movs	r3, #2
 8008084:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008086:	f107 031c 	add.w	r3, r7, #28
 800808a:	4618      	mov	r0, r3
 800808c:	f001 fd14 	bl	8009ab8 <HAL_RCC_OscConfig>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8008096:	f000 f91c 	bl	80082d2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800809a:	230f      	movs	r3, #15
 800809c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800809e:	2302      	movs	r3, #2
 80080a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80080a2:	2300      	movs	r3, #0
 80080a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80080a6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80080aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80080ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80080b0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80080b2:	f107 0308 	add.w	r3, r7, #8
 80080b6:	2105      	movs	r1, #5
 80080b8:	4618      	mov	r0, r3
 80080ba:	f001 ffab 	bl	800a014 <HAL_RCC_ClockConfig>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80080c4:	f000 f905 	bl	80082d2 <Error_Handler>
  }
}
 80080c8:	bf00      	nop
 80080ca:	3750      	adds	r7, #80	@ 0x50
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	40023800 	.word	0x40023800
 80080d4:	40007000 	.word	0x40007000

080080d8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80080dc:	4b18      	ldr	r3, [pc, #96]	@ (8008140 <MX_CAN1_Init+0x68>)
 80080de:	4a19      	ldr	r2, [pc, #100]	@ (8008144 <MX_CAN1_Init+0x6c>)
 80080e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 80080e2:	4b17      	ldr	r3, [pc, #92]	@ (8008140 <MX_CAN1_Init+0x68>)
 80080e4:	2215      	movs	r2, #21
 80080e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80080e8:	4b15      	ldr	r3, [pc, #84]	@ (8008140 <MX_CAN1_Init+0x68>)
 80080ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80080ee:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80080f0:	4b13      	ldr	r3, [pc, #76]	@ (8008140 <MX_CAN1_Init+0x68>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 80080f6:	4b12      	ldr	r3, [pc, #72]	@ (8008140 <MX_CAN1_Init+0x68>)
 80080f8:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 80080fc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80080fe:	4b10      	ldr	r3, [pc, #64]	@ (8008140 <MX_CAN1_Init+0x68>)
 8008100:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8008104:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8008106:	4b0e      	ldr	r3, [pc, #56]	@ (8008140 <MX_CAN1_Init+0x68>)
 8008108:	2200      	movs	r2, #0
 800810a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800810c:	4b0c      	ldr	r3, [pc, #48]	@ (8008140 <MX_CAN1_Init+0x68>)
 800810e:	2200      	movs	r2, #0
 8008110:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8008112:	4b0b      	ldr	r3, [pc, #44]	@ (8008140 <MX_CAN1_Init+0x68>)
 8008114:	2200      	movs	r2, #0
 8008116:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8008118:	4b09      	ldr	r3, [pc, #36]	@ (8008140 <MX_CAN1_Init+0x68>)
 800811a:	2200      	movs	r2, #0
 800811c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800811e:	4b08      	ldr	r3, [pc, #32]	@ (8008140 <MX_CAN1_Init+0x68>)
 8008120:	2200      	movs	r2, #0
 8008122:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8008124:	4b06      	ldr	r3, [pc, #24]	@ (8008140 <MX_CAN1_Init+0x68>)
 8008126:	2200      	movs	r2, #0
 8008128:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800812a:	4805      	ldr	r0, [pc, #20]	@ (8008140 <MX_CAN1_Init+0x68>)
 800812c:	f000 fb08 	bl	8008740 <HAL_CAN_Init>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d001      	beq.n	800813a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8008136:	f000 f8cc 	bl	80082d2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800813a:	bf00      	nop
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	20000498 	.word	0x20000498
 8008144:	40006400 	.word	0x40006400

08008148 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800814c:	4b0e      	ldr	r3, [pc, #56]	@ (8008188 <MX_TIM14_Init+0x40>)
 800814e:	4a0f      	ldr	r2, [pc, #60]	@ (800818c <MX_TIM14_Init+0x44>)
 8008150:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 83;
 8008152:	4b0d      	ldr	r3, [pc, #52]	@ (8008188 <MX_TIM14_Init+0x40>)
 8008154:	2253      	movs	r2, #83	@ 0x53
 8008156:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008158:	4b0b      	ldr	r3, [pc, #44]	@ (8008188 <MX_TIM14_Init+0x40>)
 800815a:	2200      	movs	r2, #0
 800815c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 800815e:	4b0a      	ldr	r3, [pc, #40]	@ (8008188 <MX_TIM14_Init+0x40>)
 8008160:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008164:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008166:	4b08      	ldr	r3, [pc, #32]	@ (8008188 <MX_TIM14_Init+0x40>)
 8008168:	2200      	movs	r2, #0
 800816a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800816c:	4b06      	ldr	r3, [pc, #24]	@ (8008188 <MX_TIM14_Init+0x40>)
 800816e:	2200      	movs	r2, #0
 8008170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8008172:	4805      	ldr	r0, [pc, #20]	@ (8008188 <MX_TIM14_Init+0x40>)
 8008174:	f002 f900 	bl	800a378 <HAL_TIM_Base_Init>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800817e:	f000 f8a8 	bl	80082d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8008182:	bf00      	nop
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	200004c0 	.word	0x200004c0
 800818c:	40002000 	.word	0x40002000

08008190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b088      	sub	sp, #32
 8008194:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008196:	f107 030c 	add.w	r3, r7, #12
 800819a:	2200      	movs	r2, #0
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	605a      	str	r2, [r3, #4]
 80081a0:	609a      	str	r2, [r3, #8]
 80081a2:	60da      	str	r2, [r3, #12]
 80081a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80081a6:	4b1e      	ldr	r3, [pc, #120]	@ (8008220 <MX_GPIO_Init+0x90>)
 80081a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081aa:	4a1d      	ldr	r2, [pc, #116]	@ (8008220 <MX_GPIO_Init+0x90>)
 80081ac:	f043 0302 	orr.w	r3, r3, #2
 80081b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80081b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008220 <MX_GPIO_Init+0x90>)
 80081b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081b6:	f003 0302 	and.w	r3, r3, #2
 80081ba:	60bb      	str	r3, [r7, #8]
 80081bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80081be:	4b18      	ldr	r3, [pc, #96]	@ (8008220 <MX_GPIO_Init+0x90>)
 80081c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081c2:	4a17      	ldr	r2, [pc, #92]	@ (8008220 <MX_GPIO_Init+0x90>)
 80081c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80081c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80081ca:	4b15      	ldr	r3, [pc, #84]	@ (8008220 <MX_GPIO_Init+0x90>)
 80081cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081d2:	607b      	str	r3, [r7, #4]
 80081d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80081d6:	4b12      	ldr	r3, [pc, #72]	@ (8008220 <MX_GPIO_Init+0x90>)
 80081d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081da:	4a11      	ldr	r2, [pc, #68]	@ (8008220 <MX_GPIO_Init+0x90>)
 80081dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80081e2:	4b0f      	ldr	r3, [pc, #60]	@ (8008220 <MX_GPIO_Init+0x90>)
 80081e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081ea:	603b      	str	r3, [r7, #0]
 80081ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13|GPIO_PIN_5, GPIO_PIN_RESET);
 80081ee:	2200      	movs	r2, #0
 80081f0:	f242 0120 	movw	r1, #8224	@ 0x2020
 80081f4:	480b      	ldr	r0, [pc, #44]	@ (8008224 <MX_GPIO_Init+0x94>)
 80081f6:	f001 fc45 	bl	8009a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PJ13 PJ5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 80081fa:	f242 0320 	movw	r3, #8224	@ 0x2020
 80081fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008200:	2301      	movs	r3, #1
 8008202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008204:	2300      	movs	r3, #0
 8008206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008208:	2300      	movs	r3, #0
 800820a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800820c:	f107 030c 	add.w	r3, r7, #12
 8008210:	4619      	mov	r1, r3
 8008212:	4804      	ldr	r0, [pc, #16]	@ (8008224 <MX_GPIO_Init+0x94>)
 8008214:	f001 fa8a 	bl	800972c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8008218:	bf00      	nop
 800821a:	3720      	adds	r7, #32
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}
 8008220:	40023800 	.word	0x40023800
 8008224:	40022400 	.word	0x40022400

08008228 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]

  /* USER CODE END Callback 0 */

  /* USER CODE BEGIN Callback 1 */
  // Handle CANOpen app interrupts
  if (htim == canopenNodeSTM32->timerHandle) {
 8008230:	4b05      	ldr	r3, [pc, #20]	@ (8008248 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	429a      	cmp	r2, r3
 800823a:	d101      	bne.n	8008240 <HAL_TIM_PeriodElapsedCallback+0x18>
      canopen_app_interrupt();
 800823c:	f7ff fa96 	bl	800776c <canopen_app_interrupt>
  }
  /* USER CODE END Callback 1 */
}
 8008240:	bf00      	nop
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	2000044c 	.word	0x2000044c

0800824c <My_ITM_SendChar>:

__STATIC_INLINE uint32_t My_ITM_SendChar (uint32_t ch)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
	if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8008254:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8008258:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b00      	cmp	r3, #0
 8008262:	d013      	beq.n	800828c <My_ITM_SendChar+0x40>
			((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8008264:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8008268:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800826c:	f003 0301 	and.w	r3, r3, #1
	if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00b      	beq.n	800828c <My_ITM_SendChar+0x40>
	{
		while (ITM->PORT[0].u32 == 0UL)
 8008274:	e000      	b.n	8008278 <My_ITM_SendChar+0x2c>
		{
			__NOP();
 8008276:	bf00      	nop
		while (ITM->PORT[0].u32 == 0UL)
 8008278:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d0f9      	beq.n	8008276 <My_ITM_SendChar+0x2a>
		}
		ITM->PORT[0].u8 = (uint8_t)ch;
 8008282:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	b2d2      	uxtb	r2, r2
 800828a:	701a      	strb	r2, [r3, #0]
	}
	return (ch);
 800828c:	687b      	ldr	r3, [r7, #4]
}
 800828e:	4618      	mov	r0, r3
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr

0800829a <_write>:

int _write(int file, char *ptr, int len) {
 800829a:	b580      	push	{r7, lr}
 800829c:	b086      	sub	sp, #24
 800829e:	af00      	add	r7, sp, #0
 80082a0:	60f8      	str	r0, [r7, #12]
 80082a2:	60b9      	str	r1, [r7, #8]
 80082a4:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0; i < len; i++) {
 80082a6:	2300      	movs	r3, #0
 80082a8:	617b      	str	r3, [r7, #20]
 80082aa:	e009      	b.n	80082c0 <_write+0x26>
		My_ITM_SendChar(*ptr++);
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	1c5a      	adds	r2, r3, #1
 80082b0:	60ba      	str	r2, [r7, #8]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7ff ffc9 	bl	800824c <My_ITM_SendChar>
	for(i = 0; i < len; i++) {
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	3301      	adds	r3, #1
 80082be:	617b      	str	r3, [r7, #20]
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	dbf1      	blt.n	80082ac <_write+0x12>
	}
	return len;
 80082c8:	687b      	ldr	r3, [r7, #4]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3718      	adds	r7, #24
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80082d2:	b480      	push	{r7}
 80082d4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80082d6:	b672      	cpsid	i
}
 80082d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80082da:	bf00      	nop
 80082dc:	e7fd      	b.n	80082da <Error_Handler+0x8>
	...

080082e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80082e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008324 <HAL_MspInit+0x44>)
 80082e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ea:	4a0e      	ldr	r2, [pc, #56]	@ (8008324 <HAL_MspInit+0x44>)
 80082ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80082f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008324 <HAL_MspInit+0x44>)
 80082f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082fa:	607b      	str	r3, [r7, #4]
 80082fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082fe:	4b09      	ldr	r3, [pc, #36]	@ (8008324 <HAL_MspInit+0x44>)
 8008300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008302:	4a08      	ldr	r2, [pc, #32]	@ (8008324 <HAL_MspInit+0x44>)
 8008304:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008308:	6453      	str	r3, [r2, #68]	@ 0x44
 800830a:	4b06      	ldr	r3, [pc, #24]	@ (8008324 <HAL_MspInit+0x44>)
 800830c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800830e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008312:	603b      	str	r3, [r7, #0]
 8008314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008316:	bf00      	nop
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	40023800 	.word	0x40023800

08008328 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b08a      	sub	sp, #40	@ 0x28
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008330:	f107 0314 	add.w	r3, r7, #20
 8008334:	2200      	movs	r2, #0
 8008336:	601a      	str	r2, [r3, #0]
 8008338:	605a      	str	r2, [r3, #4]
 800833a:	609a      	str	r2, [r3, #8]
 800833c:	60da      	str	r2, [r3, #12]
 800833e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a27      	ldr	r2, [pc, #156]	@ (80083e4 <HAL_CAN_MspInit+0xbc>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d148      	bne.n	80083dc <HAL_CAN_MspInit+0xb4>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800834a:	4b27      	ldr	r3, [pc, #156]	@ (80083e8 <HAL_CAN_MspInit+0xc0>)
 800834c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800834e:	4a26      	ldr	r2, [pc, #152]	@ (80083e8 <HAL_CAN_MspInit+0xc0>)
 8008350:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008354:	6413      	str	r3, [r2, #64]	@ 0x40
 8008356:	4b24      	ldr	r3, [pc, #144]	@ (80083e8 <HAL_CAN_MspInit+0xc0>)
 8008358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800835a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800835e:	613b      	str	r3, [r7, #16]
 8008360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008362:	4b21      	ldr	r3, [pc, #132]	@ (80083e8 <HAL_CAN_MspInit+0xc0>)
 8008364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008366:	4a20      	ldr	r2, [pc, #128]	@ (80083e8 <HAL_CAN_MspInit+0xc0>)
 8008368:	f043 0302 	orr.w	r3, r3, #2
 800836c:	6313      	str	r3, [r2, #48]	@ 0x30
 800836e:	4b1e      	ldr	r3, [pc, #120]	@ (80083e8 <HAL_CAN_MspInit+0xc0>)
 8008370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008372:	f003 0302 	and.w	r3, r3, #2
 8008376:	60fb      	str	r3, [r7, #12]
 8008378:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800837a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800837e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008380:	2302      	movs	r3, #2
 8008382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008384:	2300      	movs	r3, #0
 8008386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008388:	2303      	movs	r3, #3
 800838a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800838c:	2309      	movs	r3, #9
 800838e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008390:	f107 0314 	add.w	r3, r7, #20
 8008394:	4619      	mov	r1, r3
 8008396:	4815      	ldr	r0, [pc, #84]	@ (80083ec <HAL_CAN_MspInit+0xc4>)
 8008398:	f001 f9c8 	bl	800972c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800839c:	2200      	movs	r2, #0
 800839e:	2100      	movs	r1, #0
 80083a0:	2013      	movs	r0, #19
 80083a2:	f001 f988 	bl	80096b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80083a6:	2013      	movs	r0, #19
 80083a8:	f001 f9a1 	bl	80096ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80083ac:	2200      	movs	r2, #0
 80083ae:	2100      	movs	r1, #0
 80083b0:	2014      	movs	r0, #20
 80083b2:	f001 f980 	bl	80096b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80083b6:	2014      	movs	r0, #20
 80083b8:	f001 f999 	bl	80096ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80083bc:	2200      	movs	r2, #0
 80083be:	2100      	movs	r1, #0
 80083c0:	2015      	movs	r0, #21
 80083c2:	f001 f978 	bl	80096b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80083c6:	2015      	movs	r0, #21
 80083c8:	f001 f991 	bl	80096ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80083cc:	2200      	movs	r2, #0
 80083ce:	2100      	movs	r1, #0
 80083d0:	2016      	movs	r0, #22
 80083d2:	f001 f970 	bl	80096b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80083d6:	2016      	movs	r0, #22
 80083d8:	f001 f989 	bl	80096ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80083dc:	bf00      	nop
 80083de:	3728      	adds	r7, #40	@ 0x28
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	40006400 	.word	0x40006400
 80083e8:	40023800 	.word	0x40023800
 80083ec:	40020400 	.word	0x40020400

080083f0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a0d      	ldr	r2, [pc, #52]	@ (8008434 <HAL_TIM_Base_MspInit+0x44>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d113      	bne.n	800842a <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8008402:	4b0d      	ldr	r3, [pc, #52]	@ (8008438 <HAL_TIM_Base_MspInit+0x48>)
 8008404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008406:	4a0c      	ldr	r2, [pc, #48]	@ (8008438 <HAL_TIM_Base_MspInit+0x48>)
 8008408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800840c:	6413      	str	r3, [r2, #64]	@ 0x40
 800840e:	4b0a      	ldr	r3, [pc, #40]	@ (8008438 <HAL_TIM_Base_MspInit+0x48>)
 8008410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008416:	60fb      	str	r3, [r7, #12]
 8008418:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800841a:	2200      	movs	r2, #0
 800841c:	2100      	movs	r1, #0
 800841e:	202d      	movs	r0, #45	@ 0x2d
 8008420:	f001 f949 	bl	80096b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8008424:	202d      	movs	r0, #45	@ 0x2d
 8008426:	f001 f962 	bl	80096ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 800842a:	bf00      	nop
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	40002000 	.word	0x40002000
 8008438:	40023800 	.word	0x40023800

0800843c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800843c:	b480      	push	{r7}
 800843e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008440:	bf00      	nop
 8008442:	e7fd      	b.n	8008440 <NMI_Handler+0x4>

08008444 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008444:	b480      	push	{r7}
 8008446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008448:	bf00      	nop
 800844a:	e7fd      	b.n	8008448 <HardFault_Handler+0x4>

0800844c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800844c:	b480      	push	{r7}
 800844e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008450:	bf00      	nop
 8008452:	e7fd      	b.n	8008450 <MemManage_Handler+0x4>

08008454 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008454:	b480      	push	{r7}
 8008456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008458:	bf00      	nop
 800845a:	e7fd      	b.n	8008458 <BusFault_Handler+0x4>

0800845c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800845c:	b480      	push	{r7}
 800845e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008460:	bf00      	nop
 8008462:	e7fd      	b.n	8008460 <UsageFault_Handler+0x4>

08008464 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008464:	b480      	push	{r7}
 8008466:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008468:	bf00      	nop
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008472:	b480      	push	{r7}
 8008474:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008476:	bf00      	nop
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008480:	b480      	push	{r7}
 8008482:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008484:	bf00      	nop
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008492:	f000 f935 	bl	8008700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008496:	bf00      	nop
 8008498:	bd80      	pop	{r7, pc}
	...

0800849c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80084a0:	4802      	ldr	r0, [pc, #8]	@ (80084ac <CAN1_TX_IRQHandler+0x10>)
 80084a2:	f000 fe0f 	bl	80090c4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80084a6:	bf00      	nop
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	20000498 	.word	0x20000498

080084b0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80084b4:	4802      	ldr	r0, [pc, #8]	@ (80084c0 <CAN1_RX0_IRQHandler+0x10>)
 80084b6:	f000 fe05 	bl	80090c4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80084ba:	bf00      	nop
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	20000498 	.word	0x20000498

080084c4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80084c8:	4802      	ldr	r0, [pc, #8]	@ (80084d4 <CAN1_RX1_IRQHandler+0x10>)
 80084ca:	f000 fdfb 	bl	80090c4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80084ce:	bf00      	nop
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	20000498 	.word	0x20000498

080084d8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80084dc:	4802      	ldr	r0, [pc, #8]	@ (80084e8 <CAN1_SCE_IRQHandler+0x10>)
 80084de:	f000 fdf1 	bl	80090c4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80084e2:	bf00      	nop
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	20000498 	.word	0x20000498

080084ec <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80084f0:	4802      	ldr	r0, [pc, #8]	@ (80084fc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80084f2:	f002 f841 	bl	800a578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80084f6:	bf00      	nop
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	200004c0 	.word	0x200004c0

08008500 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800850c:	2300      	movs	r3, #0
 800850e:	617b      	str	r3, [r7, #20]
 8008510:	e00a      	b.n	8008528 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008512:	f3af 8000 	nop.w
 8008516:	4601      	mov	r1, r0
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	1c5a      	adds	r2, r3, #1
 800851c:	60ba      	str	r2, [r7, #8]
 800851e:	b2ca      	uxtb	r2, r1
 8008520:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	3301      	adds	r3, #1
 8008526:	617b      	str	r3, [r7, #20]
 8008528:	697a      	ldr	r2, [r7, #20]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	429a      	cmp	r2, r3
 800852e:	dbf0      	blt.n	8008512 <_read+0x12>
  }

  return len;
 8008530:	687b      	ldr	r3, [r7, #4]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3718      	adds	r7, #24
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <_close>:
  }
  return len;
}

int _close(int file)
{
 800853a:	b480      	push	{r7}
 800853c:	b083      	sub	sp, #12
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008546:	4618      	mov	r0, r3
 8008548:	370c      	adds	r7, #12
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr

08008552 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008552:	b480      	push	{r7}
 8008554:	b083      	sub	sp, #12
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008562:	605a      	str	r2, [r3, #4]
  return 0;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	370c      	adds	r7, #12
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <_isatty>:

int _isatty(int file)
{
 8008572:	b480      	push	{r7}
 8008574:	b083      	sub	sp, #12
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800857a:	2301      	movs	r3, #1
}
 800857c:	4618      	mov	r0, r3
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
	...

080085a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80085ac:	4a14      	ldr	r2, [pc, #80]	@ (8008600 <_sbrk+0x5c>)
 80085ae:	4b15      	ldr	r3, [pc, #84]	@ (8008604 <_sbrk+0x60>)
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80085b8:	4b13      	ldr	r3, [pc, #76]	@ (8008608 <_sbrk+0x64>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d102      	bne.n	80085c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80085c0:	4b11      	ldr	r3, [pc, #68]	@ (8008608 <_sbrk+0x64>)
 80085c2:	4a12      	ldr	r2, [pc, #72]	@ (800860c <_sbrk+0x68>)
 80085c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80085c6:	4b10      	ldr	r3, [pc, #64]	@ (8008608 <_sbrk+0x64>)
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4413      	add	r3, r2
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d207      	bcs.n	80085e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80085d4:	f002 fdd8 	bl	800b188 <__errno>
 80085d8:	4603      	mov	r3, r0
 80085da:	220c      	movs	r2, #12
 80085dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80085de:	f04f 33ff 	mov.w	r3, #4294967295
 80085e2:	e009      	b.n	80085f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80085e4:	4b08      	ldr	r3, [pc, #32]	@ (8008608 <_sbrk+0x64>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80085ea:	4b07      	ldr	r3, [pc, #28]	@ (8008608 <_sbrk+0x64>)
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4413      	add	r3, r2
 80085f2:	4a05      	ldr	r2, [pc, #20]	@ (8008608 <_sbrk+0x64>)
 80085f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80085f6:	68fb      	ldr	r3, [r7, #12]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3718      	adds	r7, #24
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	20080000 	.word	0x20080000
 8008604:	00000400 	.word	0x00000400
 8008608:	2000050c 	.word	0x2000050c
 800860c:	20000660 	.word	0x20000660

08008610 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008610:	b480      	push	{r7}
 8008612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008614:	4b06      	ldr	r3, [pc, #24]	@ (8008630 <SystemInit+0x20>)
 8008616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800861a:	4a05      	ldr	r2, [pc, #20]	@ (8008630 <SystemInit+0x20>)
 800861c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008620:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008624:	bf00      	nop
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	e000ed00 	.word	0xe000ed00

08008634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008634:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800866c <LoopFillZerobss+0xe>
 
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008638:	f7ff ffea 	bl	8008610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800863c:	480c      	ldr	r0, [pc, #48]	@ (8008670 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800863e:	490d      	ldr	r1, [pc, #52]	@ (8008674 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008640:	4a0d      	ldr	r2, [pc, #52]	@ (8008678 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008644:	e002      	b.n	800864c <LoopCopyDataInit>

08008646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800864a:	3304      	adds	r3, #4

0800864c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800864c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800864e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008650:	d3f9      	bcc.n	8008646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008652:	4a0a      	ldr	r2, [pc, #40]	@ (800867c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008654:	4c0a      	ldr	r4, [pc, #40]	@ (8008680 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008658:	e001      	b.n	800865e <LoopFillZerobss>

0800865a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800865a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800865c:	3204      	adds	r2, #4

0800865e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800865e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008660:	d3fb      	bcc.n	800865a <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8008662:	f002 fd97 	bl	800b194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008666:	f7ff fc99 	bl	8007f9c <main>
  bx  lr    
 800866a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800866c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8008670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008674:	20000430 	.word	0x20000430
  ldr r2, =_sidata
 8008678:	0800c244 	.word	0x0800c244
  ldr r2, =_sbss
 800867c:	20000430 	.word	0x20000430
  ldr r4, =_ebss
 8008680:	20000660 	.word	0x20000660

08008684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008684:	e7fe      	b.n	8008684 <ADC_IRQHandler>

08008686 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800868a:	2003      	movs	r0, #3
 800868c:	f001 f808 	bl	80096a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008690:	200f      	movs	r0, #15
 8008692:	f000 f805 	bl	80086a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008696:	f7ff fe23 	bl	80082e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	bd80      	pop	{r7, pc}

080086a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80086a8:	4b12      	ldr	r3, [pc, #72]	@ (80086f4 <HAL_InitTick+0x54>)
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	4b12      	ldr	r3, [pc, #72]	@ (80086f8 <HAL_InitTick+0x58>)
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	4619      	mov	r1, r3
 80086b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80086b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80086ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80086be:	4618      	mov	r0, r3
 80086c0:	f001 f827 	bl	8009712 <HAL_SYSTICK_Config>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d001      	beq.n	80086ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e00e      	b.n	80086ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2b0f      	cmp	r3, #15
 80086d2:	d80a      	bhi.n	80086ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80086d4:	2200      	movs	r2, #0
 80086d6:	6879      	ldr	r1, [r7, #4]
 80086d8:	f04f 30ff 	mov.w	r0, #4294967295
 80086dc:	f000 ffeb 	bl	80096b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80086e0:	4a06      	ldr	r2, [pc, #24]	@ (80086fc <HAL_InitTick+0x5c>)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	e000      	b.n	80086ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	200003c8 	.word	0x200003c8
 80086f8:	200003d0 	.word	0x200003d0
 80086fc:	200003cc 	.word	0x200003cc

08008700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008700:	b480      	push	{r7}
 8008702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008704:	4b06      	ldr	r3, [pc, #24]	@ (8008720 <HAL_IncTick+0x20>)
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	461a      	mov	r2, r3
 800870a:	4b06      	ldr	r3, [pc, #24]	@ (8008724 <HAL_IncTick+0x24>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4413      	add	r3, r2
 8008710:	4a04      	ldr	r2, [pc, #16]	@ (8008724 <HAL_IncTick+0x24>)
 8008712:	6013      	str	r3, [r2, #0]
}
 8008714:	bf00      	nop
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	200003d0 	.word	0x200003d0
 8008724:	20000510 	.word	0x20000510

08008728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008728:	b480      	push	{r7}
 800872a:	af00      	add	r7, sp, #0
  return uwTick;
 800872c:	4b03      	ldr	r3, [pc, #12]	@ (800873c <HAL_GetTick+0x14>)
 800872e:	681b      	ldr	r3, [r3, #0]
}
 8008730:	4618      	mov	r0, r3
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	20000510 	.word	0x20000510

08008740 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e0ed      	b.n	800892e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	d102      	bne.n	8008764 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7ff fde2 	bl	8008328 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f042 0201 	orr.w	r2, r2, #1
 8008772:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008774:	f7ff ffd8 	bl	8008728 <HAL_GetTick>
 8008778:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800877a:	e012      	b.n	80087a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800877c:	f7ff ffd4 	bl	8008728 <HAL_GetTick>
 8008780:	4602      	mov	r2, r0
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	2b0a      	cmp	r3, #10
 8008788:	d90b      	bls.n	80087a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800878e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2205      	movs	r2, #5
 800879a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e0c5      	b.n	800892e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	f003 0301 	and.w	r3, r3, #1
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d0e5      	beq.n	800877c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f022 0202 	bic.w	r2, r2, #2
 80087be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80087c0:	f7ff ffb2 	bl	8008728 <HAL_GetTick>
 80087c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80087c6:	e012      	b.n	80087ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80087c8:	f7ff ffae 	bl	8008728 <HAL_GetTick>
 80087cc:	4602      	mov	r2, r0
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	2b0a      	cmp	r3, #10
 80087d4:	d90b      	bls.n	80087ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087da:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2205      	movs	r2, #5
 80087e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e09f      	b.n	800892e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	f003 0302 	and.w	r3, r3, #2
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1e5      	bne.n	80087c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	7e1b      	ldrb	r3, [r3, #24]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d108      	bne.n	8008816 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008812:	601a      	str	r2, [r3, #0]
 8008814:	e007      	b.n	8008826 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008824:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	7e5b      	ldrb	r3, [r3, #25]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d108      	bne.n	8008840 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	e007      	b.n	8008850 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800884e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	7e9b      	ldrb	r3, [r3, #26]
 8008854:	2b01      	cmp	r3, #1
 8008856:	d108      	bne.n	800886a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f042 0220 	orr.w	r2, r2, #32
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	e007      	b.n	800887a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f022 0220 	bic.w	r2, r2, #32
 8008878:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	7edb      	ldrb	r3, [r3, #27]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d108      	bne.n	8008894 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f022 0210 	bic.w	r2, r2, #16
 8008890:	601a      	str	r2, [r3, #0]
 8008892:	e007      	b.n	80088a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f042 0210 	orr.w	r2, r2, #16
 80088a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	7f1b      	ldrb	r3, [r3, #28]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d108      	bne.n	80088be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f042 0208 	orr.w	r2, r2, #8
 80088ba:	601a      	str	r2, [r3, #0]
 80088bc:	e007      	b.n	80088ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f022 0208 	bic.w	r2, r2, #8
 80088cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	7f5b      	ldrb	r3, [r3, #29]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d108      	bne.n	80088e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f042 0204 	orr.w	r2, r2, #4
 80088e4:	601a      	str	r2, [r3, #0]
 80088e6:	e007      	b.n	80088f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f022 0204 	bic.w	r2, r2, #4
 80088f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	689a      	ldr	r2, [r3, #8]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	431a      	orrs	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	431a      	orrs	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	695b      	ldr	r3, [r3, #20]
 800890c:	ea42 0103 	orr.w	r1, r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	1e5a      	subs	r2, r3, #1
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	430a      	orrs	r2, r1
 800891c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
	...

08008938 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8008938:	b480      	push	{r7}
 800893a:	b087      	sub	sp, #28
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008948:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800894a:	7cfb      	ldrb	r3, [r7, #19]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d003      	beq.n	8008958 <HAL_CAN_ConfigFilter+0x20>
 8008950:	7cfb      	ldrb	r3, [r7, #19]
 8008952:	2b02      	cmp	r3, #2
 8008954:	f040 80cb 	bne.w	8008aee <HAL_CAN_ConfigFilter+0x1b6>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a6a      	ldr	r2, [pc, #424]	@ (8008b08 <HAL_CAN_ConfigFilter+0x1d0>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d103      	bne.n	800896a <HAL_CAN_ConfigFilter+0x32>
    {
      /* CAN3 is single instance with 14 dedicated filters banks */
      can_ip = hcan->Instance;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	617b      	str	r3, [r7, #20]
 8008968:	e001      	b.n	800896e <HAL_CAN_ConfigFilter+0x36>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800896a:	4b68      	ldr	r3, [pc, #416]	@ (8008b0c <HAL_CAN_ConfigFilter+0x1d4>)
 800896c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008974:	f043 0201 	orr.w	r2, r3, #1
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	4a62      	ldr	r2, [pc, #392]	@ (8008b0c <HAL_CAN_ConfigFilter+0x1d4>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d111      	bne.n	80089aa <HAL_CAN_ConfigFilter+0x72>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800898c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089a0:	021b      	lsls	r3, r3, #8
 80089a2:	431a      	orrs	r2, r3
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	695b      	ldr	r3, [r3, #20]
 80089ae:	f003 031f 	and.w	r3, r3, #31
 80089b2:	2201      	movs	r2, #1
 80089b4:	fa02 f303 	lsl.w	r3, r2, r3
 80089b8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	43db      	mvns	r3, r3
 80089c4:	401a      	ands	r2, r3
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	69db      	ldr	r3, [r3, #28]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d123      	bne.n	8008a1c <HAL_CAN_ConfigFilter+0xe4>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	43db      	mvns	r3, r3
 80089de:	401a      	ands	r2, r3
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80089f6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	3248      	adds	r2, #72	@ 0x48
 80089fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008a10:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008a12:	6979      	ldr	r1, [r7, #20]
 8008a14:	3348      	adds	r3, #72	@ 0x48
 8008a16:	00db      	lsls	r3, r3, #3
 8008a18:	440b      	add	r3, r1
 8008a1a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	69db      	ldr	r3, [r3, #28]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d122      	bne.n	8008a6a <HAL_CAN_ConfigFilter+0x132>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	431a      	orrs	r2, r3
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008a40:	683a      	ldr	r2, [r7, #0]
 8008a42:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008a44:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	3248      	adds	r2, #72	@ 0x48
 8008a4a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008a5e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008a60:	6979      	ldr	r1, [r7, #20]
 8008a62:	3348      	adds	r3, #72	@ 0x48
 8008a64:	00db      	lsls	r3, r3, #3
 8008a66:	440b      	add	r3, r1
 8008a68:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d109      	bne.n	8008a86 <HAL_CAN_ConfigFilter+0x14e>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	43db      	mvns	r3, r3
 8008a7c:	401a      	ands	r2, r3
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8008a84:	e007      	b.n	8008a96 <HAL_CAN_ConfigFilter+0x15e>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	431a      	orrs	r2, r3
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d109      	bne.n	8008ab2 <HAL_CAN_ConfigFilter+0x17a>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	43db      	mvns	r3, r3
 8008aa8:	401a      	ands	r2, r3
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8008ab0:	e007      	b.n	8008ac2 <HAL_CAN_ConfigFilter+0x18a>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	431a      	orrs	r2, r3
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d107      	bne.n	8008ada <HAL_CAN_ConfigFilter+0x1a2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008ae0:	f023 0201 	bic.w	r2, r3, #1
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	e006      	b.n	8008afc <HAL_CAN_ConfigFilter+0x1c4>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
  }
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	371c      	adds	r7, #28
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr
 8008b08:	40003400 	.word	0x40003400
 8008b0c:	40006400 	.word	0x40006400

08008b10 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d12e      	bne.n	8008b82 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2202      	movs	r2, #2
 8008b28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f022 0201 	bic.w	r2, r2, #1
 8008b3a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b3c:	f7ff fdf4 	bl	8008728 <HAL_GetTick>
 8008b40:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008b42:	e012      	b.n	8008b6a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008b44:	f7ff fdf0 	bl	8008728 <HAL_GetTick>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	2b0a      	cmp	r3, #10
 8008b50:	d90b      	bls.n	8008b6a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b56:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2205      	movs	r2, #5
 8008b62:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e012      	b.n	8008b90 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	f003 0301 	and.w	r3, r3, #1
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1e5      	bne.n	8008b44 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	e006      	b.n	8008b90 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b86:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
  }
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d133      	bne.n	8008c14 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f042 0201 	orr.w	r2, r2, #1
 8008bba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008bbc:	f7ff fdb4 	bl	8008728 <HAL_GetTick>
 8008bc0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008bc2:	e012      	b.n	8008bea <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008bc4:	f7ff fdb0 	bl	8008728 <HAL_GetTick>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	2b0a      	cmp	r3, #10
 8008bd0:	d90b      	bls.n	8008bea <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bd6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2205      	movs	r2, #5
 8008be2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e01b      	b.n	8008c22 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	f003 0301 	and.w	r3, r3, #1
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d0e5      	beq.n	8008bc4 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f022 0202 	bic.w	r2, r2, #2
 8008c06:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	e006      	b.n	8008c22 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c18:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
  }
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b089      	sub	sp, #36	@ 0x24
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	60f8      	str	r0, [r7, #12]
 8008c32:	60b9      	str	r1, [r7, #8]
 8008c34:	607a      	str	r2, [r7, #4]
 8008c36:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8008c48:	7ffb      	ldrb	r3, [r7, #31]
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d003      	beq.n	8008c56 <HAL_CAN_AddTxMessage+0x2c>
 8008c4e:	7ffb      	ldrb	r3, [r7, #31]
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	f040 80ad 	bne.w	8008db0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10a      	bne.n	8008c76 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d105      	bne.n	8008c76 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f000 8095 	beq.w	8008da0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	0e1b      	lsrs	r3, r3, #24
 8008c7a:	f003 0303 	and.w	r3, r3, #3
 8008c7e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8008c80:	2201      	movs	r2, #1
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	409a      	lsls	r2, r3
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d10d      	bne.n	8008cae <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008c9c:	68f9      	ldr	r1, [r7, #12]
 8008c9e:	6809      	ldr	r1, [r1, #0]
 8008ca0:	431a      	orrs	r2, r3
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	3318      	adds	r3, #24
 8008ca6:	011b      	lsls	r3, r3, #4
 8008ca8:	440b      	add	r3, r1
 8008caa:	601a      	str	r2, [r3, #0]
 8008cac:	e00f      	b.n	8008cce <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008cb8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008cbe:	68f9      	ldr	r1, [r7, #12]
 8008cc0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8008cc2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	3318      	adds	r3, #24
 8008cc8:	011b      	lsls	r3, r3, #4
 8008cca:	440b      	add	r3, r1
 8008ccc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6819      	ldr	r1, [r3, #0]
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	691a      	ldr	r2, [r3, #16]
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	3318      	adds	r3, #24
 8008cda:	011b      	lsls	r3, r3, #4
 8008cdc:	440b      	add	r3, r1
 8008cde:	3304      	adds	r3, #4
 8008ce0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	7d1b      	ldrb	r3, [r3, #20]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d111      	bne.n	8008d0e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	3318      	adds	r3, #24
 8008cf2:	011b      	lsls	r3, r3, #4
 8008cf4:	4413      	add	r3, r2
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	6811      	ldr	r1, [r2, #0]
 8008cfe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	3318      	adds	r3, #24
 8008d06:	011b      	lsls	r3, r3, #4
 8008d08:	440b      	add	r3, r1
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	3307      	adds	r3, #7
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	061a      	lsls	r2, r3, #24
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3306      	adds	r3, #6
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	041b      	lsls	r3, r3, #16
 8008d1e:	431a      	orrs	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	3305      	adds	r3, #5
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	021b      	lsls	r3, r3, #8
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	3204      	adds	r2, #4
 8008d2e:	7812      	ldrb	r2, [r2, #0]
 8008d30:	4610      	mov	r0, r2
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	6811      	ldr	r1, [r2, #0]
 8008d36:	ea43 0200 	orr.w	r2, r3, r0
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	011b      	lsls	r3, r3, #4
 8008d3e:	440b      	add	r3, r1
 8008d40:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8008d44:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	3303      	adds	r3, #3
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	061a      	lsls	r2, r3, #24
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	3302      	adds	r3, #2
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	041b      	lsls	r3, r3, #16
 8008d56:	431a      	orrs	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	021b      	lsls	r3, r3, #8
 8008d60:	4313      	orrs	r3, r2
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	7812      	ldrb	r2, [r2, #0]
 8008d66:	4610      	mov	r0, r2
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	6811      	ldr	r1, [r2, #0]
 8008d6c:	ea43 0200 	orr.w	r2, r3, r0
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	011b      	lsls	r3, r3, #4
 8008d74:	440b      	add	r3, r1
 8008d76:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8008d7a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	3318      	adds	r3, #24
 8008d84:	011b      	lsls	r3, r3, #4
 8008d86:	4413      	add	r3, r2
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	6811      	ldr	r1, [r2, #0]
 8008d8e:	f043 0201 	orr.w	r2, r3, #1
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	3318      	adds	r3, #24
 8008d96:	011b      	lsls	r3, r3, #4
 8008d98:	440b      	add	r3, r1
 8008d9a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	e00e      	b.n	8008dbe <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008da4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	e006      	b.n	8008dbe <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008db4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
  }
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3724      	adds	r7, #36	@ 0x24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b085      	sub	sp, #20
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ddc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8008dde:	7afb      	ldrb	r3, [r7, #11]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d002      	beq.n	8008dea <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8008de4:	7afb      	ldrb	r3, [r7, #11]
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d11d      	bne.n	8008e26 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d002      	beq.n	8008dfe <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d002      	beq.n	8008e12 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d002      	beq.n	8008e26 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	3301      	adds	r3, #1
 8008e24:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8008e26:	68fb      	ldr	r3, [r7, #12]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3714      	adds	r7, #20
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8008e34:	b480      	push	{r7}
 8008e36:	b087      	sub	sp, #28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
 8008e40:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e48:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8008e4a:	7dfb      	ldrb	r3, [r7, #23]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d003      	beq.n	8008e58 <HAL_CAN_GetRxMessage+0x24>
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	f040 8103 	bne.w	800905e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10e      	bne.n	8008e7c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	f003 0303 	and.w	r3, r3, #3
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d116      	bne.n	8008e9a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e70:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e0f7      	b.n	800906c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	f003 0303 	and.w	r3, r3, #3
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d107      	bne.n	8008e9a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e8e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	e0e8      	b.n	800906c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	331b      	adds	r3, #27
 8008ea2:	011b      	lsls	r3, r3, #4
 8008ea4:	4413      	add	r3, r2
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0204 	and.w	r2, r3, #4
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10c      	bne.n	8008ed2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	331b      	adds	r3, #27
 8008ec0:	011b      	lsls	r3, r3, #4
 8008ec2:	4413      	add	r3, r2
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	0d5b      	lsrs	r3, r3, #21
 8008ec8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	601a      	str	r2, [r3, #0]
 8008ed0:	e00b      	b.n	8008eea <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	331b      	adds	r3, #27
 8008eda:	011b      	lsls	r3, r3, #4
 8008edc:	4413      	add	r3, r2
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	08db      	lsrs	r3, r3, #3
 8008ee2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	331b      	adds	r3, #27
 8008ef2:	011b      	lsls	r3, r3, #4
 8008ef4:	4413      	add	r3, r2
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 0202 	and.w	r2, r3, #2
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	331b      	adds	r3, #27
 8008f08:	011b      	lsls	r3, r3, #4
 8008f0a:	4413      	add	r3, r2
 8008f0c:	3304      	adds	r3, #4
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f003 0308 	and.w	r3, r3, #8
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d003      	beq.n	8008f20 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2208      	movs	r2, #8
 8008f1c:	611a      	str	r2, [r3, #16]
 8008f1e:	e00b      	b.n	8008f38 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	331b      	adds	r3, #27
 8008f28:	011b      	lsls	r3, r3, #4
 8008f2a:	4413      	add	r3, r2
 8008f2c:	3304      	adds	r3, #4
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f003 020f 	and.w	r2, r3, #15
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	331b      	adds	r3, #27
 8008f40:	011b      	lsls	r3, r3, #4
 8008f42:	4413      	add	r3, r2
 8008f44:	3304      	adds	r3, #4
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	0a1b      	lsrs	r3, r3, #8
 8008f4a:	b2da      	uxtb	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	331b      	adds	r3, #27
 8008f58:	011b      	lsls	r3, r3, #4
 8008f5a:	4413      	add	r3, r2
 8008f5c:	3304      	adds	r3, #4
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	0c1b      	lsrs	r3, r3, #16
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	011b      	lsls	r3, r3, #4
 8008f70:	4413      	add	r3, r2
 8008f72:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	b2da      	uxtb	r2, r3
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	011b      	lsls	r3, r3, #4
 8008f86:	4413      	add	r3, r2
 8008f88:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	0a1a      	lsrs	r2, r3, #8
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	3301      	adds	r3, #1
 8008f94:	b2d2      	uxtb	r2, r2
 8008f96:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	011b      	lsls	r3, r3, #4
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	0c1a      	lsrs	r2, r3, #16
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	3302      	adds	r3, #2
 8008fae:	b2d2      	uxtb	r2, r2
 8008fb0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	011b      	lsls	r3, r3, #4
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	0e1a      	lsrs	r2, r3, #24
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	3303      	adds	r3, #3
 8008fc8:	b2d2      	uxtb	r2, r2
 8008fca:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	011b      	lsls	r3, r3, #4
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	3304      	adds	r3, #4
 8008fe0:	b2d2      	uxtb	r2, r2
 8008fe2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	011b      	lsls	r3, r3, #4
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	0a1a      	lsrs	r2, r3, #8
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	3305      	adds	r3, #5
 8008ffa:	b2d2      	uxtb	r2, r2
 8008ffc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	011b      	lsls	r3, r3, #4
 8009006:	4413      	add	r3, r2
 8009008:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	0c1a      	lsrs	r2, r3, #16
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	3306      	adds	r3, #6
 8009014:	b2d2      	uxtb	r2, r2
 8009016:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	011b      	lsls	r3, r3, #4
 8009020:	4413      	add	r3, r2
 8009022:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	0e1a      	lsrs	r2, r3, #24
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	3307      	adds	r3, #7
 800902e:	b2d2      	uxtb	r2, r2
 8009030:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d108      	bne.n	800904a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68da      	ldr	r2, [r3, #12]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f042 0220 	orr.w	r2, r2, #32
 8009046:	60da      	str	r2, [r3, #12]
 8009048:	e007      	b.n	800905a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	691a      	ldr	r2, [r3, #16]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f042 0220 	orr.w	r2, r2, #32
 8009058:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	e006      	b.n	800906c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009062:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
  }
}
 800906c:	4618      	mov	r0, r3
 800906e:	371c      	adds	r7, #28
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009088:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800908a:	7bfb      	ldrb	r3, [r7, #15]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d002      	beq.n	8009096 <HAL_CAN_ActivateNotification+0x1e>
 8009090:	7bfb      	ldrb	r3, [r7, #15]
 8009092:	2b02      	cmp	r3, #2
 8009094:	d109      	bne.n	80090aa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	6959      	ldr	r1, [r3, #20]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	683a      	ldr	r2, [r7, #0]
 80090a2:	430a      	orrs	r2, r1
 80090a4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	e006      	b.n	80090b8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ae:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
  }
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3714      	adds	r7, #20
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b08a      	sub	sp, #40	@ 0x28
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80090cc:	2300      	movs	r3, #0
 80090ce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009100:	6a3b      	ldr	r3, [r7, #32]
 8009102:	f003 0301 	and.w	r3, r3, #1
 8009106:	2b00      	cmp	r3, #0
 8009108:	d07c      	beq.n	8009204 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	f003 0301 	and.w	r3, r3, #1
 8009110:	2b00      	cmp	r3, #0
 8009112:	d023      	beq.n	800915c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2201      	movs	r2, #1
 800911a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	f003 0302 	and.w	r3, r3, #2
 8009122:	2b00      	cmp	r3, #0
 8009124:	d003      	beq.n	800912e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f7fe ff08 	bl	8007f3c <HAL_CAN_TxMailbox0CompleteCallback>
 800912c:	e016      	b.n	800915c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	f003 0304 	and.w	r3, r3, #4
 8009134:	2b00      	cmp	r3, #0
 8009136:	d004      	beq.n	8009142 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800913e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009140:	e00c      	b.n	800915c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	f003 0308 	and.w	r3, r3, #8
 8009148:	2b00      	cmp	r3, #0
 800914a:	d004      	beq.n	8009156 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800914c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009152:	627b      	str	r3, [r7, #36]	@ 0x24
 8009154:	e002      	b.n	800915c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f96b 	bl	8009432 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009162:	2b00      	cmp	r3, #0
 8009164:	d024      	beq.n	80091b0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800916e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009176:	2b00      	cmp	r3, #0
 8009178:	d003      	beq.n	8009182 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7fe feee 	bl	8007f5c <HAL_CAN_TxMailbox1CompleteCallback>
 8009180:	e016      	b.n	80091b0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009188:	2b00      	cmp	r3, #0
 800918a:	d004      	beq.n	8009196 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800918c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800918e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009192:	627b      	str	r3, [r7, #36]	@ 0x24
 8009194:	e00c      	b.n	80091b0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800919c:	2b00      	cmp	r3, #0
 800919e:	d004      	beq.n	80091aa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80091a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80091a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80091a8:	e002      	b.n	80091b0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f94b 	bl	8009446 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d024      	beq.n	8009204 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80091c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7fe fed4 	bl	8007f7c <HAL_CAN_TxMailbox2CompleteCallback>
 80091d4:	e016      	b.n	8009204 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d004      	beq.n	80091ea <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80091e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80091e8:	e00c      	b.n	8009204 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d004      	beq.n	80091fe <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80091f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80091fc:	e002      	b.n	8009204 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f92b 	bl	800945a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009204:	6a3b      	ldr	r3, [r7, #32]
 8009206:	f003 0308 	and.w	r3, r3, #8
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00c      	beq.n	8009228 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f003 0310 	and.w	r3, r3, #16
 8009214:	2b00      	cmp	r3, #0
 8009216:	d007      	beq.n	8009228 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800921e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2210      	movs	r2, #16
 8009226:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009228:	6a3b      	ldr	r3, [r7, #32]
 800922a:	f003 0304 	and.w	r3, r3, #4
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00b      	beq.n	800924a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f003 0308 	and.w	r3, r3, #8
 8009238:	2b00      	cmp	r3, #0
 800923a:	d006      	beq.n	800924a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2208      	movs	r2, #8
 8009242:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f912 	bl	800946e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800924a:	6a3b      	ldr	r3, [r7, #32]
 800924c:	f003 0302 	and.w	r3, r3, #2
 8009250:	2b00      	cmp	r3, #0
 8009252:	d009      	beq.n	8009268 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	f003 0303 	and.w	r3, r3, #3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d002      	beq.n	8009268 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7fe fdfe 	bl	8007e64 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009268:	6a3b      	ldr	r3, [r7, #32]
 800926a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00c      	beq.n	800928c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f003 0310 	and.w	r3, r3, #16
 8009278:	2b00      	cmp	r3, #0
 800927a:	d007      	beq.n	800928c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800927c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009282:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2210      	movs	r2, #16
 800928a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800928c:	6a3b      	ldr	r3, [r7, #32]
 800928e:	f003 0320 	and.w	r3, r3, #32
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00b      	beq.n	80092ae <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	f003 0308 	and.w	r3, r3, #8
 800929c:	2b00      	cmp	r3, #0
 800929e:	d006      	beq.n	80092ae <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2208      	movs	r2, #8
 80092a6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f8ea 	bl	8009482 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80092ae:	6a3b      	ldr	r3, [r7, #32]
 80092b0:	f003 0310 	and.w	r3, r3, #16
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d009      	beq.n	80092cc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	f003 0303 	and.w	r3, r3, #3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d002      	beq.n	80092cc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f7fe fdd9 	bl	8007e7e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80092cc:	6a3b      	ldr	r3, [r7, #32]
 80092ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00b      	beq.n	80092ee <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	f003 0310 	and.w	r3, r3, #16
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d006      	beq.n	80092ee <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2210      	movs	r2, #16
 80092e6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 f8d4 	bl	8009496 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80092ee:	6a3b      	ldr	r3, [r7, #32]
 80092f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00b      	beq.n	8009310 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	f003 0308 	and.w	r3, r3, #8
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d006      	beq.n	8009310 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2208      	movs	r2, #8
 8009308:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 f8cd 	bl	80094aa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009310:	6a3b      	ldr	r3, [r7, #32]
 8009312:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009316:	2b00      	cmp	r3, #0
 8009318:	d07b      	beq.n	8009412 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	f003 0304 	and.w	r3, r3, #4
 8009320:	2b00      	cmp	r3, #0
 8009322:	d072      	beq.n	800940a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009324:	6a3b      	ldr	r3, [r7, #32]
 8009326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800932a:	2b00      	cmp	r3, #0
 800932c:	d008      	beq.n	8009340 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009334:	2b00      	cmp	r3, #0
 8009336:	d003      	beq.n	8009340 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800933a:	f043 0301 	orr.w	r3, r3, #1
 800933e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009340:	6a3b      	ldr	r3, [r7, #32]
 8009342:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009346:	2b00      	cmp	r3, #0
 8009348:	d008      	beq.n	800935c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009350:	2b00      	cmp	r3, #0
 8009352:	d003      	beq.n	800935c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8009354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009356:	f043 0302 	orr.w	r3, r3, #2
 800935a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800935c:	6a3b      	ldr	r3, [r7, #32]
 800935e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009362:	2b00      	cmp	r3, #0
 8009364:	d008      	beq.n	8009378 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800936c:	2b00      	cmp	r3, #0
 800936e:	d003      	beq.n	8009378 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009372:	f043 0304 	orr.w	r3, r3, #4
 8009376:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009378:	6a3b      	ldr	r3, [r7, #32]
 800937a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800937e:	2b00      	cmp	r3, #0
 8009380:	d043      	beq.n	800940a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009388:	2b00      	cmp	r3, #0
 800938a:	d03e      	beq.n	800940a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009392:	2b60      	cmp	r3, #96	@ 0x60
 8009394:	d02b      	beq.n	80093ee <HAL_CAN_IRQHandler+0x32a>
 8009396:	2b60      	cmp	r3, #96	@ 0x60
 8009398:	d82e      	bhi.n	80093f8 <HAL_CAN_IRQHandler+0x334>
 800939a:	2b50      	cmp	r3, #80	@ 0x50
 800939c:	d022      	beq.n	80093e4 <HAL_CAN_IRQHandler+0x320>
 800939e:	2b50      	cmp	r3, #80	@ 0x50
 80093a0:	d82a      	bhi.n	80093f8 <HAL_CAN_IRQHandler+0x334>
 80093a2:	2b40      	cmp	r3, #64	@ 0x40
 80093a4:	d019      	beq.n	80093da <HAL_CAN_IRQHandler+0x316>
 80093a6:	2b40      	cmp	r3, #64	@ 0x40
 80093a8:	d826      	bhi.n	80093f8 <HAL_CAN_IRQHandler+0x334>
 80093aa:	2b30      	cmp	r3, #48	@ 0x30
 80093ac:	d010      	beq.n	80093d0 <HAL_CAN_IRQHandler+0x30c>
 80093ae:	2b30      	cmp	r3, #48	@ 0x30
 80093b0:	d822      	bhi.n	80093f8 <HAL_CAN_IRQHandler+0x334>
 80093b2:	2b10      	cmp	r3, #16
 80093b4:	d002      	beq.n	80093bc <HAL_CAN_IRQHandler+0x2f8>
 80093b6:	2b20      	cmp	r3, #32
 80093b8:	d005      	beq.n	80093c6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80093ba:	e01d      	b.n	80093f8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80093bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093be:	f043 0308 	orr.w	r3, r3, #8
 80093c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80093c4:	e019      	b.n	80093fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80093c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c8:	f043 0310 	orr.w	r3, r3, #16
 80093cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80093ce:	e014      	b.n	80093fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80093d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d2:	f043 0320 	orr.w	r3, r3, #32
 80093d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80093d8:	e00f      	b.n	80093fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80093da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80093e2:	e00a      	b.n	80093fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80093e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80093ec:	e005      	b.n	80093fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80093ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80093f6:	e000      	b.n	80093fa <HAL_CAN_IRQHandler+0x336>
            break;
 80093f8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	699a      	ldr	r2, [r3, #24]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009408:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2204      	movs	r2, #4
 8009410:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8009412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009414:	2b00      	cmp	r3, #0
 8009416:	d008      	beq.n	800942a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800941c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941e:	431a      	orrs	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f84a 	bl	80094be <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800942a:	bf00      	nop
 800942c:	3728      	adds	r7, #40	@ 0x28
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009432:	b480      	push	{r7}
 8009434:	b083      	sub	sp, #12
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800943a:	bf00      	nop
 800943c:	370c      	adds	r7, #12
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr

08009446 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009446:	b480      	push	{r7}
 8009448:	b083      	sub	sp, #12
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800944e:	bf00      	nop
 8009450:	370c      	adds	r7, #12
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr

0800945a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800945a:	b480      	push	{r7}
 800945c:	b083      	sub	sp, #12
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8009462:	bf00      	nop
 8009464:	370c      	adds	r7, #12
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800946e:	b480      	push	{r7}
 8009470:	b083      	sub	sp, #12
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8009476:	bf00      	nop
 8009478:	370c      	adds	r7, #12
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8009482:	b480      	push	{r7}
 8009484:	b083      	sub	sp, #12
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800948a:	bf00      	nop
 800948c:	370c      	adds	r7, #12
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr

08009496 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8009496:	b480      	push	{r7}
 8009498:	b083      	sub	sp, #12
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800949e:	bf00      	nop
 80094a0:	370c      	adds	r7, #12
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b083      	sub	sp, #12
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80094b2:	bf00      	nop
 80094b4:	370c      	adds	r7, #12
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80094be:	b480      	push	{r7}
 80094c0:	b083      	sub	sp, #12
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80094c6:	bf00      	nop
 80094c8:	370c      	adds	r7, #12
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
	...

080094d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f003 0307 	and.w	r3, r3, #7
 80094e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80094e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009514 <__NVIC_SetPriorityGrouping+0x40>)
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80094f0:	4013      	ands	r3, r2
 80094f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80094fc:	4b06      	ldr	r3, [pc, #24]	@ (8009518 <__NVIC_SetPriorityGrouping+0x44>)
 80094fe:	4313      	orrs	r3, r2
 8009500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009502:	4a04      	ldr	r2, [pc, #16]	@ (8009514 <__NVIC_SetPriorityGrouping+0x40>)
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	60d3      	str	r3, [r2, #12]
}
 8009508:	bf00      	nop
 800950a:	3714      	adds	r7, #20
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	e000ed00 	.word	0xe000ed00
 8009518:	05fa0000 	.word	0x05fa0000

0800951c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800951c:	b480      	push	{r7}
 800951e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009520:	4b04      	ldr	r3, [pc, #16]	@ (8009534 <__NVIC_GetPriorityGrouping+0x18>)
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	0a1b      	lsrs	r3, r3, #8
 8009526:	f003 0307 	and.w	r3, r3, #7
}
 800952a:	4618      	mov	r0, r3
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr
 8009534:	e000ed00 	.word	0xe000ed00

08009538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	4603      	mov	r3, r0
 8009540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009546:	2b00      	cmp	r3, #0
 8009548:	db0b      	blt.n	8009562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800954a:	79fb      	ldrb	r3, [r7, #7]
 800954c:	f003 021f 	and.w	r2, r3, #31
 8009550:	4907      	ldr	r1, [pc, #28]	@ (8009570 <__NVIC_EnableIRQ+0x38>)
 8009552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009556:	095b      	lsrs	r3, r3, #5
 8009558:	2001      	movs	r0, #1
 800955a:	fa00 f202 	lsl.w	r2, r0, r2
 800955e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009562:	bf00      	nop
 8009564:	370c      	adds	r7, #12
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	e000e100 	.word	0xe000e100

08009574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	4603      	mov	r3, r0
 800957c:	6039      	str	r1, [r7, #0]
 800957e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009584:	2b00      	cmp	r3, #0
 8009586:	db0a      	blt.n	800959e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	b2da      	uxtb	r2, r3
 800958c:	490c      	ldr	r1, [pc, #48]	@ (80095c0 <__NVIC_SetPriority+0x4c>)
 800958e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009592:	0112      	lsls	r2, r2, #4
 8009594:	b2d2      	uxtb	r2, r2
 8009596:	440b      	add	r3, r1
 8009598:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800959c:	e00a      	b.n	80095b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	4908      	ldr	r1, [pc, #32]	@ (80095c4 <__NVIC_SetPriority+0x50>)
 80095a4:	79fb      	ldrb	r3, [r7, #7]
 80095a6:	f003 030f 	and.w	r3, r3, #15
 80095aa:	3b04      	subs	r3, #4
 80095ac:	0112      	lsls	r2, r2, #4
 80095ae:	b2d2      	uxtb	r2, r2
 80095b0:	440b      	add	r3, r1
 80095b2:	761a      	strb	r2, [r3, #24]
}
 80095b4:	bf00      	nop
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr
 80095c0:	e000e100 	.word	0xe000e100
 80095c4:	e000ed00 	.word	0xe000ed00

080095c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b089      	sub	sp, #36	@ 0x24
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f003 0307 	and.w	r3, r3, #7
 80095da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	f1c3 0307 	rsb	r3, r3, #7
 80095e2:	2b04      	cmp	r3, #4
 80095e4:	bf28      	it	cs
 80095e6:	2304      	movcs	r3, #4
 80095e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	3304      	adds	r3, #4
 80095ee:	2b06      	cmp	r3, #6
 80095f0:	d902      	bls.n	80095f8 <NVIC_EncodePriority+0x30>
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	3b03      	subs	r3, #3
 80095f6:	e000      	b.n	80095fa <NVIC_EncodePriority+0x32>
 80095f8:	2300      	movs	r3, #0
 80095fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80095fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	fa02 f303 	lsl.w	r3, r2, r3
 8009606:	43da      	mvns	r2, r3
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	401a      	ands	r2, r3
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009610:	f04f 31ff 	mov.w	r1, #4294967295
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	fa01 f303 	lsl.w	r3, r1, r3
 800961a:	43d9      	mvns	r1, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009620:	4313      	orrs	r3, r2
         );
}
 8009622:	4618      	mov	r0, r3
 8009624:	3724      	adds	r7, #36	@ 0x24
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
	...

08009630 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009630:	b480      	push	{r7}
 8009632:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009634:	f3bf 8f4f 	dsb	sy
}
 8009638:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800963a:	4b06      	ldr	r3, [pc, #24]	@ (8009654 <__NVIC_SystemReset+0x24>)
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009642:	4904      	ldr	r1, [pc, #16]	@ (8009654 <__NVIC_SystemReset+0x24>)
 8009644:	4b04      	ldr	r3, [pc, #16]	@ (8009658 <__NVIC_SystemReset+0x28>)
 8009646:	4313      	orrs	r3, r2
 8009648:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800964a:	f3bf 8f4f 	dsb	sy
}
 800964e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009650:	bf00      	nop
 8009652:	e7fd      	b.n	8009650 <__NVIC_SystemReset+0x20>
 8009654:	e000ed00 	.word	0xe000ed00
 8009658:	05fa0004 	.word	0x05fa0004

0800965c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	3b01      	subs	r3, #1
 8009668:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800966c:	d301      	bcc.n	8009672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800966e:	2301      	movs	r3, #1
 8009670:	e00f      	b.n	8009692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009672:	4a0a      	ldr	r2, [pc, #40]	@ (800969c <SysTick_Config+0x40>)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	3b01      	subs	r3, #1
 8009678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800967a:	210f      	movs	r1, #15
 800967c:	f04f 30ff 	mov.w	r0, #4294967295
 8009680:	f7ff ff78 	bl	8009574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009684:	4b05      	ldr	r3, [pc, #20]	@ (800969c <SysTick_Config+0x40>)
 8009686:	2200      	movs	r2, #0
 8009688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800968a:	4b04      	ldr	r3, [pc, #16]	@ (800969c <SysTick_Config+0x40>)
 800968c:	2207      	movs	r2, #7
 800968e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	e000e010 	.word	0xe000e010

080096a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f7ff ff13 	bl	80094d4 <__NVIC_SetPriorityGrouping>
}
 80096ae:	bf00      	nop
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b086      	sub	sp, #24
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	4603      	mov	r3, r0
 80096be:	60b9      	str	r1, [r7, #8]
 80096c0:	607a      	str	r2, [r7, #4]
 80096c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80096c4:	2300      	movs	r3, #0
 80096c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80096c8:	f7ff ff28 	bl	800951c <__NVIC_GetPriorityGrouping>
 80096cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	68b9      	ldr	r1, [r7, #8]
 80096d2:	6978      	ldr	r0, [r7, #20]
 80096d4:	f7ff ff78 	bl	80095c8 <NVIC_EncodePriority>
 80096d8:	4602      	mov	r2, r0
 80096da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096de:	4611      	mov	r1, r2
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7ff ff47 	bl	8009574 <__NVIC_SetPriority>
}
 80096e6:	bf00      	nop
 80096e8:	3718      	adds	r7, #24
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b082      	sub	sp, #8
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	4603      	mov	r3, r0
 80096f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80096f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7ff ff1b 	bl	8009538 <__NVIC_EnableIRQ>
}
 8009702:	bf00      	nop
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800970e:	f7ff ff8f 	bl	8009630 <__NVIC_SystemReset>

08009712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b082      	sub	sp, #8
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f7ff ff9e 	bl	800965c <SysTick_Config>
 8009720:	4603      	mov	r3, r0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3708      	adds	r7, #8
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
	...

0800972c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800972c:	b480      	push	{r7}
 800972e:	b089      	sub	sp, #36	@ 0x24
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8009736:	2300      	movs	r3, #0
 8009738:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800973a:	2300      	movs	r3, #0
 800973c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800973e:	2300      	movs	r3, #0
 8009740:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8009742:	2300      	movs	r3, #0
 8009744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8009746:	2300      	movs	r3, #0
 8009748:	61fb      	str	r3, [r7, #28]
 800974a:	e175      	b.n	8009a38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800974c:	2201      	movs	r2, #1
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	fa02 f303 	lsl.w	r3, r2, r3
 8009754:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	4013      	ands	r3, r2
 800975e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8009760:	693a      	ldr	r2, [r7, #16]
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	429a      	cmp	r2, r3
 8009766:	f040 8164 	bne.w	8009a32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	f003 0303 	and.w	r3, r3, #3
 8009772:	2b01      	cmp	r3, #1
 8009774:	d005      	beq.n	8009782 <HAL_GPIO_Init+0x56>
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	f003 0303 	and.w	r3, r3, #3
 800977e:	2b02      	cmp	r3, #2
 8009780:	d130      	bne.n	80097e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	005b      	lsls	r3, r3, #1
 800978c:	2203      	movs	r2, #3
 800978e:	fa02 f303 	lsl.w	r3, r2, r3
 8009792:	43db      	mvns	r3, r3
 8009794:	69ba      	ldr	r2, [r7, #24]
 8009796:	4013      	ands	r3, r2
 8009798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	68da      	ldr	r2, [r3, #12]
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	005b      	lsls	r3, r3, #1
 80097a2:	fa02 f303 	lsl.w	r3, r2, r3
 80097a6:	69ba      	ldr	r2, [r7, #24]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	69ba      	ldr	r2, [r7, #24]
 80097b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80097b8:	2201      	movs	r2, #1
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	fa02 f303 	lsl.w	r3, r2, r3
 80097c0:	43db      	mvns	r3, r3
 80097c2:	69ba      	ldr	r2, [r7, #24]
 80097c4:	4013      	ands	r3, r2
 80097c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	091b      	lsrs	r3, r3, #4
 80097ce:	f003 0201 	and.w	r2, r3, #1
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	fa02 f303 	lsl.w	r3, r2, r3
 80097d8:	69ba      	ldr	r2, [r7, #24]
 80097da:	4313      	orrs	r3, r2
 80097dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	69ba      	ldr	r2, [r7, #24]
 80097e2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	f003 0303 	and.w	r3, r3, #3
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	d017      	beq.n	8009820 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	005b      	lsls	r3, r3, #1
 80097fa:	2203      	movs	r2, #3
 80097fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009800:	43db      	mvns	r3, r3
 8009802:	69ba      	ldr	r2, [r7, #24]
 8009804:	4013      	ands	r3, r2
 8009806:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	689a      	ldr	r2, [r3, #8]
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	005b      	lsls	r3, r3, #1
 8009810:	fa02 f303 	lsl.w	r3, r2, r3
 8009814:	69ba      	ldr	r2, [r7, #24]
 8009816:	4313      	orrs	r3, r2
 8009818:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	69ba      	ldr	r2, [r7, #24]
 800981e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	f003 0303 	and.w	r3, r3, #3
 8009828:	2b02      	cmp	r3, #2
 800982a:	d123      	bne.n	8009874 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	08da      	lsrs	r2, r3, #3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	3208      	adds	r2, #8
 8009834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	f003 0307 	and.w	r3, r3, #7
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	220f      	movs	r2, #15
 8009844:	fa02 f303 	lsl.w	r3, r2, r3
 8009848:	43db      	mvns	r3, r3
 800984a:	69ba      	ldr	r2, [r7, #24]
 800984c:	4013      	ands	r3, r2
 800984e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	691a      	ldr	r2, [r3, #16]
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	f003 0307 	and.w	r3, r3, #7
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	fa02 f303 	lsl.w	r3, r2, r3
 8009860:	69ba      	ldr	r2, [r7, #24]
 8009862:	4313      	orrs	r3, r2
 8009864:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	08da      	lsrs	r2, r3, #3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	3208      	adds	r2, #8
 800986e:	69b9      	ldr	r1, [r7, #24]
 8009870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	005b      	lsls	r3, r3, #1
 800987e:	2203      	movs	r2, #3
 8009880:	fa02 f303 	lsl.w	r3, r2, r3
 8009884:	43db      	mvns	r3, r3
 8009886:	69ba      	ldr	r2, [r7, #24]
 8009888:	4013      	ands	r3, r2
 800988a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	f003 0203 	and.w	r2, r3, #3
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	005b      	lsls	r3, r3, #1
 8009898:	fa02 f303 	lsl.w	r3, r2, r3
 800989c:	69ba      	ldr	r2, [r7, #24]
 800989e:	4313      	orrs	r3, r2
 80098a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	69ba      	ldr	r2, [r7, #24]
 80098a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f000 80be 	beq.w	8009a32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80098b6:	4b66      	ldr	r3, [pc, #408]	@ (8009a50 <HAL_GPIO_Init+0x324>)
 80098b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098ba:	4a65      	ldr	r2, [pc, #404]	@ (8009a50 <HAL_GPIO_Init+0x324>)
 80098bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80098c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80098c2:	4b63      	ldr	r3, [pc, #396]	@ (8009a50 <HAL_GPIO_Init+0x324>)
 80098c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80098ca:	60fb      	str	r3, [r7, #12]
 80098cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80098ce:	4a61      	ldr	r2, [pc, #388]	@ (8009a54 <HAL_GPIO_Init+0x328>)
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	089b      	lsrs	r3, r3, #2
 80098d4:	3302      	adds	r3, #2
 80098d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	f003 0303 	and.w	r3, r3, #3
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	220f      	movs	r2, #15
 80098e6:	fa02 f303 	lsl.w	r3, r2, r3
 80098ea:	43db      	mvns	r3, r3
 80098ec:	69ba      	ldr	r2, [r7, #24]
 80098ee:	4013      	ands	r3, r2
 80098f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a58      	ldr	r2, [pc, #352]	@ (8009a58 <HAL_GPIO_Init+0x32c>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d037      	beq.n	800996a <HAL_GPIO_Init+0x23e>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a57      	ldr	r2, [pc, #348]	@ (8009a5c <HAL_GPIO_Init+0x330>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d031      	beq.n	8009966 <HAL_GPIO_Init+0x23a>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a56      	ldr	r2, [pc, #344]	@ (8009a60 <HAL_GPIO_Init+0x334>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d02b      	beq.n	8009962 <HAL_GPIO_Init+0x236>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a55      	ldr	r2, [pc, #340]	@ (8009a64 <HAL_GPIO_Init+0x338>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d025      	beq.n	800995e <HAL_GPIO_Init+0x232>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a54      	ldr	r2, [pc, #336]	@ (8009a68 <HAL_GPIO_Init+0x33c>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d01f      	beq.n	800995a <HAL_GPIO_Init+0x22e>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a53      	ldr	r2, [pc, #332]	@ (8009a6c <HAL_GPIO_Init+0x340>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d019      	beq.n	8009956 <HAL_GPIO_Init+0x22a>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a52      	ldr	r2, [pc, #328]	@ (8009a70 <HAL_GPIO_Init+0x344>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d013      	beq.n	8009952 <HAL_GPIO_Init+0x226>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a51      	ldr	r2, [pc, #324]	@ (8009a74 <HAL_GPIO_Init+0x348>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d00d      	beq.n	800994e <HAL_GPIO_Init+0x222>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a50      	ldr	r2, [pc, #320]	@ (8009a78 <HAL_GPIO_Init+0x34c>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d007      	beq.n	800994a <HAL_GPIO_Init+0x21e>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a4f      	ldr	r2, [pc, #316]	@ (8009a7c <HAL_GPIO_Init+0x350>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d101      	bne.n	8009946 <HAL_GPIO_Init+0x21a>
 8009942:	2309      	movs	r3, #9
 8009944:	e012      	b.n	800996c <HAL_GPIO_Init+0x240>
 8009946:	230a      	movs	r3, #10
 8009948:	e010      	b.n	800996c <HAL_GPIO_Init+0x240>
 800994a:	2308      	movs	r3, #8
 800994c:	e00e      	b.n	800996c <HAL_GPIO_Init+0x240>
 800994e:	2307      	movs	r3, #7
 8009950:	e00c      	b.n	800996c <HAL_GPIO_Init+0x240>
 8009952:	2306      	movs	r3, #6
 8009954:	e00a      	b.n	800996c <HAL_GPIO_Init+0x240>
 8009956:	2305      	movs	r3, #5
 8009958:	e008      	b.n	800996c <HAL_GPIO_Init+0x240>
 800995a:	2304      	movs	r3, #4
 800995c:	e006      	b.n	800996c <HAL_GPIO_Init+0x240>
 800995e:	2303      	movs	r3, #3
 8009960:	e004      	b.n	800996c <HAL_GPIO_Init+0x240>
 8009962:	2302      	movs	r3, #2
 8009964:	e002      	b.n	800996c <HAL_GPIO_Init+0x240>
 8009966:	2301      	movs	r3, #1
 8009968:	e000      	b.n	800996c <HAL_GPIO_Init+0x240>
 800996a:	2300      	movs	r3, #0
 800996c:	69fa      	ldr	r2, [r7, #28]
 800996e:	f002 0203 	and.w	r2, r2, #3
 8009972:	0092      	lsls	r2, r2, #2
 8009974:	4093      	lsls	r3, r2
 8009976:	69ba      	ldr	r2, [r7, #24]
 8009978:	4313      	orrs	r3, r2
 800997a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800997c:	4935      	ldr	r1, [pc, #212]	@ (8009a54 <HAL_GPIO_Init+0x328>)
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	089b      	lsrs	r3, r3, #2
 8009982:	3302      	adds	r3, #2
 8009984:	69ba      	ldr	r2, [r7, #24]
 8009986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800998a:	4b3d      	ldr	r3, [pc, #244]	@ (8009a80 <HAL_GPIO_Init+0x354>)
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	43db      	mvns	r3, r3
 8009994:	69ba      	ldr	r2, [r7, #24]
 8009996:	4013      	ands	r3, r2
 8009998:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d003      	beq.n	80099ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80099a6:	69ba      	ldr	r2, [r7, #24]
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	4313      	orrs	r3, r2
 80099ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80099ae:	4a34      	ldr	r2, [pc, #208]	@ (8009a80 <HAL_GPIO_Init+0x354>)
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80099b4:	4b32      	ldr	r3, [pc, #200]	@ (8009a80 <HAL_GPIO_Init+0x354>)
 80099b6:	68db      	ldr	r3, [r3, #12]
 80099b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	43db      	mvns	r3, r3
 80099be:	69ba      	ldr	r2, [r7, #24]
 80099c0:	4013      	ands	r3, r2
 80099c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d003      	beq.n	80099d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80099d0:	69ba      	ldr	r2, [r7, #24]
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80099d8:	4a29      	ldr	r2, [pc, #164]	@ (8009a80 <HAL_GPIO_Init+0x354>)
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80099de:	4b28      	ldr	r3, [pc, #160]	@ (8009a80 <HAL_GPIO_Init+0x354>)
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	43db      	mvns	r3, r3
 80099e8:	69ba      	ldr	r2, [r7, #24]
 80099ea:	4013      	ands	r3, r2
 80099ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d003      	beq.n	8009a02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80099fa:	69ba      	ldr	r2, [r7, #24]
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009a02:	4a1f      	ldr	r2, [pc, #124]	@ (8009a80 <HAL_GPIO_Init+0x354>)
 8009a04:	69bb      	ldr	r3, [r7, #24]
 8009a06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009a08:	4b1d      	ldr	r3, [pc, #116]	@ (8009a80 <HAL_GPIO_Init+0x354>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	43db      	mvns	r3, r3
 8009a12:	69ba      	ldr	r2, [r7, #24]
 8009a14:	4013      	ands	r3, r2
 8009a16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d003      	beq.n	8009a2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009a24:	69ba      	ldr	r2, [r7, #24]
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009a2c:	4a14      	ldr	r2, [pc, #80]	@ (8009a80 <HAL_GPIO_Init+0x354>)
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	3301      	adds	r3, #1
 8009a36:	61fb      	str	r3, [r7, #28]
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	2b0f      	cmp	r3, #15
 8009a3c:	f67f ae86 	bls.w	800974c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8009a40:	bf00      	nop
 8009a42:	bf00      	nop
 8009a44:	3724      	adds	r7, #36	@ 0x24
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	40023800 	.word	0x40023800
 8009a54:	40013800 	.word	0x40013800
 8009a58:	40020000 	.word	0x40020000
 8009a5c:	40020400 	.word	0x40020400
 8009a60:	40020800 	.word	0x40020800
 8009a64:	40020c00 	.word	0x40020c00
 8009a68:	40021000 	.word	0x40021000
 8009a6c:	40021400 	.word	0x40021400
 8009a70:	40021800 	.word	0x40021800
 8009a74:	40021c00 	.word	0x40021c00
 8009a78:	40022000 	.word	0x40022000
 8009a7c:	40022400 	.word	0x40022400
 8009a80:	40013c00 	.word	0x40013c00

08009a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	807b      	strh	r3, [r7, #2]
 8009a90:	4613      	mov	r3, r2
 8009a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009a94:	787b      	ldrb	r3, [r7, #1]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d003      	beq.n	8009aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009a9a:	887a      	ldrh	r2, [r7, #2]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8009aa0:	e003      	b.n	8009aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009aa2:	887b      	ldrh	r3, [r7, #2]
 8009aa4:	041a      	lsls	r2, r3, #16
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	619a      	str	r2, [r3, #24]
}
 8009aaa:	bf00      	nop
 8009aac:	370c      	adds	r7, #12
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr
	...

08009ab8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d101      	bne.n	8009ace <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	e29b      	b.n	800a006 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	f000 8087 	beq.w	8009bea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009adc:	4b96      	ldr	r3, [pc, #600]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	f003 030c 	and.w	r3, r3, #12
 8009ae4:	2b04      	cmp	r3, #4
 8009ae6:	d00c      	beq.n	8009b02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ae8:	4b93      	ldr	r3, [pc, #588]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	f003 030c 	and.w	r3, r3, #12
 8009af0:	2b08      	cmp	r3, #8
 8009af2:	d112      	bne.n	8009b1a <HAL_RCC_OscConfig+0x62>
 8009af4:	4b90      	ldr	r3, [pc, #576]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009afc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b00:	d10b      	bne.n	8009b1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b02:	4b8d      	ldr	r3, [pc, #564]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d06c      	beq.n	8009be8 <HAL_RCC_OscConfig+0x130>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d168      	bne.n	8009be8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	e275      	b.n	800a006 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b22:	d106      	bne.n	8009b32 <HAL_RCC_OscConfig+0x7a>
 8009b24:	4b84      	ldr	r3, [pc, #528]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a83      	ldr	r2, [pc, #524]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009b2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b2e:	6013      	str	r3, [r2, #0]
 8009b30:	e02e      	b.n	8009b90 <HAL_RCC_OscConfig+0xd8>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d10c      	bne.n	8009b54 <HAL_RCC_OscConfig+0x9c>
 8009b3a:	4b7f      	ldr	r3, [pc, #508]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a7e      	ldr	r2, [pc, #504]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009b40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b44:	6013      	str	r3, [r2, #0]
 8009b46:	4b7c      	ldr	r3, [pc, #496]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a7b      	ldr	r2, [pc, #492]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009b4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009b50:	6013      	str	r3, [r2, #0]
 8009b52:	e01d      	b.n	8009b90 <HAL_RCC_OscConfig+0xd8>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009b5c:	d10c      	bne.n	8009b78 <HAL_RCC_OscConfig+0xc0>
 8009b5e:	4b76      	ldr	r3, [pc, #472]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a75      	ldr	r2, [pc, #468]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009b64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009b68:	6013      	str	r3, [r2, #0]
 8009b6a:	4b73      	ldr	r3, [pc, #460]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a72      	ldr	r2, [pc, #456]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b74:	6013      	str	r3, [r2, #0]
 8009b76:	e00b      	b.n	8009b90 <HAL_RCC_OscConfig+0xd8>
 8009b78:	4b6f      	ldr	r3, [pc, #444]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a6e      	ldr	r2, [pc, #440]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b82:	6013      	str	r3, [r2, #0]
 8009b84:	4b6c      	ldr	r3, [pc, #432]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a6b      	ldr	r2, [pc, #428]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009b8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d013      	beq.n	8009bc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b98:	f7fe fdc6 	bl	8008728 <HAL_GetTick>
 8009b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b9e:	e008      	b.n	8009bb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ba0:	f7fe fdc2 	bl	8008728 <HAL_GetTick>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	2b64      	cmp	r3, #100	@ 0x64
 8009bac:	d901      	bls.n	8009bb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e229      	b.n	800a006 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009bb2:	4b61      	ldr	r3, [pc, #388]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d0f0      	beq.n	8009ba0 <HAL_RCC_OscConfig+0xe8>
 8009bbe:	e014      	b.n	8009bea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bc0:	f7fe fdb2 	bl	8008728 <HAL_GetTick>
 8009bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009bc6:	e008      	b.n	8009bda <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009bc8:	f7fe fdae 	bl	8008728 <HAL_GetTick>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	2b64      	cmp	r3, #100	@ 0x64
 8009bd4:	d901      	bls.n	8009bda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e215      	b.n	800a006 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009bda:	4b57      	ldr	r3, [pc, #348]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1f0      	bne.n	8009bc8 <HAL_RCC_OscConfig+0x110>
 8009be6:	e000      	b.n	8009bea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 0302 	and.w	r3, r3, #2
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d069      	beq.n	8009cca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009bf6:	4b50      	ldr	r3, [pc, #320]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	f003 030c 	and.w	r3, r3, #12
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00b      	beq.n	8009c1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009c02:	4b4d      	ldr	r3, [pc, #308]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	f003 030c 	and.w	r3, r3, #12
 8009c0a:	2b08      	cmp	r3, #8
 8009c0c:	d11c      	bne.n	8009c48 <HAL_RCC_OscConfig+0x190>
 8009c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d116      	bne.n	8009c48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c1a:	4b47      	ldr	r3, [pc, #284]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f003 0302 	and.w	r3, r3, #2
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d005      	beq.n	8009c32 <HAL_RCC_OscConfig+0x17a>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d001      	beq.n	8009c32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e1e9      	b.n	800a006 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c32:	4b41      	ldr	r3, [pc, #260]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	00db      	lsls	r3, r3, #3
 8009c40:	493d      	ldr	r1, [pc, #244]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c46:	e040      	b.n	8009cca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d023      	beq.n	8009c98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009c50:	4b39      	ldr	r3, [pc, #228]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a38      	ldr	r2, [pc, #224]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009c56:	f043 0301 	orr.w	r3, r3, #1
 8009c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c5c:	f7fe fd64 	bl	8008728 <HAL_GetTick>
 8009c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c62:	e008      	b.n	8009c76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c64:	f7fe fd60 	bl	8008728 <HAL_GetTick>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	1ad3      	subs	r3, r2, r3
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	d901      	bls.n	8009c76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009c72:	2303      	movs	r3, #3
 8009c74:	e1c7      	b.n	800a006 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c76:	4b30      	ldr	r3, [pc, #192]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f003 0302 	and.w	r3, r3, #2
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d0f0      	beq.n	8009c64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c82:	4b2d      	ldr	r3, [pc, #180]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	00db      	lsls	r3, r3, #3
 8009c90:	4929      	ldr	r1, [pc, #164]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009c92:	4313      	orrs	r3, r2
 8009c94:	600b      	str	r3, [r1, #0]
 8009c96:	e018      	b.n	8009cca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c98:	4b27      	ldr	r3, [pc, #156]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a26      	ldr	r2, [pc, #152]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009c9e:	f023 0301 	bic.w	r3, r3, #1
 8009ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ca4:	f7fe fd40 	bl	8008728 <HAL_GetTick>
 8009ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009caa:	e008      	b.n	8009cbe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009cac:	f7fe fd3c 	bl	8008728 <HAL_GetTick>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	1ad3      	subs	r3, r2, r3
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d901      	bls.n	8009cbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009cba:	2303      	movs	r3, #3
 8009cbc:	e1a3      	b.n	800a006 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 0302 	and.w	r3, r3, #2
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1f0      	bne.n	8009cac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f003 0308 	and.w	r3, r3, #8
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d038      	beq.n	8009d48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d019      	beq.n	8009d12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009cde:	4b16      	ldr	r3, [pc, #88]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009ce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ce2:	4a15      	ldr	r2, [pc, #84]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009ce4:	f043 0301 	orr.w	r3, r3, #1
 8009ce8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cea:	f7fe fd1d 	bl	8008728 <HAL_GetTick>
 8009cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009cf0:	e008      	b.n	8009d04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009cf2:	f7fe fd19 	bl	8008728 <HAL_GetTick>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d901      	bls.n	8009d04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009d00:	2303      	movs	r3, #3
 8009d02:	e180      	b.n	800a006 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d04:	4b0c      	ldr	r3, [pc, #48]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009d06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d08:	f003 0302 	and.w	r3, r3, #2
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d0f0      	beq.n	8009cf2 <HAL_RCC_OscConfig+0x23a>
 8009d10:	e01a      	b.n	8009d48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d12:	4b09      	ldr	r3, [pc, #36]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d16:	4a08      	ldr	r2, [pc, #32]	@ (8009d38 <HAL_RCC_OscConfig+0x280>)
 8009d18:	f023 0301 	bic.w	r3, r3, #1
 8009d1c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d1e:	f7fe fd03 	bl	8008728 <HAL_GetTick>
 8009d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d24:	e00a      	b.n	8009d3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d26:	f7fe fcff 	bl	8008728 <HAL_GetTick>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	1ad3      	subs	r3, r2, r3
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	d903      	bls.n	8009d3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009d34:	2303      	movs	r3, #3
 8009d36:	e166      	b.n	800a006 <HAL_RCC_OscConfig+0x54e>
 8009d38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d3c:	4b92      	ldr	r3, [pc, #584]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009d3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d40:	f003 0302 	and.w	r3, r3, #2
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d1ee      	bne.n	8009d26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 0304 	and.w	r3, r3, #4
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f000 80a4 	beq.w	8009e9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d56:	4b8c      	ldr	r3, [pc, #560]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d10d      	bne.n	8009d7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d62:	4b89      	ldr	r3, [pc, #548]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d66:	4a88      	ldr	r2, [pc, #544]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8009d6e:	4b86      	ldr	r3, [pc, #536]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d76:	60bb      	str	r3, [r7, #8]
 8009d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009d7e:	4b83      	ldr	r3, [pc, #524]	@ (8009f8c <HAL_RCC_OscConfig+0x4d4>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d118      	bne.n	8009dbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8009d8a:	4b80      	ldr	r3, [pc, #512]	@ (8009f8c <HAL_RCC_OscConfig+0x4d4>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a7f      	ldr	r2, [pc, #508]	@ (8009f8c <HAL_RCC_OscConfig+0x4d4>)
 8009d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d96:	f7fe fcc7 	bl	8008728 <HAL_GetTick>
 8009d9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009d9c:	e008      	b.n	8009db0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d9e:	f7fe fcc3 	bl	8008728 <HAL_GetTick>
 8009da2:	4602      	mov	r2, r0
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	2b64      	cmp	r3, #100	@ 0x64
 8009daa:	d901      	bls.n	8009db0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009dac:	2303      	movs	r3, #3
 8009dae:	e12a      	b.n	800a006 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009db0:	4b76      	ldr	r3, [pc, #472]	@ (8009f8c <HAL_RCC_OscConfig+0x4d4>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d0f0      	beq.n	8009d9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d106      	bne.n	8009dd2 <HAL_RCC_OscConfig+0x31a>
 8009dc4:	4b70      	ldr	r3, [pc, #448]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dc8:	4a6f      	ldr	r2, [pc, #444]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009dca:	f043 0301 	orr.w	r3, r3, #1
 8009dce:	6713      	str	r3, [r2, #112]	@ 0x70
 8009dd0:	e02d      	b.n	8009e2e <HAL_RCC_OscConfig+0x376>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10c      	bne.n	8009df4 <HAL_RCC_OscConfig+0x33c>
 8009dda:	4b6b      	ldr	r3, [pc, #428]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dde:	4a6a      	ldr	r2, [pc, #424]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009de0:	f023 0301 	bic.w	r3, r3, #1
 8009de4:	6713      	str	r3, [r2, #112]	@ 0x70
 8009de6:	4b68      	ldr	r3, [pc, #416]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dea:	4a67      	ldr	r2, [pc, #412]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009dec:	f023 0304 	bic.w	r3, r3, #4
 8009df0:	6713      	str	r3, [r2, #112]	@ 0x70
 8009df2:	e01c      	b.n	8009e2e <HAL_RCC_OscConfig+0x376>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	2b05      	cmp	r3, #5
 8009dfa:	d10c      	bne.n	8009e16 <HAL_RCC_OscConfig+0x35e>
 8009dfc:	4b62      	ldr	r3, [pc, #392]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e00:	4a61      	ldr	r2, [pc, #388]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009e02:	f043 0304 	orr.w	r3, r3, #4
 8009e06:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e08:	4b5f      	ldr	r3, [pc, #380]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e0c:	4a5e      	ldr	r2, [pc, #376]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009e0e:	f043 0301 	orr.w	r3, r3, #1
 8009e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e14:	e00b      	b.n	8009e2e <HAL_RCC_OscConfig+0x376>
 8009e16:	4b5c      	ldr	r3, [pc, #368]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e1a:	4a5b      	ldr	r2, [pc, #364]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009e1c:	f023 0301 	bic.w	r3, r3, #1
 8009e20:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e22:	4b59      	ldr	r3, [pc, #356]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e26:	4a58      	ldr	r2, [pc, #352]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009e28:	f023 0304 	bic.w	r3, r3, #4
 8009e2c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d015      	beq.n	8009e62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e36:	f7fe fc77 	bl	8008728 <HAL_GetTick>
 8009e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e3c:	e00a      	b.n	8009e54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e3e:	f7fe fc73 	bl	8008728 <HAL_GetTick>
 8009e42:	4602      	mov	r2, r0
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d901      	bls.n	8009e54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009e50:	2303      	movs	r3, #3
 8009e52:	e0d8      	b.n	800a006 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e54:	4b4c      	ldr	r3, [pc, #304]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e58:	f003 0302 	and.w	r3, r3, #2
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d0ee      	beq.n	8009e3e <HAL_RCC_OscConfig+0x386>
 8009e60:	e014      	b.n	8009e8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e62:	f7fe fc61 	bl	8008728 <HAL_GetTick>
 8009e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e68:	e00a      	b.n	8009e80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e6a:	f7fe fc5d 	bl	8008728 <HAL_GetTick>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	1ad3      	subs	r3, r2, r3
 8009e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d901      	bls.n	8009e80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009e7c:	2303      	movs	r3, #3
 8009e7e:	e0c2      	b.n	800a006 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e80:	4b41      	ldr	r3, [pc, #260]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e84:	f003 0302 	and.w	r3, r3, #2
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1ee      	bne.n	8009e6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009e8c:	7dfb      	ldrb	r3, [r7, #23]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d105      	bne.n	8009e9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e92:	4b3d      	ldr	r3, [pc, #244]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e96:	4a3c      	ldr	r2, [pc, #240]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009e98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e9c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f000 80ae 	beq.w	800a004 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009ea8:	4b37      	ldr	r3, [pc, #220]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	f003 030c 	and.w	r3, r3, #12
 8009eb0:	2b08      	cmp	r3, #8
 8009eb2:	d06d      	beq.n	8009f90 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	699b      	ldr	r3, [r3, #24]
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d14b      	bne.n	8009f54 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ebc:	4b32      	ldr	r3, [pc, #200]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a31      	ldr	r2, [pc, #196]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009ec2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ec8:	f7fe fc2e 	bl	8008728 <HAL_GetTick>
 8009ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ece:	e008      	b.n	8009ee2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ed0:	f7fe fc2a 	bl	8008728 <HAL_GetTick>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	1ad3      	subs	r3, r2, r3
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	d901      	bls.n	8009ee2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e091      	b.n	800a006 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ee2:	4b29      	ldr	r3, [pc, #164]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d1f0      	bne.n	8009ed0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	69da      	ldr	r2, [r3, #28]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a1b      	ldr	r3, [r3, #32]
 8009ef6:	431a      	orrs	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009efc:	019b      	lsls	r3, r3, #6
 8009efe:	431a      	orrs	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f04:	085b      	lsrs	r3, r3, #1
 8009f06:	3b01      	subs	r3, #1
 8009f08:	041b      	lsls	r3, r3, #16
 8009f0a:	431a      	orrs	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f10:	061b      	lsls	r3, r3, #24
 8009f12:	431a      	orrs	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f18:	071b      	lsls	r3, r3, #28
 8009f1a:	491b      	ldr	r1, [pc, #108]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f20:	4b19      	ldr	r3, [pc, #100]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a18      	ldr	r2, [pc, #96]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009f26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f2c:	f7fe fbfc 	bl	8008728 <HAL_GetTick>
 8009f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f32:	e008      	b.n	8009f46 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f34:	f7fe fbf8 	bl	8008728 <HAL_GetTick>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	1ad3      	subs	r3, r2, r3
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	d901      	bls.n	8009f46 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8009f42:	2303      	movs	r3, #3
 8009f44:	e05f      	b.n	800a006 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f46:	4b10      	ldr	r3, [pc, #64]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d0f0      	beq.n	8009f34 <HAL_RCC_OscConfig+0x47c>
 8009f52:	e057      	b.n	800a004 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f54:	4b0c      	ldr	r3, [pc, #48]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a0b      	ldr	r2, [pc, #44]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009f5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f60:	f7fe fbe2 	bl	8008728 <HAL_GetTick>
 8009f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f66:	e008      	b.n	8009f7a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f68:	f7fe fbde 	bl	8008728 <HAL_GetTick>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d901      	bls.n	8009f7a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8009f76:	2303      	movs	r3, #3
 8009f78:	e045      	b.n	800a006 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f7a:	4b03      	ldr	r3, [pc, #12]	@ (8009f88 <HAL_RCC_OscConfig+0x4d0>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1f0      	bne.n	8009f68 <HAL_RCC_OscConfig+0x4b0>
 8009f86:	e03d      	b.n	800a004 <HAL_RCC_OscConfig+0x54c>
 8009f88:	40023800 	.word	0x40023800
 8009f8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009f90:	4b1f      	ldr	r3, [pc, #124]	@ (800a010 <HAL_RCC_OscConfig+0x558>)
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	699b      	ldr	r3, [r3, #24]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d030      	beq.n	800a000 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d129      	bne.n	800a000 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d122      	bne.n	800a000 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009fba:	68fa      	ldr	r2, [r7, #12]
 8009fbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009fc6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d119      	bne.n	800a000 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fd6:	085b      	lsrs	r3, r3, #1
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d10f      	bne.n	800a000 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d107      	bne.n	800a000 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ffa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d001      	beq.n	800a004 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	e000      	b.n	800a006 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3718      	adds	r7, #24
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	40023800 	.word	0x40023800

0800a014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a01e:	2300      	movs	r3, #0
 800a020:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d101      	bne.n	800a02c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	e0d0      	b.n	800a1ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a02c:	4b6a      	ldr	r3, [pc, #424]	@ (800a1d8 <HAL_RCC_ClockConfig+0x1c4>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 030f 	and.w	r3, r3, #15
 800a034:	683a      	ldr	r2, [r7, #0]
 800a036:	429a      	cmp	r2, r3
 800a038:	d910      	bls.n	800a05c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a03a:	4b67      	ldr	r3, [pc, #412]	@ (800a1d8 <HAL_RCC_ClockConfig+0x1c4>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f023 020f 	bic.w	r2, r3, #15
 800a042:	4965      	ldr	r1, [pc, #404]	@ (800a1d8 <HAL_RCC_ClockConfig+0x1c4>)
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	4313      	orrs	r3, r2
 800a048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a04a:	4b63      	ldr	r3, [pc, #396]	@ (800a1d8 <HAL_RCC_ClockConfig+0x1c4>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f003 030f 	and.w	r3, r3, #15
 800a052:	683a      	ldr	r2, [r7, #0]
 800a054:	429a      	cmp	r2, r3
 800a056:	d001      	beq.n	800a05c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	e0b8      	b.n	800a1ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f003 0302 	and.w	r3, r3, #2
 800a064:	2b00      	cmp	r3, #0
 800a066:	d020      	beq.n	800a0aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 0304 	and.w	r3, r3, #4
 800a070:	2b00      	cmp	r3, #0
 800a072:	d005      	beq.n	800a080 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a074:	4b59      	ldr	r3, [pc, #356]	@ (800a1dc <HAL_RCC_ClockConfig+0x1c8>)
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	4a58      	ldr	r2, [pc, #352]	@ (800a1dc <HAL_RCC_ClockConfig+0x1c8>)
 800a07a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a07e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 0308 	and.w	r3, r3, #8
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d005      	beq.n	800a098 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a08c:	4b53      	ldr	r3, [pc, #332]	@ (800a1dc <HAL_RCC_ClockConfig+0x1c8>)
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	4a52      	ldr	r2, [pc, #328]	@ (800a1dc <HAL_RCC_ClockConfig+0x1c8>)
 800a092:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a096:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a098:	4b50      	ldr	r3, [pc, #320]	@ (800a1dc <HAL_RCC_ClockConfig+0x1c8>)
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	494d      	ldr	r1, [pc, #308]	@ (800a1dc <HAL_RCC_ClockConfig+0x1c8>)
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f003 0301 	and.w	r3, r3, #1
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d040      	beq.n	800a138 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d107      	bne.n	800a0ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a0be:	4b47      	ldr	r3, [pc, #284]	@ (800a1dc <HAL_RCC_ClockConfig+0x1c8>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d115      	bne.n	800a0f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e07f      	b.n	800a1ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d107      	bne.n	800a0e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a0d6:	4b41      	ldr	r3, [pc, #260]	@ (800a1dc <HAL_RCC_ClockConfig+0x1c8>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d109      	bne.n	800a0f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e073      	b.n	800a1ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0e6:	4b3d      	ldr	r3, [pc, #244]	@ (800a1dc <HAL_RCC_ClockConfig+0x1c8>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f003 0302 	and.w	r3, r3, #2
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d101      	bne.n	800a0f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e06b      	b.n	800a1ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a0f6:	4b39      	ldr	r3, [pc, #228]	@ (800a1dc <HAL_RCC_ClockConfig+0x1c8>)
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	f023 0203 	bic.w	r2, r3, #3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	4936      	ldr	r1, [pc, #216]	@ (800a1dc <HAL_RCC_ClockConfig+0x1c8>)
 800a104:	4313      	orrs	r3, r2
 800a106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a108:	f7fe fb0e 	bl	8008728 <HAL_GetTick>
 800a10c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a10e:	e00a      	b.n	800a126 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a110:	f7fe fb0a 	bl	8008728 <HAL_GetTick>
 800a114:	4602      	mov	r2, r0
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a11e:	4293      	cmp	r3, r2
 800a120:	d901      	bls.n	800a126 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a122:	2303      	movs	r3, #3
 800a124:	e053      	b.n	800a1ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a126:	4b2d      	ldr	r3, [pc, #180]	@ (800a1dc <HAL_RCC_ClockConfig+0x1c8>)
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	f003 020c 	and.w	r2, r3, #12
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	429a      	cmp	r2, r3
 800a136:	d1eb      	bne.n	800a110 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a138:	4b27      	ldr	r3, [pc, #156]	@ (800a1d8 <HAL_RCC_ClockConfig+0x1c4>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 030f 	and.w	r3, r3, #15
 800a140:	683a      	ldr	r2, [r7, #0]
 800a142:	429a      	cmp	r2, r3
 800a144:	d210      	bcs.n	800a168 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a146:	4b24      	ldr	r3, [pc, #144]	@ (800a1d8 <HAL_RCC_ClockConfig+0x1c4>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f023 020f 	bic.w	r2, r3, #15
 800a14e:	4922      	ldr	r1, [pc, #136]	@ (800a1d8 <HAL_RCC_ClockConfig+0x1c4>)
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	4313      	orrs	r3, r2
 800a154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a156:	4b20      	ldr	r3, [pc, #128]	@ (800a1d8 <HAL_RCC_ClockConfig+0x1c4>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f003 030f 	and.w	r3, r3, #15
 800a15e:	683a      	ldr	r2, [r7, #0]
 800a160:	429a      	cmp	r2, r3
 800a162:	d001      	beq.n	800a168 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a164:	2301      	movs	r3, #1
 800a166:	e032      	b.n	800a1ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f003 0304 	and.w	r3, r3, #4
 800a170:	2b00      	cmp	r3, #0
 800a172:	d008      	beq.n	800a186 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a174:	4b19      	ldr	r3, [pc, #100]	@ (800a1dc <HAL_RCC_ClockConfig+0x1c8>)
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	4916      	ldr	r1, [pc, #88]	@ (800a1dc <HAL_RCC_ClockConfig+0x1c8>)
 800a182:	4313      	orrs	r3, r2
 800a184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f003 0308 	and.w	r3, r3, #8
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d009      	beq.n	800a1a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a192:	4b12      	ldr	r3, [pc, #72]	@ (800a1dc <HAL_RCC_ClockConfig+0x1c8>)
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	00db      	lsls	r3, r3, #3
 800a1a0:	490e      	ldr	r1, [pc, #56]	@ (800a1dc <HAL_RCC_ClockConfig+0x1c8>)
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a1a6:	f000 f821 	bl	800a1ec <HAL_RCC_GetSysClockFreq>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	4b0b      	ldr	r3, [pc, #44]	@ (800a1dc <HAL_RCC_ClockConfig+0x1c8>)
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	091b      	lsrs	r3, r3, #4
 800a1b2:	f003 030f 	and.w	r3, r3, #15
 800a1b6:	490a      	ldr	r1, [pc, #40]	@ (800a1e0 <HAL_RCC_ClockConfig+0x1cc>)
 800a1b8:	5ccb      	ldrb	r3, [r1, r3]
 800a1ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a1be:	4a09      	ldr	r2, [pc, #36]	@ (800a1e4 <HAL_RCC_ClockConfig+0x1d0>)
 800a1c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a1c2:	4b09      	ldr	r3, [pc, #36]	@ (800a1e8 <HAL_RCC_ClockConfig+0x1d4>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7fe fa6a 	bl	80086a0 <HAL_InitTick>

  return HAL_OK;
 800a1cc:	2300      	movs	r3, #0
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	40023c00 	.word	0x40023c00
 800a1dc:	40023800 	.word	0x40023800
 800a1e0:	0800c1f0 	.word	0x0800c1f0
 800a1e4:	200003c8 	.word	0x200003c8
 800a1e8:	200003cc 	.word	0x200003cc

0800a1ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a1ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a1f0:	b090      	sub	sp, #64	@ 0x40
 800a1f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800a200:	2300      	movs	r3, #0
 800a202:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a204:	4b59      	ldr	r3, [pc, #356]	@ (800a36c <HAL_RCC_GetSysClockFreq+0x180>)
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	f003 030c 	and.w	r3, r3, #12
 800a20c:	2b08      	cmp	r3, #8
 800a20e:	d00d      	beq.n	800a22c <HAL_RCC_GetSysClockFreq+0x40>
 800a210:	2b08      	cmp	r3, #8
 800a212:	f200 80a1 	bhi.w	800a358 <HAL_RCC_GetSysClockFreq+0x16c>
 800a216:	2b00      	cmp	r3, #0
 800a218:	d002      	beq.n	800a220 <HAL_RCC_GetSysClockFreq+0x34>
 800a21a:	2b04      	cmp	r3, #4
 800a21c:	d003      	beq.n	800a226 <HAL_RCC_GetSysClockFreq+0x3a>
 800a21e:	e09b      	b.n	800a358 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a220:	4b53      	ldr	r3, [pc, #332]	@ (800a370 <HAL_RCC_GetSysClockFreq+0x184>)
 800a222:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a224:	e09b      	b.n	800a35e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a226:	4b53      	ldr	r3, [pc, #332]	@ (800a374 <HAL_RCC_GetSysClockFreq+0x188>)
 800a228:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a22a:	e098      	b.n	800a35e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a22c:	4b4f      	ldr	r3, [pc, #316]	@ (800a36c <HAL_RCC_GetSysClockFreq+0x180>)
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a234:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a236:	4b4d      	ldr	r3, [pc, #308]	@ (800a36c <HAL_RCC_GetSysClockFreq+0x180>)
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d028      	beq.n	800a294 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a242:	4b4a      	ldr	r3, [pc, #296]	@ (800a36c <HAL_RCC_GetSysClockFreq+0x180>)
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	099b      	lsrs	r3, r3, #6
 800a248:	2200      	movs	r2, #0
 800a24a:	623b      	str	r3, [r7, #32]
 800a24c:	627a      	str	r2, [r7, #36]	@ 0x24
 800a24e:	6a3b      	ldr	r3, [r7, #32]
 800a250:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a254:	2100      	movs	r1, #0
 800a256:	4b47      	ldr	r3, [pc, #284]	@ (800a374 <HAL_RCC_GetSysClockFreq+0x188>)
 800a258:	fb03 f201 	mul.w	r2, r3, r1
 800a25c:	2300      	movs	r3, #0
 800a25e:	fb00 f303 	mul.w	r3, r0, r3
 800a262:	4413      	add	r3, r2
 800a264:	4a43      	ldr	r2, [pc, #268]	@ (800a374 <HAL_RCC_GetSysClockFreq+0x188>)
 800a266:	fba0 1202 	umull	r1, r2, r0, r2
 800a26a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a26c:	460a      	mov	r2, r1
 800a26e:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a270:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a272:	4413      	add	r3, r2
 800a274:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a278:	2200      	movs	r2, #0
 800a27a:	61bb      	str	r3, [r7, #24]
 800a27c:	61fa      	str	r2, [r7, #28]
 800a27e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a282:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a286:	f7f6 f833 	bl	80002f0 <__aeabi_uldivmod>
 800a28a:	4602      	mov	r2, r0
 800a28c:	460b      	mov	r3, r1
 800a28e:	4613      	mov	r3, r2
 800a290:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a292:	e053      	b.n	800a33c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a294:	4b35      	ldr	r3, [pc, #212]	@ (800a36c <HAL_RCC_GetSysClockFreq+0x180>)
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	099b      	lsrs	r3, r3, #6
 800a29a:	2200      	movs	r2, #0
 800a29c:	613b      	str	r3, [r7, #16]
 800a29e:	617a      	str	r2, [r7, #20]
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a2a6:	f04f 0b00 	mov.w	fp, #0
 800a2aa:	4652      	mov	r2, sl
 800a2ac:	465b      	mov	r3, fp
 800a2ae:	f04f 0000 	mov.w	r0, #0
 800a2b2:	f04f 0100 	mov.w	r1, #0
 800a2b6:	0159      	lsls	r1, r3, #5
 800a2b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a2bc:	0150      	lsls	r0, r2, #5
 800a2be:	4602      	mov	r2, r0
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	ebb2 080a 	subs.w	r8, r2, sl
 800a2c6:	eb63 090b 	sbc.w	r9, r3, fp
 800a2ca:	f04f 0200 	mov.w	r2, #0
 800a2ce:	f04f 0300 	mov.w	r3, #0
 800a2d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a2d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a2da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a2de:	ebb2 0408 	subs.w	r4, r2, r8
 800a2e2:	eb63 0509 	sbc.w	r5, r3, r9
 800a2e6:	f04f 0200 	mov.w	r2, #0
 800a2ea:	f04f 0300 	mov.w	r3, #0
 800a2ee:	00eb      	lsls	r3, r5, #3
 800a2f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a2f4:	00e2      	lsls	r2, r4, #3
 800a2f6:	4614      	mov	r4, r2
 800a2f8:	461d      	mov	r5, r3
 800a2fa:	eb14 030a 	adds.w	r3, r4, sl
 800a2fe:	603b      	str	r3, [r7, #0]
 800a300:	eb45 030b 	adc.w	r3, r5, fp
 800a304:	607b      	str	r3, [r7, #4]
 800a306:	f04f 0200 	mov.w	r2, #0
 800a30a:	f04f 0300 	mov.w	r3, #0
 800a30e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a312:	4629      	mov	r1, r5
 800a314:	028b      	lsls	r3, r1, #10
 800a316:	4621      	mov	r1, r4
 800a318:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a31c:	4621      	mov	r1, r4
 800a31e:	028a      	lsls	r2, r1, #10
 800a320:	4610      	mov	r0, r2
 800a322:	4619      	mov	r1, r3
 800a324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a326:	2200      	movs	r2, #0
 800a328:	60bb      	str	r3, [r7, #8]
 800a32a:	60fa      	str	r2, [r7, #12]
 800a32c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a330:	f7f5 ffde 	bl	80002f0 <__aeabi_uldivmod>
 800a334:	4602      	mov	r2, r0
 800a336:	460b      	mov	r3, r1
 800a338:	4613      	mov	r3, r2
 800a33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a33c:	4b0b      	ldr	r3, [pc, #44]	@ (800a36c <HAL_RCC_GetSysClockFreq+0x180>)
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	0c1b      	lsrs	r3, r3, #16
 800a342:	f003 0303 	and.w	r3, r3, #3
 800a346:	3301      	adds	r3, #1
 800a348:	005b      	lsls	r3, r3, #1
 800a34a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a34c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a350:	fbb2 f3f3 	udiv	r3, r2, r3
 800a354:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a356:	e002      	b.n	800a35e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a358:	4b05      	ldr	r3, [pc, #20]	@ (800a370 <HAL_RCC_GetSysClockFreq+0x184>)
 800a35a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a35c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a360:	4618      	mov	r0, r3
 800a362:	3740      	adds	r7, #64	@ 0x40
 800a364:	46bd      	mov	sp, r7
 800a366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a36a:	bf00      	nop
 800a36c:	40023800 	.word	0x40023800
 800a370:	00f42400 	.word	0x00f42400
 800a374:	017d7840 	.word	0x017d7840

0800a378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d101      	bne.n	800a38a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	e049      	b.n	800a41e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a390:	b2db      	uxtb	r3, r3
 800a392:	2b00      	cmp	r3, #0
 800a394:	d106      	bne.n	800a3a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f7fe f826 	bl	80083f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2202      	movs	r2, #2
 800a3a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	4610      	mov	r0, r2
 800a3b8:	f000 fa0e 	bl	800a7d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2201      	movs	r2, #1
 800a410:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a41c:	2300      	movs	r3, #0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
	...

0800a428 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a436:	b2db      	uxtb	r3, r3
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d001      	beq.n	800a440 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	e054      	b.n	800a4ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2202      	movs	r2, #2
 800a444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	68da      	ldr	r2, [r3, #12]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f042 0201 	orr.w	r2, r2, #1
 800a456:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a26      	ldr	r2, [pc, #152]	@ (800a4f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d022      	beq.n	800a4a8 <HAL_TIM_Base_Start_IT+0x80>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a46a:	d01d      	beq.n	800a4a8 <HAL_TIM_Base_Start_IT+0x80>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a22      	ldr	r2, [pc, #136]	@ (800a4fc <HAL_TIM_Base_Start_IT+0xd4>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d018      	beq.n	800a4a8 <HAL_TIM_Base_Start_IT+0x80>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a21      	ldr	r2, [pc, #132]	@ (800a500 <HAL_TIM_Base_Start_IT+0xd8>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d013      	beq.n	800a4a8 <HAL_TIM_Base_Start_IT+0x80>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a1f      	ldr	r2, [pc, #124]	@ (800a504 <HAL_TIM_Base_Start_IT+0xdc>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d00e      	beq.n	800a4a8 <HAL_TIM_Base_Start_IT+0x80>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a1e      	ldr	r2, [pc, #120]	@ (800a508 <HAL_TIM_Base_Start_IT+0xe0>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d009      	beq.n	800a4a8 <HAL_TIM_Base_Start_IT+0x80>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a1c      	ldr	r2, [pc, #112]	@ (800a50c <HAL_TIM_Base_Start_IT+0xe4>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d004      	beq.n	800a4a8 <HAL_TIM_Base_Start_IT+0x80>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a1b      	ldr	r2, [pc, #108]	@ (800a510 <HAL_TIM_Base_Start_IT+0xe8>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d115      	bne.n	800a4d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	689a      	ldr	r2, [r3, #8]
 800a4ae:	4b19      	ldr	r3, [pc, #100]	@ (800a514 <HAL_TIM_Base_Start_IT+0xec>)
 800a4b0:	4013      	ands	r3, r2
 800a4b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2b06      	cmp	r3, #6
 800a4b8:	d015      	beq.n	800a4e6 <HAL_TIM_Base_Start_IT+0xbe>
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4c0:	d011      	beq.n	800a4e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f042 0201 	orr.w	r2, r2, #1
 800a4d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4d2:	e008      	b.n	800a4e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f042 0201 	orr.w	r2, r2, #1
 800a4e2:	601a      	str	r2, [r3, #0]
 800a4e4:	e000      	b.n	800a4e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3714      	adds	r7, #20
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr
 800a4f6:	bf00      	nop
 800a4f8:	40010000 	.word	0x40010000
 800a4fc:	40000400 	.word	0x40000400
 800a500:	40000800 	.word	0x40000800
 800a504:	40000c00 	.word	0x40000c00
 800a508:	40010400 	.word	0x40010400
 800a50c:	40014000 	.word	0x40014000
 800a510:	40001800 	.word	0x40001800
 800a514:	00010007 	.word	0x00010007

0800a518 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68da      	ldr	r2, [r3, #12]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f022 0201 	bic.w	r2, r2, #1
 800a52e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	6a1a      	ldr	r2, [r3, #32]
 800a536:	4b0f      	ldr	r3, [pc, #60]	@ (800a574 <HAL_TIM_Base_Stop_IT+0x5c>)
 800a538:	4013      	ands	r3, r2
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d10f      	bne.n	800a55e <HAL_TIM_Base_Stop_IT+0x46>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	6a1a      	ldr	r2, [r3, #32]
 800a544:	f240 4344 	movw	r3, #1092	@ 0x444
 800a548:	4013      	ands	r3, r2
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d107      	bne.n	800a55e <HAL_TIM_Base_Stop_IT+0x46>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f022 0201 	bic.w	r2, r2, #1
 800a55c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2201      	movs	r2, #1
 800a562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr
 800a574:	00111111 	.word	0x00111111

0800a578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	f003 0302 	and.w	r3, r3, #2
 800a596:	2b00      	cmp	r3, #0
 800a598:	d020      	beq.n	800a5dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f003 0302 	and.w	r3, r3, #2
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d01b      	beq.n	800a5dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f06f 0202 	mvn.w	r2, #2
 800a5ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	699b      	ldr	r3, [r3, #24]
 800a5ba:	f003 0303 	and.w	r3, r3, #3
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d003      	beq.n	800a5ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 f8e9 	bl	800a79a <HAL_TIM_IC_CaptureCallback>
 800a5c8:	e005      	b.n	800a5d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f8db 	bl	800a786 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 f8ec 	bl	800a7ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	f003 0304 	and.w	r3, r3, #4
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d020      	beq.n	800a628 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f003 0304 	and.w	r3, r3, #4
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d01b      	beq.n	800a628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f06f 0204 	mvn.w	r2, #4
 800a5f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2202      	movs	r2, #2
 800a5fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	699b      	ldr	r3, [r3, #24]
 800a606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d003      	beq.n	800a616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f8c3 	bl	800a79a <HAL_TIM_IC_CaptureCallback>
 800a614:	e005      	b.n	800a622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 f8b5 	bl	800a786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 f8c6 	bl	800a7ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	f003 0308 	and.w	r3, r3, #8
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d020      	beq.n	800a674 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f003 0308 	and.w	r3, r3, #8
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d01b      	beq.n	800a674 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f06f 0208 	mvn.w	r2, #8
 800a644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2204      	movs	r2, #4
 800a64a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	69db      	ldr	r3, [r3, #28]
 800a652:	f003 0303 	and.w	r3, r3, #3
 800a656:	2b00      	cmp	r3, #0
 800a658:	d003      	beq.n	800a662 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 f89d 	bl	800a79a <HAL_TIM_IC_CaptureCallback>
 800a660:	e005      	b.n	800a66e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 f88f 	bl	800a786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 f8a0 	bl	800a7ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	f003 0310 	and.w	r3, r3, #16
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d020      	beq.n	800a6c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f003 0310 	and.w	r3, r3, #16
 800a684:	2b00      	cmp	r3, #0
 800a686:	d01b      	beq.n	800a6c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f06f 0210 	mvn.w	r2, #16
 800a690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2208      	movs	r2, #8
 800a696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	69db      	ldr	r3, [r3, #28]
 800a69e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d003      	beq.n	800a6ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f877 	bl	800a79a <HAL_TIM_IC_CaptureCallback>
 800a6ac:	e005      	b.n	800a6ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 f869 	bl	800a786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f87a 	bl	800a7ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	f003 0301 	and.w	r3, r3, #1
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00c      	beq.n	800a6e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f003 0301 	and.w	r3, r3, #1
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d007      	beq.n	800a6e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f06f 0201 	mvn.w	r2, #1
 800a6dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f7fd fda2 	bl	8008228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d104      	bne.n	800a6f8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00c      	beq.n	800a712 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d007      	beq.n	800a712 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a70a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 f913 	bl	800a938 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d00c      	beq.n	800a736 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a722:	2b00      	cmp	r3, #0
 800a724:	d007      	beq.n	800a736 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a72e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 f90b 	bl	800a94c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d00c      	beq.n	800a75a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a746:	2b00      	cmp	r3, #0
 800a748:	d007      	beq.n	800a75a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 f834 	bl	800a7c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	f003 0320 	and.w	r3, r3, #32
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00c      	beq.n	800a77e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f003 0320 	and.w	r3, r3, #32
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d007      	beq.n	800a77e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f06f 0220 	mvn.w	r2, #32
 800a776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 f8d3 	bl	800a924 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a77e:	bf00      	nop
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a786:	b480      	push	{r7}
 800a788:	b083      	sub	sp, #12
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a78e:	bf00      	nop
 800a790:	370c      	adds	r7, #12
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a79a:	b480      	push	{r7}
 800a79c:	b083      	sub	sp, #12
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a7a2:	bf00      	nop
 800a7a4:	370c      	adds	r7, #12
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr

0800a7ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a7ae:	b480      	push	{r7}
 800a7b0:	b083      	sub	sp, #12
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a7b6:	bf00      	nop
 800a7b8:	370c      	adds	r7, #12
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr

0800a7c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a7c2:	b480      	push	{r7}
 800a7c4:	b083      	sub	sp, #12
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a7ca:	bf00      	nop
 800a7cc:	370c      	adds	r7, #12
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr
	...

0800a7d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a43      	ldr	r2, [pc, #268]	@ (800a8f8 <TIM_Base_SetConfig+0x120>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d013      	beq.n	800a818 <TIM_Base_SetConfig+0x40>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7f6:	d00f      	beq.n	800a818 <TIM_Base_SetConfig+0x40>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4a40      	ldr	r2, [pc, #256]	@ (800a8fc <TIM_Base_SetConfig+0x124>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d00b      	beq.n	800a818 <TIM_Base_SetConfig+0x40>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	4a3f      	ldr	r2, [pc, #252]	@ (800a900 <TIM_Base_SetConfig+0x128>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d007      	beq.n	800a818 <TIM_Base_SetConfig+0x40>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4a3e      	ldr	r2, [pc, #248]	@ (800a904 <TIM_Base_SetConfig+0x12c>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d003      	beq.n	800a818 <TIM_Base_SetConfig+0x40>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4a3d      	ldr	r2, [pc, #244]	@ (800a908 <TIM_Base_SetConfig+0x130>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d108      	bne.n	800a82a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a81e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	4313      	orrs	r3, r2
 800a828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a32      	ldr	r2, [pc, #200]	@ (800a8f8 <TIM_Base_SetConfig+0x120>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d02b      	beq.n	800a88a <TIM_Base_SetConfig+0xb2>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a838:	d027      	beq.n	800a88a <TIM_Base_SetConfig+0xb2>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a2f      	ldr	r2, [pc, #188]	@ (800a8fc <TIM_Base_SetConfig+0x124>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d023      	beq.n	800a88a <TIM_Base_SetConfig+0xb2>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a2e      	ldr	r2, [pc, #184]	@ (800a900 <TIM_Base_SetConfig+0x128>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d01f      	beq.n	800a88a <TIM_Base_SetConfig+0xb2>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a2d      	ldr	r2, [pc, #180]	@ (800a904 <TIM_Base_SetConfig+0x12c>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d01b      	beq.n	800a88a <TIM_Base_SetConfig+0xb2>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a2c      	ldr	r2, [pc, #176]	@ (800a908 <TIM_Base_SetConfig+0x130>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d017      	beq.n	800a88a <TIM_Base_SetConfig+0xb2>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a2b      	ldr	r2, [pc, #172]	@ (800a90c <TIM_Base_SetConfig+0x134>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d013      	beq.n	800a88a <TIM_Base_SetConfig+0xb2>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4a2a      	ldr	r2, [pc, #168]	@ (800a910 <TIM_Base_SetConfig+0x138>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d00f      	beq.n	800a88a <TIM_Base_SetConfig+0xb2>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4a29      	ldr	r2, [pc, #164]	@ (800a914 <TIM_Base_SetConfig+0x13c>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d00b      	beq.n	800a88a <TIM_Base_SetConfig+0xb2>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4a28      	ldr	r2, [pc, #160]	@ (800a918 <TIM_Base_SetConfig+0x140>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d007      	beq.n	800a88a <TIM_Base_SetConfig+0xb2>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4a27      	ldr	r2, [pc, #156]	@ (800a91c <TIM_Base_SetConfig+0x144>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d003      	beq.n	800a88a <TIM_Base_SetConfig+0xb2>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	4a26      	ldr	r2, [pc, #152]	@ (800a920 <TIM_Base_SetConfig+0x148>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d108      	bne.n	800a89c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	4313      	orrs	r3, r2
 800a89a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	695b      	ldr	r3, [r3, #20]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	689a      	ldr	r2, [r3, #8]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4a0e      	ldr	r2, [pc, #56]	@ (800a8f8 <TIM_Base_SetConfig+0x120>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d003      	beq.n	800a8ca <TIM_Base_SetConfig+0xf2>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	4a10      	ldr	r2, [pc, #64]	@ (800a908 <TIM_Base_SetConfig+0x130>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d103      	bne.n	800a8d2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	691a      	ldr	r2, [r3, #16]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f043 0204 	orr.w	r2, r3, #4
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	601a      	str	r2, [r3, #0]
}
 800a8ea:	bf00      	nop
 800a8ec:	3714      	adds	r7, #20
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	40010000 	.word	0x40010000
 800a8fc:	40000400 	.word	0x40000400
 800a900:	40000800 	.word	0x40000800
 800a904:	40000c00 	.word	0x40000c00
 800a908:	40010400 	.word	0x40010400
 800a90c:	40014000 	.word	0x40014000
 800a910:	40014400 	.word	0x40014400
 800a914:	40014800 	.word	0x40014800
 800a918:	40001800 	.word	0x40001800
 800a91c:	40001c00 	.word	0x40001c00
 800a920:	40002000 	.word	0x40002000

0800a924 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a92c:	bf00      	nop
 800a92e:	370c      	adds	r7, #12
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a940:	bf00      	nop
 800a942:	370c      	adds	r7, #12
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a954:	bf00      	nop
 800a956:	370c      	adds	r7, #12
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <calloc>:
 800a960:	4b02      	ldr	r3, [pc, #8]	@ (800a96c <calloc+0xc>)
 800a962:	460a      	mov	r2, r1
 800a964:	4601      	mov	r1, r0
 800a966:	6818      	ldr	r0, [r3, #0]
 800a968:	f000 b802 	b.w	800a970 <_calloc_r>
 800a96c:	200003e0 	.word	0x200003e0

0800a970 <_calloc_r>:
 800a970:	b570      	push	{r4, r5, r6, lr}
 800a972:	fba1 5402 	umull	r5, r4, r1, r2
 800a976:	b934      	cbnz	r4, 800a986 <_calloc_r+0x16>
 800a978:	4629      	mov	r1, r5
 800a97a:	f000 f837 	bl	800a9ec <_malloc_r>
 800a97e:	4606      	mov	r6, r0
 800a980:	b928      	cbnz	r0, 800a98e <_calloc_r+0x1e>
 800a982:	4630      	mov	r0, r6
 800a984:	bd70      	pop	{r4, r5, r6, pc}
 800a986:	220c      	movs	r2, #12
 800a988:	6002      	str	r2, [r0, #0]
 800a98a:	2600      	movs	r6, #0
 800a98c:	e7f9      	b.n	800a982 <_calloc_r+0x12>
 800a98e:	462a      	mov	r2, r5
 800a990:	4621      	mov	r1, r4
 800a992:	f000 fb9b 	bl	800b0cc <memset>
 800a996:	e7f4      	b.n	800a982 <_calloc_r+0x12>

0800a998 <free>:
 800a998:	4b02      	ldr	r3, [pc, #8]	@ (800a9a4 <free+0xc>)
 800a99a:	4601      	mov	r1, r0
 800a99c:	6818      	ldr	r0, [r3, #0]
 800a99e:	f000 bc2f 	b.w	800b200 <_free_r>
 800a9a2:	bf00      	nop
 800a9a4:	200003e0 	.word	0x200003e0

0800a9a8 <sbrk_aligned>:
 800a9a8:	b570      	push	{r4, r5, r6, lr}
 800a9aa:	4e0f      	ldr	r6, [pc, #60]	@ (800a9e8 <sbrk_aligned+0x40>)
 800a9ac:	460c      	mov	r4, r1
 800a9ae:	6831      	ldr	r1, [r6, #0]
 800a9b0:	4605      	mov	r5, r0
 800a9b2:	b911      	cbnz	r1, 800a9ba <sbrk_aligned+0x12>
 800a9b4:	f000 fbc6 	bl	800b144 <_sbrk_r>
 800a9b8:	6030      	str	r0, [r6, #0]
 800a9ba:	4621      	mov	r1, r4
 800a9bc:	4628      	mov	r0, r5
 800a9be:	f000 fbc1 	bl	800b144 <_sbrk_r>
 800a9c2:	1c43      	adds	r3, r0, #1
 800a9c4:	d103      	bne.n	800a9ce <sbrk_aligned+0x26>
 800a9c6:	f04f 34ff 	mov.w	r4, #4294967295
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	bd70      	pop	{r4, r5, r6, pc}
 800a9ce:	1cc4      	adds	r4, r0, #3
 800a9d0:	f024 0403 	bic.w	r4, r4, #3
 800a9d4:	42a0      	cmp	r0, r4
 800a9d6:	d0f8      	beq.n	800a9ca <sbrk_aligned+0x22>
 800a9d8:	1a21      	subs	r1, r4, r0
 800a9da:	4628      	mov	r0, r5
 800a9dc:	f000 fbb2 	bl	800b144 <_sbrk_r>
 800a9e0:	3001      	adds	r0, #1
 800a9e2:	d1f2      	bne.n	800a9ca <sbrk_aligned+0x22>
 800a9e4:	e7ef      	b.n	800a9c6 <sbrk_aligned+0x1e>
 800a9e6:	bf00      	nop
 800a9e8:	20000514 	.word	0x20000514

0800a9ec <_malloc_r>:
 800a9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9f0:	1ccd      	adds	r5, r1, #3
 800a9f2:	f025 0503 	bic.w	r5, r5, #3
 800a9f6:	3508      	adds	r5, #8
 800a9f8:	2d0c      	cmp	r5, #12
 800a9fa:	bf38      	it	cc
 800a9fc:	250c      	movcc	r5, #12
 800a9fe:	2d00      	cmp	r5, #0
 800aa00:	4606      	mov	r6, r0
 800aa02:	db01      	blt.n	800aa08 <_malloc_r+0x1c>
 800aa04:	42a9      	cmp	r1, r5
 800aa06:	d904      	bls.n	800aa12 <_malloc_r+0x26>
 800aa08:	230c      	movs	r3, #12
 800aa0a:	6033      	str	r3, [r6, #0]
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aae8 <_malloc_r+0xfc>
 800aa16:	f000 f869 	bl	800aaec <__malloc_lock>
 800aa1a:	f8d8 3000 	ldr.w	r3, [r8]
 800aa1e:	461c      	mov	r4, r3
 800aa20:	bb44      	cbnz	r4, 800aa74 <_malloc_r+0x88>
 800aa22:	4629      	mov	r1, r5
 800aa24:	4630      	mov	r0, r6
 800aa26:	f7ff ffbf 	bl	800a9a8 <sbrk_aligned>
 800aa2a:	1c43      	adds	r3, r0, #1
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	d158      	bne.n	800aae2 <_malloc_r+0xf6>
 800aa30:	f8d8 4000 	ldr.w	r4, [r8]
 800aa34:	4627      	mov	r7, r4
 800aa36:	2f00      	cmp	r7, #0
 800aa38:	d143      	bne.n	800aac2 <_malloc_r+0xd6>
 800aa3a:	2c00      	cmp	r4, #0
 800aa3c:	d04b      	beq.n	800aad6 <_malloc_r+0xea>
 800aa3e:	6823      	ldr	r3, [r4, #0]
 800aa40:	4639      	mov	r1, r7
 800aa42:	4630      	mov	r0, r6
 800aa44:	eb04 0903 	add.w	r9, r4, r3
 800aa48:	f000 fb7c 	bl	800b144 <_sbrk_r>
 800aa4c:	4581      	cmp	r9, r0
 800aa4e:	d142      	bne.n	800aad6 <_malloc_r+0xea>
 800aa50:	6821      	ldr	r1, [r4, #0]
 800aa52:	1a6d      	subs	r5, r5, r1
 800aa54:	4629      	mov	r1, r5
 800aa56:	4630      	mov	r0, r6
 800aa58:	f7ff ffa6 	bl	800a9a8 <sbrk_aligned>
 800aa5c:	3001      	adds	r0, #1
 800aa5e:	d03a      	beq.n	800aad6 <_malloc_r+0xea>
 800aa60:	6823      	ldr	r3, [r4, #0]
 800aa62:	442b      	add	r3, r5
 800aa64:	6023      	str	r3, [r4, #0]
 800aa66:	f8d8 3000 	ldr.w	r3, [r8]
 800aa6a:	685a      	ldr	r2, [r3, #4]
 800aa6c:	bb62      	cbnz	r2, 800aac8 <_malloc_r+0xdc>
 800aa6e:	f8c8 7000 	str.w	r7, [r8]
 800aa72:	e00f      	b.n	800aa94 <_malloc_r+0xa8>
 800aa74:	6822      	ldr	r2, [r4, #0]
 800aa76:	1b52      	subs	r2, r2, r5
 800aa78:	d420      	bmi.n	800aabc <_malloc_r+0xd0>
 800aa7a:	2a0b      	cmp	r2, #11
 800aa7c:	d917      	bls.n	800aaae <_malloc_r+0xc2>
 800aa7e:	1961      	adds	r1, r4, r5
 800aa80:	42a3      	cmp	r3, r4
 800aa82:	6025      	str	r5, [r4, #0]
 800aa84:	bf18      	it	ne
 800aa86:	6059      	strne	r1, [r3, #4]
 800aa88:	6863      	ldr	r3, [r4, #4]
 800aa8a:	bf08      	it	eq
 800aa8c:	f8c8 1000 	streq.w	r1, [r8]
 800aa90:	5162      	str	r2, [r4, r5]
 800aa92:	604b      	str	r3, [r1, #4]
 800aa94:	4630      	mov	r0, r6
 800aa96:	f000 f82f 	bl	800aaf8 <__malloc_unlock>
 800aa9a:	f104 000b 	add.w	r0, r4, #11
 800aa9e:	1d23      	adds	r3, r4, #4
 800aaa0:	f020 0007 	bic.w	r0, r0, #7
 800aaa4:	1ac2      	subs	r2, r0, r3
 800aaa6:	bf1c      	itt	ne
 800aaa8:	1a1b      	subne	r3, r3, r0
 800aaaa:	50a3      	strne	r3, [r4, r2]
 800aaac:	e7af      	b.n	800aa0e <_malloc_r+0x22>
 800aaae:	6862      	ldr	r2, [r4, #4]
 800aab0:	42a3      	cmp	r3, r4
 800aab2:	bf0c      	ite	eq
 800aab4:	f8c8 2000 	streq.w	r2, [r8]
 800aab8:	605a      	strne	r2, [r3, #4]
 800aaba:	e7eb      	b.n	800aa94 <_malloc_r+0xa8>
 800aabc:	4623      	mov	r3, r4
 800aabe:	6864      	ldr	r4, [r4, #4]
 800aac0:	e7ae      	b.n	800aa20 <_malloc_r+0x34>
 800aac2:	463c      	mov	r4, r7
 800aac4:	687f      	ldr	r7, [r7, #4]
 800aac6:	e7b6      	b.n	800aa36 <_malloc_r+0x4a>
 800aac8:	461a      	mov	r2, r3
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	42a3      	cmp	r3, r4
 800aace:	d1fb      	bne.n	800aac8 <_malloc_r+0xdc>
 800aad0:	2300      	movs	r3, #0
 800aad2:	6053      	str	r3, [r2, #4]
 800aad4:	e7de      	b.n	800aa94 <_malloc_r+0xa8>
 800aad6:	230c      	movs	r3, #12
 800aad8:	6033      	str	r3, [r6, #0]
 800aada:	4630      	mov	r0, r6
 800aadc:	f000 f80c 	bl	800aaf8 <__malloc_unlock>
 800aae0:	e794      	b.n	800aa0c <_malloc_r+0x20>
 800aae2:	6005      	str	r5, [r0, #0]
 800aae4:	e7d6      	b.n	800aa94 <_malloc_r+0xa8>
 800aae6:	bf00      	nop
 800aae8:	20000518 	.word	0x20000518

0800aaec <__malloc_lock>:
 800aaec:	4801      	ldr	r0, [pc, #4]	@ (800aaf4 <__malloc_lock+0x8>)
 800aaee:	f000 bb76 	b.w	800b1de <__retarget_lock_acquire_recursive>
 800aaf2:	bf00      	nop
 800aaf4:	2000065c 	.word	0x2000065c

0800aaf8 <__malloc_unlock>:
 800aaf8:	4801      	ldr	r0, [pc, #4]	@ (800ab00 <__malloc_unlock+0x8>)
 800aafa:	f000 bb71 	b.w	800b1e0 <__retarget_lock_release_recursive>
 800aafe:	bf00      	nop
 800ab00:	2000065c 	.word	0x2000065c

0800ab04 <__sflush_r>:
 800ab04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab0c:	0716      	lsls	r6, r2, #28
 800ab0e:	4605      	mov	r5, r0
 800ab10:	460c      	mov	r4, r1
 800ab12:	d454      	bmi.n	800abbe <__sflush_r+0xba>
 800ab14:	684b      	ldr	r3, [r1, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	dc02      	bgt.n	800ab20 <__sflush_r+0x1c>
 800ab1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	dd48      	ble.n	800abb2 <__sflush_r+0xae>
 800ab20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab22:	2e00      	cmp	r6, #0
 800ab24:	d045      	beq.n	800abb2 <__sflush_r+0xae>
 800ab26:	2300      	movs	r3, #0
 800ab28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab2c:	682f      	ldr	r7, [r5, #0]
 800ab2e:	6a21      	ldr	r1, [r4, #32]
 800ab30:	602b      	str	r3, [r5, #0]
 800ab32:	d030      	beq.n	800ab96 <__sflush_r+0x92>
 800ab34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab36:	89a3      	ldrh	r3, [r4, #12]
 800ab38:	0759      	lsls	r1, r3, #29
 800ab3a:	d505      	bpl.n	800ab48 <__sflush_r+0x44>
 800ab3c:	6863      	ldr	r3, [r4, #4]
 800ab3e:	1ad2      	subs	r2, r2, r3
 800ab40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab42:	b10b      	cbz	r3, 800ab48 <__sflush_r+0x44>
 800ab44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab46:	1ad2      	subs	r2, r2, r3
 800ab48:	2300      	movs	r3, #0
 800ab4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab4c:	6a21      	ldr	r1, [r4, #32]
 800ab4e:	4628      	mov	r0, r5
 800ab50:	47b0      	blx	r6
 800ab52:	1c43      	adds	r3, r0, #1
 800ab54:	89a3      	ldrh	r3, [r4, #12]
 800ab56:	d106      	bne.n	800ab66 <__sflush_r+0x62>
 800ab58:	6829      	ldr	r1, [r5, #0]
 800ab5a:	291d      	cmp	r1, #29
 800ab5c:	d82b      	bhi.n	800abb6 <__sflush_r+0xb2>
 800ab5e:	4a2a      	ldr	r2, [pc, #168]	@ (800ac08 <__sflush_r+0x104>)
 800ab60:	40ca      	lsrs	r2, r1
 800ab62:	07d6      	lsls	r6, r2, #31
 800ab64:	d527      	bpl.n	800abb6 <__sflush_r+0xb2>
 800ab66:	2200      	movs	r2, #0
 800ab68:	6062      	str	r2, [r4, #4]
 800ab6a:	04d9      	lsls	r1, r3, #19
 800ab6c:	6922      	ldr	r2, [r4, #16]
 800ab6e:	6022      	str	r2, [r4, #0]
 800ab70:	d504      	bpl.n	800ab7c <__sflush_r+0x78>
 800ab72:	1c42      	adds	r2, r0, #1
 800ab74:	d101      	bne.n	800ab7a <__sflush_r+0x76>
 800ab76:	682b      	ldr	r3, [r5, #0]
 800ab78:	b903      	cbnz	r3, 800ab7c <__sflush_r+0x78>
 800ab7a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab7e:	602f      	str	r7, [r5, #0]
 800ab80:	b1b9      	cbz	r1, 800abb2 <__sflush_r+0xae>
 800ab82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab86:	4299      	cmp	r1, r3
 800ab88:	d002      	beq.n	800ab90 <__sflush_r+0x8c>
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	f000 fb38 	bl	800b200 <_free_r>
 800ab90:	2300      	movs	r3, #0
 800ab92:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab94:	e00d      	b.n	800abb2 <__sflush_r+0xae>
 800ab96:	2301      	movs	r3, #1
 800ab98:	4628      	mov	r0, r5
 800ab9a:	47b0      	blx	r6
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	1c50      	adds	r0, r2, #1
 800aba0:	d1c9      	bne.n	800ab36 <__sflush_r+0x32>
 800aba2:	682b      	ldr	r3, [r5, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d0c6      	beq.n	800ab36 <__sflush_r+0x32>
 800aba8:	2b1d      	cmp	r3, #29
 800abaa:	d001      	beq.n	800abb0 <__sflush_r+0xac>
 800abac:	2b16      	cmp	r3, #22
 800abae:	d11e      	bne.n	800abee <__sflush_r+0xea>
 800abb0:	602f      	str	r7, [r5, #0]
 800abb2:	2000      	movs	r0, #0
 800abb4:	e022      	b.n	800abfc <__sflush_r+0xf8>
 800abb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abba:	b21b      	sxth	r3, r3
 800abbc:	e01b      	b.n	800abf6 <__sflush_r+0xf2>
 800abbe:	690f      	ldr	r7, [r1, #16]
 800abc0:	2f00      	cmp	r7, #0
 800abc2:	d0f6      	beq.n	800abb2 <__sflush_r+0xae>
 800abc4:	0793      	lsls	r3, r2, #30
 800abc6:	680e      	ldr	r6, [r1, #0]
 800abc8:	bf08      	it	eq
 800abca:	694b      	ldreq	r3, [r1, #20]
 800abcc:	600f      	str	r7, [r1, #0]
 800abce:	bf18      	it	ne
 800abd0:	2300      	movne	r3, #0
 800abd2:	eba6 0807 	sub.w	r8, r6, r7
 800abd6:	608b      	str	r3, [r1, #8]
 800abd8:	f1b8 0f00 	cmp.w	r8, #0
 800abdc:	dde9      	ble.n	800abb2 <__sflush_r+0xae>
 800abde:	6a21      	ldr	r1, [r4, #32]
 800abe0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800abe2:	4643      	mov	r3, r8
 800abe4:	463a      	mov	r2, r7
 800abe6:	4628      	mov	r0, r5
 800abe8:	47b0      	blx	r6
 800abea:	2800      	cmp	r0, #0
 800abec:	dc08      	bgt.n	800ac00 <__sflush_r+0xfc>
 800abee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abf6:	81a3      	strh	r3, [r4, #12]
 800abf8:	f04f 30ff 	mov.w	r0, #4294967295
 800abfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac00:	4407      	add	r7, r0
 800ac02:	eba8 0800 	sub.w	r8, r8, r0
 800ac06:	e7e7      	b.n	800abd8 <__sflush_r+0xd4>
 800ac08:	20400001 	.word	0x20400001

0800ac0c <_fflush_r>:
 800ac0c:	b538      	push	{r3, r4, r5, lr}
 800ac0e:	690b      	ldr	r3, [r1, #16]
 800ac10:	4605      	mov	r5, r0
 800ac12:	460c      	mov	r4, r1
 800ac14:	b913      	cbnz	r3, 800ac1c <_fflush_r+0x10>
 800ac16:	2500      	movs	r5, #0
 800ac18:	4628      	mov	r0, r5
 800ac1a:	bd38      	pop	{r3, r4, r5, pc}
 800ac1c:	b118      	cbz	r0, 800ac26 <_fflush_r+0x1a>
 800ac1e:	6a03      	ldr	r3, [r0, #32]
 800ac20:	b90b      	cbnz	r3, 800ac26 <_fflush_r+0x1a>
 800ac22:	f000 f8bb 	bl	800ad9c <__sinit>
 800ac26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d0f3      	beq.n	800ac16 <_fflush_r+0xa>
 800ac2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac30:	07d0      	lsls	r0, r2, #31
 800ac32:	d404      	bmi.n	800ac3e <_fflush_r+0x32>
 800ac34:	0599      	lsls	r1, r3, #22
 800ac36:	d402      	bmi.n	800ac3e <_fflush_r+0x32>
 800ac38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac3a:	f000 fad0 	bl	800b1de <__retarget_lock_acquire_recursive>
 800ac3e:	4628      	mov	r0, r5
 800ac40:	4621      	mov	r1, r4
 800ac42:	f7ff ff5f 	bl	800ab04 <__sflush_r>
 800ac46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac48:	07da      	lsls	r2, r3, #31
 800ac4a:	4605      	mov	r5, r0
 800ac4c:	d4e4      	bmi.n	800ac18 <_fflush_r+0xc>
 800ac4e:	89a3      	ldrh	r3, [r4, #12]
 800ac50:	059b      	lsls	r3, r3, #22
 800ac52:	d4e1      	bmi.n	800ac18 <_fflush_r+0xc>
 800ac54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac56:	f000 fac3 	bl	800b1e0 <__retarget_lock_release_recursive>
 800ac5a:	e7dd      	b.n	800ac18 <_fflush_r+0xc>

0800ac5c <fflush>:
 800ac5c:	4601      	mov	r1, r0
 800ac5e:	b920      	cbnz	r0, 800ac6a <fflush+0xe>
 800ac60:	4a04      	ldr	r2, [pc, #16]	@ (800ac74 <fflush+0x18>)
 800ac62:	4905      	ldr	r1, [pc, #20]	@ (800ac78 <fflush+0x1c>)
 800ac64:	4805      	ldr	r0, [pc, #20]	@ (800ac7c <fflush+0x20>)
 800ac66:	f000 b8b1 	b.w	800adcc <_fwalk_sglue>
 800ac6a:	4b05      	ldr	r3, [pc, #20]	@ (800ac80 <fflush+0x24>)
 800ac6c:	6818      	ldr	r0, [r3, #0]
 800ac6e:	f7ff bfcd 	b.w	800ac0c <_fflush_r>
 800ac72:	bf00      	nop
 800ac74:	200003d4 	.word	0x200003d4
 800ac78:	0800ac0d 	.word	0x0800ac0d
 800ac7c:	200003e4 	.word	0x200003e4
 800ac80:	200003e0 	.word	0x200003e0

0800ac84 <std>:
 800ac84:	2300      	movs	r3, #0
 800ac86:	b510      	push	{r4, lr}
 800ac88:	4604      	mov	r4, r0
 800ac8a:	e9c0 3300 	strd	r3, r3, [r0]
 800ac8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac92:	6083      	str	r3, [r0, #8]
 800ac94:	8181      	strh	r1, [r0, #12]
 800ac96:	6643      	str	r3, [r0, #100]	@ 0x64
 800ac98:	81c2      	strh	r2, [r0, #14]
 800ac9a:	6183      	str	r3, [r0, #24]
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	2208      	movs	r2, #8
 800aca0:	305c      	adds	r0, #92	@ 0x5c
 800aca2:	f000 fa13 	bl	800b0cc <memset>
 800aca6:	4b0d      	ldr	r3, [pc, #52]	@ (800acdc <std+0x58>)
 800aca8:	6263      	str	r3, [r4, #36]	@ 0x24
 800acaa:	4b0d      	ldr	r3, [pc, #52]	@ (800ace0 <std+0x5c>)
 800acac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800acae:	4b0d      	ldr	r3, [pc, #52]	@ (800ace4 <std+0x60>)
 800acb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800acb2:	4b0d      	ldr	r3, [pc, #52]	@ (800ace8 <std+0x64>)
 800acb4:	6323      	str	r3, [r4, #48]	@ 0x30
 800acb6:	4b0d      	ldr	r3, [pc, #52]	@ (800acec <std+0x68>)
 800acb8:	6224      	str	r4, [r4, #32]
 800acba:	429c      	cmp	r4, r3
 800acbc:	d006      	beq.n	800accc <std+0x48>
 800acbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800acc2:	4294      	cmp	r4, r2
 800acc4:	d002      	beq.n	800accc <std+0x48>
 800acc6:	33d0      	adds	r3, #208	@ 0xd0
 800acc8:	429c      	cmp	r4, r3
 800acca:	d105      	bne.n	800acd8 <std+0x54>
 800accc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800acd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acd4:	f000 ba82 	b.w	800b1dc <__retarget_lock_init_recursive>
 800acd8:	bd10      	pop	{r4, pc}
 800acda:	bf00      	nop
 800acdc:	0800aee9 	.word	0x0800aee9
 800ace0:	0800af0b 	.word	0x0800af0b
 800ace4:	0800af43 	.word	0x0800af43
 800ace8:	0800af67 	.word	0x0800af67
 800acec:	2000051c 	.word	0x2000051c

0800acf0 <stdio_exit_handler>:
 800acf0:	4a02      	ldr	r2, [pc, #8]	@ (800acfc <stdio_exit_handler+0xc>)
 800acf2:	4903      	ldr	r1, [pc, #12]	@ (800ad00 <stdio_exit_handler+0x10>)
 800acf4:	4803      	ldr	r0, [pc, #12]	@ (800ad04 <stdio_exit_handler+0x14>)
 800acf6:	f000 b869 	b.w	800adcc <_fwalk_sglue>
 800acfa:	bf00      	nop
 800acfc:	200003d4 	.word	0x200003d4
 800ad00:	0800ac0d 	.word	0x0800ac0d
 800ad04:	200003e4 	.word	0x200003e4

0800ad08 <cleanup_stdio>:
 800ad08:	6841      	ldr	r1, [r0, #4]
 800ad0a:	4b0c      	ldr	r3, [pc, #48]	@ (800ad3c <cleanup_stdio+0x34>)
 800ad0c:	4299      	cmp	r1, r3
 800ad0e:	b510      	push	{r4, lr}
 800ad10:	4604      	mov	r4, r0
 800ad12:	d001      	beq.n	800ad18 <cleanup_stdio+0x10>
 800ad14:	f7ff ff7a 	bl	800ac0c <_fflush_r>
 800ad18:	68a1      	ldr	r1, [r4, #8]
 800ad1a:	4b09      	ldr	r3, [pc, #36]	@ (800ad40 <cleanup_stdio+0x38>)
 800ad1c:	4299      	cmp	r1, r3
 800ad1e:	d002      	beq.n	800ad26 <cleanup_stdio+0x1e>
 800ad20:	4620      	mov	r0, r4
 800ad22:	f7ff ff73 	bl	800ac0c <_fflush_r>
 800ad26:	68e1      	ldr	r1, [r4, #12]
 800ad28:	4b06      	ldr	r3, [pc, #24]	@ (800ad44 <cleanup_stdio+0x3c>)
 800ad2a:	4299      	cmp	r1, r3
 800ad2c:	d004      	beq.n	800ad38 <cleanup_stdio+0x30>
 800ad2e:	4620      	mov	r0, r4
 800ad30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad34:	f7ff bf6a 	b.w	800ac0c <_fflush_r>
 800ad38:	bd10      	pop	{r4, pc}
 800ad3a:	bf00      	nop
 800ad3c:	2000051c 	.word	0x2000051c
 800ad40:	20000584 	.word	0x20000584
 800ad44:	200005ec 	.word	0x200005ec

0800ad48 <global_stdio_init.part.0>:
 800ad48:	b510      	push	{r4, lr}
 800ad4a:	4b0b      	ldr	r3, [pc, #44]	@ (800ad78 <global_stdio_init.part.0+0x30>)
 800ad4c:	4c0b      	ldr	r4, [pc, #44]	@ (800ad7c <global_stdio_init.part.0+0x34>)
 800ad4e:	4a0c      	ldr	r2, [pc, #48]	@ (800ad80 <global_stdio_init.part.0+0x38>)
 800ad50:	601a      	str	r2, [r3, #0]
 800ad52:	4620      	mov	r0, r4
 800ad54:	2200      	movs	r2, #0
 800ad56:	2104      	movs	r1, #4
 800ad58:	f7ff ff94 	bl	800ac84 <std>
 800ad5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ad60:	2201      	movs	r2, #1
 800ad62:	2109      	movs	r1, #9
 800ad64:	f7ff ff8e 	bl	800ac84 <std>
 800ad68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ad6c:	2202      	movs	r2, #2
 800ad6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad72:	2112      	movs	r1, #18
 800ad74:	f7ff bf86 	b.w	800ac84 <std>
 800ad78:	20000654 	.word	0x20000654
 800ad7c:	2000051c 	.word	0x2000051c
 800ad80:	0800acf1 	.word	0x0800acf1

0800ad84 <__sfp_lock_acquire>:
 800ad84:	4801      	ldr	r0, [pc, #4]	@ (800ad8c <__sfp_lock_acquire+0x8>)
 800ad86:	f000 ba2a 	b.w	800b1de <__retarget_lock_acquire_recursive>
 800ad8a:	bf00      	nop
 800ad8c:	2000065d 	.word	0x2000065d

0800ad90 <__sfp_lock_release>:
 800ad90:	4801      	ldr	r0, [pc, #4]	@ (800ad98 <__sfp_lock_release+0x8>)
 800ad92:	f000 ba25 	b.w	800b1e0 <__retarget_lock_release_recursive>
 800ad96:	bf00      	nop
 800ad98:	2000065d 	.word	0x2000065d

0800ad9c <__sinit>:
 800ad9c:	b510      	push	{r4, lr}
 800ad9e:	4604      	mov	r4, r0
 800ada0:	f7ff fff0 	bl	800ad84 <__sfp_lock_acquire>
 800ada4:	6a23      	ldr	r3, [r4, #32]
 800ada6:	b11b      	cbz	r3, 800adb0 <__sinit+0x14>
 800ada8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adac:	f7ff bff0 	b.w	800ad90 <__sfp_lock_release>
 800adb0:	4b04      	ldr	r3, [pc, #16]	@ (800adc4 <__sinit+0x28>)
 800adb2:	6223      	str	r3, [r4, #32]
 800adb4:	4b04      	ldr	r3, [pc, #16]	@ (800adc8 <__sinit+0x2c>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d1f5      	bne.n	800ada8 <__sinit+0xc>
 800adbc:	f7ff ffc4 	bl	800ad48 <global_stdio_init.part.0>
 800adc0:	e7f2      	b.n	800ada8 <__sinit+0xc>
 800adc2:	bf00      	nop
 800adc4:	0800ad09 	.word	0x0800ad09
 800adc8:	20000654 	.word	0x20000654

0800adcc <_fwalk_sglue>:
 800adcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800add0:	4607      	mov	r7, r0
 800add2:	4688      	mov	r8, r1
 800add4:	4614      	mov	r4, r2
 800add6:	2600      	movs	r6, #0
 800add8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800addc:	f1b9 0901 	subs.w	r9, r9, #1
 800ade0:	d505      	bpl.n	800adee <_fwalk_sglue+0x22>
 800ade2:	6824      	ldr	r4, [r4, #0]
 800ade4:	2c00      	cmp	r4, #0
 800ade6:	d1f7      	bne.n	800add8 <_fwalk_sglue+0xc>
 800ade8:	4630      	mov	r0, r6
 800adea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adee:	89ab      	ldrh	r3, [r5, #12]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d907      	bls.n	800ae04 <_fwalk_sglue+0x38>
 800adf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adf8:	3301      	adds	r3, #1
 800adfa:	d003      	beq.n	800ae04 <_fwalk_sglue+0x38>
 800adfc:	4629      	mov	r1, r5
 800adfe:	4638      	mov	r0, r7
 800ae00:	47c0      	blx	r8
 800ae02:	4306      	orrs	r6, r0
 800ae04:	3568      	adds	r5, #104	@ 0x68
 800ae06:	e7e9      	b.n	800addc <_fwalk_sglue+0x10>

0800ae08 <iprintf>:
 800ae08:	b40f      	push	{r0, r1, r2, r3}
 800ae0a:	b507      	push	{r0, r1, r2, lr}
 800ae0c:	4906      	ldr	r1, [pc, #24]	@ (800ae28 <iprintf+0x20>)
 800ae0e:	ab04      	add	r3, sp, #16
 800ae10:	6808      	ldr	r0, [r1, #0]
 800ae12:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae16:	6881      	ldr	r1, [r0, #8]
 800ae18:	9301      	str	r3, [sp, #4]
 800ae1a:	f000 fa65 	bl	800b2e8 <_vfiprintf_r>
 800ae1e:	b003      	add	sp, #12
 800ae20:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae24:	b004      	add	sp, #16
 800ae26:	4770      	bx	lr
 800ae28:	200003e0 	.word	0x200003e0

0800ae2c <_puts_r>:
 800ae2c:	6a03      	ldr	r3, [r0, #32]
 800ae2e:	b570      	push	{r4, r5, r6, lr}
 800ae30:	6884      	ldr	r4, [r0, #8]
 800ae32:	4605      	mov	r5, r0
 800ae34:	460e      	mov	r6, r1
 800ae36:	b90b      	cbnz	r3, 800ae3c <_puts_r+0x10>
 800ae38:	f7ff ffb0 	bl	800ad9c <__sinit>
 800ae3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae3e:	07db      	lsls	r3, r3, #31
 800ae40:	d405      	bmi.n	800ae4e <_puts_r+0x22>
 800ae42:	89a3      	ldrh	r3, [r4, #12]
 800ae44:	0598      	lsls	r0, r3, #22
 800ae46:	d402      	bmi.n	800ae4e <_puts_r+0x22>
 800ae48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae4a:	f000 f9c8 	bl	800b1de <__retarget_lock_acquire_recursive>
 800ae4e:	89a3      	ldrh	r3, [r4, #12]
 800ae50:	0719      	lsls	r1, r3, #28
 800ae52:	d502      	bpl.n	800ae5a <_puts_r+0x2e>
 800ae54:	6923      	ldr	r3, [r4, #16]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d135      	bne.n	800aec6 <_puts_r+0x9a>
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	f000 f8c5 	bl	800afec <__swsetup_r>
 800ae62:	b380      	cbz	r0, 800aec6 <_puts_r+0x9a>
 800ae64:	f04f 35ff 	mov.w	r5, #4294967295
 800ae68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae6a:	07da      	lsls	r2, r3, #31
 800ae6c:	d405      	bmi.n	800ae7a <_puts_r+0x4e>
 800ae6e:	89a3      	ldrh	r3, [r4, #12]
 800ae70:	059b      	lsls	r3, r3, #22
 800ae72:	d402      	bmi.n	800ae7a <_puts_r+0x4e>
 800ae74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae76:	f000 f9b3 	bl	800b1e0 <__retarget_lock_release_recursive>
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	bd70      	pop	{r4, r5, r6, pc}
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	da04      	bge.n	800ae8c <_puts_r+0x60>
 800ae82:	69a2      	ldr	r2, [r4, #24]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	dc17      	bgt.n	800aeb8 <_puts_r+0x8c>
 800ae88:	290a      	cmp	r1, #10
 800ae8a:	d015      	beq.n	800aeb8 <_puts_r+0x8c>
 800ae8c:	6823      	ldr	r3, [r4, #0]
 800ae8e:	1c5a      	adds	r2, r3, #1
 800ae90:	6022      	str	r2, [r4, #0]
 800ae92:	7019      	strb	r1, [r3, #0]
 800ae94:	68a3      	ldr	r3, [r4, #8]
 800ae96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	60a3      	str	r3, [r4, #8]
 800ae9e:	2900      	cmp	r1, #0
 800aea0:	d1ed      	bne.n	800ae7e <_puts_r+0x52>
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	da11      	bge.n	800aeca <_puts_r+0x9e>
 800aea6:	4622      	mov	r2, r4
 800aea8:	210a      	movs	r1, #10
 800aeaa:	4628      	mov	r0, r5
 800aeac:	f000 f85f 	bl	800af6e <__swbuf_r>
 800aeb0:	3001      	adds	r0, #1
 800aeb2:	d0d7      	beq.n	800ae64 <_puts_r+0x38>
 800aeb4:	250a      	movs	r5, #10
 800aeb6:	e7d7      	b.n	800ae68 <_puts_r+0x3c>
 800aeb8:	4622      	mov	r2, r4
 800aeba:	4628      	mov	r0, r5
 800aebc:	f000 f857 	bl	800af6e <__swbuf_r>
 800aec0:	3001      	adds	r0, #1
 800aec2:	d1e7      	bne.n	800ae94 <_puts_r+0x68>
 800aec4:	e7ce      	b.n	800ae64 <_puts_r+0x38>
 800aec6:	3e01      	subs	r6, #1
 800aec8:	e7e4      	b.n	800ae94 <_puts_r+0x68>
 800aeca:	6823      	ldr	r3, [r4, #0]
 800aecc:	1c5a      	adds	r2, r3, #1
 800aece:	6022      	str	r2, [r4, #0]
 800aed0:	220a      	movs	r2, #10
 800aed2:	701a      	strb	r2, [r3, #0]
 800aed4:	e7ee      	b.n	800aeb4 <_puts_r+0x88>
	...

0800aed8 <puts>:
 800aed8:	4b02      	ldr	r3, [pc, #8]	@ (800aee4 <puts+0xc>)
 800aeda:	4601      	mov	r1, r0
 800aedc:	6818      	ldr	r0, [r3, #0]
 800aede:	f7ff bfa5 	b.w	800ae2c <_puts_r>
 800aee2:	bf00      	nop
 800aee4:	200003e0 	.word	0x200003e0

0800aee8 <__sread>:
 800aee8:	b510      	push	{r4, lr}
 800aeea:	460c      	mov	r4, r1
 800aeec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aef0:	f000 f916 	bl	800b120 <_read_r>
 800aef4:	2800      	cmp	r0, #0
 800aef6:	bfab      	itete	ge
 800aef8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aefa:	89a3      	ldrhlt	r3, [r4, #12]
 800aefc:	181b      	addge	r3, r3, r0
 800aefe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800af02:	bfac      	ite	ge
 800af04:	6563      	strge	r3, [r4, #84]	@ 0x54
 800af06:	81a3      	strhlt	r3, [r4, #12]
 800af08:	bd10      	pop	{r4, pc}

0800af0a <__swrite>:
 800af0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af0e:	461f      	mov	r7, r3
 800af10:	898b      	ldrh	r3, [r1, #12]
 800af12:	05db      	lsls	r3, r3, #23
 800af14:	4605      	mov	r5, r0
 800af16:	460c      	mov	r4, r1
 800af18:	4616      	mov	r6, r2
 800af1a:	d505      	bpl.n	800af28 <__swrite+0x1e>
 800af1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af20:	2302      	movs	r3, #2
 800af22:	2200      	movs	r2, #0
 800af24:	f000 f8ea 	bl	800b0fc <_lseek_r>
 800af28:	89a3      	ldrh	r3, [r4, #12]
 800af2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af32:	81a3      	strh	r3, [r4, #12]
 800af34:	4632      	mov	r2, r6
 800af36:	463b      	mov	r3, r7
 800af38:	4628      	mov	r0, r5
 800af3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af3e:	f000 b911 	b.w	800b164 <_write_r>

0800af42 <__sseek>:
 800af42:	b510      	push	{r4, lr}
 800af44:	460c      	mov	r4, r1
 800af46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af4a:	f000 f8d7 	bl	800b0fc <_lseek_r>
 800af4e:	1c43      	adds	r3, r0, #1
 800af50:	89a3      	ldrh	r3, [r4, #12]
 800af52:	bf15      	itete	ne
 800af54:	6560      	strne	r0, [r4, #84]	@ 0x54
 800af56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800af5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800af5e:	81a3      	strheq	r3, [r4, #12]
 800af60:	bf18      	it	ne
 800af62:	81a3      	strhne	r3, [r4, #12]
 800af64:	bd10      	pop	{r4, pc}

0800af66 <__sclose>:
 800af66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af6a:	f000 b8b7 	b.w	800b0dc <_close_r>

0800af6e <__swbuf_r>:
 800af6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af70:	460e      	mov	r6, r1
 800af72:	4614      	mov	r4, r2
 800af74:	4605      	mov	r5, r0
 800af76:	b118      	cbz	r0, 800af80 <__swbuf_r+0x12>
 800af78:	6a03      	ldr	r3, [r0, #32]
 800af7a:	b90b      	cbnz	r3, 800af80 <__swbuf_r+0x12>
 800af7c:	f7ff ff0e 	bl	800ad9c <__sinit>
 800af80:	69a3      	ldr	r3, [r4, #24]
 800af82:	60a3      	str	r3, [r4, #8]
 800af84:	89a3      	ldrh	r3, [r4, #12]
 800af86:	071a      	lsls	r2, r3, #28
 800af88:	d501      	bpl.n	800af8e <__swbuf_r+0x20>
 800af8a:	6923      	ldr	r3, [r4, #16]
 800af8c:	b943      	cbnz	r3, 800afa0 <__swbuf_r+0x32>
 800af8e:	4621      	mov	r1, r4
 800af90:	4628      	mov	r0, r5
 800af92:	f000 f82b 	bl	800afec <__swsetup_r>
 800af96:	b118      	cbz	r0, 800afa0 <__swbuf_r+0x32>
 800af98:	f04f 37ff 	mov.w	r7, #4294967295
 800af9c:	4638      	mov	r0, r7
 800af9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afa0:	6823      	ldr	r3, [r4, #0]
 800afa2:	6922      	ldr	r2, [r4, #16]
 800afa4:	1a98      	subs	r0, r3, r2
 800afa6:	6963      	ldr	r3, [r4, #20]
 800afa8:	b2f6      	uxtb	r6, r6
 800afaa:	4283      	cmp	r3, r0
 800afac:	4637      	mov	r7, r6
 800afae:	dc05      	bgt.n	800afbc <__swbuf_r+0x4e>
 800afb0:	4621      	mov	r1, r4
 800afb2:	4628      	mov	r0, r5
 800afb4:	f7ff fe2a 	bl	800ac0c <_fflush_r>
 800afb8:	2800      	cmp	r0, #0
 800afba:	d1ed      	bne.n	800af98 <__swbuf_r+0x2a>
 800afbc:	68a3      	ldr	r3, [r4, #8]
 800afbe:	3b01      	subs	r3, #1
 800afc0:	60a3      	str	r3, [r4, #8]
 800afc2:	6823      	ldr	r3, [r4, #0]
 800afc4:	1c5a      	adds	r2, r3, #1
 800afc6:	6022      	str	r2, [r4, #0]
 800afc8:	701e      	strb	r6, [r3, #0]
 800afca:	6962      	ldr	r2, [r4, #20]
 800afcc:	1c43      	adds	r3, r0, #1
 800afce:	429a      	cmp	r2, r3
 800afd0:	d004      	beq.n	800afdc <__swbuf_r+0x6e>
 800afd2:	89a3      	ldrh	r3, [r4, #12]
 800afd4:	07db      	lsls	r3, r3, #31
 800afd6:	d5e1      	bpl.n	800af9c <__swbuf_r+0x2e>
 800afd8:	2e0a      	cmp	r6, #10
 800afda:	d1df      	bne.n	800af9c <__swbuf_r+0x2e>
 800afdc:	4621      	mov	r1, r4
 800afde:	4628      	mov	r0, r5
 800afe0:	f7ff fe14 	bl	800ac0c <_fflush_r>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	d0d9      	beq.n	800af9c <__swbuf_r+0x2e>
 800afe8:	e7d6      	b.n	800af98 <__swbuf_r+0x2a>
	...

0800afec <__swsetup_r>:
 800afec:	b538      	push	{r3, r4, r5, lr}
 800afee:	4b29      	ldr	r3, [pc, #164]	@ (800b094 <__swsetup_r+0xa8>)
 800aff0:	4605      	mov	r5, r0
 800aff2:	6818      	ldr	r0, [r3, #0]
 800aff4:	460c      	mov	r4, r1
 800aff6:	b118      	cbz	r0, 800b000 <__swsetup_r+0x14>
 800aff8:	6a03      	ldr	r3, [r0, #32]
 800affa:	b90b      	cbnz	r3, 800b000 <__swsetup_r+0x14>
 800affc:	f7ff fece 	bl	800ad9c <__sinit>
 800b000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b004:	0719      	lsls	r1, r3, #28
 800b006:	d422      	bmi.n	800b04e <__swsetup_r+0x62>
 800b008:	06da      	lsls	r2, r3, #27
 800b00a:	d407      	bmi.n	800b01c <__swsetup_r+0x30>
 800b00c:	2209      	movs	r2, #9
 800b00e:	602a      	str	r2, [r5, #0]
 800b010:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b014:	81a3      	strh	r3, [r4, #12]
 800b016:	f04f 30ff 	mov.w	r0, #4294967295
 800b01a:	e033      	b.n	800b084 <__swsetup_r+0x98>
 800b01c:	0758      	lsls	r0, r3, #29
 800b01e:	d512      	bpl.n	800b046 <__swsetup_r+0x5a>
 800b020:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b022:	b141      	cbz	r1, 800b036 <__swsetup_r+0x4a>
 800b024:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b028:	4299      	cmp	r1, r3
 800b02a:	d002      	beq.n	800b032 <__swsetup_r+0x46>
 800b02c:	4628      	mov	r0, r5
 800b02e:	f000 f8e7 	bl	800b200 <_free_r>
 800b032:	2300      	movs	r3, #0
 800b034:	6363      	str	r3, [r4, #52]	@ 0x34
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b03c:	81a3      	strh	r3, [r4, #12]
 800b03e:	2300      	movs	r3, #0
 800b040:	6063      	str	r3, [r4, #4]
 800b042:	6923      	ldr	r3, [r4, #16]
 800b044:	6023      	str	r3, [r4, #0]
 800b046:	89a3      	ldrh	r3, [r4, #12]
 800b048:	f043 0308 	orr.w	r3, r3, #8
 800b04c:	81a3      	strh	r3, [r4, #12]
 800b04e:	6923      	ldr	r3, [r4, #16]
 800b050:	b94b      	cbnz	r3, 800b066 <__swsetup_r+0x7a>
 800b052:	89a3      	ldrh	r3, [r4, #12]
 800b054:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b05c:	d003      	beq.n	800b066 <__swsetup_r+0x7a>
 800b05e:	4621      	mov	r1, r4
 800b060:	4628      	mov	r0, r5
 800b062:	f000 fc0b 	bl	800b87c <__smakebuf_r>
 800b066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b06a:	f013 0201 	ands.w	r2, r3, #1
 800b06e:	d00a      	beq.n	800b086 <__swsetup_r+0x9a>
 800b070:	2200      	movs	r2, #0
 800b072:	60a2      	str	r2, [r4, #8]
 800b074:	6962      	ldr	r2, [r4, #20]
 800b076:	4252      	negs	r2, r2
 800b078:	61a2      	str	r2, [r4, #24]
 800b07a:	6922      	ldr	r2, [r4, #16]
 800b07c:	b942      	cbnz	r2, 800b090 <__swsetup_r+0xa4>
 800b07e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b082:	d1c5      	bne.n	800b010 <__swsetup_r+0x24>
 800b084:	bd38      	pop	{r3, r4, r5, pc}
 800b086:	0799      	lsls	r1, r3, #30
 800b088:	bf58      	it	pl
 800b08a:	6962      	ldrpl	r2, [r4, #20]
 800b08c:	60a2      	str	r2, [r4, #8]
 800b08e:	e7f4      	b.n	800b07a <__swsetup_r+0x8e>
 800b090:	2000      	movs	r0, #0
 800b092:	e7f7      	b.n	800b084 <__swsetup_r+0x98>
 800b094:	200003e0 	.word	0x200003e0

0800b098 <memmove>:
 800b098:	4288      	cmp	r0, r1
 800b09a:	b510      	push	{r4, lr}
 800b09c:	eb01 0402 	add.w	r4, r1, r2
 800b0a0:	d902      	bls.n	800b0a8 <memmove+0x10>
 800b0a2:	4284      	cmp	r4, r0
 800b0a4:	4623      	mov	r3, r4
 800b0a6:	d807      	bhi.n	800b0b8 <memmove+0x20>
 800b0a8:	1e43      	subs	r3, r0, #1
 800b0aa:	42a1      	cmp	r1, r4
 800b0ac:	d008      	beq.n	800b0c0 <memmove+0x28>
 800b0ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0b6:	e7f8      	b.n	800b0aa <memmove+0x12>
 800b0b8:	4402      	add	r2, r0
 800b0ba:	4601      	mov	r1, r0
 800b0bc:	428a      	cmp	r2, r1
 800b0be:	d100      	bne.n	800b0c2 <memmove+0x2a>
 800b0c0:	bd10      	pop	{r4, pc}
 800b0c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0ca:	e7f7      	b.n	800b0bc <memmove+0x24>

0800b0cc <memset>:
 800b0cc:	4402      	add	r2, r0
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d100      	bne.n	800b0d6 <memset+0xa>
 800b0d4:	4770      	bx	lr
 800b0d6:	f803 1b01 	strb.w	r1, [r3], #1
 800b0da:	e7f9      	b.n	800b0d0 <memset+0x4>

0800b0dc <_close_r>:
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	4d06      	ldr	r5, [pc, #24]	@ (800b0f8 <_close_r+0x1c>)
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	4608      	mov	r0, r1
 800b0e6:	602b      	str	r3, [r5, #0]
 800b0e8:	f7fd fa27 	bl	800853a <_close>
 800b0ec:	1c43      	adds	r3, r0, #1
 800b0ee:	d102      	bne.n	800b0f6 <_close_r+0x1a>
 800b0f0:	682b      	ldr	r3, [r5, #0]
 800b0f2:	b103      	cbz	r3, 800b0f6 <_close_r+0x1a>
 800b0f4:	6023      	str	r3, [r4, #0]
 800b0f6:	bd38      	pop	{r3, r4, r5, pc}
 800b0f8:	20000658 	.word	0x20000658

0800b0fc <_lseek_r>:
 800b0fc:	b538      	push	{r3, r4, r5, lr}
 800b0fe:	4d07      	ldr	r5, [pc, #28]	@ (800b11c <_lseek_r+0x20>)
 800b100:	4604      	mov	r4, r0
 800b102:	4608      	mov	r0, r1
 800b104:	4611      	mov	r1, r2
 800b106:	2200      	movs	r2, #0
 800b108:	602a      	str	r2, [r5, #0]
 800b10a:	461a      	mov	r2, r3
 800b10c:	f7fd fa3c 	bl	8008588 <_lseek>
 800b110:	1c43      	adds	r3, r0, #1
 800b112:	d102      	bne.n	800b11a <_lseek_r+0x1e>
 800b114:	682b      	ldr	r3, [r5, #0]
 800b116:	b103      	cbz	r3, 800b11a <_lseek_r+0x1e>
 800b118:	6023      	str	r3, [r4, #0]
 800b11a:	bd38      	pop	{r3, r4, r5, pc}
 800b11c:	20000658 	.word	0x20000658

0800b120 <_read_r>:
 800b120:	b538      	push	{r3, r4, r5, lr}
 800b122:	4d07      	ldr	r5, [pc, #28]	@ (800b140 <_read_r+0x20>)
 800b124:	4604      	mov	r4, r0
 800b126:	4608      	mov	r0, r1
 800b128:	4611      	mov	r1, r2
 800b12a:	2200      	movs	r2, #0
 800b12c:	602a      	str	r2, [r5, #0]
 800b12e:	461a      	mov	r2, r3
 800b130:	f7fd f9e6 	bl	8008500 <_read>
 800b134:	1c43      	adds	r3, r0, #1
 800b136:	d102      	bne.n	800b13e <_read_r+0x1e>
 800b138:	682b      	ldr	r3, [r5, #0]
 800b13a:	b103      	cbz	r3, 800b13e <_read_r+0x1e>
 800b13c:	6023      	str	r3, [r4, #0]
 800b13e:	bd38      	pop	{r3, r4, r5, pc}
 800b140:	20000658 	.word	0x20000658

0800b144 <_sbrk_r>:
 800b144:	b538      	push	{r3, r4, r5, lr}
 800b146:	4d06      	ldr	r5, [pc, #24]	@ (800b160 <_sbrk_r+0x1c>)
 800b148:	2300      	movs	r3, #0
 800b14a:	4604      	mov	r4, r0
 800b14c:	4608      	mov	r0, r1
 800b14e:	602b      	str	r3, [r5, #0]
 800b150:	f7fd fa28 	bl	80085a4 <_sbrk>
 800b154:	1c43      	adds	r3, r0, #1
 800b156:	d102      	bne.n	800b15e <_sbrk_r+0x1a>
 800b158:	682b      	ldr	r3, [r5, #0]
 800b15a:	b103      	cbz	r3, 800b15e <_sbrk_r+0x1a>
 800b15c:	6023      	str	r3, [r4, #0]
 800b15e:	bd38      	pop	{r3, r4, r5, pc}
 800b160:	20000658 	.word	0x20000658

0800b164 <_write_r>:
 800b164:	b538      	push	{r3, r4, r5, lr}
 800b166:	4d07      	ldr	r5, [pc, #28]	@ (800b184 <_write_r+0x20>)
 800b168:	4604      	mov	r4, r0
 800b16a:	4608      	mov	r0, r1
 800b16c:	4611      	mov	r1, r2
 800b16e:	2200      	movs	r2, #0
 800b170:	602a      	str	r2, [r5, #0]
 800b172:	461a      	mov	r2, r3
 800b174:	f7fd f891 	bl	800829a <_write>
 800b178:	1c43      	adds	r3, r0, #1
 800b17a:	d102      	bne.n	800b182 <_write_r+0x1e>
 800b17c:	682b      	ldr	r3, [r5, #0]
 800b17e:	b103      	cbz	r3, 800b182 <_write_r+0x1e>
 800b180:	6023      	str	r3, [r4, #0]
 800b182:	bd38      	pop	{r3, r4, r5, pc}
 800b184:	20000658 	.word	0x20000658

0800b188 <__errno>:
 800b188:	4b01      	ldr	r3, [pc, #4]	@ (800b190 <__errno+0x8>)
 800b18a:	6818      	ldr	r0, [r3, #0]
 800b18c:	4770      	bx	lr
 800b18e:	bf00      	nop
 800b190:	200003e0 	.word	0x200003e0

0800b194 <__libc_init_array>:
 800b194:	b570      	push	{r4, r5, r6, lr}
 800b196:	4d0d      	ldr	r5, [pc, #52]	@ (800b1cc <__libc_init_array+0x38>)
 800b198:	4c0d      	ldr	r4, [pc, #52]	@ (800b1d0 <__libc_init_array+0x3c>)
 800b19a:	1b64      	subs	r4, r4, r5
 800b19c:	10a4      	asrs	r4, r4, #2
 800b19e:	2600      	movs	r6, #0
 800b1a0:	42a6      	cmp	r6, r4
 800b1a2:	d109      	bne.n	800b1b8 <__libc_init_array+0x24>
 800b1a4:	4d0b      	ldr	r5, [pc, #44]	@ (800b1d4 <__libc_init_array+0x40>)
 800b1a6:	4c0c      	ldr	r4, [pc, #48]	@ (800b1d8 <__libc_init_array+0x44>)
 800b1a8:	f000 fbc6 	bl	800b938 <_init>
 800b1ac:	1b64      	subs	r4, r4, r5
 800b1ae:	10a4      	asrs	r4, r4, #2
 800b1b0:	2600      	movs	r6, #0
 800b1b2:	42a6      	cmp	r6, r4
 800b1b4:	d105      	bne.n	800b1c2 <__libc_init_array+0x2e>
 800b1b6:	bd70      	pop	{r4, r5, r6, pc}
 800b1b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1bc:	4798      	blx	r3
 800b1be:	3601      	adds	r6, #1
 800b1c0:	e7ee      	b.n	800b1a0 <__libc_init_array+0xc>
 800b1c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1c6:	4798      	blx	r3
 800b1c8:	3601      	adds	r6, #1
 800b1ca:	e7f2      	b.n	800b1b2 <__libc_init_array+0x1e>
 800b1cc:	0800c23c 	.word	0x0800c23c
 800b1d0:	0800c23c 	.word	0x0800c23c
 800b1d4:	0800c23c 	.word	0x0800c23c
 800b1d8:	0800c240 	.word	0x0800c240

0800b1dc <__retarget_lock_init_recursive>:
 800b1dc:	4770      	bx	lr

0800b1de <__retarget_lock_acquire_recursive>:
 800b1de:	4770      	bx	lr

0800b1e0 <__retarget_lock_release_recursive>:
 800b1e0:	4770      	bx	lr

0800b1e2 <memcpy>:
 800b1e2:	440a      	add	r2, r1
 800b1e4:	4291      	cmp	r1, r2
 800b1e6:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1ea:	d100      	bne.n	800b1ee <memcpy+0xc>
 800b1ec:	4770      	bx	lr
 800b1ee:	b510      	push	{r4, lr}
 800b1f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1f8:	4291      	cmp	r1, r2
 800b1fa:	d1f9      	bne.n	800b1f0 <memcpy+0xe>
 800b1fc:	bd10      	pop	{r4, pc}
	...

0800b200 <_free_r>:
 800b200:	b538      	push	{r3, r4, r5, lr}
 800b202:	4605      	mov	r5, r0
 800b204:	2900      	cmp	r1, #0
 800b206:	d041      	beq.n	800b28c <_free_r+0x8c>
 800b208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b20c:	1f0c      	subs	r4, r1, #4
 800b20e:	2b00      	cmp	r3, #0
 800b210:	bfb8      	it	lt
 800b212:	18e4      	addlt	r4, r4, r3
 800b214:	f7ff fc6a 	bl	800aaec <__malloc_lock>
 800b218:	4a1d      	ldr	r2, [pc, #116]	@ (800b290 <_free_r+0x90>)
 800b21a:	6813      	ldr	r3, [r2, #0]
 800b21c:	b933      	cbnz	r3, 800b22c <_free_r+0x2c>
 800b21e:	6063      	str	r3, [r4, #4]
 800b220:	6014      	str	r4, [r2, #0]
 800b222:	4628      	mov	r0, r5
 800b224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b228:	f7ff bc66 	b.w	800aaf8 <__malloc_unlock>
 800b22c:	42a3      	cmp	r3, r4
 800b22e:	d908      	bls.n	800b242 <_free_r+0x42>
 800b230:	6820      	ldr	r0, [r4, #0]
 800b232:	1821      	adds	r1, r4, r0
 800b234:	428b      	cmp	r3, r1
 800b236:	bf01      	itttt	eq
 800b238:	6819      	ldreq	r1, [r3, #0]
 800b23a:	685b      	ldreq	r3, [r3, #4]
 800b23c:	1809      	addeq	r1, r1, r0
 800b23e:	6021      	streq	r1, [r4, #0]
 800b240:	e7ed      	b.n	800b21e <_free_r+0x1e>
 800b242:	461a      	mov	r2, r3
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	b10b      	cbz	r3, 800b24c <_free_r+0x4c>
 800b248:	42a3      	cmp	r3, r4
 800b24a:	d9fa      	bls.n	800b242 <_free_r+0x42>
 800b24c:	6811      	ldr	r1, [r2, #0]
 800b24e:	1850      	adds	r0, r2, r1
 800b250:	42a0      	cmp	r0, r4
 800b252:	d10b      	bne.n	800b26c <_free_r+0x6c>
 800b254:	6820      	ldr	r0, [r4, #0]
 800b256:	4401      	add	r1, r0
 800b258:	1850      	adds	r0, r2, r1
 800b25a:	4283      	cmp	r3, r0
 800b25c:	6011      	str	r1, [r2, #0]
 800b25e:	d1e0      	bne.n	800b222 <_free_r+0x22>
 800b260:	6818      	ldr	r0, [r3, #0]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	6053      	str	r3, [r2, #4]
 800b266:	4408      	add	r0, r1
 800b268:	6010      	str	r0, [r2, #0]
 800b26a:	e7da      	b.n	800b222 <_free_r+0x22>
 800b26c:	d902      	bls.n	800b274 <_free_r+0x74>
 800b26e:	230c      	movs	r3, #12
 800b270:	602b      	str	r3, [r5, #0]
 800b272:	e7d6      	b.n	800b222 <_free_r+0x22>
 800b274:	6820      	ldr	r0, [r4, #0]
 800b276:	1821      	adds	r1, r4, r0
 800b278:	428b      	cmp	r3, r1
 800b27a:	bf04      	itt	eq
 800b27c:	6819      	ldreq	r1, [r3, #0]
 800b27e:	685b      	ldreq	r3, [r3, #4]
 800b280:	6063      	str	r3, [r4, #4]
 800b282:	bf04      	itt	eq
 800b284:	1809      	addeq	r1, r1, r0
 800b286:	6021      	streq	r1, [r4, #0]
 800b288:	6054      	str	r4, [r2, #4]
 800b28a:	e7ca      	b.n	800b222 <_free_r+0x22>
 800b28c:	bd38      	pop	{r3, r4, r5, pc}
 800b28e:	bf00      	nop
 800b290:	20000518 	.word	0x20000518

0800b294 <__sfputc_r>:
 800b294:	6893      	ldr	r3, [r2, #8]
 800b296:	3b01      	subs	r3, #1
 800b298:	2b00      	cmp	r3, #0
 800b29a:	b410      	push	{r4}
 800b29c:	6093      	str	r3, [r2, #8]
 800b29e:	da08      	bge.n	800b2b2 <__sfputc_r+0x1e>
 800b2a0:	6994      	ldr	r4, [r2, #24]
 800b2a2:	42a3      	cmp	r3, r4
 800b2a4:	db01      	blt.n	800b2aa <__sfputc_r+0x16>
 800b2a6:	290a      	cmp	r1, #10
 800b2a8:	d103      	bne.n	800b2b2 <__sfputc_r+0x1e>
 800b2aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2ae:	f7ff be5e 	b.w	800af6e <__swbuf_r>
 800b2b2:	6813      	ldr	r3, [r2, #0]
 800b2b4:	1c58      	adds	r0, r3, #1
 800b2b6:	6010      	str	r0, [r2, #0]
 800b2b8:	7019      	strb	r1, [r3, #0]
 800b2ba:	4608      	mov	r0, r1
 800b2bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2c0:	4770      	bx	lr

0800b2c2 <__sfputs_r>:
 800b2c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c4:	4606      	mov	r6, r0
 800b2c6:	460f      	mov	r7, r1
 800b2c8:	4614      	mov	r4, r2
 800b2ca:	18d5      	adds	r5, r2, r3
 800b2cc:	42ac      	cmp	r4, r5
 800b2ce:	d101      	bne.n	800b2d4 <__sfputs_r+0x12>
 800b2d0:	2000      	movs	r0, #0
 800b2d2:	e007      	b.n	800b2e4 <__sfputs_r+0x22>
 800b2d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2d8:	463a      	mov	r2, r7
 800b2da:	4630      	mov	r0, r6
 800b2dc:	f7ff ffda 	bl	800b294 <__sfputc_r>
 800b2e0:	1c43      	adds	r3, r0, #1
 800b2e2:	d1f3      	bne.n	800b2cc <__sfputs_r+0xa>
 800b2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b2e8 <_vfiprintf_r>:
 800b2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ec:	460d      	mov	r5, r1
 800b2ee:	b09d      	sub	sp, #116	@ 0x74
 800b2f0:	4614      	mov	r4, r2
 800b2f2:	4698      	mov	r8, r3
 800b2f4:	4606      	mov	r6, r0
 800b2f6:	b118      	cbz	r0, 800b300 <_vfiprintf_r+0x18>
 800b2f8:	6a03      	ldr	r3, [r0, #32]
 800b2fa:	b90b      	cbnz	r3, 800b300 <_vfiprintf_r+0x18>
 800b2fc:	f7ff fd4e 	bl	800ad9c <__sinit>
 800b300:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b302:	07d9      	lsls	r1, r3, #31
 800b304:	d405      	bmi.n	800b312 <_vfiprintf_r+0x2a>
 800b306:	89ab      	ldrh	r3, [r5, #12]
 800b308:	059a      	lsls	r2, r3, #22
 800b30a:	d402      	bmi.n	800b312 <_vfiprintf_r+0x2a>
 800b30c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b30e:	f7ff ff66 	bl	800b1de <__retarget_lock_acquire_recursive>
 800b312:	89ab      	ldrh	r3, [r5, #12]
 800b314:	071b      	lsls	r3, r3, #28
 800b316:	d501      	bpl.n	800b31c <_vfiprintf_r+0x34>
 800b318:	692b      	ldr	r3, [r5, #16]
 800b31a:	b99b      	cbnz	r3, 800b344 <_vfiprintf_r+0x5c>
 800b31c:	4629      	mov	r1, r5
 800b31e:	4630      	mov	r0, r6
 800b320:	f7ff fe64 	bl	800afec <__swsetup_r>
 800b324:	b170      	cbz	r0, 800b344 <_vfiprintf_r+0x5c>
 800b326:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b328:	07dc      	lsls	r4, r3, #31
 800b32a:	d504      	bpl.n	800b336 <_vfiprintf_r+0x4e>
 800b32c:	f04f 30ff 	mov.w	r0, #4294967295
 800b330:	b01d      	add	sp, #116	@ 0x74
 800b332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b336:	89ab      	ldrh	r3, [r5, #12]
 800b338:	0598      	lsls	r0, r3, #22
 800b33a:	d4f7      	bmi.n	800b32c <_vfiprintf_r+0x44>
 800b33c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b33e:	f7ff ff4f 	bl	800b1e0 <__retarget_lock_release_recursive>
 800b342:	e7f3      	b.n	800b32c <_vfiprintf_r+0x44>
 800b344:	2300      	movs	r3, #0
 800b346:	9309      	str	r3, [sp, #36]	@ 0x24
 800b348:	2320      	movs	r3, #32
 800b34a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b34e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b352:	2330      	movs	r3, #48	@ 0x30
 800b354:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b504 <_vfiprintf_r+0x21c>
 800b358:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b35c:	f04f 0901 	mov.w	r9, #1
 800b360:	4623      	mov	r3, r4
 800b362:	469a      	mov	sl, r3
 800b364:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b368:	b10a      	cbz	r2, 800b36e <_vfiprintf_r+0x86>
 800b36a:	2a25      	cmp	r2, #37	@ 0x25
 800b36c:	d1f9      	bne.n	800b362 <_vfiprintf_r+0x7a>
 800b36e:	ebba 0b04 	subs.w	fp, sl, r4
 800b372:	d00b      	beq.n	800b38c <_vfiprintf_r+0xa4>
 800b374:	465b      	mov	r3, fp
 800b376:	4622      	mov	r2, r4
 800b378:	4629      	mov	r1, r5
 800b37a:	4630      	mov	r0, r6
 800b37c:	f7ff ffa1 	bl	800b2c2 <__sfputs_r>
 800b380:	3001      	adds	r0, #1
 800b382:	f000 80a7 	beq.w	800b4d4 <_vfiprintf_r+0x1ec>
 800b386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b388:	445a      	add	r2, fp
 800b38a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b38c:	f89a 3000 	ldrb.w	r3, [sl]
 800b390:	2b00      	cmp	r3, #0
 800b392:	f000 809f 	beq.w	800b4d4 <_vfiprintf_r+0x1ec>
 800b396:	2300      	movs	r3, #0
 800b398:	f04f 32ff 	mov.w	r2, #4294967295
 800b39c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3a0:	f10a 0a01 	add.w	sl, sl, #1
 800b3a4:	9304      	str	r3, [sp, #16]
 800b3a6:	9307      	str	r3, [sp, #28]
 800b3a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b3ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3ae:	4654      	mov	r4, sl
 800b3b0:	2205      	movs	r2, #5
 800b3b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3b6:	4853      	ldr	r0, [pc, #332]	@ (800b504 <_vfiprintf_r+0x21c>)
 800b3b8:	f7f4 ff4a 	bl	8000250 <memchr>
 800b3bc:	9a04      	ldr	r2, [sp, #16]
 800b3be:	b9d8      	cbnz	r0, 800b3f8 <_vfiprintf_r+0x110>
 800b3c0:	06d1      	lsls	r1, r2, #27
 800b3c2:	bf44      	itt	mi
 800b3c4:	2320      	movmi	r3, #32
 800b3c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3ca:	0713      	lsls	r3, r2, #28
 800b3cc:	bf44      	itt	mi
 800b3ce:	232b      	movmi	r3, #43	@ 0x2b
 800b3d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b3d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3da:	d015      	beq.n	800b408 <_vfiprintf_r+0x120>
 800b3dc:	9a07      	ldr	r2, [sp, #28]
 800b3de:	4654      	mov	r4, sl
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	f04f 0c0a 	mov.w	ip, #10
 800b3e6:	4621      	mov	r1, r4
 800b3e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3ec:	3b30      	subs	r3, #48	@ 0x30
 800b3ee:	2b09      	cmp	r3, #9
 800b3f0:	d94b      	bls.n	800b48a <_vfiprintf_r+0x1a2>
 800b3f2:	b1b0      	cbz	r0, 800b422 <_vfiprintf_r+0x13a>
 800b3f4:	9207      	str	r2, [sp, #28]
 800b3f6:	e014      	b.n	800b422 <_vfiprintf_r+0x13a>
 800b3f8:	eba0 0308 	sub.w	r3, r0, r8
 800b3fc:	fa09 f303 	lsl.w	r3, r9, r3
 800b400:	4313      	orrs	r3, r2
 800b402:	9304      	str	r3, [sp, #16]
 800b404:	46a2      	mov	sl, r4
 800b406:	e7d2      	b.n	800b3ae <_vfiprintf_r+0xc6>
 800b408:	9b03      	ldr	r3, [sp, #12]
 800b40a:	1d19      	adds	r1, r3, #4
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	9103      	str	r1, [sp, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	bfbb      	ittet	lt
 800b414:	425b      	neglt	r3, r3
 800b416:	f042 0202 	orrlt.w	r2, r2, #2
 800b41a:	9307      	strge	r3, [sp, #28]
 800b41c:	9307      	strlt	r3, [sp, #28]
 800b41e:	bfb8      	it	lt
 800b420:	9204      	strlt	r2, [sp, #16]
 800b422:	7823      	ldrb	r3, [r4, #0]
 800b424:	2b2e      	cmp	r3, #46	@ 0x2e
 800b426:	d10a      	bne.n	800b43e <_vfiprintf_r+0x156>
 800b428:	7863      	ldrb	r3, [r4, #1]
 800b42a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b42c:	d132      	bne.n	800b494 <_vfiprintf_r+0x1ac>
 800b42e:	9b03      	ldr	r3, [sp, #12]
 800b430:	1d1a      	adds	r2, r3, #4
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	9203      	str	r2, [sp, #12]
 800b436:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b43a:	3402      	adds	r4, #2
 800b43c:	9305      	str	r3, [sp, #20]
 800b43e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b514 <_vfiprintf_r+0x22c>
 800b442:	7821      	ldrb	r1, [r4, #0]
 800b444:	2203      	movs	r2, #3
 800b446:	4650      	mov	r0, sl
 800b448:	f7f4 ff02 	bl	8000250 <memchr>
 800b44c:	b138      	cbz	r0, 800b45e <_vfiprintf_r+0x176>
 800b44e:	9b04      	ldr	r3, [sp, #16]
 800b450:	eba0 000a 	sub.w	r0, r0, sl
 800b454:	2240      	movs	r2, #64	@ 0x40
 800b456:	4082      	lsls	r2, r0
 800b458:	4313      	orrs	r3, r2
 800b45a:	3401      	adds	r4, #1
 800b45c:	9304      	str	r3, [sp, #16]
 800b45e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b462:	4829      	ldr	r0, [pc, #164]	@ (800b508 <_vfiprintf_r+0x220>)
 800b464:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b468:	2206      	movs	r2, #6
 800b46a:	f7f4 fef1 	bl	8000250 <memchr>
 800b46e:	2800      	cmp	r0, #0
 800b470:	d03f      	beq.n	800b4f2 <_vfiprintf_r+0x20a>
 800b472:	4b26      	ldr	r3, [pc, #152]	@ (800b50c <_vfiprintf_r+0x224>)
 800b474:	bb1b      	cbnz	r3, 800b4be <_vfiprintf_r+0x1d6>
 800b476:	9b03      	ldr	r3, [sp, #12]
 800b478:	3307      	adds	r3, #7
 800b47a:	f023 0307 	bic.w	r3, r3, #7
 800b47e:	3308      	adds	r3, #8
 800b480:	9303      	str	r3, [sp, #12]
 800b482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b484:	443b      	add	r3, r7
 800b486:	9309      	str	r3, [sp, #36]	@ 0x24
 800b488:	e76a      	b.n	800b360 <_vfiprintf_r+0x78>
 800b48a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b48e:	460c      	mov	r4, r1
 800b490:	2001      	movs	r0, #1
 800b492:	e7a8      	b.n	800b3e6 <_vfiprintf_r+0xfe>
 800b494:	2300      	movs	r3, #0
 800b496:	3401      	adds	r4, #1
 800b498:	9305      	str	r3, [sp, #20]
 800b49a:	4619      	mov	r1, r3
 800b49c:	f04f 0c0a 	mov.w	ip, #10
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4a6:	3a30      	subs	r2, #48	@ 0x30
 800b4a8:	2a09      	cmp	r2, #9
 800b4aa:	d903      	bls.n	800b4b4 <_vfiprintf_r+0x1cc>
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d0c6      	beq.n	800b43e <_vfiprintf_r+0x156>
 800b4b0:	9105      	str	r1, [sp, #20]
 800b4b2:	e7c4      	b.n	800b43e <_vfiprintf_r+0x156>
 800b4b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4b8:	4604      	mov	r4, r0
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e7f0      	b.n	800b4a0 <_vfiprintf_r+0x1b8>
 800b4be:	ab03      	add	r3, sp, #12
 800b4c0:	9300      	str	r3, [sp, #0]
 800b4c2:	462a      	mov	r2, r5
 800b4c4:	4b12      	ldr	r3, [pc, #72]	@ (800b510 <_vfiprintf_r+0x228>)
 800b4c6:	a904      	add	r1, sp, #16
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	f3af 8000 	nop.w
 800b4ce:	4607      	mov	r7, r0
 800b4d0:	1c78      	adds	r0, r7, #1
 800b4d2:	d1d6      	bne.n	800b482 <_vfiprintf_r+0x19a>
 800b4d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4d6:	07d9      	lsls	r1, r3, #31
 800b4d8:	d405      	bmi.n	800b4e6 <_vfiprintf_r+0x1fe>
 800b4da:	89ab      	ldrh	r3, [r5, #12]
 800b4dc:	059a      	lsls	r2, r3, #22
 800b4de:	d402      	bmi.n	800b4e6 <_vfiprintf_r+0x1fe>
 800b4e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4e2:	f7ff fe7d 	bl	800b1e0 <__retarget_lock_release_recursive>
 800b4e6:	89ab      	ldrh	r3, [r5, #12]
 800b4e8:	065b      	lsls	r3, r3, #25
 800b4ea:	f53f af1f 	bmi.w	800b32c <_vfiprintf_r+0x44>
 800b4ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b4f0:	e71e      	b.n	800b330 <_vfiprintf_r+0x48>
 800b4f2:	ab03      	add	r3, sp, #12
 800b4f4:	9300      	str	r3, [sp, #0]
 800b4f6:	462a      	mov	r2, r5
 800b4f8:	4b05      	ldr	r3, [pc, #20]	@ (800b510 <_vfiprintf_r+0x228>)
 800b4fa:	a904      	add	r1, sp, #16
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	f000 f879 	bl	800b5f4 <_printf_i>
 800b502:	e7e4      	b.n	800b4ce <_vfiprintf_r+0x1e6>
 800b504:	0800c200 	.word	0x0800c200
 800b508:	0800c20a 	.word	0x0800c20a
 800b50c:	00000000 	.word	0x00000000
 800b510:	0800b2c3 	.word	0x0800b2c3
 800b514:	0800c206 	.word	0x0800c206

0800b518 <_printf_common>:
 800b518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b51c:	4616      	mov	r6, r2
 800b51e:	4698      	mov	r8, r3
 800b520:	688a      	ldr	r2, [r1, #8]
 800b522:	690b      	ldr	r3, [r1, #16]
 800b524:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b528:	4293      	cmp	r3, r2
 800b52a:	bfb8      	it	lt
 800b52c:	4613      	movlt	r3, r2
 800b52e:	6033      	str	r3, [r6, #0]
 800b530:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b534:	4607      	mov	r7, r0
 800b536:	460c      	mov	r4, r1
 800b538:	b10a      	cbz	r2, 800b53e <_printf_common+0x26>
 800b53a:	3301      	adds	r3, #1
 800b53c:	6033      	str	r3, [r6, #0]
 800b53e:	6823      	ldr	r3, [r4, #0]
 800b540:	0699      	lsls	r1, r3, #26
 800b542:	bf42      	ittt	mi
 800b544:	6833      	ldrmi	r3, [r6, #0]
 800b546:	3302      	addmi	r3, #2
 800b548:	6033      	strmi	r3, [r6, #0]
 800b54a:	6825      	ldr	r5, [r4, #0]
 800b54c:	f015 0506 	ands.w	r5, r5, #6
 800b550:	d106      	bne.n	800b560 <_printf_common+0x48>
 800b552:	f104 0a19 	add.w	sl, r4, #25
 800b556:	68e3      	ldr	r3, [r4, #12]
 800b558:	6832      	ldr	r2, [r6, #0]
 800b55a:	1a9b      	subs	r3, r3, r2
 800b55c:	42ab      	cmp	r3, r5
 800b55e:	dc26      	bgt.n	800b5ae <_printf_common+0x96>
 800b560:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b564:	6822      	ldr	r2, [r4, #0]
 800b566:	3b00      	subs	r3, #0
 800b568:	bf18      	it	ne
 800b56a:	2301      	movne	r3, #1
 800b56c:	0692      	lsls	r2, r2, #26
 800b56e:	d42b      	bmi.n	800b5c8 <_printf_common+0xb0>
 800b570:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b574:	4641      	mov	r1, r8
 800b576:	4638      	mov	r0, r7
 800b578:	47c8      	blx	r9
 800b57a:	3001      	adds	r0, #1
 800b57c:	d01e      	beq.n	800b5bc <_printf_common+0xa4>
 800b57e:	6823      	ldr	r3, [r4, #0]
 800b580:	6922      	ldr	r2, [r4, #16]
 800b582:	f003 0306 	and.w	r3, r3, #6
 800b586:	2b04      	cmp	r3, #4
 800b588:	bf02      	ittt	eq
 800b58a:	68e5      	ldreq	r5, [r4, #12]
 800b58c:	6833      	ldreq	r3, [r6, #0]
 800b58e:	1aed      	subeq	r5, r5, r3
 800b590:	68a3      	ldr	r3, [r4, #8]
 800b592:	bf0c      	ite	eq
 800b594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b598:	2500      	movne	r5, #0
 800b59a:	4293      	cmp	r3, r2
 800b59c:	bfc4      	itt	gt
 800b59e:	1a9b      	subgt	r3, r3, r2
 800b5a0:	18ed      	addgt	r5, r5, r3
 800b5a2:	2600      	movs	r6, #0
 800b5a4:	341a      	adds	r4, #26
 800b5a6:	42b5      	cmp	r5, r6
 800b5a8:	d11a      	bne.n	800b5e0 <_printf_common+0xc8>
 800b5aa:	2000      	movs	r0, #0
 800b5ac:	e008      	b.n	800b5c0 <_printf_common+0xa8>
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	4652      	mov	r2, sl
 800b5b2:	4641      	mov	r1, r8
 800b5b4:	4638      	mov	r0, r7
 800b5b6:	47c8      	blx	r9
 800b5b8:	3001      	adds	r0, #1
 800b5ba:	d103      	bne.n	800b5c4 <_printf_common+0xac>
 800b5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5c4:	3501      	adds	r5, #1
 800b5c6:	e7c6      	b.n	800b556 <_printf_common+0x3e>
 800b5c8:	18e1      	adds	r1, r4, r3
 800b5ca:	1c5a      	adds	r2, r3, #1
 800b5cc:	2030      	movs	r0, #48	@ 0x30
 800b5ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5d2:	4422      	add	r2, r4
 800b5d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5dc:	3302      	adds	r3, #2
 800b5de:	e7c7      	b.n	800b570 <_printf_common+0x58>
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	4622      	mov	r2, r4
 800b5e4:	4641      	mov	r1, r8
 800b5e6:	4638      	mov	r0, r7
 800b5e8:	47c8      	blx	r9
 800b5ea:	3001      	adds	r0, #1
 800b5ec:	d0e6      	beq.n	800b5bc <_printf_common+0xa4>
 800b5ee:	3601      	adds	r6, #1
 800b5f0:	e7d9      	b.n	800b5a6 <_printf_common+0x8e>
	...

0800b5f4 <_printf_i>:
 800b5f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f8:	7e0f      	ldrb	r7, [r1, #24]
 800b5fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b5fc:	2f78      	cmp	r7, #120	@ 0x78
 800b5fe:	4691      	mov	r9, r2
 800b600:	4680      	mov	r8, r0
 800b602:	460c      	mov	r4, r1
 800b604:	469a      	mov	sl, r3
 800b606:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b60a:	d807      	bhi.n	800b61c <_printf_i+0x28>
 800b60c:	2f62      	cmp	r7, #98	@ 0x62
 800b60e:	d80a      	bhi.n	800b626 <_printf_i+0x32>
 800b610:	2f00      	cmp	r7, #0
 800b612:	f000 80d1 	beq.w	800b7b8 <_printf_i+0x1c4>
 800b616:	2f58      	cmp	r7, #88	@ 0x58
 800b618:	f000 80b8 	beq.w	800b78c <_printf_i+0x198>
 800b61c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b620:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b624:	e03a      	b.n	800b69c <_printf_i+0xa8>
 800b626:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b62a:	2b15      	cmp	r3, #21
 800b62c:	d8f6      	bhi.n	800b61c <_printf_i+0x28>
 800b62e:	a101      	add	r1, pc, #4	@ (adr r1, 800b634 <_printf_i+0x40>)
 800b630:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b634:	0800b68d 	.word	0x0800b68d
 800b638:	0800b6a1 	.word	0x0800b6a1
 800b63c:	0800b61d 	.word	0x0800b61d
 800b640:	0800b61d 	.word	0x0800b61d
 800b644:	0800b61d 	.word	0x0800b61d
 800b648:	0800b61d 	.word	0x0800b61d
 800b64c:	0800b6a1 	.word	0x0800b6a1
 800b650:	0800b61d 	.word	0x0800b61d
 800b654:	0800b61d 	.word	0x0800b61d
 800b658:	0800b61d 	.word	0x0800b61d
 800b65c:	0800b61d 	.word	0x0800b61d
 800b660:	0800b79f 	.word	0x0800b79f
 800b664:	0800b6cb 	.word	0x0800b6cb
 800b668:	0800b759 	.word	0x0800b759
 800b66c:	0800b61d 	.word	0x0800b61d
 800b670:	0800b61d 	.word	0x0800b61d
 800b674:	0800b7c1 	.word	0x0800b7c1
 800b678:	0800b61d 	.word	0x0800b61d
 800b67c:	0800b6cb 	.word	0x0800b6cb
 800b680:	0800b61d 	.word	0x0800b61d
 800b684:	0800b61d 	.word	0x0800b61d
 800b688:	0800b761 	.word	0x0800b761
 800b68c:	6833      	ldr	r3, [r6, #0]
 800b68e:	1d1a      	adds	r2, r3, #4
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	6032      	str	r2, [r6, #0]
 800b694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b698:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b69c:	2301      	movs	r3, #1
 800b69e:	e09c      	b.n	800b7da <_printf_i+0x1e6>
 800b6a0:	6833      	ldr	r3, [r6, #0]
 800b6a2:	6820      	ldr	r0, [r4, #0]
 800b6a4:	1d19      	adds	r1, r3, #4
 800b6a6:	6031      	str	r1, [r6, #0]
 800b6a8:	0606      	lsls	r6, r0, #24
 800b6aa:	d501      	bpl.n	800b6b0 <_printf_i+0xbc>
 800b6ac:	681d      	ldr	r5, [r3, #0]
 800b6ae:	e003      	b.n	800b6b8 <_printf_i+0xc4>
 800b6b0:	0645      	lsls	r5, r0, #25
 800b6b2:	d5fb      	bpl.n	800b6ac <_printf_i+0xb8>
 800b6b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b6b8:	2d00      	cmp	r5, #0
 800b6ba:	da03      	bge.n	800b6c4 <_printf_i+0xd0>
 800b6bc:	232d      	movs	r3, #45	@ 0x2d
 800b6be:	426d      	negs	r5, r5
 800b6c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6c4:	4858      	ldr	r0, [pc, #352]	@ (800b828 <_printf_i+0x234>)
 800b6c6:	230a      	movs	r3, #10
 800b6c8:	e011      	b.n	800b6ee <_printf_i+0xfa>
 800b6ca:	6821      	ldr	r1, [r4, #0]
 800b6cc:	6833      	ldr	r3, [r6, #0]
 800b6ce:	0608      	lsls	r0, r1, #24
 800b6d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6d4:	d402      	bmi.n	800b6dc <_printf_i+0xe8>
 800b6d6:	0649      	lsls	r1, r1, #25
 800b6d8:	bf48      	it	mi
 800b6da:	b2ad      	uxthmi	r5, r5
 800b6dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6de:	4852      	ldr	r0, [pc, #328]	@ (800b828 <_printf_i+0x234>)
 800b6e0:	6033      	str	r3, [r6, #0]
 800b6e2:	bf14      	ite	ne
 800b6e4:	230a      	movne	r3, #10
 800b6e6:	2308      	moveq	r3, #8
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b6ee:	6866      	ldr	r6, [r4, #4]
 800b6f0:	60a6      	str	r6, [r4, #8]
 800b6f2:	2e00      	cmp	r6, #0
 800b6f4:	db05      	blt.n	800b702 <_printf_i+0x10e>
 800b6f6:	6821      	ldr	r1, [r4, #0]
 800b6f8:	432e      	orrs	r6, r5
 800b6fa:	f021 0104 	bic.w	r1, r1, #4
 800b6fe:	6021      	str	r1, [r4, #0]
 800b700:	d04b      	beq.n	800b79a <_printf_i+0x1a6>
 800b702:	4616      	mov	r6, r2
 800b704:	fbb5 f1f3 	udiv	r1, r5, r3
 800b708:	fb03 5711 	mls	r7, r3, r1, r5
 800b70c:	5dc7      	ldrb	r7, [r0, r7]
 800b70e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b712:	462f      	mov	r7, r5
 800b714:	42bb      	cmp	r3, r7
 800b716:	460d      	mov	r5, r1
 800b718:	d9f4      	bls.n	800b704 <_printf_i+0x110>
 800b71a:	2b08      	cmp	r3, #8
 800b71c:	d10b      	bne.n	800b736 <_printf_i+0x142>
 800b71e:	6823      	ldr	r3, [r4, #0]
 800b720:	07df      	lsls	r7, r3, #31
 800b722:	d508      	bpl.n	800b736 <_printf_i+0x142>
 800b724:	6923      	ldr	r3, [r4, #16]
 800b726:	6861      	ldr	r1, [r4, #4]
 800b728:	4299      	cmp	r1, r3
 800b72a:	bfde      	ittt	le
 800b72c:	2330      	movle	r3, #48	@ 0x30
 800b72e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b732:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b736:	1b92      	subs	r2, r2, r6
 800b738:	6122      	str	r2, [r4, #16]
 800b73a:	f8cd a000 	str.w	sl, [sp]
 800b73e:	464b      	mov	r3, r9
 800b740:	aa03      	add	r2, sp, #12
 800b742:	4621      	mov	r1, r4
 800b744:	4640      	mov	r0, r8
 800b746:	f7ff fee7 	bl	800b518 <_printf_common>
 800b74a:	3001      	adds	r0, #1
 800b74c:	d14a      	bne.n	800b7e4 <_printf_i+0x1f0>
 800b74e:	f04f 30ff 	mov.w	r0, #4294967295
 800b752:	b004      	add	sp, #16
 800b754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b758:	6823      	ldr	r3, [r4, #0]
 800b75a:	f043 0320 	orr.w	r3, r3, #32
 800b75e:	6023      	str	r3, [r4, #0]
 800b760:	4832      	ldr	r0, [pc, #200]	@ (800b82c <_printf_i+0x238>)
 800b762:	2778      	movs	r7, #120	@ 0x78
 800b764:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b768:	6823      	ldr	r3, [r4, #0]
 800b76a:	6831      	ldr	r1, [r6, #0]
 800b76c:	061f      	lsls	r7, r3, #24
 800b76e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b772:	d402      	bmi.n	800b77a <_printf_i+0x186>
 800b774:	065f      	lsls	r7, r3, #25
 800b776:	bf48      	it	mi
 800b778:	b2ad      	uxthmi	r5, r5
 800b77a:	6031      	str	r1, [r6, #0]
 800b77c:	07d9      	lsls	r1, r3, #31
 800b77e:	bf44      	itt	mi
 800b780:	f043 0320 	orrmi.w	r3, r3, #32
 800b784:	6023      	strmi	r3, [r4, #0]
 800b786:	b11d      	cbz	r5, 800b790 <_printf_i+0x19c>
 800b788:	2310      	movs	r3, #16
 800b78a:	e7ad      	b.n	800b6e8 <_printf_i+0xf4>
 800b78c:	4826      	ldr	r0, [pc, #152]	@ (800b828 <_printf_i+0x234>)
 800b78e:	e7e9      	b.n	800b764 <_printf_i+0x170>
 800b790:	6823      	ldr	r3, [r4, #0]
 800b792:	f023 0320 	bic.w	r3, r3, #32
 800b796:	6023      	str	r3, [r4, #0]
 800b798:	e7f6      	b.n	800b788 <_printf_i+0x194>
 800b79a:	4616      	mov	r6, r2
 800b79c:	e7bd      	b.n	800b71a <_printf_i+0x126>
 800b79e:	6833      	ldr	r3, [r6, #0]
 800b7a0:	6825      	ldr	r5, [r4, #0]
 800b7a2:	6961      	ldr	r1, [r4, #20]
 800b7a4:	1d18      	adds	r0, r3, #4
 800b7a6:	6030      	str	r0, [r6, #0]
 800b7a8:	062e      	lsls	r6, r5, #24
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	d501      	bpl.n	800b7b2 <_printf_i+0x1be>
 800b7ae:	6019      	str	r1, [r3, #0]
 800b7b0:	e002      	b.n	800b7b8 <_printf_i+0x1c4>
 800b7b2:	0668      	lsls	r0, r5, #25
 800b7b4:	d5fb      	bpl.n	800b7ae <_printf_i+0x1ba>
 800b7b6:	8019      	strh	r1, [r3, #0]
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	6123      	str	r3, [r4, #16]
 800b7bc:	4616      	mov	r6, r2
 800b7be:	e7bc      	b.n	800b73a <_printf_i+0x146>
 800b7c0:	6833      	ldr	r3, [r6, #0]
 800b7c2:	1d1a      	adds	r2, r3, #4
 800b7c4:	6032      	str	r2, [r6, #0]
 800b7c6:	681e      	ldr	r6, [r3, #0]
 800b7c8:	6862      	ldr	r2, [r4, #4]
 800b7ca:	2100      	movs	r1, #0
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	f7f4 fd3f 	bl	8000250 <memchr>
 800b7d2:	b108      	cbz	r0, 800b7d8 <_printf_i+0x1e4>
 800b7d4:	1b80      	subs	r0, r0, r6
 800b7d6:	6060      	str	r0, [r4, #4]
 800b7d8:	6863      	ldr	r3, [r4, #4]
 800b7da:	6123      	str	r3, [r4, #16]
 800b7dc:	2300      	movs	r3, #0
 800b7de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7e2:	e7aa      	b.n	800b73a <_printf_i+0x146>
 800b7e4:	6923      	ldr	r3, [r4, #16]
 800b7e6:	4632      	mov	r2, r6
 800b7e8:	4649      	mov	r1, r9
 800b7ea:	4640      	mov	r0, r8
 800b7ec:	47d0      	blx	sl
 800b7ee:	3001      	adds	r0, #1
 800b7f0:	d0ad      	beq.n	800b74e <_printf_i+0x15a>
 800b7f2:	6823      	ldr	r3, [r4, #0]
 800b7f4:	079b      	lsls	r3, r3, #30
 800b7f6:	d413      	bmi.n	800b820 <_printf_i+0x22c>
 800b7f8:	68e0      	ldr	r0, [r4, #12]
 800b7fa:	9b03      	ldr	r3, [sp, #12]
 800b7fc:	4298      	cmp	r0, r3
 800b7fe:	bfb8      	it	lt
 800b800:	4618      	movlt	r0, r3
 800b802:	e7a6      	b.n	800b752 <_printf_i+0x15e>
 800b804:	2301      	movs	r3, #1
 800b806:	4632      	mov	r2, r6
 800b808:	4649      	mov	r1, r9
 800b80a:	4640      	mov	r0, r8
 800b80c:	47d0      	blx	sl
 800b80e:	3001      	adds	r0, #1
 800b810:	d09d      	beq.n	800b74e <_printf_i+0x15a>
 800b812:	3501      	adds	r5, #1
 800b814:	68e3      	ldr	r3, [r4, #12]
 800b816:	9903      	ldr	r1, [sp, #12]
 800b818:	1a5b      	subs	r3, r3, r1
 800b81a:	42ab      	cmp	r3, r5
 800b81c:	dcf2      	bgt.n	800b804 <_printf_i+0x210>
 800b81e:	e7eb      	b.n	800b7f8 <_printf_i+0x204>
 800b820:	2500      	movs	r5, #0
 800b822:	f104 0619 	add.w	r6, r4, #25
 800b826:	e7f5      	b.n	800b814 <_printf_i+0x220>
 800b828:	0800c211 	.word	0x0800c211
 800b82c:	0800c222 	.word	0x0800c222

0800b830 <__swhatbuf_r>:
 800b830:	b570      	push	{r4, r5, r6, lr}
 800b832:	460c      	mov	r4, r1
 800b834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b838:	2900      	cmp	r1, #0
 800b83a:	b096      	sub	sp, #88	@ 0x58
 800b83c:	4615      	mov	r5, r2
 800b83e:	461e      	mov	r6, r3
 800b840:	da0d      	bge.n	800b85e <__swhatbuf_r+0x2e>
 800b842:	89a3      	ldrh	r3, [r4, #12]
 800b844:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b848:	f04f 0100 	mov.w	r1, #0
 800b84c:	bf14      	ite	ne
 800b84e:	2340      	movne	r3, #64	@ 0x40
 800b850:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b854:	2000      	movs	r0, #0
 800b856:	6031      	str	r1, [r6, #0]
 800b858:	602b      	str	r3, [r5, #0]
 800b85a:	b016      	add	sp, #88	@ 0x58
 800b85c:	bd70      	pop	{r4, r5, r6, pc}
 800b85e:	466a      	mov	r2, sp
 800b860:	f000 f848 	bl	800b8f4 <_fstat_r>
 800b864:	2800      	cmp	r0, #0
 800b866:	dbec      	blt.n	800b842 <__swhatbuf_r+0x12>
 800b868:	9901      	ldr	r1, [sp, #4]
 800b86a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b86e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b872:	4259      	negs	r1, r3
 800b874:	4159      	adcs	r1, r3
 800b876:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b87a:	e7eb      	b.n	800b854 <__swhatbuf_r+0x24>

0800b87c <__smakebuf_r>:
 800b87c:	898b      	ldrh	r3, [r1, #12]
 800b87e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b880:	079d      	lsls	r5, r3, #30
 800b882:	4606      	mov	r6, r0
 800b884:	460c      	mov	r4, r1
 800b886:	d507      	bpl.n	800b898 <__smakebuf_r+0x1c>
 800b888:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b88c:	6023      	str	r3, [r4, #0]
 800b88e:	6123      	str	r3, [r4, #16]
 800b890:	2301      	movs	r3, #1
 800b892:	6163      	str	r3, [r4, #20]
 800b894:	b003      	add	sp, #12
 800b896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b898:	ab01      	add	r3, sp, #4
 800b89a:	466a      	mov	r2, sp
 800b89c:	f7ff ffc8 	bl	800b830 <__swhatbuf_r>
 800b8a0:	9f00      	ldr	r7, [sp, #0]
 800b8a2:	4605      	mov	r5, r0
 800b8a4:	4639      	mov	r1, r7
 800b8a6:	4630      	mov	r0, r6
 800b8a8:	f7ff f8a0 	bl	800a9ec <_malloc_r>
 800b8ac:	b948      	cbnz	r0, 800b8c2 <__smakebuf_r+0x46>
 800b8ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8b2:	059a      	lsls	r2, r3, #22
 800b8b4:	d4ee      	bmi.n	800b894 <__smakebuf_r+0x18>
 800b8b6:	f023 0303 	bic.w	r3, r3, #3
 800b8ba:	f043 0302 	orr.w	r3, r3, #2
 800b8be:	81a3      	strh	r3, [r4, #12]
 800b8c0:	e7e2      	b.n	800b888 <__smakebuf_r+0xc>
 800b8c2:	89a3      	ldrh	r3, [r4, #12]
 800b8c4:	6020      	str	r0, [r4, #0]
 800b8c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8ca:	81a3      	strh	r3, [r4, #12]
 800b8cc:	9b01      	ldr	r3, [sp, #4]
 800b8ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b8d2:	b15b      	cbz	r3, 800b8ec <__smakebuf_r+0x70>
 800b8d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8d8:	4630      	mov	r0, r6
 800b8da:	f000 f81d 	bl	800b918 <_isatty_r>
 800b8de:	b128      	cbz	r0, 800b8ec <__smakebuf_r+0x70>
 800b8e0:	89a3      	ldrh	r3, [r4, #12]
 800b8e2:	f023 0303 	bic.w	r3, r3, #3
 800b8e6:	f043 0301 	orr.w	r3, r3, #1
 800b8ea:	81a3      	strh	r3, [r4, #12]
 800b8ec:	89a3      	ldrh	r3, [r4, #12]
 800b8ee:	431d      	orrs	r5, r3
 800b8f0:	81a5      	strh	r5, [r4, #12]
 800b8f2:	e7cf      	b.n	800b894 <__smakebuf_r+0x18>

0800b8f4 <_fstat_r>:
 800b8f4:	b538      	push	{r3, r4, r5, lr}
 800b8f6:	4d07      	ldr	r5, [pc, #28]	@ (800b914 <_fstat_r+0x20>)
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	4604      	mov	r4, r0
 800b8fc:	4608      	mov	r0, r1
 800b8fe:	4611      	mov	r1, r2
 800b900:	602b      	str	r3, [r5, #0]
 800b902:	f7fc fe26 	bl	8008552 <_fstat>
 800b906:	1c43      	adds	r3, r0, #1
 800b908:	d102      	bne.n	800b910 <_fstat_r+0x1c>
 800b90a:	682b      	ldr	r3, [r5, #0]
 800b90c:	b103      	cbz	r3, 800b910 <_fstat_r+0x1c>
 800b90e:	6023      	str	r3, [r4, #0]
 800b910:	bd38      	pop	{r3, r4, r5, pc}
 800b912:	bf00      	nop
 800b914:	20000658 	.word	0x20000658

0800b918 <_isatty_r>:
 800b918:	b538      	push	{r3, r4, r5, lr}
 800b91a:	4d06      	ldr	r5, [pc, #24]	@ (800b934 <_isatty_r+0x1c>)
 800b91c:	2300      	movs	r3, #0
 800b91e:	4604      	mov	r4, r0
 800b920:	4608      	mov	r0, r1
 800b922:	602b      	str	r3, [r5, #0]
 800b924:	f7fc fe25 	bl	8008572 <_isatty>
 800b928:	1c43      	adds	r3, r0, #1
 800b92a:	d102      	bne.n	800b932 <_isatty_r+0x1a>
 800b92c:	682b      	ldr	r3, [r5, #0]
 800b92e:	b103      	cbz	r3, 800b932 <_isatty_r+0x1a>
 800b930:	6023      	str	r3, [r4, #0]
 800b932:	bd38      	pop	{r3, r4, r5, pc}
 800b934:	20000658 	.word	0x20000658

0800b938 <_init>:
 800b938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b93a:	bf00      	nop
 800b93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b93e:	bc08      	pop	{r3}
 800b940:	469e      	mov	lr, r3
 800b942:	4770      	bx	lr

0800b944 <_fini>:
 800b944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b946:	bf00      	nop
 800b948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b94a:	bc08      	pop	{r3}
 800b94c:	469e      	mov	lr, r3
 800b94e:	4770      	bx	lr
